language: swift
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    if k\
    \ == 0 || k > len(arr) {\n        return 0\n    }\n    var sum = 0\n    for i\
    \ := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpaqoa8p31.swift:15:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpaqoa8p31.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpaqoa8p31.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpaqoa8p31.swift:18:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpaqoa8p31.swift:18:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpaqoa8p31.swift:18:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n/tmp/tmpaqoa8p31.swift:11:22: error: cannot find 'len'\
    \ in scope\n    if k == 0 || k > len(arr) {\n                     ^~~\n"
  stdout: ''
  timestamp: 1659824727
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return 0\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpa8kdb0xk/tmpa8kdb0xk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae844d7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae844a76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae844a76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae844a757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8kdb0xk                        0x000055a8e28b965d <unavailable> + 5725

    5    libc.so.6                          0x00002ae844f6b460 __libc_start_main +
    245

    6    tmpa8kdb0xk                        0x000055a8e28b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824727
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3] + arr[k+4] + arr[k+5]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c4ce7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c49de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61c49de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61c49de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61c49ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b61c47dde83 <unavailable> + 188035

    6    tmp2n4sj6gv                        0x0000560518c15990 <unavailable> + 6544

    7    tmp2n4sj6gv                        0x0000560518c1531d <unavailable> + 4893

    8    libc.so.6                          0x00002b61c4ed3460 __libc_start_main +
    245

    9    tmp2n4sj6gv                        0x0000560518c14fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824727
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i - k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpt7cxciv4/tmpt7cxciv4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0b712c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0b409b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a0b409988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a0b4087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7cxciv4                        0x00005634bbcd857b <unavailable> + 5499

    5    libc.so.6                          0x00002b6a0b8fe460 __libc_start_main +
    245

    6    tmpt7cxciv4                        0x00005634bbcd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[k..<arr.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtsv1sz3.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[k..<arr.count])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ result = arr[k] + arr[k + 1]\n    if result > 100 {\n        return 100\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpg5a24_5i/tmpg5a24_5i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4813fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4813cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4813cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4813cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5a24_5i                        0x000055e4b22e539b <unavailable> + 5019

    5    libc.so.6                          0x00002b48141a2460 __libc_start_main +
    245

    6    tmpg5a24_5i                        0x000055e4b22e4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824727
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[k..<arr.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtsv1sz3.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[k..<arr.count])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k + arr[0] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaoc29enp/tmpaoc29enp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab099111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab098e08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab098e08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab098e077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaoc29enp                        0x00005611daa2e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ab0992fd460 __libc_start_main +
    245

    6    tmpaoc29enp                        0x00005611daa2dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3] + arr[k+4] + arr[k+5] + arr[k+6]\
    \ + arr[k+7] + arr[k+8] + arr[k+9] + arr[k+10] + arr[k+11] + arr[k+12] + arr[k+13]\
    \ + arr[k+14] + arr[k+15] + arr[k+16] + arr[k+17] + arr[k+18] + arr[k+19] + arr[k+20]\
    \ + arr[k+21]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d27347c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2703e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d2703e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d2703e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d2703dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d26e3de83 <unavailable> + 188035

    6    tmphcovwyg7                        0x00005628a832d990 <unavailable> + 6544

    7    tmphcovwyg7                        0x00005628a832d31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6d27533460 __libc_start_main +
    245

    9    tmphcovwyg7                        0x00005628a832cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979573
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for idx in 0..<k\
    \ {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpw5vm8qqc/tmpw5vm8qqc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf9a40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf9737b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf9737988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf97367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5vm8qqc                        0x000055bda2da865d <unavailable> + 5725

    5    libc.so.6                          0x00002adaf9c2c460 __libc_start_main +
    245

    6    tmpw5vm8qqc                        0x000055bda2da81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ maxCount = arr.count\n    var sum = 0\n    for i in 0..<k {\n        sum +=\
    \ arr[i]\n    }\n    for i in 0..<maxCount {\n        sum += arr[i]\n        if\
    \ sum > 9 {\n            sum -= 10\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp87_x5znz/tmp87_x5znz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26ef0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae26ec03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae26ec03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae26ec027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87_x5znz                        0x00005598595f957b <unavailable> + 5499

    5    libc.so.6                          0x00002ae26f0f8460 __libc_start_main +
    245

    6    tmp87_x5znz                        0x00005598595f91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_j3rehs9/tmp_j3rehs9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40431f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4042eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4042eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4042eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j3rehs9                        0x000055e0b09e85fd <unavailable> + 5629

    5    libc.so.6                          0x00002b40433e0460 __libc_start_main +
    245

    6    tmp_j3rehs9                        0x000055e0b09e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpm8qys7g8/tmpm8qys7g8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b752ff67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b752fc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b752fc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b752fc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8qys7g8                        0x00005618ea1ec57b <unavailable> + 5499

    5    libc.so.6                          0x00002b7530153460 __libc_start_main +
    245

    6    tmpm8qys7g8                        0x00005618ea1ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > k else {\n        return arr[0]\n    }\n    var sum = 0\n    for\
    \ i in 1..k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp37ehlv24.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..k {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpm8qys7g8/tmpm8qys7g8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b752ff67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b752fc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b752fc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b752fc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8qys7g8                        0x00005618ea1ec57b <unavailable> + 5499

    5    libc.so.6                          0x00002b7530153460 __libc_start_main +
    245

    6    tmpm8qys7g8                        0x00005618ea1ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c69d4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c69a46561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c69a46286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c69a4613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c69a45bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7c69845e83 <unavailable> + 188035

    6    tmpki5gj1x5                        0x00005604e651d990 <unavailable> + 6544

    7    tmpki5gj1x5                        0x00005604e651d31d <unavailable> + 4893

    8    libc.so.6                          0x00002b7c69f3b460 __libc_start_main +
    245

    9    tmpki5gj1x5                        0x00005604e651cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { (sum, element) in\n        let digit = element % 10\n      \
    \  return sum + digit * (10 - digit) + k\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpr7twlcp1/tmpr7twlcp1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8c172cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8c1423b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8c1423988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8c14227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7twlcp1                        0x000055e6d441d44b <unavailable> + 5195

    5    libc.so.6                          0x00002ae8c1918460 __libc_start_main +
    245

    6    tmpr7twlcp1                        0x000055e6d441d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len < k {\n        return 0\n    }\n    var sum = 0\n\
    \    var last = 0\n    for i in 0..<k {\n        sum += arr[i]\n        if sum\
    \ > 100 {\n            sum += last + arr[i]\n        }\n        last = arr[i]\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpfaf48rjj/tmpfaf48rjj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5885081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5884d78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5884d78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5884d777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfaf48rjj                        0x000055f8b557565d <unavailable> + 5725

    5    libc.so.6                          0x00002b588526d460 __libc_start_main +
    245

    6    tmpfaf48rjj                        0x000055f8b55751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if k > len {\n        return 0\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpa8kdb0xk/tmpa8kdb0xk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae844d7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae844a76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae844a76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae844a757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8kdb0xk                        0x000055a8e28b965d <unavailable> + 5725

    5    libc.so.6                          0x00002ae844f6b460 __libc_start_main +
    245

    6    tmpa8kdb0xk                        0x000055a8e28b91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824727
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpzgw9nd_y/tmpzgw9nd_y.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8676213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8675f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8675f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8675f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgw9nd_y                        0x0000558644d5839b <unavailable> + 5019

    5    libc.so.6                          0x00002b86763ff460 __libc_start_main +
    245

    6    tmpzgw9nd_y                        0x0000558644d57fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd8fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd8cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bd8cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bd8cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bd8cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6bd8ab3e83 <unavailable> + 188035

    6    tmpvqmiv3t_                        0x000055dd43ccb963 <unavailable> + 6499

    7    tmpvqmiv3t_                        0x000055dd43ccb31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6bd91a9460 __libc_start_main +
    245

    9    tmpvqmiv3t_                        0x000055dd43ccafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for\
    \ idx in 0..<k {\n        sum += arr[idx]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpupv_qo1d/tmpupv_qo1d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af831177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af830e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af830e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af830e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupv_qo1d                        0x000055640eafc65d <unavailable> + 5725

    5    libc.so.6                          0x00002af831363460 __libc_start_main +
    245

    6    tmpupv_qo1d                        0x000055640eafc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[k..<arr.count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtsv1sz3.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[k..<arr.count])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ len = arr.count\n    if len < k {\n        return 0\n    }\n    var sum = 0\n\
    \    for i in 0..<k {\n        sum += arr[i]\n    }\n    for i in k..<len {\n\
    \        sum += arr[i] - arr[i-k]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpnxrcn16x/tmpnxrcn16x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af66e568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af66e25fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af66e25f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af66e25e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxrcn16x                        0x00005585e6fa157b <unavailable> + 5499

    5    libc.so.6                          0x00002af66e754460 __libc_start_main +
    245

    6    tmpnxrcn16x                        0x00005585e6fa11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3] + arr[k+4] + arr[k+5] + arr[k+6]\
    \ + arr[k+7] + arr[k+8] + arr[k+9]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b415f556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b415f24d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b415f24d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b415f24d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b415f24cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b415f04ce83 <unavailable> + 188035

    6    tmpyyq825gb                        0x0000561c73e07990 <unavailable> + 6544

    7    tmpyyq825gb                        0x0000561c73e0731d <unavailable> + 4893

    8    libc.so.6                          0x00002b415f742460 __libc_start_main +
    245

    9    tmpyyq825gb                        0x0000561c73e06fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { (sum, element) -> Int in\n        if sum < 10 {\n          \
    \  sum += element\n        }\n        return sum\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ick5ik6.swift:13:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += element\n           \
    \ ~~~ ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 0 && k <= arr.count else { return 0 }\n    var sum = 0\n    for\
    \ index in 0..<k {\n        sum += arr[index]\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp74a3jnsl/tmp74a3jnsl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b592f1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b592eeb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b592eeb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b592eeb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74a3jnsl                        0x00005574d8b3865d <unavailable> + 5725

    5    libc.so.6                          0x00002b592f3aa460 __libc_start_main +
    245

    6    tmp74a3jnsl                        0x00005574d8b381a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sumElements(arr, k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpncu1s2fd.swift:11:12: error: cannot find 'sumElements' in scope\n\
    \    return sumElements(arr, k)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd8fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd8cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bd8cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bd8cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bd8cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6bd8ab3e83 <unavailable> + 188035

    6    tmpvqmiv3t_                        0x000055dd43ccb963 <unavailable> + 6499

    7    tmpvqmiv3t_                        0x000055dd43ccb31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6bd91a9460 __libc_start_main +
    245

    9    tmpvqmiv3t_                        0x000055dd43ccafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpm8qys7g8/tmpm8qys7g8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b752ff67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b752fc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b752fc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b752fc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8qys7g8                        0x00005618ea1ec57b <unavailable> + 5499

    5    libc.so.6                          0x00002b7530153460 __libc_start_main +
    245

    6    tmpm8qys7g8                        0x00005618ea1ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e1701dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e16d14561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1e16d14286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1e16d1413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1e16d13bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1e16b13e83 <unavailable> + 188035

    6    tmpoh4l9vkv                        0x0000558a95287984 <unavailable> + 6532

    7    tmpoh4l9vkv                        0x0000558a9528731d <unavailable> + 4893

    8    libc.so.6                          0x00002b1e17209460 __libc_start_main +
    245

    9    tmpoh4l9vkv                        0x0000558a95286fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-1]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpstfnly7v/tmpstfnly7v.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9504b9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9504895b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9504895988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95048947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstfnly7v                        0x000055e79aca757b <unavailable> + 5499

    5    libc.so.6                          0x00002b9504d8a460 __libc_start_main +
    245

    6    tmpstfnly7v                        0x000055e79aca71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd8fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd8cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bd8cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bd8cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bd8cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6bd8ab3e83 <unavailable> + 188035

    6    tmpvqmiv3t_                        0x000055dd43ccb963 <unavailable> + 6499

    7    tmpvqmiv3t_                        0x000055dd43ccb31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6bd91a9460 __libc_start_main +
    245

    9    tmpvqmiv3t_                        0x000055dd43ccafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\
    \ + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\
    \ + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\
    \ + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1] + arr[2]\
    \ + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0] + arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + arr[0]\
    \ + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\
    \ + arr[0] + arr[1] + arr[2] + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp0n71sb_z.swift:12:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ sum(arr[0..<k])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcaczm8x7.swift:11:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr[0..<k])\n           ^~~\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpw6p5s8pz/tmpw6p5s8pz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3acff37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3acfc2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3acfc2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3acfc2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6p5s8pz                        0x000055bdbc3695fd <unavailable> + 5629

    5    libc.so.6                          0x00002b3ad0123460 __libc_start_main +
    245

    6    tmpw6p5s8pz                        0x000055bdbc369149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c69d4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c69a46561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c69a46286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c69a4613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c69a45bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7c69845e83 <unavailable> + 188035

    6    tmpki5gj1x5                        0x00005604e651d990 <unavailable> + 6544

    7    tmpki5gj1x5                        0x00005604e651d31d <unavailable> + 4893

    8    libc.so.6                          0x00002b7c69f3b460 __libc_start_main +
    245

    9    tmpki5gj1x5                        0x00005604e651cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k + arr[0] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaoc29enp/tmpaoc29enp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab099111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab098e08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab098e08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab098e077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaoc29enp                        0x00005611daa2e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ab0992fd460 __libc_start_main +
    245

    6    tmpaoc29enp                        0x00005611daa2dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpe9ftm2k_/tmpe9ftm2k_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7a5165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7a4e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7a4e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7a4e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ftm2k_                        0x0000559eac20657b <unavailable> + 5499

    5    libc.so.6                          0x00002ae7a5351460 __libc_start_main +
    245

    6    tmpe9ftm2k_                        0x0000559eac2061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8vtb8avi/tmp8vtb8avi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2167c1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2167911b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2167911988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21679107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vtb8avi                        0x0000563a2b8bb3bb <unavailable> + 5051

    5    libc.so.6                          0x00002b2167e06460 __libc_start_main +
    245

    6    tmp8vtb8avi                        0x0000563a2b8bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd8fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd8cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bd8cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bd8cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bd8cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6bd8ab3e83 <unavailable> + 188035

    6    tmpvqmiv3t_                        0x000055dd43ccb963 <unavailable> + 6499

    7    tmpvqmiv3t_                        0x000055dd43ccb31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6bd91a9460 __libc_start_main +
    245

    9    tmpvqmiv3t_                        0x000055dd43ccafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyu_it7zi.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpyu_it7zi.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpyu_it7zi.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8o972scd/tmp8o972scd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac94f4d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94f1cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94f1ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94f1c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o972scd                        0x0000564a6c1e439b <unavailable> + 5019

    5    libc.so.6                          0x00002ac94f6bf460 __libc_start_main +
    245

    6    tmp8o972scd                        0x0000564a6c1e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c69d4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c69a46561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c69a46286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c69a4613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c69a45bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7c69845e83 <unavailable> + 188035

    6    tmpki5gj1x5                        0x00005604e651d990 <unavailable> + 6544

    7    tmpki5gj1x5                        0x00005604e651d31d <unavailable> + 4893

    8    libc.so.6                          0x00002b7c69f3b460 __libc_start_main +
    245

    9    tmpki5gj1x5                        0x00005604e651cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    for i\
    \ : Int in k..<arr.count {\n        sum += arr[i] - arr[i-k]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpm8qys7g8/tmpm8qys7g8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b752ff67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b752fc5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b752fc5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b752fc5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8qys7g8                        0x00005618ea1ec57b <unavailable> + 5499

    5    libc.so.6                          0x00002b7530153460 __libc_start_main +
    245

    6    tmpm8qys7g8                        0x00005618ea1ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppho3co.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmprppho3co.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmprppho3co.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmprppho3co.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmprppho3co.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824648
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19bcf2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19bcc24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19bcc24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19bcc2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19bcc23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19bca23e83 <unavailable> + 188035

    6    tmpvd8972eo                        0x0000558c860e4984 <unavailable> + 6532

    7    tmpvd8972eo                        0x0000558c860e431d <unavailable> + 4893

    8    libc.so.6                          0x00002b19bd119460 __libc_start_main +
    245

    9    tmpvd8972eo                        0x0000558c860e3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979572
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k + add_elements(arr[k:], k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcpuervnu.swift:11:35: error: expected expression in list of expressions\n\
    \    return k + add_elements(arr[k:], k)\n                                  ^\n\
    /tmp/tmpcpuervnu.swift:11:35: error: missing argument for parameter #1 in call\n\
    \    return k + add_elements(arr[k:], k)\n                                  ^\n\
    \                                  <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(index: Int) -> Element { get\
    \ set }\n                      ^\n/tmp/tmpcpuervnu.swift:11:28: error: missing\
    \ argument labels 'arr:k:' in call\n    return k + add_elements(arr[k:], k)\n\
    \                           ^\n                            arr:     k: \n"
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[k] + arr[k+1] + arr[k+2] + arr[k+3] + arr[k+4] + arr[k+5] + arr[k+6]\
    \ + arr[k+7] + arr[k+8] + arr[k+9] + arr[k+10] + arr[k+11] + arr[k+12] + arr[k+13]\
    \ + arr[k+14] + arr[k+15] + arr[k+16] + arr[k+17] + arr[k+18] + arr[k+19] + arr[k+20]\
    \ + arr[k+21]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d27347c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2703e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6d2703e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6d2703e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6d2703dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6d26e3de83 <unavailable> + 188035

    6    tmphcovwyg7                        0x00005628a832d990 <unavailable> + 6544

    7    tmphcovwyg7                        0x00005628a832d31d <unavailable> + 4893

    8    libc.so.6                          0x00002b6d27533460 __libc_start_main +
    245

    9    tmphcovwyg7                        0x00005628a832cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979573
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp43rwh8x6/tmp43rwh8x6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02cc18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02c90fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02c90f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02c90e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43rwh8x6                        0x00005573a09f35fd <unavailable> + 5629

    5    libc.so.6                          0x00002af02ce04460 __libc_start_main +
    245

    6    tmp43rwh8x6                        0x00005573a09f3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824648
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssy24wu2.swift:12:12: error: expected type\n    for i := 0; i <\
    \ k; i++ {\n           ^\n            <#type#>\n/tmp/tmpssy24wu2.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < k; i++ {\n\
    \           ^\n/tmp/tmpssy24wu2.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < k; i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected type\n    for i := k; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpssy24wu2.swift:15:12: error: expected 'in' after\
    \ for-each pattern\n    for i := k; i < len(arr); i++ {\n           ^\n/tmp/tmpssy24wu2.swift:15:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := k; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659979572
