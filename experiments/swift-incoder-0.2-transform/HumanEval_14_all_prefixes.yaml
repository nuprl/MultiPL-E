name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return list of all prefixes from shortest to longest of the input string\n\
  /// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string:\
  \ String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ["    var prefixes = [String]()\n    var current = string\n    while\
    \ current != \"\" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        if prefix != \"\" {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        }\n        prefix += c\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n\
    \    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \        prefix = \"\"\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var current = \"\"\n    for c in string {\n        current += String(c)\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        for p in prefixes {\n            if c == p {\n                break\n\
    \            }\n        }\n        if p != nil {\n            prefixes.append(p)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        if character ==\
    \ currentPrefix[currentPrefix.startIndex] {\n            prefixes.append(currentPrefix)\n\
    \        }\n        currentPrefix = String(character) + currentPrefix\n    }\n\
    \    prefixes.append(currentPrefix)\n    return prefixes", "    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = String(character) + currentPrefix\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        if character ==\
    \ currentPrefix {\n            prefixes.append(currentPrefix)\n        } else\
    \ {\n            currentPrefix = String(character)\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        currentPrefix =\
    \ String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += c\n      \
    \  }\n    }\n    prefixes.append(prefix)\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var prefix = \"\"\n    for c in string {\n        if c ==\
    \ prefix {\n            prefixes.append(prefix)\n        } else {\n          \
    \  prefix = prefix + c\n            prefixes.append(prefix)\n        }\n    }\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count-1]\
    \ {\n            prefixes.append(currentPrefix)\n            currentPrefix = \"\
    \"\n        } else {\n            currentPrefix = currentPrefix + character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes", " \
    \   var prefixes = [String]()\n    for character in string {\n        prefixes.append(String(character))\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var currentPrefix = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       if c == prefix {\n            prefixes.append(prefix)\n        } else\
    \ {\n            prefix = prefix + c\n            prefixes.append(prefix)\n  \
    \      }\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
