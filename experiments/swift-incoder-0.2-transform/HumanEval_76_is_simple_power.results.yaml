language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == n*(n - 1) {\n\
    \        return true\n    }\n    if x == n*(n - 2)*(n - 3) {\n        return true\n\
    \    }\n    if x == n*(n - 2)*(n - 3)*(n - 4) {\n        return true\n    }\n\
    \    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5) {\n        return true\n    }\n\
    \    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6) {\n        return true\n\
    \    }\n    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n - 7) {\n    \
    \    return true\n    }\n    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n\
    \ - 7)*(n - 8) {\n        return true\n    }\n    if x == n*(n - 2)*(n - 3)*(n\
    \ - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9) {\n        return true\n    }\n\
    \    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n\
    \ - 10) {\n        return true\n    }\n    if x == n*(n - 2)*(n - 3)*(n - 4)*(n\
    \ - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11) {\n        return true\n\
    \    }\n    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n\
    \ - 9)*(n - 10)*(n - 11)*(n - 12) {\n        return true\n    }\n    if x == n*(n\
    \ - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11)*(n\
    \ - 12)*n - 13) {\n        return true\n    }\n    if x == n*(n - 2)*(n - 3)*(n\
    \ - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11)*(n - 12)*n -\
    \ 13)*n - 14) {\n        return true\n    }\n    if x == n*(n - 2)*(n - 3)*(n\
    \ - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11)*(n - 12)*n -\
    \ 13)*n - 14)*n - 15) {\n        return true\n    }\n    if x == n*(n - 2)*(n\
    \ - 3)*(n - 4)*(n - \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp318pr2jl.swift:67:112: error: expected '{' after 'if' condition\n\
    \    if x == n*(n - 2)*(n - 3)*(n - 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n\
    \ - 10)*(n - 11)*(n - 12)*n - 13) {\n                                        \
    \                                                                       ^\n/tmp/tmp318pr2jl.swift:70:112:\
    \ error: expected '{' after 'if' condition\n    if x == n*(n - 2)*(n - 3)*(n -\
    \ 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11)*(n - 12)*n - 13)*n\
    \ - 14) {\n                                                                  \
    \                                             ^\n/tmp/tmp318pr2jl.swift:73:112:\
    \ error: expected '{' after 'if' condition\n    if x == n*(n - 2)*(n - 3)*(n -\
    \ 4)*(n - 5)*(n - 6)*(n - 7)*(n - 8)*(n - 9)*(n - 10)*(n - 11)*(n - 12)*n - 13)*n\
    \ - 14)*n - 15) {\n                                                          \
    \                                                     ^\n/tmp/tmp318pr2jl.swift:77:1:\
    \ error: expected expression after operator\n}\n^\n/tmp/tmp318pr2jl.swift:76:8:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    if x == n*(n\
    \ - 2)*(n - 3)*(n - 4)*(n - \n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824710
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4lbac9be.swift:30:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp4lbac9be.swift:29:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmp4lbac9be.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp4lbac9be.swift:31:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x, n-1)\n                          ^\n           \
    \                x: n: \n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n**x {\n        return true\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps65h_cfv.swift:31:14: error: cannot find operator '**' in scope\n\
    \    if x == n**x {\n             ^~\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n == 2 {\n        return is_simple_power(x, n: 2)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n: 2)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n: 2)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 6 {\n        return is_simple_power(x, n: 3)\n   \
    \ }\n    if n == 7 {\n        return is_simple_power(x, n: 3)\n    }\n    if n\
    \ == 8 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 9 {\n  \
    \      return is_simple_power(x, n: 3)\n    }\n    if n == 10 {\n        return\
    \ is_simple_power(x, n: 3)\n    }\n    if n == 11 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 12 {\n        return is_simple_power(x, n: 3)\n  \
    \  }\n    if n == 13 {\n        return is_simple_power(x, n: 3)\n    }\n    if\
    \ n == 14 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 15 {\n\
    \        return is_simple_power(x, n: 3)\n    }\n    if n == 16 {\n        return\
    \ is_simple_power(x, n: 3)\n    }\n    if n == 17 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 18 {\n        return is_simple_power(x, n: 3)\n  \
    \  }\n    if n == 19 {\n        return is_simple_power(x, n: 3)\n    }\n    if\
    \ n == 20 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 21 {\n\
    \        return is_simple_power(x, n: 3)\n    }\n    if n == 22 {\n        return\
    \ is_simple_power(x, n: 3)\n    }\n    if n == 23 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 24 {\n        return is_simple_power(x, n: 3)\n  \
    \  }\n    if n == 25 {\n        return is_simple_power(x, n: 3)\n    }\n    if\
    \ n == 26 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 27 {\n\
    \        return is_simple_power(x, n: 3)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, n: 3)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ n: 3)\n    }\n    if n == 30 {\n        return is_simple_power(x, n: 3)\n  \
    \  }\n    if n == 31 {\n        return is_simple_power(x, n: 3)\n    }\n    if\
    \ n == 32 {\n        return is_simple_power(x, n: 3)\n    }\n    if n == 33 {\n\
    \        return is_simple_power(x, n: 3)\n    }\n    if n == 34 {\n        return\
    \ is_simple_power(x, n: 3)\n    }\n    if n == \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpov55u3sf.swift:125:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpov55u3sf.swift:26:31: error: missing argument label 'x:' in call\n\
    \        return is_simple_power(x, n: 2)\n                              ^\n  \
    \                             x: \n/tmp/tmpov55u3sf.swift:29:31: error: missing\
    \ argument label 'x:' in call\n        return is_simple_power(x, n: 2)\n     \
    \                         ^\n                               x: \n/tmp/tmpov55u3sf.swift:32:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 2)\n                              ^\n                               x: \n\
    /tmp/tmpov55u3sf.swift:35:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 3)\n                              ^\n     \
    \                          x: \n/tmp/tmpov55u3sf.swift:38:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 3)\n              \
    \                ^\n                               x: \n/tmp/tmpov55u3sf.swift:41:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 3)\n                              ^\n                               x: \n\
    /tmp/tmpov55u3sf.swift:44:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 3)\n                              ^\n     \
    \                          x: \n/tmp/tmpov55u3sf.swift:47:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 3)\n              \
    \                ^\n                               x: \n/tmp/tmpov55u3sf.swift:50:31:\
    \ error: missing argument label 'x:' in call\n        return is_simple_power(x,\
    \ n: 3)\n                              ^\n                               x: \n\
    /tmp/tmpov55u3sf.swift:53:31: error: missing argument label 'x:' in call\n   \
    \     return is_simple_power(x, n: 3)\n                              ^\n     \
    \                          x: \n/tmp/tmpov55u3sf.swift:56:31: error: missing argument\
    \ label 'x:' in call\n        return is_simple_power(x, n: 3)\n              \
    \                ^\n                           "
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 0 {\n        return false\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2)\
    \ == true && is_simple_power(x, n/2) == true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe944jgx_.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpe944jgx_.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2) ==\
    \ true && is_simple_power(x, n/2) == true\n                          ^\n     \
    \                      x: n: \n/tmp/tmpe944jgx_.swift:37:62: error: missing argument\
    \ labels 'x:n:' in call\n    return is_simple_power(x, n/2) == true && is_simple_power(x,\
    \ n/2) == true\n                                                             ^\n\
    \                                                              x: n: \n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4lbac9be.swift:30:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp4lbac9be.swift:29:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmp4lbac9be.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp4lbac9be.swift:31:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x, n-1)\n                          ^\n           \
    \                x: n: \n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n * x)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbzueo1gn.swift:19:12: error: cannot find 'is_simple_power_of_two'\
    \ in scope\n    return is_simple_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n\
    \ * x)\n           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbzueo1gn.swift:19:41: error:\
    \ cannot find 'is_power_of_two' in scope\n    return is_simple_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n * x)\n                          \
    \              ^~~~~~~~~~~~~~~\n/tmp/tmpbzueo1gn.swift:19:63: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_simple_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n * x)\n                                                \
    \              ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    if x == n**2 {\n        return true\n    }\n    if x == n**3 {\n \
    \       return true\n    }\n    if x == n**4 {\n        return true\n    }\n \
    \   if x == n**5 {\n        return true\n    }\n    if x == n**6 {\n        return\
    \ true\n    }\n    if x == n**7 {\n        return true\n    }\n    if x == n**8\
    \ {\n        return true\n    }\n    if x == n**9 {\n        return true\n   \
    \ }\n    if x == n**10 {\n        return true\n    }\n    if x == n**11 {\n  \
    \      return true\n    }\n    if x == n**12 {\n        return true\n    }\n \
    \   if x == n**13 {\n        return true\n    }\n    if x == n**14 {\n       \
    \ return true\n    }\n    if x == n**15 {\n        return true\n    }\n    if\
    \ x == n**16 {\n        return true\n    }\n    if x == n**17 {\n        return\
    \ true\n    }\n    if x == n**18 {\n        return true\n    }\n    if x == n**19\
    \ {\n        return true\n    }\n    if x == n**20 {\n        return true\n  \
    \  }\n    if x == n**21 {\n        return true\n    }\n    if x == n**22 {\n \
    \       return true\n    }\n    if x == n**23 {\n        return true\n    }\n\
    \    if x == n**24 {\n        return true\n    }\n    if x == n**25 {\n      \
    \  return true\n    }\n    if x == n**26 {\n        return true\n    }\n    if\
    \ x == n**27 {\n        return true\n    }\n    if x == n**28 {\n        return\
    \ true\n    }\n    if x == n**29 {\n        return true\n    }\n    if x == n**30\
    \ {\n        return true\n    }\n    if x == n**31 {\n        return true\n  \
    \  }\n    if x == n**32 {\n        return true\n    }\n    if x == n**33 {\n \
    \       return true\n    }\n    if x == n**34 {\n        return true\n    }\n\
    \    if x == n**35 {\n        return true\n    }\n    if x == n**36 {\n      \
    \  return true\n    }\n    if x == n**37 {\n        return true\n    }\n    if\
    \ x == n**38 {\n        return true\n    }\n    if x == n**39 {\n        return\
    \ true\n    }\n    if x == n**40 {\n        return true\n    }\n    if x == n**41\
    \ {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwibuij1i.swift:174:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpwibuij1i.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpwibuij1i.swift:31:14: error: cannot find operator\
    \ '**' in scope\n    if x == n**2 {\n             ^~\n/tmp/tmpwibuij1i.swift:34:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**3 {\n            \
    \ ^~\n/tmp/tmpwibuij1i.swift:37:14: error: cannot find operator '**' in scope\n\
    \    if x == n**4 {\n             ^~\n/tmp/tmpwibuij1i.swift:40:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**5 {\n             ^~\n/tmp/tmpwibuij1i.swift:43:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**6 {\n            \
    \ ^~\n/tmp/tmpwibuij1i.swift:46:14: error: cannot find operator '**' in scope\n\
    \    if x == n**7 {\n             ^~\n/tmp/tmpwibuij1i.swift:49:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**8 {\n             ^~\n/tmp/tmpwibuij1i.swift:52:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**9 {\n            \
    \ ^~\n/tmp/tmpwibuij1i.swift:55:14: error: cannot find operator '**' in scope\n\
    \    if x == n**10 {\n             ^~\n/tmp/tmpwibuij1i.swift:58:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**11 {\n             ^~\n/tmp/tmpwibuij1i.swift:61:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**12 {\n           \
    \  ^~\n/tmp/tmpwibuij1i.swift:64:14: error: cannot find operator '**' in scope\n\
    \    if x == n**13 {\n             ^~\n/tmp/tmpwibuij1i.swift:67:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**14 {\n             ^~\n/tmp/tmpwibuij1i.swift:70:14:\
    \ error: cannot find operator '**' in scope\n    if x == n**15 {\n           \
    \  ^~\n/tmp/tmpwibuij1i.swift:73:14: error: cannot find operator '**' in scope\n\
    \    if x == n**16 {\n             ^~\n/tmp/tmpwibuij1i.swift:76:14: error: cannot\
    \ find operator '**' in scope\n    if x == n**17 {\n             ^~\n/tmp"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return is_simple_power(x, n-1)\n    }\n    return is_simple_power(x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg28vcjig.swift:35:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpg28vcjig.swift:37:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpql79bezd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x == x {\n        return true\n\
    \    }\n    if x == x*x {\n        return true\n    }\n    if x == x*x*x {\n \
    \       return true\n    }\n    if x == x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x {\n       \
    \ return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n\
    \    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n\
    \    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if\
    \ x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x ==\
    \ x*x*x*x*x*x*x*x*x*x*x*x*x*x*x {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\
    \ {\n        return true\n    }\n    if x == x*x*\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1jsn4eme.swift:97:17: error: expected '{' after 'if' condition\n\
    \    if x == x*x*\n                ^\n/tmp/tmp1jsn4eme.swift:97:16: error: '*'\
    \ is not a postfix unary operator\n    if x == x*x*\n               ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x == n-1 {\n        return true\n    }\n \
    \   if x == n-2 {\n        return true\n    }\n    if x == n-3 {\n        return\
    \ true\n    }\n    if x == n-4 {\n        return true\n    }\n    if x == n-5\
    \ {\n        return true\n    }\n    if x == n-6 {\n        return true\n    }\n\
    \    if x == n-7 {\n        return true\n    }\n    if x == n-8 {\n        return\
    \ true\n    }\n    if x == n-9 {\n        return true\n    }\n    if x == n-10\
    \ {\n        return true\n    }\n    if x == n-11 {\n        return true\n   \
    \ }\n    if x == n-12 {\n        return true\n    }\n    if x == n-13 {\n    \
    \    return true\n    }\n    if x == n-14 {\n        return true\n    }\n    if\
    \ x == n-15 {\n        return true\n    }\n    if x == n-16 {\n        return\
    \ true\n    }\n    if x == n-17 {\n        return true\n    }\n    if x == n-18\
    \ {\n        return true\n    }\n    if x == n-19 {\n        return true\n   \
    \ }\n    if x == n-20 {\n        return true\n    }\n    if x == n-21 {\n    \
    \    return true\n    }\n    if x == n-22 {\n        return true\n    }\n    if\
    \ x == n-23 {\n        return true\n    }\n    if x == n-24 {\n        return\
    \ true\n    }\n    if x == n-25 {\n        return true\n    }\n    if x == n-26\
    \ {\n        return true\n    }\n    if x == n-27 {\n        return true\n   \
    \ }\n    if x == n-28 {\n        return true\n    }\n    if x == n-29 {\n    \
    \    return true\n    }\n    if x == n-30 {\n        return true\n    }\n    if\
    \ x == n-31 {\n        return true\n    }\n    if x == n-32 {\n        return\
    \ true\n    }\n    if x == n-33 {\n        return true\n    }\n    if x == n-34\
    \ {\n        return true\n    }\n    if x == n-35 {\n        return true\n   \
    \ }\n    if x == n-36 {\n        return true\n    }\n    if x == n-37 {\n    \
    \    return true\n    }\n    if x == n-38 {\n        return true\n    }\n    if\
    \ x == n-39 {\n        return true\n    }\n    if x == n-40 {\n        return\
    \ true\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4q_qxvq8.swift:163:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp83l3oc1t.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824560
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2liwkul3.swift:184:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824659
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprb1xx1yn.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if x == 0 {\n        return false\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x == n-1 {\n     \
    \   return false\n    }\n    if x == n+1 {\n        return true\n    }\n    if\
    \ x == n+2 {\n        return false\n    }\n    if x == n+3 {\n        return true\n\
    \    }\n    if x == n+4 {\n        return false\n    }\n    if x == n+5 {\n  \
    \      return true\n    }\n    if x == n+6 {\n        return false\n    }\n  \
    \  if x == n+7 {\n        return true\n    }\n    if x == n+8 {\n        return\
    \ false\n    }\n    if x == n+9 {\n        return true\n    }\n    if x == n+10\
    \ {\n        return false\n    }\n    if x == n+11 {\n        return true\n  \
    \  }\n    if x == n+12 {\n        return false\n    }\n    if x == n+13 {\n  \
    \      return true\n    }\n    if x == n+14 {\n        return false\n    }\n \
    \   if x == n+15 {\n        return true\n    }\n    if x == n+16 {\n        return\
    \ false\n    }\n    if x == n+17 {\n        return true\n    }\n    if x == n+18\
    \ {\n        return false\n    }\n    if x == n+19 {\n        return true\n  \
    \  }\n    if x == n+20 {\n        return false\n    }\n    if x == n+21 {\n  \
    \      return true\n    }\n    if x == n+22 {\n        return false\n    }\n \
    \   if x == n+23 {\n        return true\n    }\n    if x == n+24 {\n        return\
    \ false\n    }\n    if x == n+25 {\n        return true\n    }\n    if x == n+26\
    \ {\n        return false\n    }\n    if x == n+27 {\n        return true\n  \
    \  }\n    if x == n+28 {\n        return false\n    }\n    if x == n+29 {\n  \
    \      return true\n    }\n    if x == n+30 {\n        return false\n    }\n \
    \   if x == n+31 {\n        return true\n    }\n    if x == n+32 {\n        return\
    \ false\n    }\n    if x == n+33 {\n        return true\n    }\n    if x == n+34\
    \ {\n        return false\n    }\n    if x == n+35 {\n        return true\n  \
    \  }\n    if x == n+36 {\n        return false\n    }\n    if x == n+37 {\n  \
    \      return true\n    }\n    if x == n+38 {\n        return false\n    }\n \
    \   if x == n+\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsbw5ec8.swift:151:15: error: expected '{' after 'if' condition\n\
    \    if x == n+\n              ^\n/tmp/tmpqsbw5ec8.swift:151:14: error: '+' is\
    \ not a postfix unary operator\n    if x == n+\n             ^\n"
  stdout: ''
  timestamp: 1659824560
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkvpr0wav/tmpkvpr0wav.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8ba96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8ba664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8ba664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8ba6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvpr0wav                        0x0000558a6469e4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ac8bab59460 __libc_start_main +
    245

    6    tmpkvpr0wav                        0x0000558a6469def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824559
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x < 0 {\n        return false\n    }\n    if x == n / 2\
    \ {\n        return is_simple_power(x, n - 1)\n    }\n    if x == n / 3 {\n  \
    \      return is_simple_power(x, n - 2)\n    }\n    if x == n / 4 {\n        return\
    \ is_simple_power(x, n - 3)\n    }\n    if x == n / 5 {\n        return is_simple_power(x,\
    \ n - 4)\n    }\n    if x == n / 6 {\n        return is_simple_power(x, n - 5)\n\
    \    }\n    if x == n / 7 {\n        return is_simple_power(x, n - 6)\n    }\n\
    \    if x == n / 8 {\n        return is_simple_power(x, n - 7)\n    }\n    if\
    \ x == n / 9 {\n        return is_simple_power(x, n - 8)\n    }\n    if x == n\
    \ / 10 {\n        return is_simple_power(x, n - 9)\n    }\n    if x == n / 11\
    \ {\n        return is_simple_power(x, n - 10)\n    }\n    if x == n / 12 {\n\
    \        return is_simple_power(x, n - 11)\n    }\n    if x == n / 13 {\n    \
    \    return is_simple_power(x, n - 12)\n    }\n    if x == n / 14 {\n        return\
    \ is_simple_power(x, n - 13)\n    }\n    if x == n / 15 {\n        return is_simple_power(x,\
    \ n - 14)\n    }\n    if x == n / 16 {\n        return is_simple_power(x, n -\
    \ 15)\n    }\n    if x == n / 17 {\n        return is_simple_power(x, n - 16)\n\
    \    }\n    if x == n / 18 {\n        return is_simple_power(x, n - 17)\n    }\n\
    \    if x == n / 19 {\n        return is_simple_power(x, n - 18)\n    }\n    if\
    \ x == n / 20 {\n        return is_simple_power(x, n - 19)\n    }\n    if x ==\
    \ n / 21 {\n        return is_simple_power(x, n - 20)\n    }\n    if x == n /\
    \ 22 {\n        return is_simple_power(x, n - 21)\n    }\n    if x == n / 23 {\n\
    \        return is_simple_power(x, n - 22)\n    }\n    if x == n / 24 {\n    \
    \    return is_simple_power(x, n - 23)\n    }\n    if x == n / 25 {\n        return\
    \ is_simple_power(x, n - 24)\n    }\n    if x == n / 26 {\n        return is_simple_power(x,\
    \ n - 25)\n    }\n    if x == n / 27 {\n        return is_simple_power(x, n -\
    \ 26)\n    }\n    if x == n / 28\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppex8z6th.swift:118:19: error: expected '{' after 'if' condition\n\
    \    if x == n / 28\n                  ^\n/tmp/tmppex8z6th.swift:41:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n\
    \ - 1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmppex8z6th.swift:44:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 2)\n                              ^\n \
    \                              x: n: \n/tmp/tmppex8z6th.swift:47:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 3)\n \
    \                             ^\n                               x: n: \n/tmp/tmppex8z6th.swift:50:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 4)\n                              ^\n                               x: n:\
    \ \n/tmp/tmppex8z6th.swift:53:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 5)\n                              ^\n \
    \                              x: n: \n/tmp/tmppex8z6th.swift:56:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 6)\n \
    \                             ^\n                               x: n: \n/tmp/tmppex8z6th.swift:59:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 7)\n                              ^\n                               x: n:\
    \ \n/tmp/tmppex8z6th.swift:62:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 8)\n                              ^\n \
    \                              x: n: \n/tmp/tmppex8z6th.swift:65:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 9)\n \
    \                             ^\n                               x: n: \n/tmp/tmppex8z6th.swift:68:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 10)\n                              ^\n                               x:\
    \ n: \n/tmp/tmppex8z6th.swift:71:31: error: missing argument labels 'x:n:"
  stdout: ''
  timestamp: 1659824660
