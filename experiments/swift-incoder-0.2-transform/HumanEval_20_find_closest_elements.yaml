name: HumanEval_20_find_closest_elements
language: swift
prompt: "\n/// From a supplied list of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
  \ [Double]) -> (Double, Double) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
completions: ["    let smallest = numbers[0]\n    let largest = numbers[0]\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min = numbers[0]\n   \
    \ let max = numbers[0]\n    for number in numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    return (min, max)", "    guard numbers.count\
    \ >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    var smallest = Double.max\n    var largest\
    \ = Double.min\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    guard\
    \ numbers.count < 3 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count\
    \ > 3 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 6 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 6 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 9 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 9 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 12 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 12 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 15 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 15 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 18 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 18 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 21 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 21 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 24 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 24 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 27 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 27 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 30 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 30 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 33 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 33 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 36 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 36 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 39 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 39 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 42 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 42 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 45 else {\n        return (numbers[0],numbers[0])\n", "    let smallest =\
    \ min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min: Double = Double(numbers.min())\n\
    \    let max: Double = Double(numbers.max())\n    let minIndex: Int = Int(numbers.index(of:\
    \ min))!\n    let maxIndex: Int = Int(numbers.index(of: max))!\n    return (numbers[minIndex],\
    \ numbers[maxIndex])", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)"]
stop_tokens:
- "\n}"
