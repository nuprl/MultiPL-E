name: HumanEval_20_find_closest_elements
language: swift
prompt: "\n/// From a supplied list of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
  \ [Double]) -> (Double, Double) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
  \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
completions: ["    let smallest = numbers[0]\n    let largest = numbers[0]\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n \
    \   var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min = numbers[0]\n   \
    \ let max = numbers[0]\n    for number in numbers {\n        if number < min {\n\
    \            min = number\n        }\n        if number > max {\n            max\
    \ = number\n        }\n    }\n    return (min, max)", "    guard numbers.count\
    \ >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    var smallest = Double.max\n    var largest\
    \ = Double.min\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    guard\
    \ numbers.count < 3 else {\n        return (0.0,0.0)\n    }\n    guard numbers.count\
    \ > 3 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 6 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 6 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 9 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 9 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 12 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 12 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 15 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 15 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 18 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 18 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 21 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 21 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 24 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 24 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 27 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 27 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 30 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 30 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 33 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 33 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 36 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 36 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 39 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 39 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 42 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ > 42 else {\n        return (numbers[0],numbers[0])\n    }\n    guard numbers.count\
    \ < 45 else {\n        return (numbers[0],numbers[0])\n", "    let smallest =\
    \ min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min: Double = Double(numbers.min())\n\
    \    let max: Double = Double(numbers.max())\n    let minIndex: Int = Int(numbers.index(of:\
    \ min))!\n    let maxIndex: Int = Int(numbers.index(of: max))!\n    return (numbers[minIndex],\
    \ numbers[maxIndex])", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    guard numbers.count >=\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    \n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    \n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    \n    return\
    \ (smallest, largest)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    var smallestDifference = Double.infinity\n    var\
    \ smallestDifferenceIndex = -1\n    var largestDifference = Double.infinity\n\
    \    var largestDifferenceIndex = -1\n\n    for i in 0..<numbers.count {\n   \
    \     let difference = abs(numbers[i] - numbers[smallestDifferenceIndex])\n  \
    \      if difference < smallestDifference {\n            smallestDifference =\
    \ difference\n            smallestDifferenceIndex = i\n        }\n        if difference\
    \ > largestDifference {\n            largestDifference = difference\n        \
    \    largestDifferenceIndex = i\n        }\n    }\n\n    return (numbers[smallestDifferenceIndex],\
    \ numbers[largestDifferenceIndex])", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        let current = numbers[i]\n\
    \        if current < smallest {\n            smallest = current\n        } else\
    \ if current > largest {\n            largest = current\n        }\n    }\n  \
    \  return (smallest, largest)", "    let smallest = min(numbers)\n    let largest\
    \ = max(numbers)\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    var smallest: Double = Double.greatestFiniteMagnitude\n\
    \    var largest: Double = Double.leastFiniteMagnitude\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let min1 = min(numbers)\n    let min2 =\
    \ min(numbers)\n    let minDiff = abs(min1 - min2)\n    let minIndex = numbers.index(of:\
    \ min1)\n    let minIndex2 = numbers.index(of: min2)\n    if minDiff < abs(minIndex\
    \ - minIndex2) {\n        return (min1, min2)\n    } else {\n        return (min2,\
    \ min1)\n    }", "    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(numbers)\n \
    \   let max2 = max(numbers)\n    if min1 < min2 {\n        return (min1, min2)\n\
    \    }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    return (min1,\
    \ max2)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 6 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 10 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 14 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 15 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 19 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 23 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 24 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 27 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else { return\
    \ (numbers[0], numbers[0]) }\n    guard ", "    let min = min(numbers)\n    let\
    \ max = max(numbers)\n    return (min, max)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    return (min2, max1)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = numbers.min()\n    let largest = numbers.max()\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let sortedNumbers = numbers.sorted()\n    let closest1 = sortedNumbers[0]\n\
    \    let closest2 = sortedNumbers[1]\n    if closest1 < closest2 {\n        return\
    \ (closest1, closest2)\n    } else {\n        return (closest2, closest1)\n  \
    \  }", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n   \
    \ let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = numbers.min()\n\
    \    let largest = numbers.max()\n    if smallest == largest {\n        return\
    \ (smallest, smallest)\n    }\n    if smallest < largest {\n        return (smallest,\
    \ largest)\n    }\n    return (largest, smallest)", "    guard numbers.count >=\
    \ 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 1 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 1 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 1 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 1 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 1 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 1 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 1 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 1 else { return (numbers[0], numbers[0]) }\n", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    if max1 < min1 {\n        return (max1, min1)\n\
    \    }\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n    if max2\
    \ < min2 {\n        return (max2, min2)\n    }\n    return (min1, max1)", "  \
    \  let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min1\
    \ = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(numbers, max:\
    \ max1)\n    let max2 = max(numbers, min: min1)\n    return (min1, min2)", " \
    \   let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       } else if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min = min(numbers)\n    let max = max(numbers)\n    return\
    \ (min, max)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1,\
    \ max1)\n    return (min2, max2)", "    let smallest = numbers.min()\n    let\
    \ largest = numbers.max()\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex = -1\n   \
    \ var largestIndex = -1\n\n    for i in 1..<numbers.count {\n        let currentNumber\
    \ = numbers[i]\n        if currentNumber < smallest {\n            smallest =\
    \ currentNumber\n            smallestIndex = i\n        }\n        if currentNumber\
    \ > largest {\n            largest = currentNumber\n            largestIndex =\
    \ i\n        }\n    }\n\n    return (numbers[smallestIndex], numbers[largestIndex])",
  "    let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let\
    \ min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)",
  "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    let sortedNumbers = numbers.sorted()\n    let closestIndex = sortedNumbers.firstIndex(of:\
    \ sortedNumbers.last!)\n    let closestValue = sortedNumbers[closestIndex]\n \
    \   return (closestValue, closestIndex)", "    let min = numbers[0]\n    let max\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > max\
    \ {\n            max = numbers[i]\n        }\n        if numbers[i] < min {\n\
    \            min = numbers[i]\n        }\n    }\n    return (min, max)", "   \
    \ guard numbers.count > 1 else { return (numbers[0], numbers[0]) }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count {\n\
    \        if numbers[i] < smallest {\n            smallest = numbers[i]\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    let smallest = numbers.min()\n\
    \    let largest = numbers.max()\n    return (smallest, largest)", "    let min\
    \ = numbers.min()\n    let max = numbers.max()\n    return (min, max)", "    let\
    \ smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count > 1 else {\n      \
    \  return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    if sortedNumbers.count < 2 {\n        return sortedNumbers[0], sortedNumbers[0]\n\
    \    }\n    let closest1 = sortedNumbers[0]\n    let closest2 = sortedNumbers[1]\n\
    \    if closest1 < closest2 {\n        return closest1, closest2\n    }\n    return\
    \ closest2, closest1", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    let sortedNumbers = numbers.sorted()\n    let closestToFirst = sortedNumbers.first!\n\
    \    let closestToSecond = sortedNumbers.last!\n    return (closestToFirst, closestToSecond)",
  "    let min = numbers[0]\n    let max = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > max {\n            max = numbers[i]\n        }\n\
    \        if numbers[i] < min {\n            min = numbers[i]\n        }\n    }\n\
    \    return (min, max)", "    guard numbers.count >= 2 else {\n        return\
    \ (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(min1,\
    \ max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)", "    var smallest:\
    \ Double = Double.infinity\n    var largest: Double = -Double.infinity\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let sortedNumbers = numbers.sorted()\n\
    \    return (sortedNumbers[0], sortedNumbers[1])", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3\
    \ else { return (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n\
    \    let min2 = min(numbers.dropLast())\n    let max2 = max(numbers.dropLast())\n\
    \    return (min1, max1), (min2, max2)", "    let smallest = min(numbers)\n  \
    \  let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    let smallest = numbers.min()\n    let largest = numbers.max()\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in\
    \ 1..numbers.count {\n        if numbers[i] > largest {\n            largest =\
    \ numbers[i]\n        } else if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let min1\
    \ = numbers[0]\n    let max1 = numbers[0]\n    let min2 = numbers[0]\n    let\
    \ max2 = numbers[0]\n    for n in numbers {\n        if n < min1 {\n         \
    \   min1 = n\n        } else if n > max1 {\n            max1 = n\n        }\n\
    \        if n < min2 {\n            min2 = n\n        } else if n > max2 {\n \
    \           max2 = n\n        }\n    }\n    return (min1, max1)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min1 = numbers.min()\n    let max1 =\
    \ numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    if min2 < min1 {\n        return (min2, max1)\n   \
    \ }\n    if max1 > max2 {\n        return (max1, max2)\n    }\n    return (max1,\
    \ min2)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2\
    \ = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)",
  "    let sortedNumbers = numbers.sorted()\n    let closestIndex = sortedNumbers.firstIndex({\
    \ $0 < sortedNumbers.last() })\n    return (sortedNumbers[closestIndex], sortedNumbers[closestIndex\
    \ + 1])", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n   \
    \ }\n    guard numbers.count <= Double.greatestFiniteMagnitude else {\n      \
    \  return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n        }\n        if numbers[i] < smallest {\n  \
    \          smallest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let min = min(numbers)\n \
    \   let max = max(numbers)\n    let mid = (min + max) / 2\n    return (mid, max)",
  "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count {\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \ }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n    }\n    return (smallest, largest)", "    guard numbers.count >\
    \ 2 else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n \
    \   let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 8 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 17 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 26 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0])\
    \ }\n    guard ", "    guard numbers.count > 1 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1]) }\n  \
    \  guard numbers.count > 3 else { return (numbers[0], numbers[2]) }\n    guard\
    \ numbers.count > 4 else { return (numbers[0], numbers[3]) }\n    guard numbers.count\
    \ > 5 else { return (numbers[0], numbers[4]) }\n    guard numbers.count > 6 else\
    \ { return (numbers[0], numbers[5]) }\n    guard numbers.count > 7 else { return\
    \ (numbers[0], numbers[6]) }\n    guard numbers.count > 8 else { return (numbers[0],\
    \ numbers[7]) }\n    guard numbers.count > 9 else { return (numbers[0], numbers[8])\
    \ }\n    guard numbers.count > 10 else { return (numbers[0], numbers[9]) }\n \
    \   guard numbers.count > 11 else { return (numbers[0], numbers[10]) }\n    guard\
    \ numbers.count > 12 else { return (numbers[0], numbers[11]) }\n    guard numbers.count\
    \ > 13 else { return (numbers[0], numbers[12]) }\n    guard numbers.count > 14\
    \ else { return (numbers[0], numbers[13]) }\n    guard numbers.count > 15 else\
    \ { return (numbers[0], numbers[14]) }\n    guard numbers.count > 16 else { return\
    \ (numbers[0], numbers[15]) }\n    guard numbers.count > 17 else { return (numbers[0],\
    \ numbers[16]) }\n    guard numbers.count > 18 else { return (numbers[0], numbers[17])\
    \ }\n    guard numbers.count > 19 else { return (numbers[0], numbers[18]) }\n\
    \    guard numbers.count > 20 else { return (numbers[0], numbers[19]) }\n    guard\
    \ numbers.count > 21 else { return (numbers[0], numbers[20]) }\n    guard numbers.count\
    \ > 22 else { return (numbers[0], numbers[21]) }\n    guard numbers.count > 23\
    \ else { return (numbers[0], numbers[22]) }\n    guard numbers.count > 24 else\
    \ { return (numbers[0], numbers[23]) }\n    guard numbers.count > 25 else { return\
    \ (numbers[0], numbers[24]) }\n    guard numbers.count > 26 else { return (numbers[0],\
    \ numbers[25]) }\n    guard numbers.count > 27 else { return (numbers[0], numbers[26])\
    \ }\n    guard numbers.count > 28 else { return (numbers[0], numbers[27]) }\n\
    \    guard numbers.count > 29 else { return (numbers[0], number", "    guard numbers.count\
    \ >= 2 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 6 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 7 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 9 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 10 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 11 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 14 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 15 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 16 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 19 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 20 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 23 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 24 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 25 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 27 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 29 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else\
    \ { return (numbers[0], numbers[0]) }\n    guard ", "    var smallest: Double\
    \ = Double.max\n    var largest: Double = Double.min\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(min1,\
    \ max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)", "    let sortedNumbers\
    \ = numbers.sorted()\n    var closest1 = sortedNumbers[0]\n    var closest2 =\
    \ sortedNumbers[0]\n    for i in 1..<sortedNumbers.count {\n        let currentClosest1\
    \ = sortedNumbers[i]\n        let currentClosest2 = sortedNumbers[i - 1]\n   \
    \     if currentClosest1 < closest1 {\n            closest1 = currentClosest1\n\
    \        }\n        if currentClosest2 < closest2 {\n            closest2 = currentClosest2\n\
    \        }\n    }\n    return (closest1, closest2)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1,\
    \ max1)\n    return (min2, max2)", "    let min1 = numbers.min()\n    let max1\
    \ = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 < min2 {\n        return (min2, min1)\n    }\n    if max1 > max2\
    \ {\n        return (max2, max1)\n    }\n    return (min1, max1)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    var smallest: Double = numbers[0]\n    var largest: Double = numbers[0]\n \
    \   for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\
    \ else if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    guard numbers.count >= 2 else {\n     \
    \   return (0.0,0.0)\n    }\n    guard numbers.count > 1 else {\n        return\
    \ (0.0,numbers[0])\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n        }\n        if numbers[i] < smallest {\n   \
    \         smallest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 5 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 14 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 23 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 27 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else { return (numbers[0],\
    \ numbers[0]) }\n    guard ", "    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < min1 {\n            min1 = numbers[i]\n        }\n\
    \        if numbers[i] > max1 {\n            max1 = numbers[i]\n        }\n  \
    \      if numbers[i] < min2 {\n            min2 = numbers[i]\n        }\n    \
    \    if numbers[i] > max2 {\n            max2 = numbers[i]\n        }\n    }\n\
    \    return (min1, max1)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n        } else if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        } else if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    let min1 = min(numbers)\n\
    \    let max1 = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1,\
    \ max1)\n    return (min2, max2)", "    guard numbers.count > 1 else {\n     \
    \   return (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        let current1 = numbers[i]\n        let current2 = numbers[i - 1]\n\
    \        let current3 = numbers[i - 1]\n        let current4 = numbers[i]\n  \
    \      let current5 = numbers[i]\n        let current6 = numbers[i - 1]\n    \
    \    let current7 = numbers[i - 1]\n        let current8 = numbers[i]\n      \
    \  let current9 = numbers[i]\n        let current10 = numbers[i]\n        let\
    \ current11 = numbers[i - 1]\n        let current12 = numbers[i - 1]\n       \
    \ let current13 = numbers[i - 1]\n        let current14 = numbers[i]\n       \
    \ let current15 = numbers[i]\n        let current16 = numbers[i - 1]\n       \
    \ let current17 = numbers[i - 1]\n        let current18 = numbers[i]\n       \
    \ let current19 = numbers[i]\n        let current20 = numbers[i - 1]\n       \
    \ let current21 = numbers[i - 1]\n        let current22 = numbers[i - 1]\n   \
    \     let current23 = numbers[i - 1]\n        let current24 = numbers[i]\n   \
    \     let current25 = numbers[i]\n        let current26 = numbers[i - 1]\n   \
    \     let current27 = numbers[i - 1]\n        let current28 = numbers[i]\n   \
    \     let current29 = numbers[i]\n        let current30 = numbers[i - 1]\n   \
    \     let current31 = numbers[i - 1]\n        let current32 = numbers[i - 1]\n\
    \        let current33 = numbers[i - 1]\n        let current34 = numbers[i]\n\
    \        let current35 = numbers[i]\n        let current36 = numbers[i - 1]\n\
    \        let current37 = numbers[i - 1]\n        let current38 = numbers[i]\n\
    \        let current39 = numbers[i]\n        let current40 = numbers[i - 1]\n\
    \        let current41 = numbers[i - 1]\n        let current42 = numbers[i - 1]\n\
    \        let current43 = numbers[i - 1]\n        let current44 = numbers[i]\n\
    \        let current45 = numbers[i]\n        let current46 = numbers[i - 1]\n\
    \        let current47 = numbers[i - 1]\n        let current48 = numbers[i]\n\
    \        let current49 = numbers[i]\n        let current50 = numbers[i - 1]\n\
    \        let current51 = numbers[i - 1]\n        let current52 = numbers[i - 1]\n\
    \        let current53 = numbers[i - 1]\n        let current54 = numbers[i]\n\
    \        let current55 = numbers[i]\n        let current56 = numbers[i - 1]\n\
    \        let current57 = numbers[i - 1]\n        let current58 = numbers[i]\n\
    \        let current59 = numbers[i]\n        let current60 = numbers[i - 1]\n\
    \        let current61 = numbers[i - 1]\n        let current62 = numbers[i - 1]\n\
    \        let current63 = numbers[", "    let min1 = min(numbers)\n    let max1\
    \ = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n\
    \    return (min2, max2)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let\
    \ min2 = min(min1, max1)\n    let max2 = max(min1, max1)\n    return (min1, max1)",
  "    let min1 = min(numbers)\n    let max1 = max(numbers)\n    let min2 = min(min1,\
    \ max1)\n    let max2 = max(min1, max1)\n    return (min2, max2)", "    guard\
    \ numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min = numbers[0]\n    let max = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        let current = numbers[i]\n        if\
    \ current < min {\n            min = current\n        } else if current > max\
    \ {\n            max = current\n        }\n    }\n    return (min, max)", "  \
    \  let smallest = numbers[0]\n    let largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2 else\
    \ { return (numbers[0], numbers[0]) }\n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        } else if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2\
    \ else {\n        return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n   \
    \ var largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallestIndex\
    \ = -1\n    var largestIndex = -1\n\n    for i in 1..<numbers.count {\n      \
    \  let current = numbers[i]\n        if current < smallest {\n            smallest\
    \ = current\n            smallestIndex = i\n        }\n        if current > largest\
    \ {\n            largest = current\n            largestIndex = i\n        }\n\
    \    }\n\n    return (numbers[smallestIndex], numbers[largestIndex])", "    let\
    \ sortedNumbers = numbers.sorted()\n    let smallest = sortedNumbers.first!\n\
    \    let largest = sortedNumbers.last!\n    return (smallest, largest)", "   \
    \ guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 4 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 5\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 6 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 7 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 8 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 9 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 10 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 11 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 12 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 13 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 14\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 15 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 16 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 17 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 18 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 19 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 20 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 21 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 22 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 23\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 24 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 25 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 26 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 27 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 28 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 29 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 30 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 31 else { return (numbers[0], numbers[0]) }\n    guard ", "    let sortedNumbers\
    \ = numbers.sorted()\n    let closestIndex = sortedNumbers.firstIndex({ $0 > sortedNumbers[1]\
    \ })\n    let closestValue = sortedNumbers[closestIndex]\n    return (closestValue,\
    \ sortedNumbers[closestIndex + 1])", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else { return\
    \ (numbers[0], numbers[0]) }\n\n    var smallest = numbers[0]\n    var largest\
    \ = numbers[0]\n    var smallestIndex = -1\n    var largestIndex = -1\n\n    for\
    \ i in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n            smallestIndex = i\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n            largestIndex = i\n\
    \        }\n    }\n\n    return (numbers[smallestIndex], numbers[largestIndex])",
  "    guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 4 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 5\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 6 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 7 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 8 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 9 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 10 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 11 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 12 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 13 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 14\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 15 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 16 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 17 || numbers.count >=\
    \ 18 || numbers.count >= 19 || numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 || numbers.count >= 22 || numbers.count\
    \ >= 23 || numbers.count >= 24 || numbers.count >= 25 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 26 || numbers.count >= 27 || numbers.count\
    \ >= 28 || numbers.count >= 29 || numbers.count >= 30 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 31 || numbers.count >= 32 || numbers.count\
    \ >= 33 || numbers.count >= 34 || numbers.count >= 35 || numbers.count >= 36 ||\
    \ numbers.count >= 37 || numbers.count >= 38 || numbers.count >= 39 || numbers.count\
    \ >= 40 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 41\
    \ || numbers.count >= 42 || numbers.count >= 43 || numbers.count >= 44 || numbers.count\
    \ >= 45 || numbers.count >= 46 || numbers.count >= 47 || numbers.count >= 48 ||\
    \ numbers.count >= 49 || numbers.count >= 50 || numbers.count >= 51 || numbers.count\
    \ >= 52 || numbers.count >= 53 || numbers.count >= 54 || numbers.count >= 55 ||\
    \ numbers.count >= 56 || numbers.count >= ", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let min\
    \ = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "    let\
    \ min = min(numbers)\n    let max = max(numbers)\n    return (min, max)", "  \
    \  var smallest = Double.max\n    var largest = Double.min\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count > 2 else {\n      \
    \  return (0.0,0.0)\n    }\n    let min1 = numbers[0]\n    let max1 = numbers[0]\n\
    \    let min2 = numbers[0]\n    let max2 = numbers[0]\n    for n in numbers {\n\
    \        if n < min1 {\n            min1 = n\n        } else if n > max1 {\n \
    \           max1 = n\n        }\n        if n < min2 {\n            min2 = n\n\
    \        } else if n > max2 {\n            max2 = n\n        }\n    }\n    return\
    \ (min1, max1)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 7\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 16\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 25\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n    guard ",
  "    let smallest = numbers.min()\n    let largest = numbers.max()\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n\
    \    guard numbers.count <= numbers.max() else {\n        return (0.0,0.0)\n \
    \   }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let min1 = numbers.min()\n    let max1 =\
    \ numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    return (min2, max1)", "    guard numbers.count > 1\
    \ else {\n        return (0.0,0.0)\n    }\n    let smallest = numbers[0]\n   \
    \ let largest = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        }\n        if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        }\n        if number > largest {\n   \
    \         largest = number\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    let min1 = numbers.min()\n    let max1 = numbers.max()\n    if max1 == min1\
    \ {\n        return (max1, max1)\n    }\n    let min2 = numbers.min()\n    let\
    \ max2 = numbers.max()\n    if max2 == min2 {\n        return (max2, max2)\n \
    \   }\n    var closest1 = min1\n    var closest2 = min2\n    if max1 < min2 {\n\
    \        closest1 = max1\n        closest2 = min2\n    } else {\n        closest1\
    \ = min1\n        closest2 = max2\n    }\n    var closest3 = min1\n    var closest4\
    \ = min2\n    if max1 < min3 {\n        closest3 = max1\n        closest4 = min2\n\
    \    } else {\n        closest3 = min1\n        closest4 = max2\n    }\n    var\
    \ closest5 = min1\n    var closest6 = min2\n    if max1 < min4 {\n        closest5\
    \ = max1\n        closest6 = min2\n    } else {\n        closest5 = min1\n   \
    \     closest6 = max2\n    }\n    var closest7 = min1\n    var closest8 = min2\n\
    \    if max1 < min5 {\n        closest7 = max1\n        closest8 = min2\n    }\
    \ else {\n        closest7 = min1\n        closest8 = max2\n    }\n    var closest9\
    \ = min1\n    var closest10 = min2\n    if max1 < min6 {\n        closest9 = max1\n\
    \        closest10 = min2\n    } else {\n        closest9 = min1\n        closest10\
    \ = max2\n    }\n    var closest11 = min1\n    var closest12 = min2\n    if max1\
    \ < min7 {\n        closest11 = max1\n        closest12 = min2\n    } else {\n\
    \        closest11 = min1\n        closest12 = max2\n    }\n    var closest13\
    \ = min1\n    var closest14 = min2\n    if max1 < min8 {\n        closest13 =\
    \ max1\n        closest14 = min2\n    } else {\n        closest13 = min1\n   \
    \     closest14 = max2\n    }\n    var closest15 = min1\n    var closest16 = min2\n\
    \    if max1 < min9 {\n        closest15 = max1\n        closest16 = min2\n  \
    \  } else {\n        closest15 = min1\n        closest16 = max2\n    }\n    var\
    \ closest17 = min1\n    var closest18 = min2\n    if max1 < min10 {\n        closest17\
    \ = max1\n        closest18 = min2\n    } else {\n        closest17 = min1\n \
    \       closest18 = max2\n    }\n    var closest19 = min1\n    var closest20 =\
    \ min2\n    if max1 < min11 {\n        ", "    let min1 = min(numbers)\n    let\
    \ max1 = max(numbers)\n    let min2 = min(min1, max1)\n    let max2 = max(min1,\
    \ max1)\n    return (min2, max2)", "    guard numbers.count >= 2 else {\n    \
    \    return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest =\
    \ numbers[0]\n    for number in numbers {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   guard numbers.count >= 2 else { return (numbers[0], numbers[0]) }\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)", "    let min = min(numbers)\n    let max = max(numbers)\n\
    \    return (min, max)", "    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count\
    \ < 2 {\n        return (sortedNumbers[0], sortedNumbers[0])\n    }\n    if sortedNumbers.count\
    \ == 2 {\n        return (sortedNumbers[0], sortedNumbers[1])\n    }\n    if sortedNumbers.count\
    \ == 3 {\n        let closest1 = sortedNumbers[0]\n        let closest2 = sortedNumbers[1]\n\
    \        if closest1 < closest2 {\n            return (closest1, closest2)\n \
    \       } else {\n            return (closest2, closest1)\n        }\n    }\n\
    \    if sortedNumbers.count == 4 {\n        let closest1 = sortedNumbers[0]\n\
    \        let closest2 = sortedNumbers[1]\n        let closest3 = sortedNumbers[2]\n\
    \        if closest1 < closest2 {\n            if closest1 < closest3 {\n    \
    \            return (closest1, closest2)\n            } else {\n             \
    \   return (closest1, closest3)\n            }\n        } else {\n           \
    \ if closest2 < closest3 {\n                return (closest2, closest3)\n    \
    \        } else {\n                return (closest2, closest1)\n            }\n\
    \        }\n    }\n    if sortedNumbers.count == 5 {\n        let closest1 = sortedNumbers[0]\n\
    \        let closest2 = sortedNumbers[1]\n        let closest3 = sortedNumbers[2]\n\
    \        let closest4 = sortedNumbers[3]\n        if closest1 < closest2 {\n \
    \           if closest1 < closest3 {\n                if closest1 < closest4 {\n\
    \                    return (closest1, closest2)\n                } else {\n \
    \                   return (closest1, closest4)\n                }\n         \
    \   } else {\n                if closest2 < closest4 {\n                    return\
    \ (closest2, closest4)\n                } else {\n                    return (closest2,\
    \ closest3)\n                }\n            }\n        } else {\n            if\
    \ closest2 < closest3 {\n                if closest2 < closest4 {\n          \
    \          return (closest2, closest3)\n                } else {\n           \
    \         return (closest2, closest4)\n                }\n            } else {\n\
    \                if closest3 < closest4 {\n                    return (closest3,\
    \ closest4)\n                } else {\n                    return (closest3, closest2)\n\
    \                }\n            }\n        }\n    }\n    if sortedNumbers.count\
    \ == 6 {\n        let closest1 = sortedNumbers[0]\n        let closest2 = sortedNumbers[1]\n\
    \        let closest3 = sortedNumbers[2]\n        let closest4 = sortedNumbers[3]\n\
    \        let closest5 = sortedNumbers[4]\n        if closest1 < closest2 {\n \
    \           if closest1 < closest3 {\n                if closest1 < closest4 {\n\
    \                    if closest1 < closest5 {\n                        return\
    \ (closest1, closest2)\n                    } else {\n                       \
    \ return (closest1, closest5)\n                    }\n                } else {\n\
    \                    if closest2 < closest5 {\n                        return\
    \ (closest2, closest5)\n                    } else {\n                       \
    \ return (closest2, closest3)\n                    }\n                }\n    \
    \        } else {\n                if closest2 < closest3 {\n                \
    \    if closest2 < closest4 {\n                        if closest2 < closest5\
    \ {\n                            return (closest2, closest3)\n               \
    \         } else {\n                            return (closest2, closest5)\n\
    \                        }\n                    } else {\n                   \
    \     if closest3 < closest5 {\n                            return (closest3, ",
  "    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)", "    let min1 = numbers.min()\n\
    \    let max1 = numbers.max()\n    let min2 = numbers.min()\n    let max2 = numbers.max()\n\
    \    if min1 == max1 {\n        return (min1, min2)\n    }\n    if min2 == max2\
    \ {\n        return (min2, min1)\n    }\n    if min1 < min2 {\n        return\
    \ (min1, max2)\n    }\n    return (min2, max1)", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let smallest\
    \ = numbers[0]\n    let largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n \
    \   }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count > 1 else {\n        return (0.0,0.0)\n \
    \   }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)", "    guard numbers.count >= 2\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 3 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 4 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 5 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 6 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 7 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 8 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 9 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 10 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 11\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 12 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 13 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 14 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 15 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 16 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 17 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 18 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 19 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 20\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 21 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 22 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 23 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 24 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 25 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 26 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 27 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 28 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 29\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 30 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 31 else { return\
    \ (numbers[0], numbers[0]) }\n    guard ", "    let smallest = min(numbers)\n\
    \    let largest = max(numbers)\n    return (smallest, largest)", "    let min:\
    \ Double = numbers.min()\n    let max: Double = numbers.max()\n    let mid: Double\
    \ = (min + max) / 2\n    return (mid, numbers.firstIndex(of: mid))", "    let\
    \ smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n   \
    \         largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let min = min(numbers)\n    let max = max(numbers)\n    return (min, max)",
  "    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count >= 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0]) }\n\n\
    \    let smallest = numbers[0]\n    let largest = numbers[0]\n\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     } else if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n    }\n\n    return (smallest, largest)", "    let smallest = numbers[0]\n\
    \    let largest = numbers[0]\n    for i in 1..<numbers.count {\n        let current\
    \ = numbers[i]\n        if current < smallest {\n            smallest = current\n\
    \        } else if current > largest {\n            largest = current\n      \
    \  }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    let smallest = numbers[0]\n    let largest\
    \ = numbers[0]\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number\n        } else if number > largest {\n       \
    \     largest = number\n        }\n    }\n    return (smallest, largest)", " \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)", "    var smallest = numbers[0]\n\
    \    var largest = numbers[0]\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return (smallest,\
    \ largest)", "    guard numbers.count > 2 else {\n        return (0.0,0.0)\n \
    \   }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    guard\
    \ numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    for number in numbers {\n  \
    \      if number < smallest {\n            smallest = number\n        }\n    \
    \    if number > largest {\n            largest = number\n        }\n    }\n \
    \   return (smallest, largest)", "    guard numbers.count >= 2 else {\n      \
    \  return (0.0,0.0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)",
  "    let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let sortedNumbers = numbers.sorted()\n    var smallestDifference\
    \ = Double.greatestFiniteMagnitude\n    var smallestDifferenceIndex = -1\n   \
    \ var largestDifference = Double.greatestFiniteMagnitude\n    var largestDifferenceIndex\
    \ = -1\n    for i in 0..<numbers.count {\n        let difference = abs(numbers[i]\
    \ - sortedNumbers[i])\n        if difference < smallestDifference {\n        \
    \    smallestDifference = difference\n            smallestDifferenceIndex = i\n\
    \        }\n        if difference > largestDifference {\n            largestDifference\
    \ = difference\n            largestDifferenceIndex = i\n        }\n    }\n   \
    \ return (sortedNumbers[smallestDifferenceIndex], sortedNumbers[largestDifferenceIndex])",
  "    let smallest = min(numbers)\n    let largest = max(numbers)\n    return (smallest,\
    \ largest)", "    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)", "    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        } else if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)", "    let smallest\
    \ = min(numbers)\n    let largest = max(numbers)\n    return (smallest, largest)"]
stop_tokens:
- "\n}"
