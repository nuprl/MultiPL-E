name: HumanEval_126_is_sorted
language: swift
prompt: "\n/// Given a list of numbers, return whether or not they are sorted\n///\
  \ in ascending order. If list has more than 1 duplicate of the same\n/// number,\
  \ return False. Assume no negative numbers and only integers.\n/// Examples\n///\
  \ >>> is_sorted(lst: [5])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5])\n///\
  \ true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(lst:\
  \ [1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6, 7])\n\
  /// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(lst: [1, 2, 2, 2, 3, 4])\n///\
  \ false\nfunc is_sorted(lst: [Int]) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
  \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
  assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2,\
  \ 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\n\
  assert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\n\
  assert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3,\
  \ 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
completions: ["    var last: Int = 0\n    for num in lst {\n        if num != last\
    \ {\n            return false\n        }\n        last = num\n    }\n    return\
    \ true", "    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[1..<lst.count])", "    if lst.count ==\
    \ 0 {\n        return true\n    }\n    if lst.count > 1 {\n        return false\n\
    \    }\n    if lst.contains(&lst[0]) {\n        return false\n    }\n    return\
    \ true", "    if lst.count > 1 {\n        return false\n    }\n    if lst.count\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst: lst.suffix(from: 1))", "    if lst.count\
    \ == 0 {\n        return true\n    }\n    if lst.count == 1 {\n        return\
    \ true\n    }\n    if lst.count > 1 {\n        var seen = [Int]()\n        for\
    \ v in lst {\n            if !seen.contains(v) {\n                seen.append(v)\n\
    \            }\n        }\n        return false\n    }\n    return true", "  \
    \  if lst.count > 1 {\n        return false\n    }\n    if lst.count == 1 {\n\
    \        return true\n    }\n    if lst[0] != lst[1] {\n        return false\n\
    \    }\n    return is_sorted(lst: lst.suffix(2))", "    if lst.count > 1 {\n \
    \       return false\n    }\n    if lst.count == 1 {\n        return true\n  \
    \  }\n    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[1..<lst.count])",
  "    if lst.count > 1 {\n        return false\n    }\n    if lst.count == 1 {\n\
    \        return true\n    }\n    if lst[0] != lst[1] {\n        return false\n\
    \    }\n    return is_sorted(lst: lst.suffix(from: 1))", "    var seen = [Int]()\n\
    \    for num in lst {\n        if seen[num] == nil {\n            seen[num] =\
    \ true\n            return true\n        }\n    }\n    return false", "    if\
    \ lst.count == 0 {\n        return true\n    }\n    if lst.count == 1 {\n    \
    \    return true\n    }\n    if lst.count > 1 {\n        let first = lst[0]\n\
    \        var seen = Set<Int>()\n        for v in lst {\n            if seen.contains(v)\
    \ {\n                return false\n            }\n            seen.insert(v)\n\
    \        }\n        return true\n    }\n    return false", "    if lst.count >\
    \ 1 {\n        return false\n    }\n    if lst.count == 1 {\n        return true\n\
    \    }\n    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst[1..<lst.count])",
  "\tlet set = Set(lst)\n\treturn set.count == lst.count && set.sorted() == lst",
  "    if lst.count > 1 {\n        return false\n    }\n    if lst.count == 1 {\n\
    \        return true\n    }\n    if lst[0] != lst[1] {\n        return false\n\
    \    }\n    return is_sorted(lst[1..<lst.count])", "    if lst.count > 1 {\n \
    \       return false\n    }\n    if lst.count == 1 {\n        return true\n  \
    \  }\n    if lst[0] != lst[1] {\n        return false\n    }\n    return is_sorted(lst:\
    \ lst[1..<lst.count])", "    var seen = Set<Int>()\n    for num in lst {\n   \
    \     if seen.contains(num) {\n            return false\n        }\n        seen.insert(num)\n\
    \    }\n    return true", "    let set = Set(lst)\n    return set.count == lst.count\
    \ && set.sorted() == true", "    if lst.count > 1 {\n        return false\n  \
    \  }\n    if lst.count == 1 {\n        return true\n    }\n    if lst[0] != lst[1]\
    \ {\n        return false\n    }\n    return is_sorted(lst: lst.suffix(2))", " \
    \   if lst.count == 0 {\n        return true\n    }\n    var last: Int = 0\n \
    \   var lastCount: Int = 0\n    for num in lst {\n        if num == last {\n \
    \           lastCount++\n        } else {\n            last = num\n          \
    \  lastCount = 1\n        }\n    }\n    return lastCount <= 1", "    if lst.count\
    \ == 0 {\n        return true\n    }\n    var prev: Int = 0\n    var cur: Int\
    \ = 0\n    for cur in lst {\n        if prev > cur {\n            return false\n\
    \        }\n        prev = cur\n    }\n    return true", "    if lst.count ==\
    \ 0 {\n        return true\n    }\n    if lst.count == 1 {\n        return true\n\
    \    }\n    if lst.count > 1 {\n        var seen = [Int]()\n        for num in\
    \ lst {\n            if !seen.contains(num) {\n                seen.append(num)\n\
    \            } else {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    return false"]
stop_tokens:
- "\n}"
