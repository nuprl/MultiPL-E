language: swift
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for i in 0..<game.count {\n        guesses.append(guess[i])\n\
    \        scores.append(game[i])\n    }\n    \n    for i in 0..<game.count {\n\
    \        if guesses[i] == scores[i] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(guesses[i] - scores[i]))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore -= 1\n            guessScore -=\
    \ 1\n            gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff\
    \ += abs(gameScore - guess[guessIndex])\n            guessScoreDiff += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    if gameIndex == game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        result[guessScoreDiffIndex] = guessScore\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f1b0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f1add1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f1add1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f1add113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f1add0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9f1abd07ec <unavailable> + 186348

    6    tmptjs2u1h0                        0x000055ae7dac4e78 <unavailable> + 7800

    7    tmptjs2u1h0                        0x000055ae7dac4593 <unavailable> + 5523

    8    libc.so.6                          0x00002b9f1b2c6460 __libc_start_main +
    245

    9    tmptjs2u1h0                        0x000055ae7dac4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            guessScore += abs(game[gameIndex] - guess[guessIndex])\n        \
    \    gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff +=\
    \ gameScore\n            guessScoreDiff += guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result[gameScoreDiffIndex] = gameScore\n        result[guessScoreDiffIndex]\
    \ = guessScore\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002accc22adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc1fa4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc1fa4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc1fa413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc1fa3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002accc1da37ec <unavailable> + 186348

    6    tmp4uy4cvql                        0x0000559a3842be78 <unavailable> + 7800

    7    tmp4uy4cvql                        0x0000559a3842b593 <unavailable> + 5523

    8    libc.so.6                          0x00002accc2499460 __libc_start_main +
    245

    9    tmp4uy4cvql                        0x0000559a3842b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var gameLen = game.count\n    var guessLen = guess.count\n    while i\
    \ < gameLen && j < guessLen {\n        if game[i] == guess[j] {\n            result[k]\
    \ = 0\n            i += 1\n            j += 1\n            k += 1\n        } else\
    \ if game[i] > guess[j] {\n            result[k] = game[i] - guess[j]\n      \
    \      i += 1\n        } else {\n            result[k] = guess[j] - game[i]\n\
    \            j += 1\n        }\n    }\n    if i == gameLen {\n        result[k]\
    \ = guess[j] - game[i]\n        j += 1\n    }\n    if j == guessLen {\n      \
    \  result[k] = game[i] - guess[j]\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c0a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963bd9d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963bd9d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963bd9d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963bd9cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963bb9c7ec <unavailable> + 186348

    6    tmp61j4umsc                        0x0000561abcd25c7d <unavailable> + 7293

    7    tmp61j4umsc                        0x0000561abcd254b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b963c292460 __libc_start_main +
    245

    9    tmp61j4umsc                        0x0000561abcd25129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game.reduce(0){$0 + $1}\n\
    \    var guessScore = guess.reduce(0){$0 + $1}\n    var diffScore = gameScore\
    \ - guessScore\n    var diffScoreAbs = abs(diffScore)\n    for index in 0..<guess.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(diffScoreAbs)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9ibx9rp9/tmp9ibx9rp9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af977d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af977a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af977a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af977a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ibx9rp9                        0x0000560b142278a4 <unavailable> + 6308

    5    libc.so.6                          0x00002af977f1b460 __libc_start_main +
    245

    6    tmp9ibx9rp9                        0x0000560b14227419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScores = [Int]()\n    var guessesScores = [Int]()\n \
    \   var gameScore = 0\n    var guessesScore = 0\n    var gameScoreIndex = 0\n\
    \    var guessesScoreIndex = 0\n    var gameScoreIndex2 = 0\n    var guessesScoreIndex2\
    \ = 0\n    var gameScoreIndex3 = 0\n    var guessesScoreIndex3 = 0\n    var gameScoreIndex4\
    \ = 0\n    var guessesScoreIndex4 = 0\n    var gameScoreIndex5 = 0\n    var guessesScoreIndex5\
    \ = 0\n    var gameScoreIndex6 = 0\n    var guessesScoreIndex6 = 0\n    var gameScoreIndex7\
    \ = 0\n    var guessesScoreIndex7 = 0\n    var gameScoreIndex8 = 0\n    var guessesScoreIndex8\
    \ = 0\n    var gameScoreIndex9 = 0\n    var guessesScoreIndex9 = 0\n    var gameScoreIndex10\
    \ = 0\n    var guessesScoreIndex10 = 0\n    var gameScoreIndex11 = 0\n    var\
    \ guessesScoreIndex11 = 0\n    var gameScoreIndex12 = 0\n    var guessesScoreIndex12\
    \ = 0\n    var gameScoreIndex13 = 0\n    var guessesScoreIndex13 = 0\n    var\
    \ gameScoreIndex14 = 0\n    var guessesScoreIndex14 = 0\n    var gameScoreIndex15\
    \ = 0\n    var guessesScoreIndex15 = 0\n    var gameScoreIndex16 = 0\n    var\
    \ guessesScoreIndex16 = 0\n    var gameScoreIndex17 = 0\n    var guessesScoreIndex17\
    \ = 0\n    var gameScoreIndex18 = 0\n    var guessesScoreIndex18 = 0\n    var\
    \ gameScoreIndex19 = 0\n    var guessesScoreIndex19 = 0\n    var gameScoreIndex20\
    \ = 0\n    var guessesScoreIndex20 = 0\n    var gameScoreIndex21 = 0\n    var\
    \ guessesScoreIndex21 = 0\n    var gameScoreIndex22 = 0\n    var guessesScoreIndex22\
    \ = 0\n    var gameScoreIndex23 = 0\n    var guessesScoreIndex23 = 0\n    var\
    \ gameScoreIndex24 = 0\n    var guessesScoreIndex24 = 0\n    var gameScoreIndex25\
    \ = 0\n    var guessesScoreIndex25 = 0\n    var gameScoreIndex26 = 0\n    var\
    \ guessesScoreIndex26 = 0\n    var gameScoreIndex27 = 0\n    var guessesScoreIndex27\
    \ = 0\n    var gameScoreIndex28 = 0\n    var guessesScoreIndex28 = 0\n    var\
    \ gameScoreIndex29 = 0\n    var guessesScoreIndex29 = 0\n    var gameScoreIndex30\
    \ = 0\n    var guessesScoreIndex30 = 0\n    var gameScoreIndex31 = 0\n    var\
    \ guessesScoreIndex31 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2ryskawn.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp2ryskawn.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:18:9:\
    \ warning: initialization of variable 'gameScores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScores = [Int]()\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:19:9: warning: initialization of variable 'guessesScores'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScores = [Int]()\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:20:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:21:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:22:9:\
    \ warning: initialization of variable 'gameScoreIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:23:9: warning: initialization\
    \ of variable 'guessesScoreIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessesScoreIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:24:9: warning: initialization of variable 'gameScoreIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameScoreIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/"
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\n\
    \            gameScoreDiffIndex += 1\n        } else {\n            gameScore\
    \ += abs(game[gameIndex] - guess[guessIndex])\n            guessScore += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            gameIndex += 1\n            guessIndex +=\
    \ 1\n            gameScoreDiff += game[gameIndex]\n            guessScoreDiff\
    \ += guess[guessIndex]\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    if gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        gameScoreDiffIndex += 1\n    }\n    if guessIndex < guess.count\
    \ {\n        result[guessScoreDiffIndex] = guessScore\n        guessScoreDiffIndex\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b52512d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5250fce561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5250fce286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5250fce13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5250fcdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5250dcd7ec <unavailable> + 186348

    6    tmpbnnhaatu                        0x000055b1f4507eae <unavailable> + 7854

    7    tmpbnnhaatu                        0x000055b1f4507593 <unavailable> + 5523

    8    libc.so.6                          0x00002b52514c3460 __libc_start_main +
    245

    9    tmpbnnhaatu                        0x000055b1f4507209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    while\
    \ gameIndex < game.count {\n        result.append(0)\n        gameIndex += 1\n\
    \    }\n    while guessIndex < guess.count {\n        result.append(0)\n     \
    \   guessIndex += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdwoxtr6i/tmpdwoxtr6i.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a8000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a7cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a7cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a7cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdwoxtr6i                        0x000055c6af15f654 <unavailable> + 5716

    5    libc.so.6                          0x00002b72a81ec460 __libc_start_main +
    245

    6    tmpdwoxtr6i                        0x000055c6af15f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
