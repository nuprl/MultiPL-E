language: swift
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for i in 0..<game.count {\n        guesses.append(guess[i])\n\
    \        scores.append(game[i])\n    }\n    \n    for i in 0..<game.count {\n\
    \        if guesses[i] == scores[i] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(guesses[i] - scores[i]))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore -= 1\n            guessScore -=\
    \ 1\n            gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff\
    \ += abs(gameScore - guess[guessIndex])\n            guessScoreDiff += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    if gameIndex == game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        result[guessScoreDiffIndex] = guessScore\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f1b0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f1add1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9f1add1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9f1add113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9f1add0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9f1abd07ec <unavailable> + 186348

    6    tmptjs2u1h0                        0x000055ae7dac4e78 <unavailable> + 7800

    7    tmptjs2u1h0                        0x000055ae7dac4593 <unavailable> + 5523

    8    libc.so.6                          0x00002b9f1b2c6460 __libc_start_main +
    245

    9    tmptjs2u1h0                        0x000055ae7dac4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            guessScore += abs(game[gameIndex] - guess[guessIndex])\n        \
    \    gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff +=\
    \ gameScore\n            guessScoreDiff += guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result[gameScoreDiffIndex] = gameScore\n        result[guessScoreDiffIndex]\
    \ = guessScore\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002accc22adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc1fa4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002accc1fa4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002accc1fa413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002accc1fa3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002accc1da37ec <unavailable> + 186348

    6    tmp4uy4cvql                        0x0000559a3842be78 <unavailable> + 7800

    7    tmp4uy4cvql                        0x0000559a3842b593 <unavailable> + 5523

    8    libc.so.6                          0x00002accc2499460 __libc_start_main +
    245

    9    tmp4uy4cvql                        0x0000559a3842b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var gameLen = game.count\n    var guessLen = guess.count\n    while i\
    \ < gameLen && j < guessLen {\n        if game[i] == guess[j] {\n            result[k]\
    \ = 0\n            i += 1\n            j += 1\n            k += 1\n        } else\
    \ if game[i] > guess[j] {\n            result[k] = game[i] - guess[j]\n      \
    \      i += 1\n        } else {\n            result[k] = guess[j] - game[i]\n\
    \            j += 1\n        }\n    }\n    if i == gameLen {\n        result[k]\
    \ = guess[j] - game[i]\n        j += 1\n    }\n    if j == guessLen {\n      \
    \  result[k] = game[i] - guess[j]\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c0a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963bd9d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963bd9d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963bd9d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963bd9cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963bb9c7ec <unavailable> + 186348

    6    tmp61j4umsc                        0x0000561abcd25c7d <unavailable> + 7293

    7    tmp61j4umsc                        0x0000561abcd254b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b963c292460 __libc_start_main +
    245

    9    tmp61j4umsc                        0x0000561abcd25129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = game.reduce(0){$0 + $1}\n\
    \    var guessScore = guess.reduce(0){$0 + $1}\n    var diffScore = gameScore\
    \ - guessScore\n    var diffScoreAbs = abs(diffScore)\n    for index in 0..<guess.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(diffScoreAbs)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9ibx9rp9/tmp9ibx9rp9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af977d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af977a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af977a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af977a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ibx9rp9                        0x0000560b142278a4 <unavailable> + 6308

    5    libc.so.6                          0x00002af977f1b460 __libc_start_main +
    245

    6    tmp9ibx9rp9                        0x0000560b14227419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameScores = [Int]()\n    var guessesScores = [Int]()\n \
    \   var gameScore = 0\n    var guessesScore = 0\n    var gameScoreIndex = 0\n\
    \    var guessesScoreIndex = 0\n    var gameScoreIndex2 = 0\n    var guessesScoreIndex2\
    \ = 0\n    var gameScoreIndex3 = 0\n    var guessesScoreIndex3 = 0\n    var gameScoreIndex4\
    \ = 0\n    var guessesScoreIndex4 = 0\n    var gameScoreIndex5 = 0\n    var guessesScoreIndex5\
    \ = 0\n    var gameScoreIndex6 = 0\n    var guessesScoreIndex6 = 0\n    var gameScoreIndex7\
    \ = 0\n    var guessesScoreIndex7 = 0\n    var gameScoreIndex8 = 0\n    var guessesScoreIndex8\
    \ = 0\n    var gameScoreIndex9 = 0\n    var guessesScoreIndex9 = 0\n    var gameScoreIndex10\
    \ = 0\n    var guessesScoreIndex10 = 0\n    var gameScoreIndex11 = 0\n    var\
    \ guessesScoreIndex11 = 0\n    var gameScoreIndex12 = 0\n    var guessesScoreIndex12\
    \ = 0\n    var gameScoreIndex13 = 0\n    var guessesScoreIndex13 = 0\n    var\
    \ gameScoreIndex14 = 0\n    var guessesScoreIndex14 = 0\n    var gameScoreIndex15\
    \ = 0\n    var guessesScoreIndex15 = 0\n    var gameScoreIndex16 = 0\n    var\
    \ guessesScoreIndex16 = 0\n    var gameScoreIndex17 = 0\n    var guessesScoreIndex17\
    \ = 0\n    var gameScoreIndex18 = 0\n    var guessesScoreIndex18 = 0\n    var\
    \ gameScoreIndex19 = 0\n    var guessesScoreIndex19 = 0\n    var gameScoreIndex20\
    \ = 0\n    var guessesScoreIndex20 = 0\n    var gameScoreIndex21 = 0\n    var\
    \ guessesScoreIndex21 = 0\n    var gameScoreIndex22 = 0\n    var guessesScoreIndex22\
    \ = 0\n    var gameScoreIndex23 = 0\n    var guessesScoreIndex23 = 0\n    var\
    \ gameScoreIndex24 = 0\n    var guessesScoreIndex24 = 0\n    var gameScoreIndex25\
    \ = 0\n    var guessesScoreIndex25 = 0\n    var gameScoreIndex26 = 0\n    var\
    \ guessesScoreIndex26 = 0\n    var gameScoreIndex27 = 0\n    var guessesScoreIndex27\
    \ = 0\n    var gameScoreIndex28 = 0\n    var guessesScoreIndex28 = 0\n    var\
    \ gameScoreIndex29 = 0\n    var guessesScoreIndex29 = 0\n    var gameScoreIndex30\
    \ = 0\n    var guessesScoreIndex30 = 0\n    var gameScoreIndex31 = 0\n    var\
    \ guessesScoreIndex31 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2ryskawn.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp2ryskawn.swift:16:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:17:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:18:9:\
    \ warning: initialization of variable 'gameScores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScores = [Int]()\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:19:9: warning: initialization of variable 'guessesScores'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScores = [Int]()\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:20:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:21:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:22:9:\
    \ warning: initialization of variable 'gameScoreIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp2ryskawn.swift:23:9: warning: initialization\
    \ of variable 'guessesScoreIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessesScoreIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp2ryskawn.swift:24:9: warning: initialization of variable 'gameScoreIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameScoreIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/"
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\n\
    \            gameScoreDiffIndex += 1\n        } else {\n            gameScore\
    \ += abs(game[gameIndex] - guess[guessIndex])\n            guessScore += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            gameIndex += 1\n            guessIndex +=\
    \ 1\n            gameScoreDiff += game[gameIndex]\n            guessScoreDiff\
    \ += guess[guessIndex]\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    if gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        gameScoreDiffIndex += 1\n    }\n    if guessIndex < guess.count\
    \ {\n        result[guessScoreDiffIndex] = guessScore\n        guessScoreDiffIndex\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b52512d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5250fce561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5250fce286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5250fce13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5250fcdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5250dcd7ec <unavailable> + 186348

    6    tmpbnnhaatu                        0x000055b1f4507eae <unavailable> + 7854

    7    tmpbnnhaatu                        0x000055b1f4507593 <unavailable> + 5523

    8    libc.so.6                          0x00002b52514c3460 __libc_start_main +
    245

    9    tmpbnnhaatu                        0x000055b1f4507209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    while\
    \ gameIndex < game.count {\n        result.append(0)\n        gameIndex += 1\n\
    \    }\n    while guessIndex < guess.count {\n        result.append(0)\n     \
    \   guessIndex += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdwoxtr6i/tmpdwoxtr6i.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a8000c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a7cf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a7cf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a7cf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdwoxtr6i                        0x000055c6af15f654 <unavailable> + 5716

    5    libc.so.6                          0x00002b72a81ec460 __libc_start_main +
    245

    6    tmpdwoxtr6i                        0x000055c6af15f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824999
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n            guessIndex += 1\n        }\n    }\n \
    \   if gameIndex == game.count {\n        result.append(0)\n    } else {\n   \
    \     result.append(abs(guessScore - gameScore))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp7ld1ic7t/tmp7ld1ic7t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7136e66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7136b5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7136b5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7136b5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ld1ic7t                        0x0000561bdc47f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7137052460 __libc_start_main +
    245

    6    tmp7ld1ic7t                        0x0000561bdc47f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    while i < game.count {\n        if game[i] == guess[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpozof40g2/tmpozof40g2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb9ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb97bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb97bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb97ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozof40g2                        0x000056439eaf56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2eb9cb0460 __libc_start_main +
    245

    6    tmpozof40g2                        0x000056439eaf5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp158r0bud.swift:45:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp158r0bud.swift:19:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp158r0bud.swift:46:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp158r0bud.swift:20:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp158r0bud.swift:47:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp158r0bud.swift:21:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp158r0bud.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp158r0bud.swift:22:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp158r0bud.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp158r0bud.swift:23:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp158r0bud.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp158r0bud.swift:24:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp158r0bud.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp158r0bud.swift:25:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp158r0bud.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp158r0bud.swift:26:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp158r0bud.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp158r0bud.swift:27:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp158r0bud.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp158r0bud.swift:28:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp158r0bud.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp158r0bud.swift:29:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp158r0bud.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp158r"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpozof40g2/tmpozof40g2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb9ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb97bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb97bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb97ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozof40g2                        0x000056439eaf56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2eb9cb0460 __libc_start_main +
    245

    6    tmpozof40g2                        0x000056439eaf5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScore\
    \ = 0\n    var guessScore = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff\
    \ = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex = 0\n    var\
    \ gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n    var gameScoreDiffIndex3\
    \ = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4 = 0\n   \
    \ var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n    var guessScoreDiffIndex5\
    \ = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6 = 0\n   \
    \ var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n    var gameScoreDiffIndex8\
    \ = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9 = 0\n   \
    \ var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n    var guessScoreDiffIndex10\
    \ = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11 = 0\n \
    \   var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n    var gameScoreDiffIndex13\
    \ = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14 = 0\n \
    \   var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n    var guessScoreDiffIndex15\
    \ = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16 = 0\n \
    \   var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n    var gameScoreDiffIndex18\
    \ = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19 = 0\n \
    \   var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n    var guessScoreDiffIndex20\
    \ = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21 = 0\n \
    \   var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n    var gameScoreDiffIndex23\
    \ = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24 = 0\n \
    \   var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n    var guessScoreDiffIndex25\
    \ = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26 = 0\n \
    \   var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n    var gameScoreDiffIndex28\
    \ = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29 = 0\n \
    \   var guessScoreDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpf7y721em.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScoreDiff\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp45k4svo2.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980043
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ && index < guess.count {\n        if game[index] == guess[index] {\n       \
    \     result.append(0)\n        } else {\n            result.append(abs(game[index]\
    \ - guess[index]))\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[gameIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n        gameIndex\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ada32af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada327ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ada327ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ada327ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ada327ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ada325eb7ec <unavailable> + 186348

    6    tmp9zfc_2eh                        0x000055ea2807fc74 <unavailable> + 7284

    7    tmp9zfc_2eh                        0x000055ea2807f4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ada32ce1460 __libc_start_main +
    245

    9    tmp9zfc_2eh                        0x000055ea2807f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    while gameIndex < game.count && guessIndex\
    \ < guess.count {\n        if game[gameIndex] == guess[guessIndex] {\n       \
    \     gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            gameScoreDiff += abs(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            guessScoreDiff += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            guessIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(gameScore\
    \ - guessScore))\n    }\n    if guessIndex == guess.count {\n        result.append(0)\n\
    \    } else {\n        result.append(abs(guessScore - gameScore))\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdxsvwa0e/tmpdxsvwa0e.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c1c61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c1958b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c1958988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c19577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdxsvwa0e                        0x00005612dc0296a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ac8c1e4d460 __libc_start_main +
    245

    6    tmpdxsvwa0e                        0x00005612dc029219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    for i in 0..<guess.count {\n     \
    \   let difference = abs(guess[i] - game[i])\n        result.append(difference)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpe05i1vk5/tmpe05i1vk5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c6507fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c64d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c64d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c64d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe05i1vk5                        0x000055edf05487d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b7c6526b460 __libc_start_main +
    245

    6    tmpe05i1vk5                        0x000055edf0548349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            if gameScore > guessScore {\n          \
    \      gameScoreDiff = gameScore - guessScore\n                gameScore = guessScore\n\
    \                gameScoreDiffIndex += 1\n            } else {\n             \
    \   guessScoreDiff = guessScore - gameScore\n                guessScore = gameScore\n\
    \                guessScoreDiffIndex += 1\n            }\n            result[gameScoreDiffIndex]\
    \ = gameScoreDiff\n            result[guessScoreDiffIndex] = guessScoreDiff\n\
    \            gameScore = 0\n            guessScore = 0\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e535cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e532c2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9e532c2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9e532c213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9e532c1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9e530c17ec <unavailable> + 186348

    6    tmp3fpfde13                        0x00005620183aad8c <unavailable> + 7564

    7    tmp3fpfde13                        0x00005620183aa4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b9e537b7460 __libc_start_main +
    245

    9    tmp3fpfde13                        0x00005620183aa129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\n\
    \            result[guessScoreDiffIndex] = guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        } else {\n            if\
    \ gameScore > guessScore {\n                gameScore = gameScore - guess[guessIndex]\n\
    \                gameScoreDiff = gameScore\n                gameScoreDiffIndex\
    \ = guessIndex\n            } else {\n                guessScore = guessScore\
    \ - game[gameIndex]\n                guessScoreDiff = guessScore\n           \
    \     guessScoreDiffIndex = gameIndex\n            }\n        }\n    }\n    if\
    \ gameIndex < game.count {\n        result[gameScoreDiffIndex] = gameScore - game[gameIndex]\n\
    \    }\n    if guessIndex < guess.count {\n        result[guessScoreDiffIndex]\
    \ = guessScore - guess[guessIndex]\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f256cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f2263561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12f2263286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12f226313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12f2262bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b12f20627ec <unavailable> + 186348

    6    tmp5shpsvni                        0x00005597f8daddce <unavailable> + 7630

    7    tmp5shpsvni                        0x00005597f8dad4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b12f2758460 __libc_start_main +
    245

    9    tmp5shpsvni                        0x00005597f8dad129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    \n    while gameIndex < game.count && guessIndex < guess.count {\n\
    \        if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n\
    \            guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n\
    \            guessScore += abs(game[gameIndex] - guess[guessIndex])\n        \
    \    gameIndex += 1\n            guessIndex += 1\n            gameScoreDiff +=\
    \ abs(game[gameIndex] - guess[guessIndex])\n            guessScoreDiff += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    \n    if gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        result[guessScoreDiffIndex] = guessScore\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af76edccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af76eac3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af76eac3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af76eac313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af76eac2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af76e8c27ec <unavailable> + 186348

    6    tmphfnh3ac0                        0x000055f2142b1e78 <unavailable> + 7800

    7    tmphfnh3ac0                        0x000055f2142b1593 <unavailable> + 5523

    8    libc.so.6                          0x00002af76efb8460 __libc_start_main +
    245

    9    tmphfnh3ac0                        0x000055f2142b1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var gameScore = 0\n    var gameGuess = 0\n    var gameScoreDiff\
    \ = 0\n    var gameGuessDiff = 0\n    var gameScoreDiff2 = 0\n    var gameGuessDiff2\
    \ = 0\n    var gameScoreDiff3 = 0\n    var gameGuessDiff3 = 0\n    var gameScoreDiff4\
    \ = 0\n    var gameGuessDiff4 = 0\n    var gameScoreDiff5 = 0\n    var gameGuessDiff5\
    \ = 0\n    var gameScoreDiff6 = 0\n    var gameGuessDiff6 = 0\n    var gameScoreDiff7\
    \ = 0\n    var gameGuessDiff7 = 0\n    var gameScoreDiff8 = 0\n    var gameGuessDiff8\
    \ = 0\n    var gameScoreDiff9 = 0\n    var gameGuessDiff9 = 0\n    var gameScoreDiff10\
    \ = 0\n    var gameGuessDiff10 = 0\n    var gameScoreDiff11 = 0\n    var gameGuessDiff11\
    \ = 0\n    var gameScoreDiff12 = 0\n    var gameGuessDiff12 = 0\n    var gameScoreDiff13\
    \ = 0\n    var gameGuessDiff13 = 0\n    var gameScoreDiff14 = 0\n    var gameGuessDiff14\
    \ = 0\n    var gameScoreDiff15 = 0\n    var gameGuessDiff15 = 0\n    var gameScoreDiff16\
    \ = 0\n    var gameGuessDiff16 = 0\n    var gameScoreDiff17 = 0\n    var gameGuessDiff17\
    \ = 0\n    var gameScoreDiff18 = 0\n    var gameGuessDiff18 = 0\n    var gameScoreDiff19\
    \ = 0\n    var gameGuessDiff19 = 0\n    var gameScoreDiff20 = 0\n    var gameGuessDiff20\
    \ = 0\n    var gameScoreDiff21 = 0\n    var gameGuessDiff21 = 0\n    var gameScoreDiff22\
    \ = 0\n    var gameGuessDiff22 = 0\n    var gameScoreDiff23 = 0\n    var gameGuessDiff23\
    \ = 0\n    var gameScoreDiff24 = 0\n    var gameGuessDiff24 = 0\n    var gameScoreDiff25\
    \ = 0\n    var gameGuessDiff25 = 0\n    var gameScoreDiff26 = 0\n    var gameGuessDiff26\
    \ = 0\n    var gameScoreDiff27 = 0\n    var gameGuessDiff27 = 0\n    var gameScoreDiff28\
    \ = 0\n    var gameGuessDiff28 = 0\n    var gameScoreDiff29 = 0\n    var gameGuessDiff29\
    \ = 0\n    var gameScoreDiff30 = 0\n    var gameGuessDiff30 = 0\n    var gameScoreDiff31\
    \ = 0\n    var gameGuessDiff31 = 0\n    var gameScoreDiff32 = 0\n    var gameGuessDiff32\
    \ = 0\n    var gameScoreDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpow6svccl.swift:85:9: error: type annotation missing in pattern\n\
    \    var gameScoreDiff\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameLength = 0\n\
    \    var guessLength = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff =\
    \ 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex = 0\n    var\
    \ gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n    var gameScoreDiffIndex3\
    \ = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4 = 0\n   \
    \ var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n    var guessScoreDiffIndex5\
    \ = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6 = 0\n   \
    \ var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n    var gameScoreDiffIndex8\
    \ = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9 = 0\n   \
    \ var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n    var guessScoreDiffIndex10\
    \ = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11 = 0\n \
    \   var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n    var gameScoreDiffIndex13\
    \ = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14 = 0\n \
    \   var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n    var guessScoreDiffIndex15\
    \ = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16 = 0\n \
    \   var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n    var gameScoreDiffIndex18\
    \ = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19 = 0\n \
    \   var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n    var guessScoreDiffIndex20\
    \ = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21 = 0\n \
    \   var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n    var gameScoreDiffIndex23\
    \ = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24 = 0\n \
    \   var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n    var guessScoreDiffIndex25\
    \ = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26 = 0\n \
    \   var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n    var gameScoreDiffIndex28\
    \ = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29 = 0\n \
    \   var guessScoreDiffIndex29 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdup_1ifw.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpdup_1ifw.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:16:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:17:9: warning: initialization of variable 'guessScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessScore = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:18:9:\
    \ warning: initialization of variable 'gameIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameIndex = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:19:9: warning: initialization of variable 'guessIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:20:9:\
    \ warning: initialization of variable 'gameLength' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameLength = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:21:9: warning: initialization of variable 'guessLength'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessLength = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:22:9:\
    \ warning: initialization of variable 'gameScoreDiff' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreDiff = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:23:9: warning: initialization\
    \ of variable 'guessScoreDiff' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessScoreDiff = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:24:9: warning: initialization of variable 'gameScoreDiffIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameSco"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = 0\n            gameIndex += 1\n            guessIndex += 1\n        } else\
    \ if game[gameIndex] > guess[guessIndex] {\n            result[result.count-1]\
    \ = game[gameIndex] - guess[guessIndex]\n            gameIndex += 1\n        }\
    \ else {\n            result[result.count-1] = guess[guessIndex] - game[gameIndex]\n\
    \            guessIndex += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc712dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc6e24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abfc6e24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abfc6e2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abfc6e23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abfc6c237ec <unavailable> + 186348

    6    tmpn9vi4y6f                        0x00005609d5420cba <unavailable> + 7354

    7    tmpn9vi4y6f                        0x00005609d54204b3 <unavailable> + 5299

    8    libc.so.6                          0x00002abfc7319460 __libc_start_main +
    245

    9    tmpn9vi4y6f                        0x00005609d5420129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var index = 0\n  \
    \  while index < game.count {\n        if game[index] == guess[index] {\n    \
    \        score += game[index]\n            result.append(score)\n            index++\n\
    \        } else {\n            score += abs(game[index] - guess[index])\n    \
    \        result.append(score)\n            index++\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpzmlhkryw.swift:22:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpzmlhkryw.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ difference = abs(guess[i] - game[i])\n        if difference == 0 {\n       \
    \     result.append(0)\n        } else {\n            result.append(difference)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] < guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n        }\n    }\n    if gameIndex == game.count\
    \ {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp8noxcqfp/tmp8noxcqfp.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f0189bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f01592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f01592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f015917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8noxcqfp                        0x000056354f6216a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b8f01a87460 __libc_start_main +
    245

    6    tmp8noxcqfp                        0x000056354f621219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12096cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac120663561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac120663286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac12066313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac120662bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac1204627ec <unavailable> + 186348

    6    tmpmkjrwc58                        0x000055d65b011c68 <unavailable> + 7272

    7    tmpmkjrwc58                        0x000055d65b0114b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ac120b58460 __libc_start_main +
    245

    9    tmpmkjrwc58                        0x000055d65b011129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba96228ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba961f81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba961f81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba961f8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba961f80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba961d807ec <unavailable> + 186348

    6    tmpccuqhtg5                        0x0000556baf521c68 <unavailable> + 7272

    7    tmpccuqhtg5                        0x0000556baf5214b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ba962476460 __libc_start_main +
    245

    9    tmpccuqhtg5                        0x0000556baf521129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        if gameScore ==\
    \ guessScore {\n            result.append(0)\n        } else {\n            result.append(abs(guessScore\
    \ - gameScore))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9d1ryyn8/tmp9d1ryyn8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1d4efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1d1e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1d1e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1d1e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d1ryyn8                        0x000055614bac0824 <unavailable> + 6180

    5    libc.so.6                          0x00002acf1d6db460 __libc_start_main +
    245

    6    tmp9d1ryyn8                        0x000055614bac0399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScore = 0\n  \
    \  var guessScore = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff = 0\n\
    \    var gameScoreDiffDiff = 0\n    var guessScoreDiffDiff = 0\n    var gameScoreDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiff =\
    \ 0\n    var guessScoreDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp946cj0un.swift:33:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp946cj0un.swift:31:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp946cj0un.swift:34:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiffDiff = 0\n\
    \        ^\n/tmp/tmp946cj0un.swift:32:9: note: 'guessScoreDiffDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmp946cj0un.swift:35:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp946cj0un.swift:31:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp946cj0un.swift:36:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiffDiff = 0\n\
    \        ^\n/tmp/tmp946cj0un.swift:32:9: note: 'guessScoreDiffDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmp946cj0un.swift:37:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp946cj0un.swift:31:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp946cj0un.swift:38:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiffDiff = 0\n\
    \        ^\n/tmp/tmp946cj0un.swift:32:9: note: 'guessScoreDiffDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmp946cj0un.swift:39:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp946cj0un.swift:31:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp946cj"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(game[i] - guess[j])\n   \
    \         i += 1\n        } else {\n            result.append(abs(game[i] - guess[j]))\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpfcwd7qkd/tmpfcwd7qkd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69094d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69091c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69091c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69091c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcwd7qkd                        0x00005648faec16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b69096bc460 __libc_start_main +
    245

    6    tmpfcwd7qkd                        0x00005648faec1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var gameIndex\
    \ = 0\n    var guessIndex = 0\n    while gameIndex < game.count && guessIndex\
    \ < guess.count {\n        if game[gameIndex] == guess[guessIndex] {\n       \
    \     result[gameIndex] = 0\n            gameIndex += 1\n            guessIndex\
    \ += 1\n        } else if game[gameIndex] > guess[guessIndex] {\n            result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n            gameIndex += 1\n        }\
    \ else {\n            result[gameIndex] = guess[guessIndex] - game[gameIndex]\n\
    \            guessIndex += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpa7ak9gia/tmpa7ak9gia.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf345e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf342d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf342d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf342d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7ak9gia                        0x000055e50b97f914 <unavailable> + 6420

    5    libc.so.6                          0x00002abf347ce460 __libc_start_main +
    245

    6    tmpa7ak9gia                        0x000055e50b97f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    for i in 0..<game.count {\n      \
    \  if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp3u4o23b6/tmp3u4o23b6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4c5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4c299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4c299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4c2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u4o23b6                        0x0000556de82947d4 <unavailable> + 6100

    5    libc.so.6                          0x00002baa4c78e460 __libc_start_main +
    245

    6    tmp3u4o23b6                        0x0000556de8294349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(game[i] - guess[j])\n   \
    \         i += 1\n        } else {\n            result.append(abs(game[i] - guess[j]))\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpfcwd7qkd/tmpfcwd7qkd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69094d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69091c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69091c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69091c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcwd7qkd                        0x00005648faec16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b69096bc460 __libc_start_main +
    245

    6    tmpfcwd7qkd                        0x00005648faec1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for _ in 0..<game.count {\n        if guess[i] != game[i] {\n     \
    \       result[i] = abs(guess[i] - game[i])\n        } else {\n            result[i]\
    \ = 0\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    for j in 0..<game.count {\n        if game[j] == guess[j] {\n     \
    \       result[i] = 0\n        } else {\n            result[i] = abs(game[j] -\
    \ guess[j])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += abs(game[gameIndex] - guess[guessIndex])\n     \
    \       gameIndex += 1\n        } else {\n            guessScore += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            guessIndex += 1\n        }\n    }\n    if gameIndex\
    \ == game.count {\n        result.append(0)\n    } else {\n        result.append(abs(guessScore\
    \ - gameScore))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpbpse_5t8/tmpbpse_5t8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19bd0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19ba01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab19ba01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab19ba007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpse_5t8                        0x000056017d1526a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ab19bef6460 __libc_start_main +
    245

    6    tmpbpse_5t8                        0x000056017d152219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[k] = 0\n            i += 1\n            j += 1\n     \
    \       k += 1\n        } else if game[i] > guess[j] {\n            result[k]\
    \ = game[i] - guess[j]\n            i += 1\n        } else {\n            result[k]\
    \ = guess[j] - game[i]\n            j += 1\n        }\n    }\n    while i < game.count\
    \ {\n        result[k] = game[i] - guess[j]\n        i += 1\n        j += 1\n\
    \        k += 1\n    }\n    while j < guess.count {\n        result[k] = guess[j]\
    \ - game[i]\n        i += 1\n        j += 1\n        k += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aee71e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee71b05561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aee71b05286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aee71b0513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aee71b04bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aee719047ec <unavailable> + 186348

    6    tmp4vt9128z                        0x000055cc94ea4c90 <unavailable> + 7312

    7    tmp4vt9128z                        0x000055cc94ea44b3 <unavailable> + 5299

    8    libc.so.6                          0x00002aee71ffa460 __libc_start_main +
    245

    9    tmp4vt9128z                        0x000055cc94ea4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    while gameIndex < game.count && guessIndex\
    \ < guess.count {\n        if game[gameIndex] == guess[guessIndex] {\n       \
    \     gameScore += 1\n            guessScore += 1\n            gameScoreDiff +=\
    \ abs(game[gameIndex] - guess[guessIndex])\n            guessScoreDiff += abs(guess[guessIndex]\
    \ - game[gameIndex])\n            gameIndex += 1\n            guessIndex += 1\n\
    \        } else if game[gameIndex] < guess[guessIndex] {\n            gameScore\
    \ += 1\n            guessScoreDiff += abs(guess[guessIndex] - game[gameIndex])\n\
    \            guessIndex += 1\n        } else {\n            gameScoreDiff += abs(game[gameIndex]\
    \ - guess[guessIndex])\n            guessScore += 1\n            guessIndex +=\
    \ 1\n        }\n    }\n    if gameIndex == game.count {\n        result.append(0)\n\
    \    } else {\n        result.append(gameScoreDiff)\n    }\n    if guessIndex\
    \ == guess.count {\n        result.append(0)\n    } else {\n        result.append(guessScoreDiff)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmps_t_y462/tmps_t_y462.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad3dfdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3dcd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3dcd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3dcd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_t_y462                        0x000055db7936f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002aad3e1ca460 __libc_start_main +
    245

    6    tmps_t_y462                        0x000055db7936f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let diff = abs(guess[index] - game[index])\n        if diff == 0 {\n    \
    \        result.append(0)\n        } else {\n            result.append(diff)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c9bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62c6b4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae62c6b4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae62c6b413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae62c6b3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae62c4b37ec <unavailable> + 186348

    6    tmp71pirqfl                        0x0000557842d52c74 <unavailable> + 7284

    7    tmp71pirqfl                        0x0000557842d524b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ae62cba9460 __libc_start_main +
    245

    9    tmp71pirqfl                        0x0000557842d52129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\n\
    \            result[guessScoreDiffIndex] = guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        } else {\n            if\
    \ gameScore > guessScore {\n                gameScore -= game[gameIndex]\n   \
    \             gameIndex += 1\n            } else {\n                guessScore\
    \ -= guess[guessIndex]\n                guessIndex += 1\n            }\n     \
    \       result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    if gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore\n        result[guessScoreDiffIndex] = guessScore\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a96ae1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a967d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a967d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a967d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a967d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a965d77ec <unavailable> + 186348

    6    tmp9n303xby                        0x000055a882195dce <unavailable> + 7630

    7    tmp9n303xby                        0x000055a8821954b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b5a96ccd460 __libc_start_main +
    245

    9    tmp9n303xby                        0x000055a882195129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    var j = 0\n    while i < game.count && j < guess.count {\n        if\
    \ game[i] == guess[j] {\n            result[i] = 0\n            i += 1\n     \
    \       j += 1\n        } else if game[i] > guess[j] {\n            result[i]\
    \ = game[i] - guess[j]\n            i += 1\n        } else {\n            result[i]\
    \ = guess[j] - game[i]\n            j += 1\n        }\n    }\n    while i < game.count\
    \ {\n        result[i] = game[i] - guess[j]\n        i += 1\n        j += 1\n\
    \    }\n    while j < guess.count {\n        result[i] = guess[j] - game[i]\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b700e804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b700e4fb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b700e4fb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b700e4fb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b700e4fabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b700e2fae83 <unavailable> + 188035

    6    tmpl6vejrbf                        0x000055ac1f7e8048 <unavailable> + 8264

    7    tmpl6vejrbf                        0x000055ac1f7e74c3 <unavailable> + 5315

    8    libc.so.6                          0x00002b700e9f0460 __libc_start_main +
    245

    9    tmpl6vejrbf                        0x000055ac1f7e7139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    while i < game.count {\n        if game[i] == guess[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[k] = 0\n            i += 1\n            j += 1\n     \
    \       k += 1\n        } else if game[i] > guess[j] {\n            result[k]\
    \ = game[i] - guess[j]\n            i += 1\n            k += 1\n        } else\
    \ {\n            result[k] = guess[j] - game[i]\n            j += 1\n        \
    \    k += 1\n        }\n    }\n    while i < game.count {\n        result[k] =\
    \ game[i] - guess[j]\n        i += 1\n        k += 1\n        j += 1\n    }\n\
    \    while j < guess.count {\n        result[k] = guess[j] - game[i]\n       \
    \ j += 1\n        k += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a6ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a69e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1a69e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1a69e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1a69e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae1a67e47ec <unavailable> + 186348

    6    tmpff9bhm7j                        0x000055cf143fbc90 <unavailable> + 7312

    7    tmpff9bhm7j                        0x000055cf143fb4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ae1a6eda460 __libc_start_main +
    245

    9    tmpff9bhm7j                        0x000055cf143fb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    for i in 0..<game.count\
    \ {\n        scores[i] = abs(game[i] - guess[i])\n    }\n    for i in 0..<game.count\
    \ {\n        if scores[i] == 0 {\n            result.append(0)\n        } else\
    \ {\n            result.append(scores[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0685b18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b068580f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b068580f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b068580f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b068580ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b068560e7ec <unavailable> + 186348

    6    tmpe87lci4u                        0x00005566b5818028 <unavailable> + 8232

    7    tmpe87lci4u                        0x00005566b5817783 <unavailable> + 6019

    8    libc.so.6                          0x00002b0685d04460 __libc_start_main +
    245

    9    tmpe87lci4u                        0x00005566b58173f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffAbs = 0\n    var guessScoreDiffAbs\
    \ = 0\n    var gameScoreDiffDiff = 0\n    var guessScoreDiffDiff = 0\n    var\
    \ gameScoreDiffDiffAbs = 0\n    var guessScoreDiffDiffAbs = 0\n    var gameScoreDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffAbs =\
    \ 0\n    var guessScoreDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiffAbs = 0\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n    var guessScoreDiffDiffDiffDiffDiff = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6euo5jjr.swift:38:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffAbs'\n\
    \    var gameScoreDiffDiffDiffDiffAbs = 0\n        ^\n/tmp/tmp6euo5jjr.swift:34:9:\
    \ note: 'gameScoreDiffDiffDiffDiffAbs' previously declared here\n    var gameScoreDiffDiffDiffDiffAbs\
    \ = 0\n        ^\n/tmp/tmp6euo5jjr.swift:39:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffAbs'\n    var guessScoreDiffDiffDiffDiffAbs = 0\n\
    \        ^\n/tmp/tmp6euo5jjr.swift:35:9: note: 'guessScoreDiffDiffDiffDiffAbs'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffAbs = 0\n      \
    \  ^\n/tmp/tmp6euo5jjr.swift:40:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp6euo5jjr.swift:36:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp6euo5jjr.swift:41:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiffDiff = 0\n\
    \        ^\n/tmp/tmp6euo5jjr.swift:37:9: note: 'guessScoreDiffDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmp6euo5jjr.swift:44:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiff'\n\
    \    var gameScoreDiffDiffDiffDiffDiff = 0\n        ^\n/tmp/tmp6euo5jjr.swift:36:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiff' previously declared here\n    var gameScoreDiffDiffDiffDiffDiff\
    \ = 0\n        ^\n/tmp/tmp6euo5jjr.swift:45:9: error: invalid redeclaration of\
    \ 'guessScoreDiffDiffDiffDiffDiff'\n    var guessScoreDiffDiffDiffDiffDiff = 0\n\
    \        ^\n/tmp/tmp6euo5jjr.swift:37:9: note: 'guessScoreDiffDiffDiffDiffDiff'\
    \ previously declared here\n    var guessScoreDiffDiffDiffDiffDiff = 0\n     \
    \   ^\n/tmp/tmp6euo5jjr.swift:46:9: error: invalid redeclaration of 'gameScoreDiffDiffDiffDiffDiffAbs'\n\
    \    var gameScoreDiffDiffDiffDiffDiffAbs = 0\n        ^\n/tmp/tmp6euo5jjr.swift:42:9:\
    \ note: 'gameScoreDiffDiffDiffDiffDiffAbs' previously declared here\n    var gameScoreDiffDiffDiffDiffDiffAbs\
    \ = 0\n        ^\n/tmp/tmp6"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    \n    while gameIndex < game.count && guessIndex < guess.count {\n\
    \        if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n\
    \            guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            if gameScore > guessScore {\n          \
    \      gameScore = gameScore - guessScore\n                gameScoreDiff = gameScore\n\
    \                gameScoreDiffIndex = gameScoreDiffIndex\n            } else {\n\
    \                guessScore = guessScore - gameScore\n                guessScoreDiff\
    \ = guessScore\n                guessScoreDiffIndex = guessScoreDiffIndex\n  \
    \          }\n            gameIndex += 1\n            guessIndex += 1\n      \
    \      result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        }\n    }\n    \n    if gameIndex < game.count {\n        result[gameScoreDiffIndex]\
    \ = gameScore - game[gameIndex]\n        result[guessScoreDiffIndex] = guessScore\
    \ - guess[guessIndex]\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpw7bokyq2.swift:39:36: error: assigning a variable to itself\n \
    \               gameScoreDiffIndex = gameScoreDiffIndex\n                ~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7bokyq2.swift:43:37: error: assigning a variable\
    \ to itself\n                guessScoreDiffIndex = guessScoreDiffIndex\n     \
    \           ~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw7bokyq2.swift:20:9:\
    \ warning: variable 'gameScoreDiff' was written to, but never read\n    var gameScoreDiff\
    \ = 0\n        ^\n/tmp/tmpw7bokyq2.swift:21:9: warning: variable 'guessScoreDiff'\
    \ was written to, but never read\n    var guessScoreDiff = 0\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(abs(game[i] - guess[j]))\n\
    \            i += 1\n        } else {\n            result.append(abs(guess[j]\
    \ - game[i]))\n            j += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppbctvcj2/tmppbctvcj2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c206e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c203ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c203dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c203dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbctvcj2                        0x000055d3c035c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6c208d2460 __libc_start_main +
    245

    6    tmppbctvcj2                        0x000055d3c035c219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var scores\
    \ = [Int](repeating: 0, count: game.count)\n    var guesses = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<game.count {\n        scores[i] = abs(game[i]\
    \ - guess[i])\n        guesses[i] = abs(game[i] - guess[i])\n    }\n    for i\
    \ in 0..<game.count {\n        if scores[i] == 0 {\n            result[i] = 0\n\
    \        } else {\n            result[i] = guesses[i]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpozof40g2/tmpozof40g2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb9ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb97bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb97bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb97ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozof40g2                        0x000056439eaf56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2eb9cb0460 __libc_start_main +
    245

    6    tmpozof40g2                        0x000056439eaf5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp45k4svo2.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980043
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += game[gameIndex]\n            guessScore += guess[guessIndex]\n\
    \            result[gameIndex] = gameScore\n            result[guessIndex] = guessScore\n\
    \            gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            gameScore += game[gameIndex] - guess[guessIndex]\n\
    \            gameIndex += 1\n        } else {\n            guessScore += guess[guessIndex]\
    \ - game[gameIndex]\n            guessIndex += 1\n        }\n    }\n    while\
    \ gameIndex < game.count {\n        result[gameIndex] = gameScore - game[gameIndex]\n\
    \        gameIndex += 1\n    }\n    while guessIndex < guess.count {\n       \
    \ result[guessIndex] = guessScore - guess[guessIndex]\n        guessIndex += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4116b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4116849561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4116849286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b411684913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4116848bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b41166487ec <unavailable> + 186348

    6    tmpo7j6jmme                        0x000055f661111d26 <unavailable> + 7462

    7    tmpo7j6jmme                        0x000055f6611114b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b4116d3e460 __libc_start_main +
    245

    9    tmpo7j6jmme                        0x000055f661111129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] < guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpvfy3_d06/tmpvfy3_d06.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56086ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab560565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab560565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5605647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfy3_d06                        0x000055c89fddb6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ab560a5a460 __libc_start_main +
    245

    6    tmpvfy3_d06                        0x000055c89fddb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  gameScore += game[gameIndex]\n        guessScore += guess[guessIndex]\n   \
    \     gameIndex += 1\n        guessIndex += 1\n    }\n    while gameIndex < game.count\
    \ {\n        gameScore += game[gameIndex]\n        gameIndex += 1\n    }\n   \
    \ while guessIndex < guess.count {\n        guessScore += guess[guessIndex]\n\
    \        guessIndex += 1\n    }\n    while gameIndex < game.count && guessIndex\
    \ < guess.count {\n        gameScoreDiff += abs(game[gameIndex] - guess[guessIndex])\n\
    \        guessScoreDiff += abs(game[gameIndex] - guess[guessIndex])\n        gameScoreDiffIndex\
    \ += 1\n        guessScoreDiffIndex += 1\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while gameIndex < game.count {\n        gameScoreDiff += abs(game[gameIndex]\
    \ - guess[guessIndex])\n        gameScoreDiffIndex += 1\n        gameIndex +=\
    \ 1\n    }\n    while guessIndex < guess.count {\n        guessScoreDiff += abs(game[gameIndex]\
    \ - guess[guessIndex])\n        guessScoreDiffIndex += 1\n        guessIndex +=\
    \ 1\n    }\n    if gameScore == guessScore {\n        result = [Int]()\n    }\
    \ else {\n        result = [Int](count: guess.count, repeatedValue: gameScoreDiff)\n\
    \    }\n    for index in 0..<guess.count {\n        result[guessScoreDiffIndex]\
    \ = abs(guess[index] - game[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwll3t8gg.swift:59:18: error: no exact matches in call to initializer\
    \ \n        result = [Int](count: guess.count, repeatedValue: gameScoreDiff)\n\
    \                 ^\n/tmp/tmpwll3t8gg.swift:59:18: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n        result = [Int](count:\
    \ guess.count, repeatedValue: gameScoreDiff)\n                 ^\n/tmp/tmpwll3t8gg.swift:59:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n        result = [Int](count: guess.count, repeatedValue: gameScoreDiff)\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameLength = 0\n\
    \    var guessLength = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff =\
    \ 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex = 0\n    var\
    \ gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n    var gameScoreDiffIndex3\
    \ = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4 = 0\n   \
    \ var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n    var guessScoreDiffIndex5\
    \ = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6 = 0\n   \
    \ var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n    var gameScoreDiffIndex8\
    \ = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9 = 0\n   \
    \ var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n    var guessScoreDiffIndex10\
    \ = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11 = 0\n \
    \   var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n    var gameScoreDiffIndex13\
    \ = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14 = 0\n \
    \   var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n    var guessScoreDiffIndex15\
    \ = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16 = 0\n \
    \   var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n    var gameScoreDiffIndex18\
    \ = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19 = 0\n \
    \   var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n    var guessScoreDiffIndex20\
    \ = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21 = 0\n \
    \   var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n    var gameScoreDiffIndex23\
    \ = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24 = 0\n \
    \   var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n    var guessScoreDiffIndex25\
    \ = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26 = 0\n \
    \   var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n    var gameScoreDiffIndex28\
    \ = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29 = 0\n \
    \   var guessScoreDiffIndex29 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdup_1ifw.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpdup_1ifw.swift:15:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:16:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:17:9: warning: initialization of variable 'guessScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessScore = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:18:9:\
    \ warning: initialization of variable 'gameIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameIndex = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:19:9: warning: initialization of variable 'guessIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:20:9:\
    \ warning: initialization of variable 'gameLength' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameLength = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:21:9: warning: initialization of variable 'guessLength'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessLength = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:22:9:\
    \ warning: initialization of variable 'gameScoreDiff' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreDiff = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpdup_1ifw.swift:23:9: warning: initialization\
    \ of variable 'guessScoreDiff' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessScoreDiff = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdup_1ifw.swift:24:9: warning: initialization of variable 'gameScoreDiffIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameSco"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     let difference = abs(game[i] - guess[i])\n        result.append(difference)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameLength\
    \ = 0\n    var guessLength = 0\n    var gameScore = 0\n    var guessScore = 0\n\
    \    var gameScoreIndex = 0\n    var guessScoreIndex = 0\n    var gameScoreIndex2\
    \ = 0\n    var guessScoreIndex2 = 0\n    var gameScoreIndex3 = 0\n    var guessScoreIndex3\
    \ = 0\n    var gameScoreIndex4 = 0\n    var guessScoreIndex4 = 0\n    var gameScoreIndex5\
    \ = 0\n    var guessScoreIndex5 = 0\n    var gameScoreIndex6 = 0\n    var guessScoreIndex6\
    \ = 0\n    var gameScoreIndex7 = 0\n    var guessScoreIndex7 = 0\n    var gameScoreIndex8\
    \ = 0\n    var guessScoreIndex8 = 0\n    var gameScoreIndex9 = 0\n    var guessScoreIndex9\
    \ = 0\n    var gameScoreIndex10 = 0\n    var guessScoreIndex10 = 0\n    var gameScoreIndex11\
    \ = 0\n    var guessScoreIndex11 = 0\n    var gameScoreIndex12 = 0\n    var guessScoreIndex12\
    \ = 0\n    var gameScoreIndex13 = 0\n    var guessScoreIndex13 = 0\n    var gameScoreIndex14\
    \ = 0\n    var guessScoreIndex14 = 0\n    var gameScoreIndex15 = 0\n    var guessScoreIndex15\
    \ = 0\n    var gameScoreIndex16 = 0\n    var guessScoreIndex16 = 0\n    var gameScoreIndex17\
    \ = 0\n    var guessScoreIndex17 = 0\n    var gameScoreIndex18 = 0\n    var guessScoreIndex18\
    \ = 0\n    var gameScoreIndex19 = 0\n    var guessScoreIndex19 = 0\n    var gameScoreIndex20\
    \ = 0\n    var guessScoreIndex20 = 0\n    var gameScoreIndex21 = 0\n    var guessScoreIndex21\
    \ = 0\n    var gameScoreIndex22 = 0\n    var guessScoreIndex22 = 0\n    var gameScoreIndex23\
    \ = 0\n    var guessScoreIndex23 = 0\n    var gameScoreIndex24 = 0\n    var guessScoreIndex24\
    \ = 0\n    var gameScoreIndex25 = 0\n    var guessScoreIndex25 = 0\n    var gameScoreIndex26\
    \ = 0\n    var guessScoreIndex26 = 0\n    var gameScoreIndex27 = 0\n    var guessScoreIndex27\
    \ = 0\n    var gameScoreIndex28 = 0\n    var guessScoreIndex28 = 0\n    var gameScoreIndex29\
    \ = 0\n    var guessScoreIndex29 = 0\n    var gameScoreIndex30 = 0\n    var guessScoreIndex30\
    \ = 0\n    var gameScoreIndex31 = 0\n    var guessScoreIndex31 = 0\n    var gameScoreIndex32\
    \ = 0\n    var guessScoreIndex32 = 0\n    var gameScoreIndex33 = 0\n    var guessScoreIndex33\
    \ = 0\n    var gameScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwys4m505.swift:91:9: error: type annotation missing in pattern\n\
    \    var gameScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = -1\n    var guessIndex\
    \ = -1\n    while gameIndex < game.count && guessIndex < guess.count {\n     \
    \   if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[gameIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[gameIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[gameIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e88e51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e88b48561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e88b48286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e88b4813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e88b47bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e88947e83 <unavailable> + 188035

    6    tmp1gx4e2c_                        0x0000561b8112cc17 <unavailable> + 7191

    7    tmp1gx4e2c_                        0x0000561b8112c4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b0e8903d460 __libc_start_main +
    245

    9    tmp1gx4e2c_                        0x0000561b8112c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[result.count-1]\
    \ = 0\n            gameIndex += 1\n            guessIndex += 1\n        } else\
    \ {\n            result[result.count-1] = abs(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n            guessIndex += 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b487349ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4873195561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4873195286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b487319513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4873194bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4872f947ec <unavailable> + 186348

    6    tmp6v5p91nk                        0x000055b303030d9a <unavailable> + 7578

    7    tmp6v5p91nk                        0x000055b303030593 <unavailable> + 5523

    8    libc.so.6                          0x00002b487368a460 __libc_start_main +
    245

    9    tmp6v5p91nk                        0x000055b303030209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var gameScore\
    \ = game[0]\n    var guessScore = guess[0]\n    for i in 0..<game.count {\n  \
    \      if gameScore == guessScore {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(guessScore - gameScore)\n        }\n        gameScore\
    \ = game[i]\n        guessScore = guess[i]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp8zh2qk96/tmp8zh2qk96.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b973056cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9730263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9730263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97302627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zh2qk96                        0x00005608a075c834 <unavailable> + 6196

    5    libc.so.6                          0x00002b9730758460 __libc_start_main +
    245

    6    tmp8zh2qk96                        0x00005608a075c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            gameIndex += 1\n        } else {\n      \
    \      guessIndex += 1\n        }\n    }\n    if gameIndex == game.count {\n \
    \       result.append(0)\n    }\n    if guessIndex == guess.count {\n        result.append(0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpfa_rb0il/tmpfa_rb0il.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5124098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5123d8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5123d8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5123d8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfa_rb0il                        0x0000558128620564 <unavailable> + 5476

    5    libc.so.6                          0x00002b5124284460 __libc_start_main +
    245

    6    tmpfa_rb0il                        0x00005581286200d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        if\
    \ guess[i] == game[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(guess[i] - game[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     let scoreDiff = abs(game[i] - guess[i])\n        if scoreDiff != 0 {\n \
    \           result.append(scoreDiff)\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpc45fsxuj/tmpc45fsxuj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26ae56dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26ae264b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26ae264988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26ae2637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc45fsxuj                        0x000055993479a824 <unavailable> + 6180

    5    libc.so.6                          0x00002b26ae759460 __libc_start_main +
    245

    6    tmpc45fsxuj                        0x000055993479a399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] < guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameScore += 1\n            guessIndex += 1\n        }\n    }\n \
    \   if gameIndex == game.count {\n        result.append(0)\n    } else {\n   \
    \     result.append(abs(guessScore - gameScore))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpr7qndnt8/tmpr7qndnt8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20bc16fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20bbe66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20bbe66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20bbe657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7qndnt8                        0x000055ce50f146a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b20bc35b460 __libc_start_main +
    245

    6    tmpr7qndnt8                        0x000055ce50f14219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    while\
    \ gameIndex < game.count {\n        result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \        gameIndex += 1\n        guessIndex += 1\n    }\n    while guessIndex\
    \ < guess.count {\n        result.append(abs(guess[guessIndex] - game[gameIndex]))\n\
    \        guessIndex += 1\n        gameIndex += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b954de4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954db44561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b954db44286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b954db4413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b954db43bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b954d943e83 <unavailable> + 188035

    6    tmptomf59j4                        0x0000560bc68c10e2 <unavailable> + 8418

    7    tmptomf59j4                        0x0000560bc68c0553 <unavailable> + 5459

    8    libc.so.6                          0x00002b954e039460 __libc_start_main +
    245

    9    tmptomf59j4                        0x0000560bc68c01c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            gameIndex += 1\n        } else {\n\
    \            guessScore += 1\n            guessIndex += 1\n        }\n    }\n\
    \    if gameIndex == game.count {\n        result.append(0)\n    } else {\n  \
    \      result.append(abs(guessScore - gameScore))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpozof40g2/tmpozof40g2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb9ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb97bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb97bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb97ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozof40g2                        0x000056439eaf56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2eb9cb0460 __libc_start_main +
    245

    6    tmpozof40g2                        0x000056439eaf5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<guess.count {\n        let\
    \ diff = abs(guess[i] - game[i])\n        if diff == 0 {\n            result.append(0)\n\
    \        } else {\n            result.append(diff)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var score = 0\n    var guess = 0\n  \
    \  var game = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameLength\
    \ = 0\n    var guessLength = 0\n    var gameScore = 0\n    var guessScore = 0\n\
    \    var gameScoreIndex = 0\n    var guessScoreIndex = 0\n    var gameScoreIndex2\
    \ = 0\n    var guessScoreIndex2 = 0\n    var gameScoreIndex3 = 0\n    var guessScoreIndex3\
    \ = 0\n    var gameScoreIndex4 = 0\n    var guessScoreIndex4 = 0\n    var gameScoreIndex5\
    \ = 0\n    var guessScoreIndex5 = 0\n    var gameScoreIndex6 = 0\n    var guessScoreIndex6\
    \ = 0\n    var gameScoreIndex7 = 0\n    var guessScoreIndex7 = 0\n    var gameScoreIndex8\
    \ = 0\n    var guessScoreIndex8 = 0\n    var gameScoreIndex9 = 0\n    var guessScoreIndex9\
    \ = 0\n    var gameScoreIndex10 = 0\n    var guessScoreIndex10 = 0\n    var gameScoreIndex11\
    \ = 0\n    var guessScoreIndex11 = 0\n    var gameScoreIndex12 = 0\n    var guessScoreIndex12\
    \ = 0\n    var gameScoreIndex13 = 0\n    var guessScoreIndex13 = 0\n    var gameScoreIndex14\
    \ = 0\n    var guessScoreIndex14 = 0\n    var gameScoreIndex15 = 0\n    var guessScoreIndex15\
    \ = 0\n    var gameScoreIndex16 = 0\n    var guessScoreIndex16 = 0\n    var gameScoreIndex17\
    \ = 0\n    var guessScoreIndex17 = 0\n    var gameScoreIndex18 = 0\n    var guessScoreIndex18\
    \ = 0\n    var gameScoreIndex19 = 0\n    var guessScoreIndex19 = 0\n    var gameScoreIndex20\
    \ = 0\n    var guessScoreIndex20 = 0\n    var gameScoreIndex21 = 0\n    var guessScoreIndex21\
    \ = 0\n    var gameScoreIndex22 = 0\n    var guessScoreIndex22 = 0\n    var gameScoreIndex23\
    \ = 0\n    var guessScoreIndex23 = 0\n    var gameScoreIndex24 = 0\n    var guessScoreIndex24\
    \ = 0\n    var gameScoreIndex25 = 0\n    var guessScoreIndex25 = 0\n    var gameScoreIndex26\
    \ = 0\n    var guessScoreIndex26 = 0\n    var gameScoreIndex27 = 0\n    var guessScoreIndex27\
    \ = 0\n    var gameScoreIndex28 = 0\n    var guessScoreIndex28 = 0\n    var gameScoreIndex29\
    \ = 0\n    var guessScoreIndex29 = 0\n    var gameScoreIndex30 = 0\n    var guessScoreIndex30\
    \ = 0\n    var gameScoreIndex31 = 0\n    var guessScoreIndex31 = 0\n    var gameScoreIndex32\
    \ = 0\n    var guessScoreIndex32 = 0\n    var gameScoreIndex33 = 0\n    var guessScoreIndex33\
    \ = 0\n    var gameScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwys4m505.swift:91:9: error: type annotation missing in pattern\n\
    \    var gameScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += 1\n   \
    \         guessScore += 1\n            gameIndex += 1\n            guessIndex\
    \ += 1\n            result[gameScoreDiffIndex] = gameScore\n            result[guessScoreDiffIndex]\
    \ = guessScore\n            gameScoreDiffIndex += 1\n            guessScoreDiffIndex\
    \ += 1\n        } else {\n            if gameScore > guessScore {\n          \
    \      gameScoreDiff = gameScore - guessScore\n                gameScore = guessScore\n\
    \                guessScore = gameScore\n                result[gameScoreDiffIndex]\
    \ = gameScoreDiff\n                gameScoreDiffIndex += 1\n            } else\
    \ {\n                guessScoreDiff = guessScore - gameScore\n               \
    \ guessScore = gameScore\n                gameScore = guessScore\n           \
    \     result[guessScoreDiffIndex] = guessScoreDiff\n                guessScoreDiffIndex\
    \ += 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ed6c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ed6966561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6ed6966286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6ed696613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6ed6965bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6ed67657ec <unavailable> + 186348

    6    tmpotr454iv                        0x0000559dd3cf0d8c <unavailable> + 7564

    7    tmpotr454iv                        0x0000559dd3cf04b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b6ed6e5b460 __libc_start_main +
    245

    9    tmpotr454iv                        0x0000559dd3cf0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[k] = game[i] - guess[j]\n            i += 1\n        \
    \    j += 1\n            k += 1\n        } else if game[i] > guess[j] {\n    \
    \        i += 1\n        } else {\n            j += 1\n        }\n    }\n    while\
    \ i < game.count {\n        result[k] = game[i] - guess[j]\n        i += 1\n \
    \       j += 1\n        k += 1\n    }\n    while j < guess.count {\n        result[k]\
    \ = guess[j] - game[i]\n        i += 1\n        j += 1\n        k += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b34aeea3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34aeb9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b34aeb9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b34aeb9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b34aeb99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b34ae9997ec <unavailable> + 186348

    6    tmptue9wjck                        0x000055ff8cb43cfd <unavailable> + 7421

    7    tmptue9wjck                        0x000055ff8cb434b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b34af08f460 __libc_start_main +
    245

    9    tmptue9wjck                        0x000055ff8cb43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    var guesses\
    \ = [Int]()\n    \n    for _ in 0..<game.count {\n        scores.append(0)\n \
    \       guesses.append(0)\n    }\n    \n    for _ in 0..<guess.count {\n     \
    \   scores.append(0)\n        guesses.append(0)\n    }\n    \n    for index in\
    \ 0..<game.count {\n        if game[index] == guess[index] {\n            scores[index]\
    \ = 0\n        } else {\n            scores[index] = abs(game[index] - guess[index])\n\
    \        }\n    }\n    \n    for index in 0..<guess.count {\n        if game[index]\
    \ == guess[index] {\n            guesses[index] = 0\n        } else {\n      \
    \      guesses[index] = abs(game[index] - guess[index])\n        }\n    }\n  \
    \  \n    for index in 0..<game.count {\n        if scores[index] == 0 {\n    \
    \        result.append(0)\n        } else {\n            result.append(guesses[index])\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var scores = [Int]()\n    for i in 0..<game.count\
    \ {\n        scores[i] = game[i]\n    }\n    for i in 0..<guess.count {\n    \
    \    result[i] = abs(guess[i] - scores[i])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b64cd2adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64ccfa4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b64ccfa4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b64ccfa413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b64ccfa3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b64ccda37ec <unavailable> + 186348

    6    tmpx09hi_e7                        0x0000558868a92f43 <unavailable> + 8003

    7    tmpx09hi_e7                        0x0000558868a92723 <unavailable> + 5923

    8    libc.so.6                          0x00002b64cd499460 __libc_start_main +
    245

    9    tmpx09hi_e7                        0x0000558868a92399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var i = 0\n    while i < game.count\
    \ {\n        if game[i] == guess[i] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(game[i] - guess[i]))\n        }\n    \
    \    i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(abs(game[gameIndex] - guess[guessIndex]))\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(guess[guessIndex]\
    \ - game[gameIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpenv_mr3q/tmpenv_mr3q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdab94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdab641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdab641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdab6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenv_mr3q                        0x000055d738c9d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abdabb36460 __libc_start_main +
    245

    6    tmpenv_mr3q                        0x000055d738c9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var score = 0\n    var guess = 0\n\
    \    var game = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj8g3qllg.swift:45:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpj8g3qllg.swift:19:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpj8g3qllg.swift:46:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpj8g3qllg.swift:20:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpj8g3qllg.swift:47:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpj8g3qllg.swift:21:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpj8g3qllg.swift:48:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpj8g3qllg.swift:22:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpj8g3qllg.swift:49:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpj8g3qllg.swift:23:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpj8g3qllg.swift:50:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpj8g3qllg.swift:24:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpj8g3qllg.swift:51:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpj8g3qllg.swift:25:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpj8g3qllg.swift:52:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpj8g3qllg.swift:26:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpj8g3qllg.swift:53:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpj8g3qllg.swift:27:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpj8g3qllg.swift:54:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpj8g3qllg.swift:28:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpj8g3qllg.swift:55:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpj8g3qllg.swift:29:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpj8g3qllg.swift:56:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpj8g3"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    while gameIndex < game.count\
    \ && guessIndex < guess.count {\n        if game[gameIndex] == guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessScore += 1\n            gameIndex\
    \ += 1\n            guessIndex += 1\n        } else if game[gameIndex] > guess[guessIndex]\
    \ {\n            gameScore += 1\n            guessIndex += 1\n        } else {\n\
    \            gameIndex += 1\n            guessScore += 1\n        }\n    }\n \
    \   if gameIndex == game.count {\n        result.append(0)\n    } else {\n   \
    \     result.append(abs(guessScore - gameScore))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpmfkm2qjj/tmpmfkm2qjj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1268cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f12383b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f12383988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f123827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfkm2qjj                        0x000055d5bea8f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f12878460 __libc_start_main +
    245

    6    tmpmfkm2qjj                        0x000055d5bea8f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    if game[index] == guess[index] {\n            result.append(0)\n        }\
    \ else {\n            result.append(abs(game[index] - guess[index]))\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    \n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for index in 0..<guess.count {\n    \
    \    let score = game[index]\n        let guess = guess[index]\n        if guess\
    \ == score {\n            result.append(0)\n        } else {\n            result.append(abs(guess\
    \ - score))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var i\
    \ = 0\n    while i < game.count {\n        if game[i] == guess[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        if gameScore ==\
    \ guessScore {\n            result.append(0)\n        } else {\n            result.append(abs(guessScore\
    \ - gameScore))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9d1ryyn8/tmp9d1ryyn8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1d4efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1d1e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1d1e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1d1e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d1ryyn8                        0x000055614bac0824 <unavailable> + 6180

    5    libc.so.6                          0x00002acf1d6db460 __libc_start_main +
    245

    6    tmp9d1ryyn8                        0x000055614bac0399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result.append(0)\n \
    \           gameIndex += 1\n            guessIndex += 1\n        } else if game[gameIndex]\
    \ > guess[guessIndex] {\n            result.append(game[gameIndex] - guess[guessIndex])\n\
    \            gameIndex += 1\n        } else {\n            result.append(abs(game[gameIndex]\
    \ - guess[guessIndex]))\n            guessIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpqsvzmqse/tmpqsvzmqse.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d0a096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d09d8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d09d8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d09d8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsvzmqse                        0x000055e53b7b56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7d0a282460 __libc_start_main +
    245

    6    tmpqsvzmqse                        0x000055e53b7b5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<game.count {\n   \
    \     if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for index in 0..<guess.count {\n\
    \        let guess = guess[index]\n        let score = game[index]\n        \n\
    \        if guess == score {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(guess - score))\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < game.count {\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    for i in 0..<game.count {\n        gameScore += game[i]\n        guessScore\
    \ += guess[i]\n    }\n    for i in 0..<guess.count {\n        if gameScore ==\
    \ guessScore {\n            result.append(0)\n        } else {\n            result.append(abs(guessScore\
    \ - gameScore))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp9d1ryyn8/tmp9d1ryyn8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf1d4efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1d1e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1d1e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1d1e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d1ryyn8                        0x000055614bac0824 <unavailable> + 6180

    5    libc.so.6                          0x00002acf1d6db460 __libc_start_main +
    245

    6    tmp9d1ryyn8                        0x000055614bac0399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameScoreDiffIndex2 = 0\n    var guessScoreDiffIndex2 = 0\n   \
    \ var gameScoreDiffIndex3 = 0\n    var guessScoreDiffIndex3 = 0\n    var gameScoreDiffIndex4\
    \ = 0\n    var guessScoreDiffIndex4 = 0\n    var gameScoreDiffIndex5 = 0\n   \
    \ var guessScoreDiffIndex5 = 0\n    var gameScoreDiffIndex6 = 0\n    var guessScoreDiffIndex6\
    \ = 0\n    var gameScoreDiffIndex7 = 0\n    var guessScoreDiffIndex7 = 0\n   \
    \ var gameScoreDiffIndex8 = 0\n    var guessScoreDiffIndex8 = 0\n    var gameScoreDiffIndex9\
    \ = 0\n    var guessScoreDiffIndex9 = 0\n    var gameScoreDiffIndex10 = 0\n  \
    \  var guessScoreDiffIndex10 = 0\n    var gameScoreDiffIndex11 = 0\n    var guessScoreDiffIndex11\
    \ = 0\n    var gameScoreDiffIndex12 = 0\n    var guessScoreDiffIndex12 = 0\n \
    \   var gameScoreDiffIndex13 = 0\n    var guessScoreDiffIndex13 = 0\n    var gameScoreDiffIndex14\
    \ = 0\n    var guessScoreDiffIndex14 = 0\n    var gameScoreDiffIndex15 = 0\n \
    \   var guessScoreDiffIndex15 = 0\n    var gameScoreDiffIndex16 = 0\n    var guessScoreDiffIndex16\
    \ = 0\n    var gameScoreDiffIndex17 = 0\n    var guessScoreDiffIndex17 = 0\n \
    \   var gameScoreDiffIndex18 = 0\n    var guessScoreDiffIndex18 = 0\n    var gameScoreDiffIndex19\
    \ = 0\n    var guessScoreDiffIndex19 = 0\n    var gameScoreDiffIndex20 = 0\n \
    \   var guessScoreDiffIndex20 = 0\n    var gameScoreDiffIndex21 = 0\n    var guessScoreDiffIndex21\
    \ = 0\n    var gameScoreDiffIndex22 = 0\n    var guessScoreDiffIndex22 = 0\n \
    \   var gameScoreDiffIndex23 = 0\n    var guessScoreDiffIndex23 = 0\n    var gameScoreDiffIndex24\
    \ = 0\n    var guessScoreDiffIndex24 = 0\n    var gameScoreDiffIndex25 = 0\n \
    \   var guessScoreDiffIndex25 = 0\n    var gameScoreDiffIndex26 = 0\n    var guessScoreDiffIndex26\
    \ = 0\n    var gameScoreDiffIndex27 = 0\n    var guessScoreDiffIndex27 = 0\n \
    \   var gameScoreDiffIndex28 = 0\n    var guessScoreDiffIndex28 = 0\n    var gameScoreDiffIndex29\
    \ = 0\n    var guessScoreDiffIndex29 = 0\n    var gameScoreDiffIndex30 = 0\n \
    \   var guessScore\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3mnw1rmb.swift:81:9: error: type annotation missing in pattern\n\
    \    var guessScore\n        ^\n"
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameScore = 0\n    var guessScore\
    \ = 0\n    var gameIndex = 0\n    var guessIndex = 0\n    var gameScoreDiff =\
    \ 0\n    var guessScoreDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            gameScore += game[gameIndex]\n\
    \            guessScore += guess[guessIndex]\n            gameIndex += 1\n   \
    \         guessIndex += 1\n            result[gameScoreDiffIndex] = gameScore\n\
    \            result[guessScoreDiffIndex] = guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        } else {\n            if\
    \ gameScore > guessScore {\n                gameScoreDiff = gameScore - guessScore\n\
    \                gameScore = guessScore\n                guessScore = gameScoreDiff\n\
    \                gameScoreDiffIndex += 1\n            } else {\n             \
    \   guessScoreDiff = guessScore - gameScore\n                guessScore = gameScore\n\
    \                gameScore = guessScoreDiff\n                guessScoreDiffIndex\
    \ += 1\n            }\n            result[gameScoreDiffIndex] = gameScore\n  \
    \          result[guessScoreDiffIndex] = guessScore\n            gameScoreDiffIndex\
    \ += 1\n            guessScoreDiffIndex += 1\n        }\n    }\n    if gameIndex\
    \ < game.count {\n        result[gameScoreDiffIndex] = gameScore\n        result[guessScoreDiffIndex]\
    \ = guessScore\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1558b11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1558808561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1558808286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b155880813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1558807bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b15586077ec <unavailable> + 186348

    6    tmpqfb_tuir                        0x000055d6371acdce <unavailable> + 7630

    7    tmpqfb_tuir                        0x000055d6371ac4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b1558cfd460 __libc_start_main +
    245

    9    tmpqfb_tuir                        0x000055d6371ac129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    for i in 0..<guess.count {\n  \
    \      let diff = abs(guess[i] - game[i])\n        result.append(diff)\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659980044
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    while i\
    \ < game.count && j < guess.count {\n        if game[i] == guess[j] {\n      \
    \      result.append(0)\n            i += 1\n            j += 1\n        } else\
    \ if game[i] > guess[j] {\n            result.append(game[i] - guess[j])\n   \
    \         i += 1\n        } else {\n            result.append(abs(game[i] - guess[j]))\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpfcwd7qkd/tmpfcwd7qkd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69094d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69091c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69091c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69091c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcwd7qkd                        0x00005648faec16a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b69096bc460 __libc_start_main +
    245

    6    tmpfcwd7qkd                        0x00005648faec1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659980044
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var gameIndex = 0\n    var guessIndex\
    \ = 0\n    while gameIndex < game.count && guessIndex < guess.count {\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[guessIndex] =\
    \ 0\n            gameIndex += 1\n            guessIndex += 1\n        } else if\
    \ game[gameIndex] > guess[guessIndex] {\n            result[guessIndex] = game[gameIndex]\
    \ - guess[guessIndex]\n            gameIndex += 1\n        } else {\n        \
    \    result[guessIndex] = guess[guessIndex] - game[gameIndex]\n            guessIndex\
    \ += 1\n        }\n    }\n    while gameIndex < game.count {\n        result[guessIndex]\
    \ = game[gameIndex] - guess[guessIndex]\n        gameIndex += 1\n        guessIndex\
    \ += 1\n    }\n    while guessIndex < guess.count {\n        result[guessIndex]\
    \ = guess[guessIndex] - game[gameIndex]\n        guessIndex += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bf0cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bedc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1bedc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1bedc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1bedc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1bebc57ec <unavailable> + 186348

    6    tmp9hx1hfxu                        0x00005569021dcc74 <unavailable> + 7284

    7    tmp9hx1hfxu                        0x00005569021dc4b3 <unavailable> + 5299

    8    libc.so.6                          0x00002ab1bf2bb460 __libc_start_main +
    245

    9    tmp9hx1hfxu                        0x00005569021dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824892
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        if\
    \ game[i] == guess[i] {\n            result.append(0)\n        } else {\n    \
    \        result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824784
