language: swift
name: HumanEval_58_common
results:
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxs8s7ieg/tmpxs8s7ieg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06222bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba061f22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba061f22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba061f217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxs8s7ieg                        0x000056180b5cf55c <unavailable> + 5468

    5    libc.so.6                          0x00002ba062417460 __libc_start_main +
    245

    6    tmpxs8s7ieg                        0x000056180b5cf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp04vcc0t0/tmp04vcc0t0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2135ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21359dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21359dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21359db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04vcc0t0                        0x00005620534e05ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2135ed1460 __libc_start_main +
    245

    6    tmp04vcc0t0                        0x00005620534e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2fqxpfwr/tmp2fqxpfwr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5021b80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5021877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5021877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50218767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fqxpfwr                        0x000055fe4155355c <unavailable> + 5468

    5    libc.so.6                          0x00002b5021d6c460 __libc_start_main +
    245

    6    tmp2fqxpfwr                        0x000055fe415530d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxs8s7ieg/tmpxs8s7ieg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06222bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba061f22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba061f22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba061f217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxs8s7ieg                        0x000056180b5cf55c <unavailable> + 5468

    5    libc.so.6                          0x00002ba062417460 __libc_start_main +
    245

    6    tmpxs8s7ieg                        0x000056180b5cf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp04vcc0t0/tmp04vcc0t0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2135ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21359dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21359dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21359db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04vcc0t0                        0x00005620534e05ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2135ed1460 __libc_start_main +
    245

    6    tmp04vcc0t0                        0x00005620534e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if l2.contains(x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpya0ay4t7/tmpya0ay4t7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85ca944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85ca63bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85ca63b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85ca63a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya0ay4t7                        0x0000564e5c72d6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b85cab30460 __libc_start_main +
    245

    6    tmpya0ay4t7                        0x0000564e5c72d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8befb1m5/tmp8befb1m5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee0ff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee0cecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee0cec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee0ceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8befb1m5                        0x0000562b393125ac <unavailable> + 5548

    5    libc.so.6                          0x00002abee11e1460 __libc_start_main +
    245

    6    tmp8befb1m5                        0x0000562b39312129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp04vcc0t0/tmp04vcc0t0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2135ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21359dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21359dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21359db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04vcc0t0                        0x00005620534e05ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2135ed1460 __libc_start_main +
    245

    6    tmp04vcc0t0                        0x00005620534e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.insert(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpdjhvp4g7.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpdjhvp4g7.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmpdjhvp4g7.swift:17:28:\
    \ error: missing argument for parameter 'at' in call\n            result.insert(x)\n\
    \                           ^\n                           , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.insert(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpdjhvp4g7.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpdjhvp4g7.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmpdjhvp4g7.swift:17:28:\
    \ error: missing argument for parameter 'at' in call\n            result.insert(x)\n\
    \                           ^\n                           , at: <#Int#>\nSwift.Array:11:37:\
    \ note: 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphiw2ch9l.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmphiw2ch9l.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp04vcc0t0/tmp04vcc0t0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2135ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21359dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21359dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21359db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04vcc0t0                        0x00005620534e05ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2135ed1460 __libc_start_main +
    245

    6    tmp04vcc0t0                        0x00005620534e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if l2.contains(x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpya0ay4t7/tmpya0ay4t7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85ca944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85ca63bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85ca63b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85ca63a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya0ay4t7                        0x0000564e5c72d6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b85cab30460 __libc_start_main +
    245

    6    tmpya0ay4t7                        0x0000564e5c72d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4xgymnpp.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp04vcc0t0/tmp04vcc0t0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2135ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21359dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21359dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21359db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04vcc0t0                        0x00005620534e05ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2135ed1460 __libc_start_main +
    245

    6    tmp04vcc0t0                        0x00005620534e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if l2.contains(i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: Exception
  stderr: 'tmpec5i5ajm/tmpec5i5ajm.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb3424bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb33f42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb33f42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb33f417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpec5i5ajm                        0x0000560932eba67c <unavailable> + 5756

    5    libc.so.6                          0x00002afb34437460 __libc_start_main +
    245

    6    tmpec5i5ajm                        0x0000560932eba1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   for y in l2 {\n            if x == y {\n                continue\n       \
    \     }\n            if result.contains(&x) {\n                continue\n    \
    \        }\n            if result.contains(&y) {\n                continue\n \
    \           }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp5fmbd6r4.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmp5fmbd6r4.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmp5fmbd6r4.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmp5fmbd6r4.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphiw2ch9l.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmphiw2ch9l.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxk0ps3up/tmpxk0ps3up.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6c84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6c543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6c543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6c5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk0ps3up                        0x000055aee0b245ac <unavailable> + 5548

    5    libc.so.6                          0x00002aee6ca38460 __libc_start_main +
    245

    6    tmpxk0ps3up                        0x000055aee0b24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphiw2ch9l.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmphiw2ch9l.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4xgymnpp.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp7yazh0a1/tmp7yazh0a1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca0afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca07f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca07f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca07f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yazh0a1                        0x000055be6a0575ac <unavailable> + 5548

    5    libc.so.6                          0x00002aaca0ce7460 __libc_start_main +
    245

    6    tmp7yazh0a1                        0x000055be6a057129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp_dfr1enm/tmp_dfr1enm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed0179ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed01491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed01491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed014907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dfr1enm                        0x000055be4a43c55c <unavailable> + 5468

    5    libc.so.6                          0x00002aed01986460 __libc_start_main +
    245

    6    tmp_dfr1enm                        0x000055be4a43c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu5r8q2j7/tmpu5r8q2j7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3425e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3425b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3425b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3425b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5r8q2j7                        0x0000555c3eb5d5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b3426062460 __libc_start_main +
    245

    6    tmpu5r8q2j7                        0x0000555c3eb5d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphiw2ch9l.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmphiw2ch9l.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8befb1m5/tmp8befb1m5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee0ff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee0cecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee0cec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee0ceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8befb1m5                        0x0000562b393125ac <unavailable> + 5548

    5    libc.so.6                          0x00002abee11e1460 __libc_start_main +
    245

    6    tmp8befb1m5                        0x0000562b39312129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9oh0dy62.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4xgymnpp.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp6jag0sjv/tmp6jag0sjv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3e2860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3e2557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3e2557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3e25567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jag0sjv                        0x000055be0ba1655c <unavailable> + 5468

    5    libc.so.6                          0x00002ab3e2a4c460 __libc_start_main +
    245

    6    tmp6jag0sjv                        0x000055be0ba160d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979307
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmppg_cxfkp.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmppg_cxfkp.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmppg_cxfkp.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphiw2ch9l.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmphiw2ch9l.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659979306
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2fqxpfwr/tmp2fqxpfwr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5021b80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5021877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5021877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50218767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fqxpfwr                        0x000055fe4155355c <unavailable> + 5468

    5    libc.so.6                          0x00002b5021d6c460 __libc_start_main +
    245

    6    tmp2fqxpfwr                        0x000055fe415530d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwprbkqw9.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpox2s3uda.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824729
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two lists.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpefttwlnj/tmpefttwlnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6464ad9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64647d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64647d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64647cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefttwlnj                        0x000055af7a0fd5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b6464cc5460 __libc_start_main +
    245

    6    tmpefttwlnj                        0x000055af7a0fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979307
