name: HumanEval_160_do_algebra
language: swift
prompt: "\n/// Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n/// the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ list is equal to the length of operand list minus one.\n/// Operand is a list\
  \ of of non-negative integers.\n/// Operator list has at least one operator, and\
  \ operand list has at least two operands.\nfunc do_algebra(operator: [String], operand:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"\
  +\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\",\
  \ \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"\
  *\"], operand: [7, 3, 4]) == 8)"
completions: ["    var result = 0\n    for index in 0..<operand.count {\n        let\
    \ operand1 = operand[index]\n        let operand2 = operand[index + 1]\n     \
    \   switch operator[index] {\n        case \"+\":\n            result += operand1\n\
    \        case \"-\":\n            result -= operand1\n        case \"*\":\n  \
    \          result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         break\n        }\n    }\n    return result", "    var result = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var\
    \ h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n   \
    \ var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var\
    \ r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w\
    \ = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b =\
    \ 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\
    \    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var\
    \ b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g\
    \ = 0\n    var h", "    var result = 0\n    for index in 0..<operand.count {\n\
    \        let operandValue = operand[index]\n        let operatorValue = operator[index]\n\
    \        switch operatorValue {\n        case \"+\":\n            result += operandValue\n\
    \        case \"-\":\n            result -= operandValue\n        case \"*\":\n\
    \            result *= operandValue\n        case \"//\":\n            result\
    \ /= operandValue\n        case \"**\":\n            result **= operandValue\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = 0\n    var i = 0\n    for _ in 0..<operand.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        default:\n \
    \           fatalError(\"Invalid operator\")\n        }\n        i += 1\n    }\n\
    \    return result", "    var result = 0\n    for index in 0..<operand.count {\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Unknown operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result", "    var result\
    \ = 0\n    for index in 0..<operand.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index]\n        case \"-\"\
    :\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            break\n        }\n    }\n    return result", "    var result: Int\
    \ = 0\n    var i = 0\n    for _ in 0..<operand.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    break\n        }\n        i += 1\n    }\n    return result", "    var result\
    \ = 0\n    for index in 0..<operator.count {\n        let operator = operator[index]\n\
    \        let operand = operand[index..<operand.count]\n        switch operator\
    \ {\n        case \"+\":\n            result += operand[0]\n        case \"-\"\
    :\n            result -= operand[0]\n        case \"*\":\n            result *=\
    \ operand[0]\n        case \"//\":\n            result /= operand[0]\n       \
    \ case \"**\":\n            result **= operand[0]\n        default:\n        \
    \    break\n        }\n    }\n    return result", "    var result = 0\n    for\
    \ index in 0..<operand.count {\n        switch operator[index] {\n        case\
    \ \"+\":\n            result += operand[index]\n        case \"-\":\n        \
    \    result -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"/\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result", "    var result = 0\n\
    \    for index in 0..<operator.count {\n        let operator = operator[index]\n\
    \        let operand = operand[index]\n        switch operator {\n        case\
    \ \"+\":\n            result += operand\n        case \"-\":\n            result\
    \ -= operand\n        case \"*\":\n            result *= operand\n        case\
    \ \"//\":\n            result /= operand\n        case \"**\":\n            result\
    \ **= operand\n        default:\n            break\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var i = 0\n    var j = 0\n    for _ in 0..<operand.count\
    \ {\n        if i == operator.count {\n            break\n        }\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[j]\n     \
    \       i += 1\n            j += 1\n        case \"-\":\n            result -=\
    \ operand[j]\n            i += 1\n            j += 1\n        case \"*\":\n  \
    \          result *= operand[j]\n            i += 1\n            j += 1\n    \
    \    case \"//\":\n            result /= operand[j]\n            i += 1\n    \
    \        j += 1\n        case \"**\":\n            result **= operand[j]\n   \
    \         i += 1\n            j += 1\n        default:\n            break\n  \
    \      }\n    }\n    return result", "    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result", "    var result = 0\n    for index in\
    \ 0..<operand.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            break\n\
    \        }\n    }\n    return result", "    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result", "    var result\
    \ = 0\n    for index in 0..<operand.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index]\n        case \"-\"\
    :\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        let operand1\
    \ = operand[index]\n        let operand2 = operand[index + 1]\n        switch\
    \ operator[index] {\n        case \"+\":\n            result += operand1\n   \
    \     case \"-\":\n            result -= operand1\n        case \"*\":\n     \
    \       result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         break\n        }\n    }\n    return result", "    var result = 0\n \
    \   for index in 0..<operand.count {\n        let operandValue = operand[index]\n\
    \        let operatorValue = operator[index]\n        switch operatorValue {\n\
    \        case \"+\":\n            result += operandValue\n        case \"-\":\n\
    \            result -= operandValue\n        case \"*\":\n            result *=\
    \ operandValue\n        case \"/\":\n            result /= operandValue\n    \
    \    case \"**\":\n            result **= operandValue\n        default:\n   \
    \         fatalError(\"Invalid operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        let operand1\
    \ = operand[index]\n        let operand2 = operand[index + 1]\n        switch\
    \ operator[index] {\n        case \"+\":\n            result += operand1\n   \
    \     case \"-\":\n            result -= operand1\n        case \"*\":\n     \
    \       result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         break\n        }\n    }\n    return result", "    var result: Int =\
    \ 0\n    var i = 0\n    while i < operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result = result + operand[i]\n        case\
    \ \"-\":\n            result = result - operand[i]\n        case \"*\":\n    \
    \        result = result * operand[i]\n        case \"//\":\n            result\
    \ = result / operand[i]\n        case \"**\":\n            result = result **\
    \ operand[i]\n        default:\n            break\n        }\n        i += 1\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
