language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_nums(arr: &[-x])\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpno_2goj5.swift:18:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[-x])\n\
    \                                     ^\n                                    \
    \       as [Int]\n/tmp/tmpno_2goj5.swift:18:38: error: cannot pass immutable value\
    \ of type '[Int]' as inout argument\n            count += count_nums(arr: &[-x])\n\
    \                                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_nums(arr: [-x])\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpzosna2_y/tmpzosna2_y.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eff815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eff50cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eff50c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eff50b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzosna2_y                        0x0000562c35363510 <unavailable> + 5392

    5    libc.so.6                          0x00002b7effa01460 __libc_start_main +
    245

    6    tmpzosna2_y                        0x0000562c353630d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += 1\n        } else if num < 100 {\n\
    \            count += 2\n        } else if num < 1000 {\n            count +=\
    \ 3\n        } else if num < 10000 {\n            count += 4\n        } else if\
    \ num < 100000 {\n            count += 5\n        } else if num < 1000000 {\n\
    \            count += 6\n        } else if num < 10000000 {\n            count\
    \ += 7\n        } else if num < 100000000 {\n            count += 8\n        }\
    \ else if num < 1000000000 {\n            count += 9\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdmmwrr4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcoumkcxt/tmpcoumkcxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoumkcxt                        0x00005634a7d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b708b8fd460 __libc_start_main +
    245

    6    tmpcoumkcxt                        0x00005634a7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    if sum < 0 {\n        sum *=\
    \ -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp8thys9os/tmp8thys9os.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af099dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af099ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af099ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af099ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8thys9os                        0x0000558d70e70510 <unavailable> + 5392

    5    libc.so.6                          0x00002af099fd9460 __libc_start_main +
    245

    6    tmp8thys9os                        0x0000558d70e700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) + 1\n        }\
    \ else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptc3zlsiq/tmptc3zlsiq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b092341cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0923113b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0923113988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09231127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc3zlsiq                        0x0000563a2e1ee510 <unavailable> + 5392

    5    libc.so.6                          0x00002b0923608460 __libc_start_main +
    245

    6    tmptc3zlsiq                        0x0000563a2e1ee0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbfjlamuy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x >= 0 {\n            sum += x\n        } else\
    \ {\n            sum += x * -1\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn80vfbyf/tmpn80vfbyf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87b3abbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87b37b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87b37b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87b37b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn80vfbyf                        0x000056252f6e3510 <unavailable> + 5392

    5    libc.so.6                          0x00002b87b3ca7460 __libc_start_main +
    245

    6    tmpn80vfbyf                        0x000056252f6e30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for x in arr {\n\
    \        if x > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpdms3sm1i/tmpdms3sm1i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a7e3aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7e0a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7e0a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7e0a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdms3sm1i                        0x000056266701991a <unavailable> + 6426

    5    libc.so.6                          0x00002b5a7e59a460 __libc_start_main +
    245

    6    tmpdms3sm1i                        0x0000562667019129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x) + 2\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnvtaj0lt.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpnvtaj0lt.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 2\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcf8g6t5n.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \        else {\n            count += x * -1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmphq59d8c8/tmphq59d8c8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a5bc71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a5b968b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a5b968988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a5b9677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphq59d8c8                        0x0000565355b67510 <unavailable> + 5392

    5    libc.so.6                          0x00002b0a5be5d460 __libc_start_main +
    245

    6    tmphq59d8c8                        0x0000565355b670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        for d in num {\n            count += Int(d) > 0 ? 1 : 0\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2ym3ii3s.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp2ym3ii3s.swift:18:18:\
    \ error: for-in loop requires 'Int' to conform to 'Sequence'\n        for d in\
    \ num {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        }\n        if x < 0 {\n            count += count_nums(arr:\
    \ arr[x..<arr.count])\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp08vnvbu.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpp08vnvbu.swift:19:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<arr.count])\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for x in arr {\n\
    \        guard x >= 0 else {\n            guard x < 0 else {\n               \
    \ guard x < 10 else {\n                    guard x < 100 else {\n            \
    \            guard x < 1000 else {\n                            guard x < 10000\
    \ else {\n                                guard x < 100000 else {\n          \
    \                          guard x < 1000000 else {\n                        \
    \                guard x < 10000000 else {\n                                 \
    \           guard x < 100000000 else {\n                                     \
    \           guard x < 1000000000 else {\n                                    \
    \                guard x < 10000000000 else {\n                              \
    \                          guard x < 100000000000 else {\n                   \
    \                                         guard x < 1000000000000 else {\n   \
    \                                                             guard x < 10000000000000\
    \ else {\n                                                                   \
    \ guard x < 100000000000000 else {\n                                         \
    \                               guard x < 1000000000000000 else {\n          \
    \                                                                  guard x < 10000000000000000\
    \ else {\n                                                                   \
    \             guard x < 100000000000000000 else {\n                          \
    \                                                          guard x < 1000000000000000010\
    \ else {\n                                                                   \
    \                     guard x < 10000000000000000100 else {\n                \
    \                                                                            guard\
    \ x < 100000000000000001000 else {\n                                         \
    \                                                       guard x < 1000000000000000010000\
    \ else {\n                                                                   \
    \                                 guard x < 10000000000000000100000 else {\n \
    \                                                                            \
    \                           guard x < 100000000000000001000000 else {\n      \
    \                                                                            \
    \                          guard x < 1000000000000000010000000 else {\n      \
    \                                                                            \
    \                              guard x < 10000000000000000100000000 else {\n \
    \                                                                            \
    \                                       guard x < 100000000000000001000000000\
    \ else {\n                                                                   \
    \                                                     guard x < 1000000000000000010000000000\
    \ else {\n                                                                   \
    \                                                         guard x < 10000000000000000100000000000\
    \ else {\n                                                                   \
    \                                                             guard x < 100000000000000001000000000000\
    \ else {\n                                                                   \
    \                                                                 guard x < 1000000000000000010000000000000\
    \ else {\n                                                                   \
    \                                                                     guard x\
    \ < 10000000000000000100000000000000 else {\n                                \
    \                                                                            \
    \                                guard x < 100000000000000001000000000000000 else\
    \ {\n                                                                        \
    \                                                                        guard\
    \ x < 1000000000000000010000000000000000 else {\n                            \
    \                                                                            \
    \                                            guard x < 10000000000000000100000000000000000\
    \ else {\n                                                                   \
    \                                                                            \
    \         guard x < 100000000000000001000000000000000010 else {\n            \
    \                                                                            \
    \                                                                    guard x <\
    \ 1000000000000000010000000000000000100 else {\n                             \
    \                                                                            \
    \                                                       guard x < 10000000000000000100000000000000001000\
    \ else {\n                                                                   \
    \                                                                            \
    \                     guard x < 100000000000000001000000000000000010000 else {\n\
    \                                                                            \
    \                                                                            \
    \                guard x < 1000000000000000010000000000000000100000 else {\n \
    \                                                                            \
    \                                                                            \
    \                   guard x < 10000000000000000100000000000000001000000 else {\n\
    \                                                                            \
    \                                                                            \
    \                        guard x < 100000000000000001000000000000000010000000\
    \ else {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprjx9vb9y.swift:83:34: error: expected '}' at end of brace statement\n\
    assert(count_nums(arr: [1]) == 1)\n                                 ^\n/tmp/tmprjx9vb9y.swift:59:230:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                                                      guard x < 10000000000000000100000000000000001000000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                            \
    \          ^\n/tmp/tmprjx9vb9y.swift:83:34: error: expected '}' at end of brace\
    \ statement\nassert(count_nums(arr: [1]) == 1)\n                             \
    \    ^\n/tmp/tmprjx9vb9y.swift:58:225: note: to match this opening '{'\n     \
    \                                                                            \
    \                                                                            \
    \           guard x < 1000000000000000010000000000000000100000 else {\n      \
    \                                                                            \
    \                                                                            \
    \                                                                  ^\n/tmp/tmprjx9vb9y.swift:83:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                                 ^\n/tmp/tmprjx9vb9y.swift:57:220: note:\
    \ to match this opening '{'\n                                                \
    \                                                                            \
    \                                        guard x < 100000000000000001000000000000000010000\
    \ else {\n                                                                   \
    \                                                                            \
    \                                                                            ^\n\
    /tmp/tmprjx9vb9y.swift:83:34: error: expected '}' at end of brace st"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for x in arr {\n\
    \        if x < 0 {\n            x -= Int(pow(10, Int(log10(abs(x)))))\n     \
    \   }\n        count += Int(pow(10, Int(log10(abs(x)))))\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_2x46xng.swift:19:22: error: cannot find 'pow' in scope\n     \
    \       x -= Int(pow(10, Int(log10(abs(x)))))\n                     ^~~\n/tmp/tmp_2x46xng.swift:19:34:\
    \ error: cannot find 'log10' in scope\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \                                 ^~~~~\n/tmp/tmp_2x46xng.swift:21:22: error:\
    \ cannot find 'pow' in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n\
    \                     ^~~\n/tmp/tmp_2x46xng.swift:21:34: error: cannot find 'log10'\
    \ in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n              \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   if x > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprx7ru2qy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var count = 0\n    for n in arr {\n\
    \        if n < 0 {\n            n += 10\n        }\n        count += Int(n) %\
    \ 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwshnog8b.swift:19:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n += 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        } else\
    \ {\n            count += count_nums(arr: &[-x])\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpno_2goj5.swift:18:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[-x])\n\
    \                                     ^\n                                    \
    \       as [Int]\n/tmp/tmpno_2goj5.swift:18:38: error: cannot pass immutable value\
    \ of type '[Int]' as inout argument\n            count += count_nums(arr: &[-x])\n\
    \                                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_nums(arr: &[Int](x))\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptjdfozla.swift:15:34: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n        count += count_nums(arr: &[Int](x))\n\
    \                                 ^\n                                        \
    \   as [Int]\n/tmp/tmptjdfozla.swift:15:41: error: missing argument label 'arrayLiteral:'\
    \ in call\n        count += count_nums(arr: &[Int](x))\n                     \
    \                   ^\n                                        arrayLiteral: \n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var sum = 0\n    for x in arr {\n \
    \       sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx2nnkrzz/tmpx2nnkrzz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4bc10fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4bbe06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4bbe06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4bbe057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2nnkrzz                        0x000055981a0a2560 <unavailable> + 5472

    5    libc.so.6                          0x00002ac4bc2fb460 __libc_start_main +
    245

    6    tmpx2nnkrzz                        0x000055981a0a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += x\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3at4mjm5/tmp3at4mjm5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa769cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa766c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa766c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa766c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3at4mjm5                        0x000055b7659d75f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa76bb9460 __libc_start_main +
    245

    6    tmp3at4mjm5                        0x000055b7659d70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += count_digits(arr:\
    \ x.toIntArray())\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz8zf83to.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n/tmp/tmpz8zf83to.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(arr:\
    \ x.toIntArray())\n                     ^~~~~~~~~~~~\n/tmp/tmpz8zf83to.swift:18:42:\
    \ error: value of type 'Int' has no member 'toIntArray'\n            count +=\
    \ count_digits(arr: x.toIntArray())\n                                       ~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += x\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx6jvq94s/tmpx6jvq94s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e57e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e57b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e57b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e57b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6jvq94s                        0x000056149ea685a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1e58039460 __libc_start_main +
    245

    6    tmpx6jvq94s                        0x000056149ea68169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x >= 0 {\n            sum += x\n        } else\
    \ {\n            sum += x * -1\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn80vfbyf/tmpn80vfbyf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87b3abbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87b37b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87b37b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87b37b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn80vfbyf                        0x000056252f6e3510 <unavailable> + 5392

    5    libc.so.6                          0x00002b87b3ca7460 __libc_start_main +
    245

    6    tmpn80vfbyf                        0x000056252f6e30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += Int(log10(abs(x)))\n\
    \        } else {\n            count += Int(log10(abs(-x)))\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp53po26nl.swift:16:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(abs(x)))\n                         ^~~~~\n/tmp/tmp53po26nl.swift:18:26:\
    \ error: cannot find 'log10' in scope\n            count += Int(log10(abs(-x)))\n\
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += count_nums(arr: x.toIntArray())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn35jklju.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n/tmp/tmpn35jklju.swift:18:40:\
    \ error: value of type 'Int' has no member 'toIntArray'\n            count +=\
    \ count_nums(arr: x.toIntArray())\n                                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcoumkcxt/tmpcoumkcxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708b711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcoumkcxt                        0x00005634a7d865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b708b8fd460 __libc_start_main +
    245

    6    tmpcoumkcxt                        0x00005634a7d86169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1fyigni7.swift:17:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp1fyigni7.swift:16:32: note: to match this opening '('\n           \
    \ count += count_nums(arr: (-x).toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt64().toInt\n\
    \                               ^\n/tmp/tmp1fyigni7.swift:39:34: error: expected\
    \ '}' at end of brace statement\nassert(count_nums(arr: [1]) == 1)\n         \
    \                        ^\n/tmp/tmp1fyigni7.swift:14:18: note: to match this\
    \ opening '{'\n    for x in arr {\n                 ^\n/tmp/tmp1fyigni7.swift:39:34:\
    \ error: expected '}' at end of brace statement\nassert(count_nums(arr: [1]) ==\
    \ 1)\n                                 ^\n/tmp/tmp1fyigni7.swift:12:36: note:\
    \ to match this opening '{'\nfunc count_nums(arr: [Int]) -> Int {\n          \
    \                         ^\n/tmp/tmp1fyigni7.swift:16:43: error: value of type\
    \ 'Int' has no member 'toInt64'\n      "
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: [-x, x])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8erlu39b.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: arr[x..<arr.count])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3zwen6vx.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmp3zwen6vx.swift:18:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<arr.count])\n                  \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbfjlamuy.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= (x % 10) * 10\n    \
    \    }\n        count += x / 10\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoj0lb7br.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= (x % 10) * 10\n         \
    \   ~ ^\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += (-x)\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp0sbycxkq/tmp0sbycxkq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b064a475c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b064a16cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b064a16c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b064a16b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sbycxkq                        0x000055eafc7e4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b064a661460 __libc_start_main +
    245

    6    tmp0sbycxkq                        0x000055eafc7e40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    if sum < 0 {\n        sum *=\
    \ -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp8thys9os/tmp8thys9os.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af099dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af099ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af099ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af099ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8thys9os                        0x0000558d70e70510 <unavailable> + 5392

    5    libc.so.6                          0x00002af099fd9460 __libc_start_main +
    245

    6    tmp8thys9os                        0x0000558d70e700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        count += Int(log10(x))\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3drn6rru.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmp3drn6rru.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(x))\n      \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        count += Int(log10(x))\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3drn6rru.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n/tmp/tmp3drn6rru.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(x))\n      \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        if x % 10 == 0 {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpean3mvz4.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x + 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6hk5m58l/tmp6hk5m58l.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b809d19bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809ce92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809ce92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b809ce917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hk5m58l                        0x0000557288d8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002b809d387460 __libc_start_main +
    245

    6    tmp6hk5m58l                        0x0000557288d8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n        num %= 10\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe78wrfpl.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpe78wrfpl.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt64())\n        } else {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1wzggqkm.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInt64'\n            count += count_nums(arr: (-x).toInt64())\n          \
    \                           ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(x) / Int(10)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp653nls2p.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toIntArray())\n        } else {\n            count += count_nums(arr: x.toIntArray())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn35jklju.swift:16:43: error: value of type 'Int' has no member\
    \ 'toIntArray'\n            count += count_nums(arr: (-x).toIntArray())\n    \
    \                                 ~~~~ ^~~~~~~~~~\n/tmp/tmpn35jklju.swift:18:40:\
    \ error: value of type 'Int' has no member 'toIntArray'\n            count +=\
    \ count_nums(arr: x.toIntArray())\n                                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += 1\n        } else if num < 100 {\n\
    \            count += 2\n        } else if num < 1000 {\n            count +=\
    \ 3\n        } else if num < 10000 {\n            count += 4\n        } else if\
    \ num < 100000 {\n            count += 5\n        } else if num < 1000000 {\n\
    \            count += 6\n        } else if num < 10000000 {\n            count\
    \ += 7\n        } else if num < 100000000 {\n            count += 8\n        }\
    \ else if num < 1000000000 {\n            count += 9\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdmmwrr4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += x % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpave4agsc.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) / 9\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4kt7gn5f/tmp4kt7gn5f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86653dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba866234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba866234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8662337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kt7gn5f                        0x0000564f095315a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ba866729460 __libc_start_main +
    245

    6    tmp4kt7gn5f                        0x0000564f09531169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x * -1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptbxo2k87/tmptbxo2k87.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88695ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88692c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88692c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88692c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbxo2k87                        0x00005628ac174510 <unavailable> + 5392

    5    libc.so.6                          0x00002b88697b8460 __libc_start_main +
    245

    6    tmptbxo2k87                        0x00005628ac1740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) % 10\n    \
    \    } else {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8rjhfnoi/tmp8rjhfnoi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bff25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bfc1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85bfc1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85bfc1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rjhfnoi                        0x000055a13111d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b85c0111460 __libc_start_main +
    245

    6    tmp8rjhfnoi                        0x000055a13111d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += Int(log10(abs(x)))\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2s12nxm3.swift:16:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(abs(x)))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += count_digits(num)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hq6dibh.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn2j7vylp/tmpn2j7vylp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48b883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48b883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48b8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2j7vylp                        0x0000557f42356510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba48bd78460 __libc_start_main +
    245

    6    tmpn2j7vylp                        0x0000557f423560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphwf027ok.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[x..<x])\n        } else {\n            count += count_nums(arr: [-x..<0])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl7306jq2.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[x..<x])\n\
    \                                        ^\n/tmp/tmpl7306jq2.swift:18:41: error:\
    \ cannot convert value of type 'Range<Int>' to expected element type 'Int'\n \
    \           count += count_nums(arr: [-x..<0])\n                             \
    \           ^\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt64())\n        } else {\n            count += count_nums(arr: x.toInt64())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjpuovxs_.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInt64'\n            count += count_nums(arr: (-x).toInt64())\n          \
    \                           ~~~~ ^~~~~~~\n/tmp/tmpjpuovxs_.swift:18:40: error:\
    \ value of type 'Int' has no member 'toInt64'\n            count += count_nums(arr:\
    \ x.toInt64())\n                                     ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x) % 10\n       \
    \ } else {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprdihftl9/tmprdihftl9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea7073ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea70435b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea70435988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea704347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdihftl9                        0x000056372f83f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aea7092a460 __libc_start_main +
    245

    6    tmprdihftl9                        0x000056372f83f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += Int(num / 10)\n        num %= 10\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp03p55zhp.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp03p55zhp.swift:19:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x) + 1 // first digit of\
    \ negative number\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1ngkmt_k.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmp1ngkmt_k.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\
    \ + 1 // first digit of negative number\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ (-x).toInt())\n        } else {\n            count += count_nums(arr: (x).toInt())\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmoq277kp.swift:16:43: error: value of type 'Int' has no member\
    \ 'toInt'\n            count += count_nums(arr: (-x).toInt())\n              \
    \                       ~~~~ ^~~~~\n/tmp/tmpmoq277kp.swift:18:42: error: value\
    \ of type 'Int' has no member 'toInt'\n            count += count_nums(arr: (x).toInt())\n\
    \                                     ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += count_nums(arr:\
    \ Array(x)) // recurse\n        } else {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2m22_342.swift:16:44: error: missing argument label 'arrayLiteral:'\
    \ in call\n            count += count_nums(arr: Array(x)) // recurse\n       \
    \                                    ^\n                                     \
    \      arrayLiteral: \n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \        }\n        count += Int(pow(10, Int(log10(abs(x)))))\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp59w5hjzy.swift:16:22: error: cannot find 'pow' in scope\n     \
    \       x -= Int(pow(10, Int(log10(abs(x)))))\n                     ^~~\n/tmp/tmp59w5hjzy.swift:16:34:\
    \ error: cannot find 'log10' in scope\n            x -= Int(pow(10, Int(log10(abs(x)))))\n\
    \                                 ^~~~~\n/tmp/tmp59w5hjzy.swift:18:22: error:\
    \ cannot find 'pow' in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n\
    \                     ^~~\n/tmp/tmp59w5hjzy.swift:18:34: error: cannot find 'log10'\
    \ in scope\n        count += Int(pow(10, Int(log10(abs(x)))))\n              \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        } else\
    \ {\n            count += x + 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6hk5m58l/tmp6hk5m58l.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b809d19bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b809ce92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b809ce92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b809ce917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hk5m58l                        0x0000557288d8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002b809d387460 __libc_start_main +
    245

    6    tmp6hk5m58l                        0x0000557288d8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num == 0 {\n            count += 1\n        } else {\n           \
    \ count += num % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptuss4b9j.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ arr[0..<x])\n        } else {\n            count += count_nums(arr: arr[x..<0])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpao1sqe8o.swift:16:41: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: arr[0..<x])\n\
    \                                        ^\n/tmp/tmpao1sqe8o.swift:18:41: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: arr[x..<0])\n                          \
    \              ^\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n        }\n     \
    \   count += Int(log10(Double(x)))\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1zijsgap.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n/tmp/tmp1zijsgap.swift:18:22:\
    \ error: cannot find 'log10' in scope\n        count += Int(log10(Double(x)))\n\
    \                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= Int(log10(abs(x)))\n\
    \        }\n        if x > 0 && x % 10 == 0 {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpt4wkjbvv.swift:16:22: error: cannot find 'log10' in scope\n   \
    \         x -= Int(log10(abs(x)))\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        sum += num\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9k63ckdc/tmp9k63ckdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd532bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd52fb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd52fb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd52fb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k63ckdc                        0x0000559867a39510 <unavailable> + 5392

    5    libc.so.6                          0x00002acd534ab460 __libc_start_main +
    245

    6    tmp9k63ckdc                        0x0000559867a390d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += num\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6ee39brk.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += x\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3at4mjm5/tmp3at4mjm5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa769cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa766c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa766c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa766c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3at4mjm5                        0x000055b7659d75f5 <unavailable> + 5621

    5    libc.so.6                          0x00002afa76bb9460 __libc_start_main +
    245

    6    tmp3at4mjm5                        0x000055b7659d70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var count = 0\n    for n in arr {\n        if n >\
    \ 0 {\n            count += Int(log10(Double(n)))\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprppssjwb.swift:17:26: error: cannot find 'log10' in scope\n   \
    \         count += Int(log10(Double(n)))\n                         ^~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_digits(x)\n\
    \        } else {\n            count += count_digits(-x)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpio34m23t.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpio34m23t.swift:18:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 9 {\n            num = num % 10\n        }\n        count +=\
    \ num\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp47xamvz4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp47xamvz4.swift:19:13:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n            num =\
    \ num % 10\n            ^~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpu2nm2ref/tmpu2nm2ref.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8200c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad81fdbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad81fdba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81fdb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2nm2ref                        0x000055f3e893f8ca <unavailable> + 6346

    5    libc.so.6                          0x00002ad8202af460 __libc_start_main +
    245

    6    tmpu2nm2ref                        0x000055f3e893f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ &[x-arr[x]])\n        } else {\n            count += count_nums(arr: &[abs(x)-arr[x]])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_j1gvdjx.swift:16:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[x-arr[x]])\n\
    \                                     ^\n                                    \
    \             as [Int]\n/tmp/tmp_j1gvdjx.swift:16:38: error: cannot pass immutable\
    \ value of type '[Int]' as inout argument\n            count += count_nums(arr:\
    \ &[x-arr[x]])\n                                     ^~~~~~~~~~~\n/tmp/tmp_j1gvdjx.swift:18:38:\
    \ error: cannot convert value of type '[Int]' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: &[abs(x)-arr[x]])\n                    \
    \                 ^\n                                                      as\
    \ [Int]\n/tmp/tmp_j1gvdjx.swift:18:38: error: cannot pass immutable value of type\
    \ '[Int]' as inout argument\n            count += count_nums(arr: &[abs(x)-arr[x]])\n\
    \                                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 0 {\n            count += num % 10\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzymu7os2.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num > 9 {\n            count += num - 10\n        } else {\n     \
    \       count += num\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp65v5v_by.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            sum += (-x).digits()[0]\n\
    \        } else {\n            sum += x.digits()[0]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq0nxi4tn.swift:16:25: error: value of type 'Int' has no member\
    \ 'digits'\n            sum += (-x).digits()[0]\n                   ~~~~ ^~~~~~\n\
    /tmp/tmpq0nxi4tn.swift:18:22: error: value of type 'Int' has no member 'digits'\n\
    \            sum += x.digits()[0]\n                   ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x > 0 {\n            count += count_digits(x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_47tj0qe.swift:16:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += x\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc872xw1l/tmpc872xw1l.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b267f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b267f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b267f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b267f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc872xw1l                        0x000055e724e8c5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b267f9d9460 __libc_start_main +
    245

    6    tmpc872xw1l                        0x000055e724e8c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += num\n        } else {\n         \
    \   count += num - 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp65eoe6mk.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7fm6z2sq.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpn2j7vylp/tmpn2j7vylp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48bb8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48b883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48b883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48b8827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2j7vylp                        0x0000557f42356510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba48bd78460 __libc_start_main +
    245

    6    tmpn2j7vylp                        0x0000557f423560d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgctohji_.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num < 10 {\n            count += 1\n        } else if num < 100 {\n\
    \            count += 2\n        } else if num < 1000 {\n            count +=\
    \ 3\n        } else if num < 10000 {\n            count += 4\n        } else if\
    \ num < 100000 {\n            count += 5\n        } else if num < 1000000 {\n\
    \            count += 6\n        } else if num < 10000000 {\n            count\
    \ += 7\n        } else if num < 100000000 {\n            count += 8\n        }\
    \ else if num < 1000000000 {\n            count += 9\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdmmwrr4.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += count_nums(arr:\
    \ &[x - 1])\n        } else {\n            count += count_nums(arr: &[x + 1])\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprz31afsl.swift:16:38: error: cannot convert value of type '[Int]'\
    \ to expected argument type '[Int]'\n            count += count_nums(arr: &[x\
    \ - 1])\n                                     ^\n                            \
    \                  as [Int]\n/tmp/tmprz31afsl.swift:16:38: error: cannot pass\
    \ immutable value of type '[Int]' as inout argument\n            count += count_nums(arr:\
    \ &[x - 1])\n                                     ^~~~~~~~\n/tmp/tmprz31afsl.swift:18:38:\
    \ error: cannot convert value of type '[Int]' to expected argument type '[Int]'\n\
    \            count += count_nums(arr: &[x + 1])\n                            \
    \         ^\n                                              as [Int]\n/tmp/tmprz31afsl.swift:18:38:\
    \ error: cannot pass immutable value of type '[Int]' as inout argument\n     \
    \       count += count_nums(arr: &[x + 1])\n                                 \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x) + 1\n     \
    \   } else {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4e10sn1/tmpx4e10sn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160cbf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160c8e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160c8e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160c8e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4e10sn1                        0x00005651c08f7510 <unavailable> + 5392

    5    libc.so.6                          0x00002b160cdde460 __libc_start_main +
    245

    6    tmpx4e10sn1                        0x00005651c08f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num / 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqjq9vzmz.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        count += num % 10\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28y924w5.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013343
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            count += (-x).magnitude\n\
    \        } else {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1nbkek_v.swift:16:27: error: cannot convert value of type 'UInt'\
    \ to expected argument type 'Int'\n            count += (-x).magnitude\n     \
    \                     ^\n                     Int(          )\n"
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
