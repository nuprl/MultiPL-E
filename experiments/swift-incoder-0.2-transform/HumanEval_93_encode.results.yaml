language: swift
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5grjsorz.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp5grjsorz.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        default:\n            result += letter\n        }\n    }\n    for\
    \ vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n        let\
    \ letter = result[index! + 2]\n        result = result.replacingOccurrences(of:\
    \ vowel, with: letter)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8hevd8s.swift:27:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmpp8hevd8s.swift:31:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: vowel)\n\
    \                           ^\n/tmp/tmpp8hevd8s.swift:31:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: vowel)\n                     \
    \      ^~~~~\n                           firstIndex\n/tmp/tmpp8hevd8s.swift:32:34:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let letter = result[index! + 2]\n                           \
    \      ^\n/tmp/tmpp8hevd8s.swift:33:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: vowel,\
    \ with: letter)\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            if let index = result.index(of: letter) {\n                let vowel\
    \ = result[index + 1]\n                let vowelIndex = result.index(of: vowel)\n\
    \                result[index] = vowel\n                result[vowelIndex] = letter\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfbgj1v4i.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfbgj1v4i.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfbgj1v4i.swift:23:35: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            if let index = result.index(of:\
    \ letter) {\n                                  ^\n/tmp/tmpfbgj1v4i.swift:23:35:\
    \ note: use 'firstIndex(of:)' instead\n            if let index = result.index(of:\
    \ letter) {\n                                  ^~~~~\n                       \
    \           firstIndex\n/tmp/tmpfbgj1v4i.swift:24:36: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n                let\
    \ vowel = result[index + 1]\n                                   ^\n/tmp/tmpfbgj1v4i.swift:26:23:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    result[index] = vowel\n                ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += alphabet[alphabet.index(of: replacement)!]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplucidp4b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmplucidp4b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmplucidp4b.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmplucidp4b.swift:17:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n                  ^~~~~~~~\n/tmp/tmplucidp4b.swift:17:28: error:\
    \ cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextIndex = index + 2\n        if nextIndex < english.count {\n \
    \           let nextLetter = english[nextIndex]\n            result += String(letter).uppercased()\
    \ + String(nextLetter).lowercased()\n        } else {\n            result += String(letter).uppercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcfl5v889.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpcfl5v889.swift:17:24:\
    \ error: cannot find 'english' in scope\n        if nextIndex < english.count\
    \ {\n                       ^~~~~~~\n/tmp/tmpcfl5v889.swift:18:30: error: cannot\
    \ find 'english' in scope\n            let nextLetter = english[nextIndex]\n \
    \                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextIndex = english.index(of: letter, offsetBy: index + 1)\n    \
    \    if index != nil && nextIndex != nil {\n            let replacement = english[index!].uppercased()\
    \ + english[nextIndex!].lowercased()\n            result += replacement\n    \
    \    } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcv9yk21x.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpcv9yk21x.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ letter, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmpcv9yk21x.swift:18:31:\
    \ error: cannot find 'english' in scope\n            let replacement = english[index!].uppercased()\
    \ + english[nextIndex!].lowercased()\n                              ^~~~~~~\n\
    /tmp/tmpcv9yk21x.swift:18:62: error: cannot find 'english' in scope\n        \
    \    let replacement = english[index!].uppercased() + english[nextIndex!].lowercased()\n\
    \                                                             ^~~~~~~\n/tmp/tmpcv9yk21x.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5mlt2m8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpw5mlt2m8.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2) % alphabet.count]\n                \
    \          ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:16:51: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \                                                  ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        let replacement = result.index(index, offsetBy: 2)\n       \
    \ let replacementLetter = result[index].lowercased()\n        result = result.substring(to:\
    \ replacement)\n        result += replacementLetter\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp09xyixl3.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp09xyixl3.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmp09xyixl3.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp09xyixl3.swift:23:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmp09xyixl3.swift:23:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmp09xyixl3.swift:23:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmp09xyixl3.swift:24:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacementLetter = result[index].lowercased()\n\
    \                                       ^\n/tmp/tmp09xyixl3.swift:24:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        let replacementLetter = result[index].lowercased()\n                \
    \                       ^\n                                             ?? <#default\
    \ value#>\n/tmp/tmp09xyixl3.swift:24:40: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let replacementLetter\
    \ = result[index].lowercased()\n                                       ^\n   \
    \                                         !\n/tmp/tmp09xyi"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let nextIndex = english.index(of: char, offsetBy: index + 1)\n      \
    \  if nextIndex == nil {\n            result += english[english.index(of: char)]\n\
    \        } else {\n            result += english[nextIndex!]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvb7zzstd.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpvb7zzstd.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ char, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:23:\
    \ error: cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                      ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:31: error:\
    \ cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                              ^~~~~~~\n/tmp/tmpvb7zzstd.swift:20:23:\
    \ error: cannot find 'english' in scope\n            result += english[nextIndex!]\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for letter in result {\n        if letter.isLetter()\
    \ {\n            if let index = result.index(of: letter) {\n                if\
    \ index == result.index(of: \"A\") {\n                    result += \"B\"\n  \
    \              } else if index == result.index(of: \"E\") {\n                \
    \    result += \"F\"\n                } else if index == result.index(of: \"I\"\
    ) {\n                    result += \"J\"\n                } else if index == result.index(of:\
    \ \"O\") {\n                    result += \"M\"\n                } else if index\
    \ == result.index(of: \"U\") {\n                    result += \"N\"\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jxeuafz.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0jxeuafz.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp0jxeuafz.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp0jxeuafz.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmp0jxeuafz.swift:23:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    if let index = result.index(of: letter) {\n                             \
    \     ^\n/tmp/tmp0jxeuafz.swift:23:35: note: use 'firstIndex(of:)' instead\n \
    \           if let index = result.index(of: letter) {\n                      \
    \            ^~~~~\n                                  firstIndex\n/tmp/tmp0jxeuafz.swift:24:36:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        if index == result.index(of: \"A\") {\n                             \
    \      ^\n/tmp/tmp0jxeuafz.swift:24:36: note: use 'firstIndex(of:)' instead\n\
    \                if index == result.index(of: \"A\") {\n                     \
    \              ^~~~~\n                                   firstIndex\n/tmp/tmp0jxeuafz.swift:26:43:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        } else if index == result.index(of: \"E\") {\n                      \
    \                    ^\n/tmp/tmp0jxeuafz.swift:26:43: note: use 'firstIndex(of:)'\
    \ instead\n                } else if index == result.index(of: \"E\") {\n    \
    \                                      ^~~~~\n                               \
    \           firstIndex\n/tmp/tmp0jxeuafz.swift:28:43: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n                } else if index ==\
    \ result.index(of: \"I\") {\n                             "
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index != nil {\n            let replacement = alphabet[index!\
    \ + 1]\n            result += String(letter).replacingOccurrences(of: letter,\
    \ with: replacement)\n        } else {\n            result += String(letter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl2b4d_sa.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpl2b4d_sa.swift:17:31: error: cannot find 'alphabet' in scope\n       \
    \     let replacement = alphabet[index! + 1]\n                              ^~~~~~~~\n\
    /tmp/tmpl2b4d_sa.swift:18:38: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \            result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                      ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c_0sz29.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp9c_0sz29.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n/tmp/tmp9c_0sz29.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for letter in result {\n        if letter.isLetter()\
    \ {\n            if let vowelIndex = vowels.indexOf(letter) {\n              \
    \  let vowel = vowels[vowelIndex]\n                let vowelIndex = vowels.index(letter,\
    \ offsetBy: 2)\n                let vowel = vowels[vowelIndex]\n             \
    \   result += vowel\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfera_vuo.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfera_vuo.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpfera_vuo.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpfera_vuo.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmpfera_vuo.swift:23:33:\
    \ error: cannot find 'vowels' in scope\n            if let vowelIndex = vowels.indexOf(letter)\
    \ {\n                                ^~~~~~\n/tmp/tmpfera_vuo.swift:24:29: error:\
    \ cannot find 'vowels' in scope\n                let vowel = vowels[vowelIndex]\n\
    \                            ^~~~~~\n/tmp/tmpfera_vuo.swift:25:34: error: cannot\
    \ find 'vowels' in scope\n                let vowelIndex = vowels.index(letter,\
    \ offsetBy: 2)\n                                 ^~~~~~\n/tmp/tmpfera_vuo.swift:26:29:\
    \ error: cannot find 'vowels' in scope\n                let vowel = vowels[vowelIndex]\n\
    \                            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = alphabet.index(of: char)\n\
    \        let nextIndex = alphabet.index(of: char, offsetBy: index + 1)\n     \
    \   let replacement = alphabet[nextIndex!]\n        result += String(replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaw01atqt.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: char)\n                    ^~~~~~~~\n\
    /tmp/tmpaw01atqt.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: char, offsetBy: index + 1)\n            \
    \            ^~~~~~~~\n/tmp/tmpaw01atqt.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex!]\n                 \
    \         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n        let\
    \ index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n        if nextIndex != nil {\n            let\
    \ replacement = String(message.substring(from: index!, to: nextIndex!))\n    \
    \        result += replacement\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvch60ni0.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpvch60ni0.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpvch60ni0.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpvch60ni0.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpvch60ni0.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpvch60ni0.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpvch60ni0.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpvch60ni0.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                ^\n/tmp/tmpvch60ni0.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpvch60ni0.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpvch60ni0.swift:23:65:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextIndex = message"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[index!]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8d0xd1mg.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp8d0xd1mg.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmp8d0xd1mg.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[index!] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n\
    \        result += String(vowel).swapCase()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp830ac22n.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp830ac22n.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp830ac22n.swift:23:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp830ac22n.swift:27:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        let replacement\
    \ = alphabet.index(of: nextLetter)!\n        result += alphabet[replacement]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2z6j8zvc.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2z6j8zvc.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmp2z6j8zvc.swift:17:27:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet.index(of:\
    \ nextLetter)!\n                          ^~~~~~~~\n/tmp/tmp2z6j8zvc.swift:18:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[replacement]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        let replacement = result.index(index, offsetBy: 2)\n       \
    \ if replacement != nil {\n            let replacementLetter = result[index! +\
    \ 1]\n            result = result.replacingOccurrences(of: vowel, with: replacementLetter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpltu5dgbj.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpltu5dgbj.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpltu5dgbj.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpltu5dgbj.swift:23:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpltu5dgbj.swift:23:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmpltu5dgbj.swift:23:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmpltu5dgbj.swift:25:49:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let replacementLetter = result[index! + 1]\n            \
    \                                    ^\n/tmp/tmpltu5dgbj.swift:26:29: error: value\
    \ of type 'String' has no member 'replacingOccurrences'\n            result =\
    \ result.replacingOccurrences(of: vowel, with: replacementLetter)\n          \
    \           ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0nogou15.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp0nogou15.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp0nogou15.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp0nogou15.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n        result\
    \ += vowel.swapCase()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppfmmxto0.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmppfmmxto0.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmppfmmxto0.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmppfmmxto0.swift:27:25:\
    \ error: value of type 'Character' has no member 'swapCase'\n        result +=\
    \ vowel.swapCase()\n                  ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += replacement\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_gjuqery.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp_gjuqery.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let twoAhead = result[index!.advanced(by:\
    \ 2)!]\n            let replacement = vowel.lowercased()\n            let newIndex\
    \ = result.index(of: replacement)\n            if newIndex != nil {\n        \
    \        result.replaceSubrange(newIndex!, with: twoAhead)\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6u1utyly.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp6u1utyly.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmp6u1utyly.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp6u1utyly.swift:24:42:\
    \ error: value of type 'String.Index' has no member 'advanced'\n            let\
    \ twoAhead = result[index!.advanced(by: 2)!]\n                               \
    \   ~~~~~~ ^~~~~~~~\n/tmp/tmp6u1utyly.swift:26:45: error: cannot convert value\
    \ of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \            let newIndex = result.index(of: replacement)\n                  \
    \                          ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"a\"\n        case \"b\":\n            result +=\
    \ \"b\"\n        case \"c\":\n            result += \"c\"\n        case \"d\"\
    :\n            result += \"d\"\n        case \"e\":\n            result += \"\
    e\"\n        case \"f\":\n            result += \"f\"\n        case \"g\":\n \
    \           result += \"g\"\n        case \"h\":\n            result += \"h\"\n\
    \        case \"i\":\n            result += \"i\"\n        case \"j\":\n     \
    \       result += \"j\"\n        case \"k\":\n            result += \"k\"\n  \
    \      case \"l\":\n            result += \"l\"\n        case \"m\":\n       \
    \     result += \"m\"\n        case \"n\":\n            result += \"n\"\n    \
    \    case \"o\":\n            result += \"o\"\n        case \"p\":\n         \
    \   result += \"p\"\n        case \"q\":\n            result += \"q\"\n      \
    \  case \"r\":\n            result += \"r\"\n        case \"s\":\n           \
    \ result += \"s\"\n        case \"t\":\n            result += \"t\"\n        case\
    \ \"u\":\n            result += \"u\"\n        case \"v\":\n            result\
    \ += \"v\"\n        case \"w\":\n            result += \"w\"\n        case \"\
    x\":\n            result += \"x\"\n        case \"y\":\n            result +=\
    \ \"y\"\n        case \"z\":\n            result += \"z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzx6nrzue.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for letter in result {\n  \
    \      switch letter {\n        case \"A\":\n        case \"E\":\n        case\
    \ \"I\":\n        case \"O\":\n        case \"U\":\n            result += letter\n\
    \        default:\n            result += String(letter).swapCase()\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpta_14ahf.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpta_14ahf.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpta_14ahf.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpta_14ahf.swift:23:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpta_14ahf.swift:33:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpta_14ahf.swift:35:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcum1uh60.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpcum1uh60.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmpcum1uh60.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmpcum1uh60.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplna1_cd5.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmplna1_cd5.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmplna1_cd5.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3_q3e8_b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp3_q3e8_b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp3_q3e8_b.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp3_q3e8_b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5s_a55_9.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp5s_a55_9.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp5s_a55_9.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp5s_a55_9.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmp5s_a55_9.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmp5s_a55_9.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for vowel in \"aeiou\" {\n        result += vowel.lowercased()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprzryy50i.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmprzryy50i.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    g\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"s\"\n        case \"e\":\n            result = \"h\"\n \
    \       case \"f\":\n            result = \"j\"\n        case \"g\":\n       \
    \     result = \"x\"\n        case \"h\":\n            result = \"q\"\n      \
    \  case \"i\":\n            result = \"x\"\n        case \"j\":\n            result\
    \ = \"w\"\n        case \"k\":\n            result = \"y\"\n        case \"l\"\
    :\n            result = \"z\"\n        case \"m\":\n            result = \"p\"\
    \n        case \"n\":\n            result = \"b\"\n        case \"o\":\n     \
    \       result = \"v\"\n        case \"p\":\n            result = \"m\"\n    \
    \    case \"q\":\n            result = \"v\"\n        case \"r\":\n          \
    \  result = \"y\"\n        case \"s\":\n            result = \"t\"\n        case\
    \ \"t\":\n            result = \"g\"\n        case \"u\":\n            result\
    \ = \"y\"\n        case \"v\":\n            result = \"k\"\n        case \"w\"\
    :\n            result = \"q\"\n        case \"x\":\n            result = \"v\"\
    \n        case \"y\":\n            result = \"w\"\n        case \"z\":\n     \
    \       result = \"l\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp63yjf84o.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in vowels {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowels[vowel])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr702q1wx.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpr702q1wx.swift:21:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index)]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdis4559h.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpdis4559h.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                          ^~~~~~~\n/tmp/tmpdis4559h.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                                  ^~~~~~~\n/tmp/tmpdis4559h.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index! + 2]\n        result += String(char).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0ukb020y.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmp0ukb020y.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter == \"A\" {\n\
    \            result = \"B\"\n        } else if letter == \"B\" {\n           \
    \ result = \"C\"\n        } else if letter == \"C\" {\n            result = \"\
    D\"\n        } else if letter == \"D\" {\n            result = \"E\"\n       \
    \ } else if letter == \"E\" {\n            result = \"F\"\n        } else if letter\
    \ == \"F\" {\n            result = \"G\"\n        } else if letter == \"G\" {\n\
    \            result = \"H\"\n        } else if letter == \"H\" {\n           \
    \ result = \"I\"\n        } else if letter == \"I\" {\n            result = \"\
    J\"\n        } else if letter == \"J\" {\n            result = \"K\"\n       \
    \ } else if letter == \"K\" {\n            result = \"L\"\n        } else if letter\
    \ == \"L\" {\n            result = \"M\"\n        } else if letter == \"M\" {\n\
    \            result = \"N\"\n        } else if letter == \"N\" {\n           \
    \ result = \"O\"\n        } else if letter == \"O\" {\n            result = \"\
    P\"\n        } else if letter == \"P\" {\n            result = \"Q\"\n       \
    \ } else if letter == \"Q\" {\n            result = \"R\"\n        } else if letter\
    \ == \"R\" {\n            result = \"S\"\n        } else if letter == \"S\" {\n\
    \            result = \"T\"\n        } else if letter == \"T\" {\n           \
    \ result = \"U\"\n        } else if letter == \"U\" {\n            result = \"\
    V\"\n        } else if letter == \"V\" {\n            result = \"W\"\n       \
    \ } else if letter == \"W\" {\n            result = \"X\"\n        } else if letter\
    \ == \"X\" {\n            result = \"Y\"\n        } else if letter == \"Y\" {\n\
    \            result = \"Z\"\n        } else if letter == \"Z\" {\n           \
    \ result = \"A\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbg3_w3u6.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     result += String(vowel)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpim2wuk5o.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpim2wuk5o.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp25e0zobs.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp25e0zobs.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp25e0zobs.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2)%26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp86idx517.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp86idx517.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2)%26]\n                          ^~~~~~~~\n\
    /tmp/tmp86idx517.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\":\n    \
    \    case \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter.swapCase()\n        }\n    }\n    for vowel in \"\
    aeiouAEIOU\" {\n        result += vowel\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_mg0ktju.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp_mg0ktju.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_mg0ktju.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp_mg0ktju.swift:28:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmp_mg0ktju.swift:32:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        result += vowel\n                  ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if let index = english.index(of:\
    \ letter) {\n            let twoLetters = english[index + 2]\n            if let\
    \ index = vowels.index(of: letter) {\n                let vowel = vowels[index]\n\
    \                let replacement = vowels[vowels.index(of: twoLetters)]\n    \
    \            let replacementIndex = vowels.index(of: replacement)\n          \
    \      let replacementLetter = vowels[replacementIndex]\n                result.replaceSubrange(index..<index\
    \ + 2, with: replacementLetter)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk7b4wydg.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpk7b4wydg.swift:22:24:\
    \ error: cannot find 'english' in scope\n        if let index = english.index(of:\
    \ letter) {\n                       ^~~~~~~\n/tmp/tmpk7b4wydg.swift:23:30: error:\
    \ cannot find 'english' in scope\n            let twoLetters = english[index +\
    \ 2]\n                             ^~~~~~~\n/tmp/tmpk7b4wydg.swift:24:28: error:\
    \ cannot find 'vowels' in scope\n            if let index = vowels.index(of: letter)\
    \ {\n                           ^~~~~~\n/tmp/tmpk7b4wydg.swift:25:29: error: cannot\
    \ find 'vowels' in scope\n                let vowel = vowels[index]\n        \
    \                    ^~~~~~\n/tmp/tmpk7b4wydg.swift:26:35: error: cannot find\
    \ 'vowels' in scope\n                let replacement = vowels[vowels.index(of:\
    \ twoLetters)]\n                                  ^~~~~~\n/tmp/tmpk7b4wydg.swift:26:42:\
    \ error: cannot find 'vowels' in scope\n                let replacement = vowels[vowels.index(of:\
    \ twoLetters)]\n                                         ^~~~~~\n/tmp/tmpk7b4wydg.swift:27:40:\
    \ error: cannot find 'vowels' in scope\n                let replacementIndex =\
    \ vowels.index(of: replacement)\n                                       ^~~~~~\n\
    /tmp/tmpk7b4wydg.swift:28:41: error: cannot find 'vowels' in scope\n         \
    \       let replacementLetter = vowels[replacementIndex]\n                   \
    \                     ^~~~~~\n/tmp/tmpk7b4wydg.swift:29:17: error: instance method\
    \ 'replaceSubrange(_:with:)' requires the types 'String.Index' and 'Int' be equivalent\n\
    \                result.replaceSubrange(index..<index + 2, with: replacementLetter)\n\
    \                ^\nSwift.RangeReplaceableCollection:2:37: note: where 'Self.Index'\
    \ = 'String.Index', 'R.Bound' = 'Int'\n    @inlinable public mutating func replaceSubrange<C,\
    \ R>(_ subrange: R, with newElements: __owned C) where C : Collection, R : RangeExpression,\
    \ Self.Element == C.Element, Self.Index == R.Bound\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index)]\n\
    \        result += String(letter).replacingOccurrences(of: replacement, with:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyrnv7km7.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpyrnv7km7.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                          ^~~~~~~\n/tmp/tmpyrnv7km7.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index)]\n                                  ^~~~~~~\n/tmp/tmpyrnv7km7.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: replacement, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let nextIndex = english.index(of: char, offsetBy: index + 1)\n      \
    \  if nextIndex == nil {\n            result += english[english.index(of: char)]\n\
    \        } else {\n            result += english[nextIndex!]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvb7zzstd.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpvb7zzstd.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ char, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:23:\
    \ error: cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                      ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:31: error:\
    \ cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                              ^~~~~~~\n/tmp/tmpvb7zzstd.swift:20:23:\
    \ error: cannot find 'english' in scope\n            result += english[nextIndex!]\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmcq_efyq.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpmcq_efyq.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpmcq_efyq.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    h\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"g\"\n        case \"e\":\n            result = \"s\"\n \
    \       case \"f\":\n            result = \"c\"\n        case \"g\":\n       \
    \     result = \"g\"\n        case \"h\":\n            result = \"h\"\n      \
    \  case \"i\":\n            result = \"k\"\n        case \"j\":\n            result\
    \ = \"g\"\n        case \"k\":\n            result = \"k\"\n        case \"l\"\
    :\n            result = \"s\"\n        case \"m\":\n            result = \"c\"\
    \n        case \"n\":\n            result = \"m\"\n        case \"o\":\n     \
    \       result = \"g\"\n        case \"p\":\n            result = \"s\"\n    \
    \    case \"q\":\n            result = \"c\"\n        case \"r\":\n          \
    \  result = \"g\"\n        case \"s\":\n            result = \"s\"\n        case\
    \ \"t\":\n            result = \"t\"\n        case \"u\":\n            result\
    \ = \"k\"\n        case \"v\":\n            result = \"g\"\n        case \"w\"\
    :\n            result = \"k\"\n        case \"x\":\n            result = \"g\"\
    \n        case \"y\":\n            result = \"k\"\n        case \"z\":\n     \
    \       result = \"g\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplcec_gud.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)]\n        result +=\
    \ String(letter).replacingOccurrences(of: replacement, with: replacement)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq1xa7jk7.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpq1xa7jk7.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)]\n                          ^~~~~~~~\n\
    /tmp/tmpq1xa7jk7.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: replacement, with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5s_a55_9.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp5s_a55_9.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp5s_a55_9.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp5s_a55_9.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmp5s_a55_9.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmp5s_a55_9.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5s_a55_9.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp5s_a55_9.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp5s_a55_9.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp5s_a55_9.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmp5s_a55_9.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmp5s_a55_9.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else if letter.isLower() {\n            result\
    \ += letter.swapCase()\n        } else {\n            result += letter\n     \
    \   }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        if let index = result.rangeOfString(vowel)\
    \ {\n            let replacement = result.substringFromIndex(index).lowercased()\n\
    \            let replacementIndex = index + vowel.characters.count\n         \
    \   result = result.substringToIndex(replacementIndex)\n            result +=\
    \ replacement\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpta_g1uhs.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpta_g1uhs.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpta_g1uhs.swift:17:26:\
    \ error: value of type 'Character' has no member 'isLower'\n        } else if\
    \ letter.isLower() {\n                  ~~~~~~ ^~~~~~~\n/tmp/tmpta_g1uhs.swift:18:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmpta_g1uhs.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpta_g1uhs.swift:24:31:\
    \ error: value of type 'String' has no member 'rangeOfString'\n        if let\
    \ index = result.rangeOfString(vowel) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpta_g1uhs.swift:25:38: error: value of type 'String' has no member 'substringFromIndex'\n\
    \            let replacement = result.substringFromIndex(index).lowercased()\n\
    \                              ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpta_g1uhs.swift:26:50:\
    \ error: value of type 'Character' has no member 'characters'\n            let\
    \ replacementIndex = index + vowel.characters.count\n                        \
    \                   ~~~~~ ^~~~~~~~~~\n/tmp/tmpta_g1uhs.swift:27:29: error: value\
    \ of type 'String' has no member 'substringToIndex'\n            result = result.substringToIndex(replacementIndex)\n\
    \                     ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let twoAheadIndex = index + 2\n\
    \            if twoAheadIndex < result.count {\n                let twoAhead =\
    \ result[index!]\n                result[index!] = result[twoAheadIndex]\n   \
    \             result[twoAheadIndex] = twoAhead\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfgcy5q2q.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfgcy5q2q.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpfgcy5q2q.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpfgcy5q2q.swift:24:33:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            let twoAheadIndex = index + 2\n                         \
    \       ^\n/tmp/tmpfgcy5q2q.swift:27:23: error: cannot assign through subscript:\
    \ subscript is get-only\n                result[index!] = result[twoAheadIndex]\n\
    \                ~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\":\n    \
    \    case \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += String(letter).swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplzhcbfve.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplzhcbfve.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplzhcbfve.swift:26:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplzhcbfve.swift:28:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 2) % 26]\n        result\
    \ += replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpld8we3ja.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpld8we3ja.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % 26]\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5s_a55_9.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp5s_a55_9.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp5s_a55_9.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp5s_a55_9.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmp5s_a55_9.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmp5s_a55_9.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        case \"A\":\n            result += \"a\"\n        case \"E\":\n \
    \           result += \"e\"\n        case \"I\":\n            result += \"i\"\n\
    \        case \"O\":\n            result += \"o\"\n        case \"U\":\n     \
    \       result += \"u\"\n        default:\n            result += letter\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphoswa_wy.swift:37:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_ozi6d0.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasVowel() {\n\
    \            result += letter.swapVowels()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp73wcvdsh.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp73wcvdsh.swift:22:19:\
    \ error: value of type 'Character' has no member 'hasVowel'\n        if letter.hasVowel()\
    \ {\n           ~~~~~~ ^~~~~~~~\n/tmp/tmp73wcvdsh.swift:23:30: error: value of\
    \ type 'Character' has no member 'swapVowels'\n            result += letter.swapVowels()\n\
    \                      ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let\
    \ index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n        let nextLetter = message[nextIndex]\n \
    \       if nextLetter.isUpper() {\n            result += String(nextLetter).swapCase()\n\
    \        } else {\n            result += nextLetter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwumnh7pk.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpwumnh7pk.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpwumnh7pk.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpwumnh7pk.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpwumnh7pk.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpwumnh7pk.swift:23:60:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                                           ^\n/tmp/tmpwumnh7pk.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpwumnh7pk.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmpwumnh7pk.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                ^\n/tmp/tmpwumnh7pk.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmpwumnh7pk.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        "
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        let replacement = alphabet[nextIndex!]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplpb8c4ze.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmplpb8c4ze.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmplpb8c4ze.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex!]\n                 \
    \         ^~~~~~~~\n/tmp/tmplpb8c4ze.swift:18:34: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter == \"A\" || letter\
    \ == \"E\" || letter == \"I\" || letter == \"O\" || letter == \"U\" {\n      \
    \      result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpu14a46j1.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpu14a46j1.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasVowel() {\n\
    \            let vowelIndex = result.index(of: letter)\n            let vowel\
    \ = result[vowelIndex + 1]\n            result[vowelIndex + 1] = vowel\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpazmyb1kv.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpazmyb1kv.swift:22:19:\
    \ error: value of type 'Character' has no member 'hasVowel'\n        if letter.hasVowel()\
    \ {\n           ~~~~~~ ^~~~~~~~\n/tmp/tmpazmyb1kv.swift:23:37: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            let vowelIndex = result.index(of:\
    \ letter)\n                                    ^\n/tmp/tmpazmyb1kv.swift:23:37:\
    \ note: use 'firstIndex(of:)' instead\n            let vowelIndex = result.index(of:\
    \ letter)\n                                    ^~~~~\n                       \
    \             firstIndex\n/tmp/tmpazmyb1kv.swift:24:32: error: cannot convert\
    \ value of type 'String.Index?' to expected argument type 'Int'\n            let\
    \ vowel = result[vowelIndex + 1]\n                               ^\n/tmp/tmpazmyb1kv.swift:25:19:\
    \ error: cannot assign through subscript: subscript is get-only\n            result[vowelIndex\
    \ + 1] = vowel\n            ~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpazmyb1kv.swift:25:20:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            result[vowelIndex + 1] = vowel\n                   ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    for letter in result {\n     \
    \   if letter.isUpper() {\n            result += letter.lowercased()\n       \
    \ } else {\n            result += letter.uppercased()\n        }\n    }\n    for\
    \ letter in result {\n        if letter.isUpper() {\n            result += letter.lowercased()\n\
    \        } else {\n            result += letter.uppercased()\n        }\n    }\n\
    \    for letter in result {\n        if letter.isUpper() {\n            result\
    \ += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    for letter in result {\n     \
    \   if letter.isUpper() {\n            result += letter.lowercased()\n       \
    \ } else {\n            result += letter.uppercased()\n        }\n    }\n    for\
    \ letter in result {\n        if letter.isUpper() {\n            result += letter.lowercased()\n\
    \        } else {\n            result += letter.uppercased()\n        }\n    }\n\
    \    for letter in result {\n        if letter.isUpper() {\n            result\
    \ += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    for letter in result {\n     \
    \   if letter.isUpper() {\n            result += letter.lowercased()\n       \
    \ } else {\n            result += letter.uppercased()\n        }\n    }\n    for\
    \ letter in result {\n        if letter.isUpper() {\n            result += letter.lowercased()\n\
    \        } else {\n            result += letter.uppercased()\n        }\n    }\n\
    \    for letter in result {\n        if letter.isUpper() {\n            result\
    \ += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    for letter in result {\n     \
    \   if letter.isUpper() {\n            result += letter.lowercased()\n       \
    \ } else {\n            result += letter.uppercased()\n        }\n    }\n    for\
    \ letter in result {\n        if letter.isUpper() {\n            result += letter.lowercased()\n\
    \        } else {\n            result += letter.uppercased()\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4bjdt45k.swift:144:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmp4bjdt45k.swift:119:26: note: to match this opening\
    \ '{'\n    for letter in result {\n                         ^\n/tmp/tmp4bjdt45k.swift:144:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmp4bjdt45k.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmp4bjdt45k.swift:15:19: error:\
    \ value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:22:19: error: value of\
    \ type 'Character' has no member 'isUpper'\n        if letter.isUpper() {\n  \
    \         ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:29:19: error: value of type 'Character'\
    \ has no member 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n\
    /tmp/tmp4bjdt45k.swift:36:19: error: value of type 'Character' has no member 'isUpper'\n\
    \        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:43:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:50:19: error: value of\
    \ type 'Character' has no member 'isUpper'\n        if letter.isUpper() {\n  \
    \         ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:57:19: error: value of type 'Character'\
    \ has no member 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n\
    /tmp/tmp4bjdt45k.swift:64:19: error: value of type 'Character' has no member 'isUpper'\n\
    \        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp4bjdt45k.swift:71:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += String(replacement)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfifamlmq.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpfifamlmq.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmpfifamlmq.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index! + 1]\n        result += String(char).replacingOccurrences(of:\
    \ char, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpod7b0a95.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpod7b0a95.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n/tmp/tmpod7b0a95.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: char, with: replacement)\n        \
    \          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_ozi6d0.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ replacement, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpznjgjrmv.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpznjgjrmv.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpznjgjrmv.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: replacement, with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwd81p4vx.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpwd81p4vx.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpwd81p4vx.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpwd81p4vx.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = message.index(of: vowel)\n        if index != nil {\n      \
    \      let vowelIndex = index(before: index)\n            let vowel = String(vowel)\n\
    \            let vowelIndex = index(of: vowel)\n            let vowelIndex = index(before:\
    \ vowelIndex)\n            let vowel = String(vowel)\n            let vowelIndex\
    \ = index(of: vowel)\n            let vowelIndex = index(before: vowelIndex)\n\
    \            let vowel = String(vowel)\n            let vowelIndex = index(of:\
    \ vowel)\n            let vowelIndex = index(before: vowelIndex)\n           \
    \ let vowel = String(vowel)\n            let vowelIndex = index(of: vowel)\n \
    \           let vowelIndex = index(before: vowelIndex)\n            let vowel\
    \ = String(vowel)\n            let vowelIndex = index(of: vowel)\n           \
    \ let vowelIndex = index(before: vowelIndex)\n            let vowel = String(vowel)\n\
    \            let vowelIndex = index(of: vowel)\n            let vowelIndex = index(before:\
    \ vowelIndex)\n            let vowel = String(vowel)\n            let vowelIndex\
    \ = index(of: vowel)\n            let vowelIndex = index(before: vowelIndex)\n\
    \            let vowel = String(vowel)\n            let vowelIndex = index(of:\
    \ vowel)\n            let vowelIndex = index(before: vowelIndex)\n           \
    \ let vowel = String(vowel)\n            let vowelIndex = index(of: vowel)\n \
    \           let vowelIndex = index(before: vowelIndex)\n            let vowel\
    \ = String(vowel)\n            let vowelIndex = index(of: vowel)\n           \
    \ let vowelIndex = index(before: vowelIndex)\n            let vowel = String(vowel)\n\
    \            let vowelIndex = index(of: vowel)\n            let vowelIndex = index(before:\
    \ vowelIndex)\n            let vowel = String(vowel)\n            let vowelIndex\
    \ = index(of: vowel)\n            let vowelIndex = index(before: vowelIndex)\n\
    \            let vowel = String(vowel)\n            let vowelIndex = index(of:\
    \ vowel)\n            let vowelIndex = index(before: vowelIndex)\n           \
    \ let vowel = String(vowel)\n            let vowelIndex = index(of: vowel)\n \
    \           let vowelIndex = index(before: vowelIndex)\n            let vowel\
    \ = String(vowel)\n            let vowelIndex = index(of: vowel)\n           \
    \ let vowelIndex = index(before: vowelIndex)\n            let vowel = String(vowel)\n\
    \            let vowelIndex = index(of: vowel)\n            let vowelIndex = index(before:\
    \ vowelIndex)\n            let vowel = String(vowel)\n            let vowelIndex\
    \ = index(of: vowel)\n            let vowelIndex = index(before: vowelIndex)\n\
    \            let vowel = String(vowel)\n            let vowelIndex = index(of:\
    \ vowel)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpi60for3h.swift:98:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmpi60for3h.swift:21:31: note: to match this opening\
    \ '{'\n    for vowel in \"aeiouAEIOU\" {\n                              ^\n/tmp/tmpi60for3h.swift:98:84:\
    \ error: expected '}' at end of brace statement\nassert(encode(message: \"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\n                  \
    \                                                                 ^\n/tmp/tmpi60for3h.swift:12:40:\
    \ note: to match this opening '{'\nfunc encode(message: String) -> String {\n\
    \                                       ^\n/tmp/tmpi60for3h.swift:15:19: error:\
    \ value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpi60for3h.swift:16:38: error: value of\
    \ type 'String' has no member 'swapCase'\n            result += String(letter).swapCase()\n\
    \                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpi60for3h.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpi60for3h.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpi60for3h.swift:24:30:\
    \ error: cannot call value of non-function type 'String.Index?'\n            let\
    \ vowelIndex = index(before: index)\n                             ^\n/tmp/tmpi60for3h.swift:26:30:\
    \ error: cannot call value of non-function type 'String.Index?'\n            let\
    \ vowelIndex = index(of: vowel)\n                             ^\n/tmp/tmpi60for3h.swift:27:30:\
    \ error: cannot call value of non-function type 'String.Index?'\n            let\
    \ vowelIndex = index(before: vowelIndex)\n                             ^\n/tmp/tmpi60for3h.swift:28:17:\
    \ error: invalid redeclaration of 'vowel'\n            let vowel"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmcq_efyq.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpmcq_efyq.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpmcq_efyq.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmcq_efyq.swift:22:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let replacement = result.index(before:\
    \ index!)\n            result += String(result[replacement!])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_o2v2ggq.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp_o2v2ggq.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmp_o2v2ggq.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp_o2v2ggq.swift:25:48:\
    \ error: cannot force unwrap value of non-optional type 'String.Index'\n     \
    \       result += String(result[replacement!])\n                             \
    \       ~~~~~~~~~~~^\n                                               \n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[english.index(of: char, offsetBy: index!)]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgb2vxyt8.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpgb2vxyt8.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ char, offsetBy: index!)]\n                          ^~~~~~~\n/tmp/tmpgb2vxyt8.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ char, offsetBy: index!)]\n                                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        let replacement\
    \ = alphabet.index(of: nextLetter)!\n        result += alphabet[replacement]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2z6j8zvc.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp2z6j8zvc.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmp2z6j8zvc.swift:17:27:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet.index(of:\
    \ nextLetter)!\n                          ^~~~~~~~\n/tmp/tmp2z6j8zvc.swift:18:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[replacement]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        if letter.isUppercase\
    \ {\n            result += nextLetter\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptp5xnfhz.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmptp5xnfhz.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmptp5xnfhz.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0j33cx_2.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0j33cx_2.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp0j33cx_2.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0j33cx_2.swift:25:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += english[index]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpi44m5v59.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmpi44m5v59.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n/tmp/tmpi44m5v59.swift:17:19:\
    \ error: cannot find 'english' in scope\n        result += english[index] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        if index != nil {\n            let vowelIndex = index! + 2\n        \
    \    let vowel = english[vowelIndex]\n            let replacement = vowel.lowercased()\n\
    \            let replacementIndex = english.index(of: replacement)\n         \
    \   if replacementIndex != nil {\n                result += replacement\n    \
    \        } else {\n                result += letter\n            }\n        }\
    \ else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphel7ugnu.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmphel7ugnu.swift:18:25:\
    \ error: cannot find 'english' in scope\n            let vowel = english[vowelIndex]\n\
    \                        ^~~~~~~\n/tmp/tmphel7ugnu.swift:20:36: error: cannot\
    \ find 'english' in scope\n            let replacementIndex = english.index(of:\
    \ replacement)\n                                   ^~~~~~~\n/tmp/tmphel7ugnu.swift:24:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += letter\n                          ^\n/tmp/tmphel7ugnu.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[english.index(of: letter, offsetBy: index!)]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp7xvyb26.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpp7xvyb26.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                          ^~~~~~~\n/tmp/tmpp7xvyb26.swift:16:35:\
    \ error: cannot find 'english' in scope\n        let replacement = english[english.index(of:\
    \ letter, offsetBy: index!)]\n                                  ^~~~~~~\n/tmp/tmpp7xvyb26.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let nextIndex = english.index(of: char, offsetBy: index + 1)\n      \
    \  let replacement = english[nextIndex!]\n        result += String(char).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n        result += String(char).replacingOccurrences(of:\
    \ \"Y\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6xomymcm.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmp6xomymcm.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ char, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmp6xomymcm.swift:17:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[nextIndex!]\n\
    \                          ^~~~~~~\n/tmp/tmp6xomymcm.swift:18:32: error: value\
    \ of type 'String' has no member 'replacingOccurrences'\n        result += String(char).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6xomymcm.swift:19:32: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(char).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6xomymcm.swift:20:32:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(char).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6xomymcm.swift:21:32:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(char).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6xomymcm.swift:22:32:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(char).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6xomymcm.swift:23:32:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(char).replacingOccurrences(of: \"Y\", with: replacement)\n\
    \                  ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        let replacement = alphabet[nextIndex!]\n        result += replacement\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvq_f_xr3.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpvq_f_xr3.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmpvq_f_xr3.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex!]\n                 \
    \         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for vowel in \"aeiouAEIOU\"\
    \ {\n        result += String(vowel).swapCase()\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_lvhgbl5.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp_lvhgbl5.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp_lvhgbl5.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_lvhgbl5.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_lvhgbl5.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp_lvhgbl5.swift:23:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp_lvhgbl5.swift:27:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let replacement = result.index(before:\
    \ index!)\n            let replacementLetter = result[index!.advanced(by: 1)!]\n\
    \            result += replacementLetter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpe8eauki7.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpe8eauki7.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpe8eauki7.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpe8eauki7.swift:25:51:\
    \ error: value of type 'String.Index' has no member 'advanced'\n            let\
    \ replacementLetter = result[index!.advanced(by: 1)!]\n                      \
    \                     ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let twoAheadIndex = index(before:\
    \ index!, offsetBy: 2)\n            let replacement = result.substring(from: index!,\
    \ to: twoAheadIndex!)\n            result += replacement\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkg74z8pc.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpkg74z8pc.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpkg74z8pc.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpkg74z8pc.swift:24:33:\
    \ error: cannot call value of non-function type 'String.Index?'\n            let\
    \ twoAheadIndex = index(before: index!, offsetBy: 2)\n                       \
    \         ^\n/tmp/tmpkg74z8pc.swift:25:38: error: value of type 'String' has no\
    \ member 'substring'\n            let replacement = result.substring(from: index!,\
    \ to: twoAheadIndex!)\n                              ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter)\n        } else {\n            result += String(letter).swapCase()\n\
    \        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n        let index = message.index(of:\
    \ vowel)\n        let nextIndex = message.index(of: vowel, offsetBy: index! +\
    \ 1)\n        if nextIndex != nil {\n            result += String(message.substring(from:\
    \ index!, to: nextIndex!))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3n1ixr3e.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp3n1ixr3e.swift:18:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp3n1ixr3e.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmp3n1ixr3e.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmp3n1ixr3e.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmp3n1ixr3e.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmp3n1ixr3e.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                ^\n/tmp/tmp3n1ixr3e.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmp3n1ixr3e.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmp3n1ixr3e.swift:23:65:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                                                ^\n/tmp/tmp3n1ixr3e.swift:25:38:\
    \ error: value of type 'String' "
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprmdkw6xd.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmprmdkw6xd.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmprmdkw6xd.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmprmdkw6xd.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"b\"\n        case \"e\":\n            result +=\
    \ \"f\"\n        case \"i\":\n            result += \"g\"\n        case \"o\"\
    :\n            result += \"h\"\n        case \"u\":\n            result += \"\
    j\"\n        case \"y\":\n            result += \"k\"\n        default:\n    \
    \        result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1n8ndmqv.swift:29:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let replacement = english[index!.advanced(by: 1)!]\n        result +=\
    \ String(char).replacingOccurrences(of: \"a\", with: replacement)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9535d6of.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmp9535d6of.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 1)!]\n                          ^~~~~~~\n/tmp/tmp9535d6of.swift:17:32: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(char).replacingOccurrences(of: \"a\", with: replacement)\n       \
    \           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\":\n    \
    \    case \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n        case \"A\":\n    \
    \    case \"E\":\n        case \"I\":\n        case \"O\":\n        case \"U\"\
    :\n            result += letter\n        default:\n            result += letter\n\
    \        }\n    }\n    for letter in result {\n        switch letter {\n     \
    \   case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\"\
    :\n        case \"u\":\n        case \"A\":\n        case \"E\":\n        case\
    \ \"I\":\n        case \"O\":\n        case \"U\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n        case\
    \ \"A\":\n        case \"E\":\n        case \"I\":\n        case \"O\":\n    \
    \    case \"U\":\n            result += letter\n        default:\n           \
    \ result += letter\n        }\n    }\n    for letter in result {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n        case \"A\":\n        case \"\
    E\":\n        case \"I\":\n        case \"O\":\n        case \"U\":\n        \
    \    result += letter\n        default:\n            result += letter\n      \
    \  }\n    }\n    for letter in result {\n        switch letter {\n        case\
    \ \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n    \
    \    case \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\"\
    :\n        case \"O\":\n        case \"U\":\n            result += letter\n  \
    \      default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n        case\
    \ \"A\":\n        case \"E\":\n        case \"I\":\n        case \"O\":\n    \
    \    case \"U\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz9n4htx9.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpz9n4htx9.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:33:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:34:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:35:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpz9n4htx9.swift:36:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"s\"\n        case \"u\":\n            result = \"c\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"S\"\n        case \"U\":\n            result\
    \ = \"C\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk5ps1elh.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        case \"A\"\
    :\n            result += \"a\"\n        case \"B\":\n            result += \"\
    b\"\n        case \"C\":\n            result += \"c\"\n        case \"D\":\n \
    \           result += \"d\"\n        case \"E\":\n            result += \"e\"\n\
    \        case \"F\":\n            result += \"f\"\n        case \"G\":\n     \
    \       result += \"g\"\n        case \"H\":\n            result += \"h\"\n  \
    \      case \"I\":\n            result += \"i\"\n        case \"J\":\n       \
    \     result += \"j\"\n        case \"K\":\n            result += \"k\"\n    \
    \    case \"L\":\n            result += \"l\"\n        case \"M\":\n         \
    \   result += \"m\"\n        case \"N\":\n            result += \"n\"\n      \
    \  case \"O\":\n            result += \"o\"\n        case \"P\":\n           \
    \ result += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case\
    \ \"R\":\n            result += \"r\"\n        case \"S\":\n            result\
    \ += \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"\
    U\":\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5s_a55_9.swift:108:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"U\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at\
    \ end of brace statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\")\n                                        \
    \                                           ^\n/tmp/tmp5s_a55_9.swift:14:27: note:\
    \ to match this opening '{'\n    for letter in message {\n                   \
    \       ^\n/tmp/tmp5s_a55_9.swift:129:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp5s_a55_9.swift:12:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp5s_a55_9.swift:15:9: error: switch must be\
    \ exhaustive\n        switch letter {\n        ^\n/tmp/tmp5s_a55_9.swift:15:9:\
    \ note: do you want to add a default clause?\n        switch letter {\n      \
    \  ^\n/tmp/tmp5s_a55_9.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = result.index(of: vowel)\n        let replacement = String(result.index(of:\
    \ vowel, offsetBy: index + 1))\n        result += replacement\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpam6ax_87.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpam6ax_87.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpam6ax_87.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpam6ax_87.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpam6ax_87.swift:23:27:\
    \ error: no exact matches in call to initializer \n        let replacement = String(result.index(of:\
    \ vowel, offsetBy: index + 1))\n                          ^\n/tmp/tmpam6ax_87.swift:23:27:\
    \ note: found candidate with type '(String.Index) -> String'\n        let replacement\
    \ = String(result.index(of: vowel, offsetBy: index + 1))\n                   \
    \       ^\n/tmp/tmpam6ax_87.swift:23:27: note: found candidate with type '(String.Index,\
    \ Int, Bool) -> String'\n        let replacement = String(result.index(of: vowel,\
    \ offsetBy: index + 1))\n                          ^\n/tmp/tmpam6ax_87.swift:23:27:\
    \ note: candidate has partially matching parameter list (describing: String.Index)\n\
    \        let replacement = String(result.index(of: vowel, offsetBy: index + 1))\n\
    \                          ^\n/tmp/tmpam6ax_87.swift:23:27: note: candidate has\
    \ partially matching parameter list (reflecting: String.Index)\n        let replacement\
    \ = String(result.index(of: vowel, offsetBy: index + 1))\n                   \
    \       ^\n/tmp/tmpam6ax_87.swift:23:41: error: no exact matches in call to instance\
    \ method 'index'\n        let replacement = String(result.index(of: vowel, offsetBy:\
    \ index + 1))\n                                        ^\n/tmp/tmpam6ax_87.swift:23:41:\
    \ note: found candidate with type '(String.Index, Int) -> String.Index'\n    \
    \    let replacement = String(result.in"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = message.index(of: vowel)\n        let vowelIndex = message.index(of:\
    \ vowel, offsetBy: 2)\n        if index != nil && vowelIndex != nil {\n      \
    \      let replacement = String(message[index!])\n            let replacement2\
    \ = String(message[vowelIndex!])\n            result += String(replacement).replacingOccurrences(of:\
    \ vowel, with: replacement2)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7q033e29.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp7q033e29.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp7q033e29.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmp7q033e29.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmp7q033e29.swift:23:34:\
    \ error: no exact matches in call to instance method 'index'\n        let vowelIndex\
    \ = message.index(of: vowel, offsetBy: 2)\n                                 ^\n\
    /tmp/tmp7q033e29.swift:23:34: note: candidate has partially matching parameter\
    \ list (String.Index, offsetBy: Int)\n        let vowelIndex = message.index(of:\
    \ vowel, offsetBy: 2)\n                                 ^\n/tmp/tmp7q033e29.swift:23:34:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let vowelIndex = message.index(of: vowel, offsetBy: 2)\n     \
    \                            ^\nSwift.Collection:3:28: note: candidate '(String.Element)\
    \ -> String.Index?' (aka '(Character) -> Optional<String.Index>') requires 1 argument,\
    \ but 2 were provided\n    @inlinable public func index(of element: Self.Element)\
    \ -> Self.Index?\n                           ^\n/tmp/tmp7q033e29.swift:23:34:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let vowelIndex = message.index(of: vowel, offsetBy: 2)\n     \
    \                            ^\n/tmp/tmp7q033e29.swift:27:43: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n            result += String(replacement).replacingOccurrences(of:\
    \ vowel, with: replacement2)\n                      ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercased())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplqx_zy9v.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmplqx_zy9v.swift:22:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result = result.replacingOccurrences(of: vowel, with: vowel.lowercased())\n\
    \                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index == nil {\n            result += letter\n        }\
    \ else {\n            result += alphabet[index! + 1]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp__564cos.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp__564cos.swift:17:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmp__564cos.swift:19:23: error: cannot find 'alphabet' in\
    \ scope\n            result += alphabet[index! + 1]\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index!.advanced(by: 2)!]\n        result +=\
    \ String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc1mxc4is.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpc1mxc4is.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmpc1mxc4is.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpui93wk_m.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpui93wk_m.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmpui93wk_m.swift:17:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for letter in result {\n        if\
    \ let index = result.index(of: letter) {\n            let vowel = result[index\
    \ + 1]\n            let vowelIndex = result.index(of: vowel)\n            if vowelIndex\
    \ == nil {\n                result += vowel\n            } else {\n          \
    \      let replacement = result[index + 2]\n                result += replacement\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqdwmdh22.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpqdwmdh22.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpqdwmdh22.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdwmdh22.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpqdwmdh22.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpqdwmdh22.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmpqdwmdh22.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: letter) {\n                              ^\n/tmp/tmpqdwmdh22.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ letter) {\n                              ^~~~~\n                           \
    \   firstIndex\n/tmp/tmpqdwmdh22.swift:28:32: error: cannot convert value of type\
    \ 'String.Index' to expected argument type 'Int'\n            let vowel = result[index\
    \ + 1]\n                               ^\n/tmp/tmpqdwmdh22.swift:33:42: error:\
    \ cannot convert value of type 'String.Index' to expected argument type 'Int'\n\
    \                let replacement = result[index + 2]\n                       \
    \                  ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for letter in result {\n        if\
    \ letter.hasVowel() {\n            result += String(letter).replaceVowel(letter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbgiaooks.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpbgiaooks.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpbgiaooks.swift:22:19:\
    \ error: value of type 'Character' has no member 'hasVowel'\n        if letter.hasVowel()\
    \ {\n           ~~~~~~ ^~~~~~~~\n/tmp/tmpbgiaooks.swift:23:38: error: value of\
    \ type 'String' has no member 'replaceVowel'\n            result += String(letter).replaceVowel(letter)\n\
    \                      ~~~~~~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc_ozi6d0.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpc_ozi6d0.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"b\":\n            result = \"\
    g\"\n        case \"c\":\n            result = \"k\"\n        case \"d\":\n  \
    \          result = \"s\"\n        case \"e\":\n            result = \"h\"\n \
    \       case \"f\":\n            result = \"j\"\n        case \"g\":\n       \
    \     result = \"x\"\n        case \"h\":\n            result = \"q\"\n      \
    \  case \"i\":\n            result = \"x\"\n        case \"j\":\n            result\
    \ = \"t\"\n        case \"k\":\n            result = \"g\"\n        case \"l\"\
    :\n            result = \"s\"\n        case \"m\":\n            result = \"c\"\
    \n        case \"n\":\n            result = \"g\"\n        case \"o\":\n     \
    \       result = \"h\"\n        case \"p\":\n            result = \"q\"\n    \
    \    case \"q\":\n            result = \"x\"\n        case \"r\":\n          \
    \  result = \"s\"\n        case \"s\":\n            result = \"c\"\n        case\
    \ \"t\":\n            result = \"h\"\n        case \"u\":\n            result\
    \ = \"x\"\n        case \"v\":\n            result = \"q\"\n        case \"w\"\
    :\n            result = \"x\"\n        case \"x\":\n            result = \"t\"\
    \n        case \"y\":\n            result = \"s\"\n        case \"z\":\n     \
    \       result = \"c\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpu4osph39.swift:69:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n   \
    \     let index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n        if nextIndex == nil {\n            result\
    \ += String(vowel)\n        } else {\n            result += String(vowel).swapCase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwn1gtxf1.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpwn1gtxf1.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpwn1gtxf1.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmpwn1gtxf1.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpwn1gtxf1.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpwn1gtxf1.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpwn1gtxf1.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                ^\n/tmp/tmpwn1gtxf1.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpwn1gtxf1.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpwn1gtxf1.swift:23:65:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                                                ^\n/tmp/tmpwn1gtxf1.swift:27:37:\
    \ error: value of type 'String' "
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[letter]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9n3w3va9.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp9n3w3va9.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmp9n3w3va9.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[letter]\n        \
    \          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in vowels {\n        result\
    \ += String(vowel)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpljprdk40.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpljprdk40.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpljprdk40.swift:21:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter)\n        } else {\n            result += String(letter).swapCase()\n\
    \        }\n    }\n    for vowel in \"aeiouAEIOU\" {\n        result += String(vowel)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp98utw238.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp98utw238.swift:18:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        default:\n            result += letter\n        }\n    }\n    for\
    \ letter in result {\n        switch letter {\n        case \"A\":\n         \
    \   result += \"a\"\n        case \"E\":\n            result += \"e\"\n      \
    \  case \"I\":\n            result += \"i\"\n        case \"O\":\n           \
    \ result += \"o\"\n        case \"U\":\n            result += \"u\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplww0m0q3.swift:27:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmplww0m0q3.swift:43:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphlood946.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmphlood946.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmphlood946.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphlood946.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphlood946.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmphlood946.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmphlood946.swift:24:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextLetter = english[index!.advanced(by: 1)]\n        let nextIndex\
    \ = english.index(of: nextLetter)\n        let nextLetterIndex = nextIndex!.advanced(by:\
    \ 1)\n        if letter.isUppercase {\n            if nextLetterIndex < index\
    \ {\n                result += nextLetter\n            } else {\n            \
    \    result += letter\n            }\n        } else {\n            if nextLetterIndex\
    \ < index {\n                result += nextLetter\n            } else {\n    \
    \            result += letter\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdrmsh81h.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpdrmsh81h.swift:16:26:\
    \ error: cannot find 'english' in scope\n        let nextLetter = english[index!.advanced(by:\
    \ 1)]\n                         ^~~~~~~\n/tmp/tmpdrmsh81h.swift:17:25: error:\
    \ cannot find 'english' in scope\n        let nextIndex = english.index(of: nextLetter)\n\
    \                        ^~~~~~~\n/tmp/tmpdrmsh81h.swift:23:27: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result += letter\n                          ^\n/tmp/tmpdrmsh81h.swift:29:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += letter\n                          ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.hasVowel() {\n\
    \            result += letter.swapVowels()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp73wcvdsh.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp73wcvdsh.swift:22:19:\
    \ error: value of type 'Character' has no member 'hasVowel'\n        if letter.hasVowel()\
    \ {\n           ~~~~~~ ^~~~~~~~\n/tmp/tmp73wcvdsh.swift:23:30: error: value of\
    \ type 'Character' has no member 'swapVowels'\n            result += letter.swapVowels()\n\
    \                      ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index == nil {\n            result += letter\n        }\
    \ else {\n            let replacement = alphabet[index! + 1]\n            result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfb51wadr.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpfb51wadr.swift:17:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmpfb51wadr.swift:19:31: error: cannot find 'alphabet' in\
    \ scope\n            let replacement = alphabet[index! + 1]\n                \
    \              ^~~~~~~~\n/tmp/tmpfb51wadr.swift:20:38: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n            result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n                      ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6naco3bm.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp6naco3bm.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for letter in result {\n        if\
    \ let index = result.index(of: letter) {\n            let vowel = result[index\
    \ + 1]\n            result.remove(at: index)\n            result.append(vowel)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp88u7l4sa.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp88u7l4sa.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp88u7l4sa.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp88u7l4sa.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp88u7l4sa.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp88u7l4sa.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmp88u7l4sa.swift:27:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: letter) {\n                              ^\n/tmp/tmp88u7l4sa.swift:27:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ letter) {\n                              ^~~~~\n                           \
    \   firstIndex\n/tmp/tmp88u7l4sa.swift:28:32: error: cannot convert value of type\
    \ 'String.Index' to expected argument type 'Int'\n            let vowel = result[index\
    \ + 1]\n                               ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw3wiva4r.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpw3wiva4r.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmpw3wiva4r.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 2) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in vowels {\n        result\
    \ += String(vowel)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpljprdk40.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpljprdk40.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpljprdk40.swift:21:18:\
    \ error: cannot find 'vowels' in scope\n    for vowel in vowels {\n          \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0j33cx_2.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0j33cx_2.swift:16:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp0j33cx_2.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0j33cx_2.swift:25:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        default:\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpayjfooff.swift:27:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for letter in result {\n        switch\
    \ letter {\n        case \"A\":\n        case \"E\":\n        case \"I\":\n  \
    \      case \"O\":\n        case \"U\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppwsygj3s.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmppwsygj3s.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppwsygj3s.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmppwsygj3s.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmppwsygj3s.swift:33:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmppwsygj3s.swift:35:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index != nil {\n            let index = index! + 2\n   \
    \         let letter = alphabet[index]\n            result += letter\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpavet3kro.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpavet3kro.swift:18:26: error: cannot find 'alphabet' in scope\n       \
    \     let letter = alphabet[index]\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOU\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let vowelIndex = index! + 2\n\
    \            let vowel = String(result[vowelIndex])\n            let replacement\
    \ = String(vowel.lowercased())\n            result = result.replacingOccurrences(of:\
    \ vowel, with: replacement)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvxbd3y7c.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpvxbd3y7c.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpvxbd3y7c.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpvxbd3y7c.swift:24:35:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let vowelIndex = index! + 2\n                           \
    \       ^\n/tmp/tmpvxbd3y7c.swift:27:29: error: value of type 'String' has no\
    \ member 'replacingOccurrences'\n            result = result.replacingOccurrences(of:\
    \ vowel, with: replacement)\n                     ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += english[letter]\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcq_kbex.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpbcq_kbex.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmpbcq_kbex.swift:17:19: error:\
    \ cannot find 'english' in scope\n        result += english[letter] + replacement\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextLetter = alphabet[index! + 1]\n        if letter.isUppercase\
    \ {\n            result += nextLetter\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf78dfrf1.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpf78dfrf1.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index! + 1]\n                         ^~~~~~~~\n/tmp/tmpf78dfrf1.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let nextLetter = alphabet[index + 1]\n        let replacement\
    \ = alphabet.index(of: nextLetter)!\n        let replacementLetter = alphabet[replacement]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacementLetter)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaz1tm8o8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpaz1tm8o8.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ let nextLetter = alphabet[index + 1]\n                         ^~~~~~~~\n/tmp/tmpaz1tm8o8.swift:17:27:\
    \ error: cannot find 'alphabet' in scope\n        let replacement = alphabet.index(of:\
    \ nextLetter)!\n                          ^~~~~~~~\n/tmp/tmpaz1tm8o8.swift:18:33:\
    \ error: cannot find 'alphabet' in scope\n        let replacementLetter = alphabet[replacement]\n\
    \                                ^~~~~~~~\n/tmp/tmpaz1tm8o8.swift:19:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacementLetter)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n\
    \        result += String(vowel).swapCase()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp830ac22n.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp830ac22n.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp830ac22n.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp830ac22n.swift:23:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp830ac22n.swift:27:33:\
    \ error: value of type 'String' has no member 'swapCase'\n        result += String(vowel).swapCase()\n\
    \                  ~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        if index != nil {\n            let vowelIndex = index! + 2\n        \
    \    let vowel = english[vowelIndex]\n            let replacement = vowel.lowercased()\n\
    \            let replacementIndex = english.index(of: replacement)\n         \
    \   let replacementLetter = english[replacementIndex]\n            result += replacementLetter\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy66muf0f.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpy66muf0f.swift:18:25:\
    \ error: cannot find 'english' in scope\n            let vowel = english[vowelIndex]\n\
    \                        ^~~~~~~\n/tmp/tmpy66muf0f.swift:20:36: error: cannot\
    \ find 'english' in scope\n            let replacementIndex = english.index(of:\
    \ replacement)\n                                   ^~~~~~~\n/tmp/tmpy66muf0f.swift:21:37:\
    \ error: cannot find 'english' in scope\n            let replacementLetter = english[replacementIndex]\n\
    \                                    ^~~~~~~\n/tmp/tmpy66muf0f.swift:24:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let vowelIndex = english.index(of: \"a\")\n        let vowel = english[vowelIndex!]\n\
    \        let vowelIndex = english.index(of: vowel)\n        let vowel2 = english[vowelIndex!\
    \ + 2]\n        let replacement = english[vowelIndex! + 3]\n        result +=\
    \ english[index + (vowelIndex! + 2)]\n        result += replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb96b_167.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpb96b_167.swift:16:26:\
    \ error: cannot find 'english' in scope\n        let vowelIndex = english.index(of:\
    \ \"a\")\n                         ^~~~~~~\n/tmp/tmpb96b_167.swift:17:21: error:\
    \ cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n \
    \                   ^~~~~~~\n/tmp/tmpb96b_167.swift:18:26: error: cannot find\
    \ 'english' in scope\n        let vowelIndex = english.index(of: vowel)\n    \
    \                     ^~~~~~~\n/tmp/tmpb96b_167.swift:19:22: error: cannot find\
    \ 'english' in scope\n        let vowel2 = english[vowelIndex! + 2]\n        \
    \             ^~~~~~~\n/tmp/tmpb96b_167.swift:20:27: error: cannot find 'english'\
    \ in scope\n        let replacement = english[vowelIndex! + 3]\n             \
    \             ^~~~~~~\n/tmp/tmpb96b_167.swift:21:19: error: cannot find 'english'\
    \ in scope\n        result += english[index + (vowelIndex! + 2)]\n           \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwd81p4vx.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpwd81p4vx.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpwd81p4vx.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmpwd81p4vx.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       case \"A\":\n            result = \"T\"\n        case \"E\":\n       \
    \     result = \"H\"\n        case \"I\":\n            result = \"K\"\n      \
    \  case \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4y2kxrgo.swift:37:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"A\":\n        case \"E\":\n        case \"I\":\n        case\
    \ \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"A\":\n        case \"E\"\
    :\n        case \"I\":\n        case \"O\":\n        case \"U\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch letter {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"A\":\n        case \"E\":\n        case \"I\":\n        case\
    \ \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"A\":\n        case \"E\"\
    :\n        case \"I\":\n        case \"O\":\n        case \"U\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch letter {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"A\":\n        case \"E\":\n        case \"I\":\n        case\
    \ \"O\":\n        case \"U\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpg759ufyz.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpg759ufyz.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:40:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:41:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:42:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:43:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpg759ufyz.swift:52:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index + 2) % 26]\n        result\
    \ += String(letter).replacingOccurrences(of: letter, with: replacement)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxvjxygpz.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpxvjxygpz.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 2) % 26]\n                          ^~~~~~~~\n\
    /tmp/tmpxvjxygpz.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[alphabet.index(of: letter, offsetBy:\
    \ 2)]\n        result += alphabet[alphabet.index(of: replacement, offsetBy: index)]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgsnfvmbf.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpgsnfvmbf.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[alphabet.index(of: letter, offsetBy: 2)]\n      \
    \                    ^~~~~~~~\n/tmp/tmpgsnfvmbf.swift:16:36: error: cannot find\
    \ 'alphabet' in scope\n        let replacement = alphabet[alphabet.index(of: letter,\
    \ offsetBy: 2)]\n                                   ^~~~~~~~\n/tmp/tmpgsnfvmbf.swift:17:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement, offsetBy: index)]\n                  ^~~~~~~~\n/tmp/tmpgsnfvmbf.swift:17:28:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement, offsetBy: index)]\n                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += String(letter)\n        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n   \
    \     let index = message.index(of: vowel)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n        if index != nil && nextIndex != nil {\n\
    \            let replacement = String(message[index! + 1]).swapCase()\n      \
    \      result += String(message[index!]).replacingOccurrences(of: vowel, with:\
    \ replacement)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_2u0m1ve.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp_2u0m1ve.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp_2u0m1ve.swift:22:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = message.index(of: vowel)\n                            ^\n/tmp/tmp_2u0m1ve.swift:22:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmp_2u0m1ve.swift:23:60:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                                           ^\n/tmp/tmp_2u0m1ve.swift:23:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmp_2u0m1ve.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmp_2u0m1ve.swift:23:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index + 1)\n\
    \                                ^\n/tmp/tmp_2u0m1ve.swift:23:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index + 1)\n                          \
    \      ^\n/tmp/tmp_2u0m1ve.swift:23:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index + 1)\n                                ^\n/tmp/tmp_2u0m1ve.swift:25:51:\
    \ error: cannot convert value of type 'Str"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 1]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpqvm2c5wh.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpqvm2c5wh.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 1]\n                          ^~~~~~~~\n\
    /tmp/tmpqvm2c5wh.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter.swapCase()\n        }\n    }\n    for vowel in \"aeiou\" {\n        result\
    \ += vowel.swapCase()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppfmmxto0.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmppfmmxto0.swift:17:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:18:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmppfmmxto0.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmppfmmxto0.swift:23:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n/tmp/tmppfmmxto0.swift:27:25:\
    \ error: value of type 'Character' has no member 'swapCase'\n        result +=\
    \ vowel.swapCase()\n                  ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index! + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph5udsco5.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmph5udsco5.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index! + 2]\n                          ^~~~~~~~\n\
    /tmp/tmph5udsco5.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmph5udsco5.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_zbgstph.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp_zbgstph.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zbgstph.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let nextIndex = alphabet.index(of: letter, offsetBy: index\
    \ + 1)\n        let replacement = alphabet[nextIndex!]\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplpb8c4ze.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmplpb8c4ze.swift:16:25: error: cannot find 'alphabet' in scope\n       \
    \ let nextIndex = alphabet.index(of: letter, offsetBy: index + 1)\n          \
    \              ^~~~~~~~\n/tmp/tmplpb8c4ze.swift:17:27: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[nextIndex!]\n                 \
    \         ^~~~~~~~\n/tmp/tmplpb8c4ze.swift:18:34: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n        result += String(letter).replacingOccurrences(of:\
    \ letter, with: replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978621
