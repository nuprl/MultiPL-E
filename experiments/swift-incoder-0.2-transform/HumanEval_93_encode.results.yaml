language: swift
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8qiy7t7b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmp8qiy7t7b.swift:17:59: error: cannot find 'vowel' in scope\n        result\
    \ += String(letter).replacingOccurrences(of: vowel, with: replacement)\n     \
    \                                                     ^~~~~\n/tmp/tmp8qiy7t7b.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: vowel, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[index + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5grjsorz.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmp5grjsorz.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"e\":\n            result +=\
    \ \"E\"\n        case \"i\":\n            result += \"I\"\n        case \"o\"\
    :\n            result += \"O\"\n        case \"u\":\n            result += \"\
    U\"\n        default:\n            result += letter\n        }\n    }\n    for\
    \ vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n        let\
    \ letter = result[index! + 2]\n        result = result.replacingOccurrences(of:\
    \ vowel, with: letter)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8hevd8s.swift:27:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmpp8hevd8s.swift:31:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: vowel)\n\
    \                           ^\n/tmp/tmpp8hevd8s.swift:31:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: vowel)\n                     \
    \      ^~~~~\n                           firstIndex\n/tmp/tmpp8hevd8s.swift:32:34:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let letter = result[index! + 2]\n                           \
    \      ^\n/tmp/tmpp8hevd8s.swift:33:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: vowel,\
    \ with: letter)\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            if let index = result.index(of: letter) {\n                let vowel\
    \ = result[index + 1]\n                let vowelIndex = result.index(of: vowel)\n\
    \                result[index] = vowel\n                result[vowelIndex] = letter\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfbgj1v4i.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfbgj1v4i.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpfbgj1v4i.swift:23:35: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            if let index = result.index(of:\
    \ letter) {\n                                  ^\n/tmp/tmpfbgj1v4i.swift:23:35:\
    \ note: use 'firstIndex(of:)' instead\n            if let index = result.index(of:\
    \ letter) {\n                                  ^~~~~\n                       \
    \           firstIndex\n/tmp/tmpfbgj1v4i.swift:24:36: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n                let\
    \ vowel = result[index + 1]\n                                   ^\n/tmp/tmpfbgj1v4i.swift:26:23:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    result[index] = vowel\n                ~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \        result += alphabet[alphabet.index(of: replacement)!]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplucidp4b.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmplucidp4b.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1)..<alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmplucidp4b.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1)..<alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmplucidp4b.swift:17:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n                  ^~~~~~~~\n/tmp/tmplucidp4b.swift:17:28: error:\
    \ cannot find 'alphabet' in scope\n        result += alphabet[alphabet.index(of:\
    \ replacement)!]\n                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextIndex = index + 2\n        if nextIndex < english.count {\n \
    \           let nextLetter = english[nextIndex]\n            result += String(letter).uppercased()\
    \ + String(nextLetter).lowercased()\n        } else {\n            result += String(letter).uppercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcfl5v889.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpcfl5v889.swift:17:24:\
    \ error: cannot find 'english' in scope\n        if nextIndex < english.count\
    \ {\n                       ^~~~~~~\n/tmp/tmpcfl5v889.swift:18:30: error: cannot\
    \ find 'english' in scope\n            let nextLetter = english[nextIndex]\n \
    \                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let nextIndex = english.index(of: letter, offsetBy: index + 1)\n    \
    \    if index != nil && nextIndex != nil {\n            let replacement = english[index!].uppercased()\
    \ + english[nextIndex!].lowercased()\n            result += replacement\n    \
    \    } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpcv9yk21x.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpcv9yk21x.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ letter, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmpcv9yk21x.swift:18:31:\
    \ error: cannot find 'english' in scope\n            let replacement = english[index!].uppercased()\
    \ + english[nextIndex!].lowercased()\n                              ^~~~~~~\n\
    /tmp/tmpcv9yk21x.swift:18:62: error: cannot find 'english' in scope\n        \
    \    let replacement = english[index!].uppercased() + english[nextIndex!].lowercased()\n\
    \                                                             ^~~~~~~\n/tmp/tmpcv9yk21x.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result += \"A\"\n        case \"b\":\n            result +=\
    \ \"B\"\n        case \"c\":\n            result += \"C\"\n        case \"d\"\
    :\n            result += \"D\"\n        case \"e\":\n            result += \"\
    E\"\n        case \"f\":\n            result += \"F\"\n        case \"g\":\n \
    \           result += \"G\"\n        case \"h\":\n            result += \"H\"\n\
    \        case \"i\":\n            result += \"I\"\n        case \"j\":\n     \
    \       result += \"J\"\n        case \"k\":\n            result += \"K\"\n  \
    \      case \"l\":\n            result += \"L\"\n        case \"m\":\n       \
    \     result += \"M\"\n        case \"n\":\n            result += \"N\"\n    \
    \    case \"o\":\n            result += \"O\"\n        case \"p\":\n         \
    \   result += \"P\"\n        case \"q\":\n            result += \"Q\"\n      \
    \  case \"r\":\n            result += \"R\"\n        case \"s\":\n           \
    \ result += \"S\"\n        case \"t\":\n            result += \"T\"\n        case\
    \ \"u\":\n            result += \"U\"\n        case \"v\":\n            result\
    \ += \"V\"\n        case \"w\":\n            result += \"W\"\n        case \"\
    x\":\n            result += \"X\"\n        case \"y\":\n            result +=\
    \ \"Y\"\n        case \"z\":\n            result += \"Z\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpijzvts68.swift:69:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    a\":\n            result = \"t\"\n        case \"e\":\n            result = \"\
    h\"\n        case \"i\":\n            result = \"k\"\n        case \"o\":\n  \
    \          result = \"g\"\n        case \"u\":\n            result = \"s\"\n \
    \       default:\n            result = letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdujgdhfs.swift:27:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824665
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5mlt2m8.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpw5mlt2m8.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index! + 2) % alphabet.count]\n                \
    \          ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:16:51: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index! + 2) % alphabet.count]\n\
    \                                                  ^~~~~~~~\n/tmp/tmpw5mlt2m8.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        let replacement = result.index(index, offsetBy: 2)\n       \
    \ let replacementLetter = result[index].lowercased()\n        result = result.substring(to:\
    \ replacement)\n        result += replacementLetter\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp09xyixl3.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp09xyixl3.swift:22:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmp09xyixl3.swift:22:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp09xyixl3.swift:23:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmp09xyixl3.swift:23:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmp09xyixl3.swift:23:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmp09xyixl3.swift:24:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacementLetter = result[index].lowercased()\n\
    \                                       ^\n/tmp/tmp09xyixl3.swift:24:40: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        let replacementLetter = result[index].lowercased()\n                \
    \                       ^\n                                             ?? <#default\
    \ value#>\n/tmp/tmp09xyixl3.swift:24:40: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let replacementLetter\
    \ = result[index].lowercased()\n                                       ^\n   \
    \                                         !\n/tmp/tmp09xyi"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"AEIOUaeiou\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbcjstxg4.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[index + 2]\n                          ^~~~~~~~\n\
    /tmp/tmpbcjstxg4.swift:17:34: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with:\
    \ replacement)\n                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let replacement = english[index! + 2]\n        result += String(letter).uppercased()\
    \ + replacement\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpthus5zwc.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpthus5zwc.swift:16:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \        result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5acyu_by.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)!\n                    ^~~~~~~~\n\
    /tmp/tmp5acyu_by.swift:16:27: error: cannot find 'alphabet' in scope\n       \
    \ let replacement = alphabet[(index + 1) % alphabet.count]\n                 \
    \         ^~~~~~~~\n/tmp/tmp5acyu_by.swift:16:50: error: cannot find 'alphabet'\
    \ in scope\n        let replacement = alphabet[(index + 1) % alphabet.count]\n\
    \                                                 ^~~~~~~~\n/tmp/tmp5acyu_by.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for char in message {\n        let index = english.index(of: char)\n\
    \        let nextIndex = english.index(of: char, offsetBy: index + 1)\n      \
    \  if nextIndex == nil {\n            result += english[english.index(of: char)]\n\
    \        } else {\n            result += english[nextIndex!]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvb7zzstd.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: char)\n                    ^~~~~~~\n/tmp/tmpvb7zzstd.swift:16:25:\
    \ error: cannot find 'english' in scope\n        let nextIndex = english.index(of:\
    \ char, offsetBy: index + 1)\n                        ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:23:\
    \ error: cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                      ^~~~~~~\n/tmp/tmpvb7zzstd.swift:18:31: error:\
    \ cannot find 'english' in scope\n            result += english[english.index(of:\
    \ char)]\n                              ^~~~~~~\n/tmp/tmpvb7zzstd.swift:20:23:\
    \ error: cannot find 'english' in scope\n            result += english[nextIndex!]\n\
    \                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for letter in result {\n        if letter.isUpper() {\n\
    \            result += letter.lowercased()\n        } else {\n            result\
    \ += letter.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn8aviskb.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpn8aviskb.swift:22:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    for letter in result {\n        if letter.isLetter()\
    \ {\n            if let index = result.index(of: letter) {\n                if\
    \ index == result.index(of: \"A\") {\n                    result += \"B\"\n  \
    \              } else if index == result.index(of: \"E\") {\n                \
    \    result += \"F\"\n                } else if index == result.index(of: \"I\"\
    ) {\n                    result += \"J\"\n                } else if index == result.index(of:\
    \ \"O\") {\n                    result += \"M\"\n                } else if index\
    \ == result.index(of: \"U\") {\n                    result += \"N\"\n        \
    \        }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jxeuafz.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp0jxeuafz.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp0jxeuafz.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp0jxeuafz.swift:22:19:\
    \ error: cannot call value of non-function type 'Bool'\n        if letter.isLetter()\
    \ {\n                  ^       ~~\n                          \n/tmp/tmp0jxeuafz.swift:23:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    if let index = result.index(of: letter) {\n                             \
    \     ^\n/tmp/tmp0jxeuafz.swift:23:35: note: use 'firstIndex(of:)' instead\n \
    \           if let index = result.index(of: letter) {\n                      \
    \            ^~~~~\n                                  firstIndex\n/tmp/tmp0jxeuafz.swift:24:36:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        if index == result.index(of: \"A\") {\n                             \
    \      ^\n/tmp/tmp0jxeuafz.swift:24:36: note: use 'firstIndex(of:)' instead\n\
    \                if index == result.index(of: \"A\") {\n                     \
    \              ^~~~~\n                                   firstIndex\n/tmp/tmp0jxeuafz.swift:26:43:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        } else if index == result.index(of: \"E\") {\n                      \
    \                    ^\n/tmp/tmp0jxeuafz.swift:26:43: note: use 'firstIndex(of:)'\
    \ instead\n                } else if index == result.index(of: \"E\") {\n    \
    \                                      ^~~~~\n                               \
    \           firstIndex\n/tmp/tmp0jxeuafz.swift:28:43: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n                } else if index ==\
    \ result.index(of: \"I\") {\n                             "
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        if letter.isUpper() {\n       \
    \     result += String(letter).swapCase()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpb8lcw8nf.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpb8lcw8nf.swift:16:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpb8lcw8nf.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659824666
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)\n        if index != nil {\n            let replacement = alphabet[index!\
    \ + 1]\n            result += String(letter).replacingOccurrences(of: letter,\
    \ with: replacement)\n        } else {\n            result += String(letter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl2b4d_sa.swift:15:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpl2b4d_sa.swift:17:31: error: cannot find 'alphabet' in scope\n       \
    \     let replacement = alphabet[index! + 1]\n                              ^~~~~~~~\n\
    /tmp/tmpl2b4d_sa.swift:18:38: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \            result += String(letter).replacingOccurrences(of: letter, with: replacement)\n\
    \                      ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = english.index(of: letter)!\n\
    \        let replacement = english[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"E\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9c_0sz29.swift:15:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp9c_0sz29.swift:16:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n/tmp/tmp9c_0sz29.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:18:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:19:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:20:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_0sz29.swift:21:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824788
