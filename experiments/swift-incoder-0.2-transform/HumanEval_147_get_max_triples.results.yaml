language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i -\
    \ i + 1\n    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35e23b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35e20b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35e20b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35e20b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35e20afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35e1eaf7ec <unavailable> + 186348

    6    tmpv2spv083                        0x00005654b1dc5801 <unavailable> + 6145

    7    tmpv2spv083                        0x00005654b1dc53c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b35e25a5460 __libc_start_main +
    245

    9    tmpv2spv083                        0x00005654b1dc50e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[j] + a[k] == i*i*i + 1 {\n                    a.append(i*i*i + 1)\n \
    \               }\n            }\n        }\n    }\n    return a.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5c07cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5bd73561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2d5bd73286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2d5bd7313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2d5bd72bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2d5bb72e83 <unavailable> + 188035

    6    tmpex181kwa                        0x0000562be8565ac0 <unavailable> + 6848

    7    tmpex181kwa                        0x0000562be8565478 <unavailable> + 5240

    8    libc.so.6                          0x00002b2d5c268460 __libc_start_main +
    245

    9    tmpex181kwa                        0x0000562be8565199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && j != k && i != k {\n                    let sum = i * i + j * j + k\
    \ * k\n                    if sum % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpxcisng5y/tmpxcisng5y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4673904c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46735fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46735fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46735fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcisng5y                        0x0000562b5a87e475 <unavailable> + 5237

    5    libc.so.6                          0x00002b4673af0460 __libc_start_main +
    245

    6    tmpxcisng5y                        0x0000562b5a87e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpraycf9tr.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90f1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90c11561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90c11286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc90c1113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90c10bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90a10e83 <unavailable> + 188035

    6    tmpz0njwk3m                        0x00005555f1eabac0 <unavailable> + 6848

    7    tmpz0njwk3m                        0x00005555f1eab478 <unavailable> + 5240

    8    libc.so.6                          0x00002adc91106460 __libc_start_main +
    245

    9    tmpz0njwk3m                        0x00005555f1eab199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwjzoa2ha/tmpwjzoa2ha.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4016327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjzoa2ha                        0x000056548c7b9495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba401b28460 __libc_start_main +
    245

    6    tmpwjzoa2ha                        0x000056548c7b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpm5_ep9kx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] -= 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp374u33to/tmp374u33to.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82bbe19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82bbb10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82bbb10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82bbb0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp374u33to                        0x00005557eea095a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b82bc005460 __libc_start_main +
    245

    6    tmp374u33to                        0x00005557eea09259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwjzoa2ha/tmpwjzoa2ha.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4016327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjzoa2ha                        0x000056548c7b9495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba401b28460 __libc_start_main +
    245

    6    tmpwjzoa2ha                        0x000056548c7b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] || a[i]\
    \ < a[k] || a[j] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjbadazch.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpjbadazch.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824954
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplscxzdff.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmplscxzdff.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afff896bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff8662561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afff8662286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afff866213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afff8661bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afff8461e83 <unavailable> + 188035

    6    tmp80nih8m0                        0x00005573dd2ceadb <unavailable> + 6875

    7    tmp80nih8m0                        0x00005573dd2ce488 <unavailable> + 5256

    8    libc.so.6                          0x00002afff8b57460 __libc_start_main +
    245

    9    tmp80nih8m0                        0x00005573dd2ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpy97iqpv8.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659824951
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i*i*i + j*j*j + k*k*k)\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b114f700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114f3f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b114f3f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b114f3f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b114f3f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b114f1f6e83 <unavailable> + 188035

    6    tmp_7ta1rw8                        0x0000561163a79aeb <unavailable> + 6891

    7    tmp_7ta1rw8                        0x0000561163a79498 <unavailable> + 5272

    8    libc.so.6                          0x00002b114f8ec460 __libc_start_main +
    245

    9    tmp_7ta1rw8                        0x0000561163a791b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = a[i] + a[j] + a[k]\n                 \
    \   if triple % 3 == 0 {\n                        return triple\n            \
    \        }\n                }\n            }\n        }\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b3a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b376b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36b376b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36b376b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36b376abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36b356ae83 <unavailable> + 188035

    6    tmp2i132q78                        0x000055ebfa7d6a60 <unavailable> + 6752

    7    tmp2i132q78                        0x000055ebfa7d63c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b36b3c60460 __libc_start_main +
    245

    9    tmp2i132q78                        0x000055ebfa7d60e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824950
