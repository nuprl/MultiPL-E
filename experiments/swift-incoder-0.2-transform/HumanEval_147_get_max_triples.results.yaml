language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i -\
    \ i + 1\n    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35e23b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35e20b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35e20b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35e20b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35e20afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35e1eaf7ec <unavailable> + 186348

    6    tmpv2spv083                        0x00005654b1dc5801 <unavailable> + 6145

    7    tmpv2spv083                        0x00005654b1dc53c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b35e25a5460 __libc_start_main +
    245

    9    tmpv2spv083                        0x00005654b1dc50e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[j] + a[k] == i*i*i + 1 {\n                    a.append(i*i*i + 1)\n \
    \               }\n            }\n        }\n    }\n    return a.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5c07cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5bd73561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2d5bd73286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2d5bd7313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2d5bd72bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2d5bb72e83 <unavailable> + 188035

    6    tmpex181kwa                        0x0000562be8565ac0 <unavailable> + 6848

    7    tmpex181kwa                        0x0000562be8565478 <unavailable> + 5240

    8    libc.so.6                          0x00002b2d5c268460 __libc_start_main +
    245

    9    tmpex181kwa                        0x0000562be8565199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && j != k && i != k {\n                    let sum = i * i + j * j + k\
    \ * k\n                    if sum % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpxcisng5y/tmpxcisng5y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4673904c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46735fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46735fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46735fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcisng5y                        0x0000562b5a87e475 <unavailable> + 5237

    5    libc.so.6                          0x00002b4673af0460 __libc_start_main +
    245

    6    tmpxcisng5y                        0x0000562b5a87e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpraycf9tr.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90f1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90c11561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc90c11286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc90c1113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc90c10bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc90a10e83 <unavailable> + 188035

    6    tmpz0njwk3m                        0x00005555f1eabac0 <unavailable> + 6848

    7    tmpz0njwk3m                        0x00005555f1eab478 <unavailable> + 5240

    8    libc.so.6                          0x00002adc91106460 __libc_start_main +
    245

    9    tmpz0njwk3m                        0x00005555f1eab199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwjzoa2ha/tmpwjzoa2ha.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4016327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjzoa2ha                        0x000056548c7b9495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba401b28460 __libc_start_main +
    245

    6    tmpwjzoa2ha                        0x000056548c7b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpm5_ep9kx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] -= 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp374u33to/tmp374u33to.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82bbe19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82bbb10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82bbb10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82bbb0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp374u33to                        0x00005557eea095a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b82bc005460 __libc_start_main +
    245

    6    tmp374u33to                        0x00005557eea09259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwjzoa2ha/tmpwjzoa2ha.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4016327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjzoa2ha                        0x000056548c7b9495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba401b28460 __libc_start_main +
    245

    6    tmpwjzoa2ha                        0x000056548c7b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] || a[i]\
    \ < a[k] || a[j] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjbadazch.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpjbadazch.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824954
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplscxzdff.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmplscxzdff.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afff896bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff8662561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afff8662286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afff866213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afff8661bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afff8461e83 <unavailable> + 188035

    6    tmp80nih8m0                        0x00005573dd2ceadb <unavailable> + 6875

    7    tmp80nih8m0                        0x00005573dd2ce488 <unavailable> + 5256

    8    libc.so.6                          0x00002afff8b57460 __libc_start_main +
    245

    9    tmp80nih8m0                        0x00005573dd2ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824872
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpy97iqpv8.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1659824951
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i*i*i + j*j*j + k*k*k)\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b114f700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114f3f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b114f3f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b114f3f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b114f3f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b114f1f6e83 <unavailable> + 188035

    6    tmp_7ta1rw8                        0x0000561163a79aeb <unavailable> + 6891

    7    tmp_7ta1rw8                        0x0000561163a79498 <unavailable> + 5272

    8    libc.so.6                          0x00002b114f8ec460 __libc_start_main +
    245

    9    tmp_7ta1rw8                        0x0000561163a791b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = a[i] + a[j] + a[k]\n                 \
    \   if triple % 3 == 0 {\n                        return triple\n            \
    \        }\n                }\n            }\n        }\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b3a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b376b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36b376b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36b376b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36b376abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36b356ae83 <unavailable> + 188035

    6    tmp2i132q78                        0x000055ebfa7d6a60 <unavailable> + 6752

    7    tmp2i132q78                        0x000055ebfa7d63c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b36b3c60460 __libc_start_main +
    245

    9    tmp2i132q78                        0x000055ebfa7d60e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    \n    var triples = 0\n    for i in 0..<n {\n     \
    \   for j in 0..<n {\n            for k in 0..<n {\n                if i != j\
    \ && i != k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n\
    \                        triples++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa4bg8fy2.swift:24:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[j] + a[k] == i*i - i + 1 {\n                    a.append(i*i - i + 1)\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b87ddc9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87dd992561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b87dd992286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b87dd99213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b87dd991bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b87dd791e83 <unavailable> + 188035

    6    tmp3_zj5c0g                        0x00005608cba95ac0 <unavailable> + 6848

    7    tmp3_zj5c0g                        0x00005608cba95478 <unavailable> + 5240

    8    libc.so.6                          0x00002b87dde87460 __libc_start_main +
    245

    9    tmp3_zj5c0g                        0x00005608cba95199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjixqwv_8.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                if a[0] + a[1] + a[2] == 3 {\n                    return\
    \ 1\n                }\n                a[0] += a[1]\n                a[1] +=\
    \ a[2]\n                a[2] += a[0]\n            }\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: Exception
  stderr: 'tmppwhfe1_3/tmppwhfe1_3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a8b2cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a8afc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a8afc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a8afc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwhfe1_3                        0x0000555b79f20495 <unavailable> + 5269

    5    libc.so.6                          0x00002b0a8b4b9460 __libc_start_main +
    245

    6    tmppwhfe1_3                        0x0000555b79f20149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a.append(i*i - i + 1)\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpgodsrbr3/tmpgodsrbr3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a799e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a796e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a796e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a796df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgodsrbr3                        0x00005645e534e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b3a79bd5460 __libc_start_main +
    245

    6    tmpgodsrbr3                        0x00005645e534e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpycrkhsh0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            if a[j] < a[k] {\n                            count += 1\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpwfueo7bc.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphd5eq6up.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphn_rmwyi.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmphn_rmwyi.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmphn_rmwyi.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqbz3qhbb.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for _ in 1...n {\n        if a[_] > 0 {\n      \
    \      count += 1\n        }\n        a[_] = a[_] * 3 - 1 + 1\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3856trb8.swift:19:14: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if a[_] > 0 {\n             ^\n/tmp/tmp3856trb8.swift:22:11:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        a[_] = a[_] * 3 - 1 + 1\n          ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = i * i - i +\
    \ 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpezjc6luk.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i + j * j + k * k\n          \
    \          if triple % 3 == 0 {\n                        a.append(triple)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpw611_mem/tmpw611_mem.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f3509bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f34d92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f34d92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f34d917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw611_mem                        0x000055ee6fb5d495 <unavailable> + 5269

    5    libc.so.6                          0x00002b9f35287460 __libc_start_main +
    245

    6    tmpw611_mem                        0x000055ee6fb5d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmptqrjar90/tmptqrjar90.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00851a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0084e99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0084e99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0084e987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqrjar90                        0x000056421aeae4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b008538e460 __libc_start_main +
    245

    6    tmptqrjar90                        0x000056421aeae159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = i * i - i + 1\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpso78747m/tmpso78747m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36a782ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36a7521b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36a7521988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36a75207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpso78747m                        0x000055f4bc1dc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b36a7a16460 __libc_start_main +
    245

    6    tmpso78747m                        0x000055f4bc1dc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpf2o79i1d/tmpf2o79i1d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad82202ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad821d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad821d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad821d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2o79i1d                        0x0000564b1ab3a495 <unavailable> + 5269

    5    libc.so.6                          0x00002ad822216460 __libc_start_main +
    245

    6    tmpf2o79i1d                        0x0000564b1ab3a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] += 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx897jo9h/tmpx897jo9h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ae1a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ae170eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ae170e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ae170d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx897jo9h                        0x00005580357a25a5 <unavailable> + 5541

    5    libc.so.6                          0x00002b6ae1c03460 __libc_start_main +
    245

    6    tmpx897jo9h                        0x00005580357a2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjixqwv_8.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpg7ep5ia1.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpg7ep5ia1.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * i - i\
    \ + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgis_gcx3.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    return 1\n     \
    \           }\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpx7ydgj_i.swift:14:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpx7ydgj_i.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpx7ydgj_i.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpx7ydgj_i.swift:17:12:\
    \ error: expected type\n    for i := 0; i < n; i++ {\n           ^\n         \
    \   <#type#>\n/tmp/tmpx7ydgj_i.swift:17:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 0; i < n; i++ {\n           ^\n/tmp/tmpx7ydgj_i.swift:17:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < n;\
    \ i++ {\n           ^\n/tmp/tmpx7ydgj_i.swift:18:16: error: expected type\n  \
    \      for j := i + 1; j < n; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpx7ydgj_i.swift:18:16: error: expected 'in' after for-each pattern\n  \
    \      for j := i + 1; j < n; j++ {\n               ^\n/tmp/tmpx7ydgj_i.swift:18:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := i +\
    \ 1; j < n; j++ {\n               ^\n/tmp/tmpx7ydgj_i.swift:19:20: error: expected\
    \ type\n            for k := j + 1; k < n; k++ {\n                   ^\n     \
    \               <#type#>\n/tmp/tmpx7ydgj_i.swift:19:20: error: expected 'in' after\
    \ for-each pattern\n            for k := j + 1; k < n; k++ {\n               \
    \    ^\n/tmp/tmpx7ydgj_i.swift:19:20: error: expected Sequence expression for\
    \ for-each loop\n            for k := j + 1; k < n; k++ {\n                  \
    \ ^\n/tmp/tmpx7ydgj_i.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpgja_be84/tmpgja_be84.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9449097c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9448d8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9448d8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9448d8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgja_be84                        0x000055eb3f3eb495 <unavailable> + 5269

    5    libc.so.6                          0x00002b9449283460 __libc_start_main +
    245

    6    tmpgja_be84                        0x000055eb3f3eb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpsl1mxgt5/tmpsl1mxgt5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba589115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba588e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba588e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba588e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1mxgt5                        0x000055e4b7d7f495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba589301460 __libc_start_main +
    245

    6    tmpsl1mxgt5                        0x000055e4b7d7f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphn_rmwyi.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmphn_rmwyi.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmphn_rmwyi.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i\
    \ - i + 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a7a3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a7732561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06a7732286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06a773213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06a7731bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b06a75317ec <unavailable> + 186348

    6    tmpbzgnxbg8                        0x00005610303807f4 <unavailable> + 6132

    7    tmpbzgnxbg8                        0x0000561030380438 <unavailable> + 5176

    8    libc.so.6                          0x00002b06a7c27460 __libc_start_main +
    245

    9    tmpbzgnxbg8                        0x0000561030380159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwcn7tttb/tmpwcn7tttb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878577bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8785472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8785472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87854717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcn7tttb                        0x0000563ba663e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8785967460 __libc_start_main +
    245

    6    tmpwcn7tttb                        0x0000563ba663e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpm5_ep9kx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in  1...n {\n        for j in i + 1...n {\n\
    \            for k in j + 1...n {\n                if a[i] < a[j] && a[i] < a[k]\
    \ {\n                    a[i] = a[j] + a[k]\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6becb0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bec803561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6bec803286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6bec80313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6bec802bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp52w_64ov                        0x0000558cd5a8faf7 <unavailable> + 6903

    6    tmp52w_64ov                        0x0000558cd5a8f428 <unavailable> + 5160

    7    libc.so.6                          0x00002b6beccf8460 __libc_start_main +
    245

    8    tmp52w_64ov                        0x0000558cd5a8f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpihtbw54d/tmpihtbw54d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502fca0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502f997b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502f997988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502f9967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihtbw54d                        0x0000560f23ba2495 <unavailable> + 5269

    5    libc.so.6                          0x00002b502fe8c460 __libc_start_main +
    245

    6    tmpihtbw54d                        0x0000560f23ba2149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpcom682ld/tmpcom682ld.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dd624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dd31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dd31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dd31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcom682ld                        0x00005580f88704a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b33dd810460 __libc_start_main +
    245

    6    tmpcom682ld                        0x00005580f8870159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = i * i - i + 1\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpso78747m/tmpso78747m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36a782ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36a7521b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36a7521988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36a75207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpso78747m                        0x000055f4bc1dc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b36a7a16460 __libc_start_main +
    245

    6    tmpso78747m                        0x000055f4bc1dc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac80708c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac803ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac803ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac803ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac803febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac801fee83 <unavailable> + 188035

    6    tmpwi1nx3xz                        0x0000559fbaf87ab0 <unavailable> + 6832

    7    tmpwi1nx3xz                        0x0000559fbaf87468 <unavailable> + 5224

    8    libc.so.6                          0x00002aac808f4460 __libc_start_main +
    245

    9    tmpwi1nx3xz                        0x0000559fbaf87189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a.append(i * i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdjzhye_h/tmpdjzhye_h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd3b21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bd3818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bd3818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bd38177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjzhye_h                        0x000056273f0e2495 <unavailable> + 5269

    5    libc.so.6                          0x00002b9bd3d0d460 __libc_start_main +
    245

    6    tmpdjzhye_h                        0x000056273f0e2149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b42a7746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42a743d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b42a743d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b42a743d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b42a743cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b42a723ce83 <unavailable> + 188035

    6    tmp1wcth7lc                        0x00005643e6cc9a4d <unavailable> + 6733

    7    tmp1wcth7lc                        0x00005643e6cc93c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b42a7932460 __libc_start_main +
    245

    9    tmp1wcth7lc                        0x00005643e6cc90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpycrkhsh0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz5qkjtbj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    \n    var count = 0\n    for i in 0..<n {\n       \
    \ for j in 0..<n {\n            for k in 0..<n {\n                if i < j < k\
    \ {\n                    if a[i] < a[j] + a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpztt6n2o_.swift:22:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpztt6n2o_.swift:22:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a.append(i*i - i + 1)\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpgodsrbr3/tmpgodsrbr3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a799e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a796e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a796e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a796df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgodsrbr3                        0x00005645e534e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b3a79bd5460 __libc_start_main +
    245

    6    tmpgodsrbr3                        0x00005645e534e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[j] < a[i] && a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \       if a[k] < a[i] && a[k] < a[j] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk4l7shcx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpk4l7shcx.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpk4l7shcx.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for var i = 0; i < n; i++ {\n     \
    \   a[i] = i * i - i + 1\n    }\n    var count = 0\n    for var i = 0; i < n;\
    \ i++ {\n        for var j = i + 1; j < n; j++ {\n            for var k = j +\
    \ 1; k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptj0e43vq.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptj0e43vq.swift:18:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptj0e43vq.swift:19:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for var j\
    \ = i + 1; j < n; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptj0e43vq.swift:20:13:\
    \ error: C-style for statement has been removed in Swift 3\n            for var\
    \ k = j + 1; k < n; k++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptj0e43vq.swift:13:24:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var a = Array<Int>(n)\n\
    \                       ^\n                       arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] + a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0lb_yru5.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp0lb_yru5.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8db4b7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8db4873561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8db4873286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8db487313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8db4872bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8db4672e83 <unavailable> + 188035

    6    tmpgt71uqm5                        0x000055c29f69daeb <unavailable> + 6891

    7    tmpgt71uqm5                        0x000055c29f69d498 <unavailable> + 5272

    8    libc.so.6                          0x00002b8db4d68460 __libc_start_main +
    245

    9    tmpgt71uqm5                        0x000055c29f69d1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 count += 1\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpfxz4ykje/tmpfxz4ykje.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf1b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf1821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf1821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf18207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxz4ykje                        0x000055cb7e116535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4bf1d16460 __libc_start_main +
    245

    6    tmpfxz4ykje                        0x000055cb7e1161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i - i*i + i*i*i + i*i*i\
    \ + i*i*i + i*i*i {\n                        a.append(i)\n                   \
    \     a.append(j)\n                        a.append(k)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e02eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e02ba6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7e02ba6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7e02ba613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7e02ba5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7e029a5e83 <unavailable> + 188035

    6    tmpnmwlnx3t                        0x000056450a04eac0 <unavailable> + 6848

    7    tmpnmwlnx3t                        0x000056450a04e478 <unavailable> + 5240

    8    libc.so.6                          0x00002b7e0309b460 __libc_start_main +
    245

    9    tmpnmwlnx3t                        0x000056450a04e199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i * i + j * j + k * k\n          \
    \          if triple % 3 == 0 {\n                        a.append(triple)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpy3gtbip8/tmpy3gtbip8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d13d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d13a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d13a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d13a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3gtbip8                        0x000055a04dc04495 <unavailable> + 5269

    5    libc.so.6                          0x00002b6d13f47460 __libc_start_main +
    245

    6    tmpy3gtbip8                        0x000055a04dc04149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphn_rmwyi.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmphn_rmwyi.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmphn_rmwyi.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwcn7tttb/tmpwcn7tttb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878577bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8785472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8785472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87854717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcn7tttb                        0x0000563ba663e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8785967460 __libc_start_main +
    245

    6    tmpwcn7tttb                        0x0000563ba663e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqj169hvo.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpqj169hvo.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpqj169hvo.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n/tmp/tmpqj169hvo.swift:22:29:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \                    if a[i] < a[j] < a[k] {\n                            ^  \
    \    ~\n/tmp/tmpqj169hvo.swift:22:36: error: binary operator '<' cannot be applied\
    \ to operands of type 'Bool' and '()'\n                    if a[i] < a[j] < a[k]\
    \ {\n                       ~~~~~~~~~~~ ^ ~~~~\n/tmp/tmpqj169hvo.swift:22:36:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n                    if a[i] < a[j] < a[k] {\n     \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjixqwv_8.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n \
    \                   if a[i] < a[j] + a[k] {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0lb_yru5.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp0lb_yru5.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i - i*i + i*i*i + i*i*i\
    \ + i*i*i {\n                        a.append(i)\n                        a.append(j)\n\
    \                        a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adadc554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adadc24b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adadc24b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adadc24b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adadc24abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adadc04ae83 <unavailable> + 188035

    6    tmpf5k52gzl                        0x00005652458beac0 <unavailable> + 6848

    7    tmpf5k52gzl                        0x00005652458be478 <unavailable> + 5240

    8    libc.so.6                          0x00002adadc740460 __libc_start_main +
    245

    9    tmpf5k52gzl                        0x00005652458be199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ < j < k {\n                    a[i] = i * i - i + 1\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpg7ep5ia1.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpg7ep5ia1.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4dedkhw9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp4dedkhw9.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp4dedkhw9.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map({ _ in Int(pow(Double(pow(Double(n),\
    \ 2)), 2))})\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                        count += 1\n                    }\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjee1hzwe.swift:13:41: error: cannot find 'pow' in scope\n    var\
    \ a = Array(0..<n).map({ _ in Int(pow(Double(pow(Double(n), 2)), 2))})\n     \
    \                                   ^~~\n/tmp/tmpjee1hzwe.swift:13:52: error:\
    \ cannot find 'pow' in scope\n    var a = Array(0..<n).map({ _ in Int(pow(Double(pow(Double(n),\
    \ 2)), 2))})\n                                                   ^~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af7f4da6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7f4a9d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7f4a9d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7f4a9d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7f4a9cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af7f489ce83 <unavailable> + 188035

    6    tmp7j2z6pmv                        0x00005640987f3ac0 <unavailable> + 6848

    7    tmp7j2z6pmv                        0x00005640987f3478 <unavailable> + 5240

    8    libc.so.6                          0x00002af7f4f92460 __libc_start_main +
    245

    9    tmp7j2z6pmv                        0x00005640987f3199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n)\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            for k in 0..<n {\n                if i\
    \ != j && i != k && j != k {\n                    a[i] = a[i] + a[j] + a[k]\n\
    \                    if a[i] % 3 == 0 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp3eabis5_/tmp3eabis5_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56e5ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56e589db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56e589d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56e589c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3eabis5_                        0x0000565455f24515 <unavailable> + 5397

    5    libc.so.6                          0x00002b56e5d92460 __libc_start_main +
    245

    6    tmp3eabis5_                        0x0000565455f241c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjw7yqqss.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpjw7yqqss.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpjw7yqqss.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j && j < k && i < k\
    \ {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c41189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c40e80561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c40e80286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c40e8013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c40e7fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c40c7fe83 <unavailable> + 188035

    6    tmpfq_3q9no                        0x000056468020bace <unavailable> + 6862

    7    tmpfq_3q9no                        0x000056468020b488 <unavailable> + 5256

    8    libc.so.6                          0x00002b6c41375460 __libc_start_main +
    245

    9    tmpfq_3q9no                        0x000056468020b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmptqrjar90/tmptqrjar90.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00851a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0084e99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0084e99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0084e987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqrjar90                        0x000056421aeae4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b008538e460 __libc_start_main +
    245

    6    tmptqrjar90                        0x000056421aeae159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n      \
    \                  a[i] += 1\n                        a[j] += 1\n            \
    \            a[k] += 1\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b245b412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b245b109561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b245b109286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b245b10913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b245b108bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b245af08e83 <unavailable> + 188035

    6    tmp9zk12r2e                        0x000055ff3d32ab42 <unavailable> + 6978

    7    tmp9zk12r2e                        0x000055ff3d32a4d8 <unavailable> + 5336

    8    libc.so.6                          0x00002b245b5fe460 __libc_start_main +
    245

    9    tmp9zk12r2e                        0x000055ff3d32a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i in 1...n {\n        for\
    \ j in 1...n {\n            for k in 1...n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 count += 1\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphmxryo8g.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i - i*i + i*i*i + i*i*i\
    \ {\n                        a.append(i)\n                        a.append(j)\n\
    \                        a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bd7554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bd724b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3bd724b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3bd724b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3bd724abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3bd704ae83 <unavailable> + 188035

    6    tmpmybrpfk5                        0x0000560bb0e2aac0 <unavailable> + 6848

    7    tmpmybrpfk5                        0x0000560bb0e2a478 <unavailable> + 5240

    8    libc.so.6                          0x00002b3bd7740460 __libc_start_main +
    245

    9    tmpmybrpfk5                        0x0000560bb0e2a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpf2o79i1d/tmpf2o79i1d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad82202ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad821d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad821d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad821d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2o79i1d                        0x0000564b1ab3a495 <unavailable> + 5269

    5    libc.so.6                          0x00002ad822216460 __libc_start_main +
    245

    6    tmpf2o79i1d                        0x0000564b1ab3a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i*i*i + j*j*j + k*k*k)\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b114f700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114f3f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b114f3f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b114f3f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b114f3f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b114f1f6e83 <unavailable> + 188035

    6    tmp_7ta1rw8                        0x0000561163a79aeb <unavailable> + 6891

    7    tmp_7ta1rw8                        0x0000561163a79498 <unavailable> + 5272

    8    libc.so.6                          0x00002b114f8ec460 __libc_start_main +
    245

    9    tmp_7ta1rw8                        0x0000561163a791b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aac80708c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac803ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac803ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac803ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac803febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aac801fee83 <unavailable> + 188035

    6    tmpwi1nx3xz                        0x0000559fbaf87ab0 <unavailable> + 6832

    7    tmpwi1nx3xz                        0x0000559fbaf87468 <unavailable> + 5224

    8    libc.so.6                          0x00002aac808f4460 __libc_start_main +
    245

    9    tmpwi1nx3xz                        0x0000559fbaf87189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr749jl_q/tmpr749jl_q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b402f5e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402f2d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b402f2d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b402f2d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr749jl_q                        0x0000559c7ba32495 <unavailable> + 5269

    5    libc.so.6                          0x00002b402f7cc460 __libc_start_main +
    245

    6    tmpr749jl_q                        0x0000559c7ba32149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpm5_ep9kx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824950
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i*i - i + 1)\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzn7awgq7.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpzn7awgq7.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4dedkhw9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp4dedkhw9.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp4dedkhw9.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqbz3qhbb.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    \n   \
    \ for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n \
    \               if i < j < k {\n                    let triple = i + j + k\n \
    \                   \n                    if triple % 3 == 0 {\n             \
    \           a.append(triple)\n                    }\n                }\n     \
    \       }\n        }\n    }\n    \n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpg913ag_l.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpg913ag_l.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] + a[k] {\n                    \
    \    count += 1\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpcqei2bz0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptxpgfl1w.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz5qkjtbj.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp_c78qr6k/tmp_c78qr6k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab506732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab506429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab506429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5064287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c78qr6k                        0x000055d3364f0555 <unavailable> + 5461

    5    libc.so.6                          0x00002ab50691e460 __libc_start_main +
    245

    6    tmp_c78qr6k                        0x000055d3364f0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpcom682ld/tmpcom682ld.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dd624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dd31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dd31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dd31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcom682ld                        0x00005580f88704a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b33dd810460 __libc_start_main +
    245

    6    tmpcom682ld                        0x00005580f8870159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i + j + k\n                    if triple\
    \ % 3 == 0 {\n                        a.append(triple)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpf31nif29/tmpf31nif29.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59f4ea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59f4b9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59f4b9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59f4b9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf31nif29                        0x000055893758d495 <unavailable> + 5269

    5    libc.so.6                          0x00002b59f5094460 __libc_start_main +
    245

    6    tmpf31nif29                        0x000055893758d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + 1 + j * j + k\n          \
    \          a.append(triple)\n                }\n            }\n        }\n   \
    \ }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpejs9_7as.swift:24:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp0xj3jjiz/tmp0xj3jjiz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c89aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c86a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c86a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c86a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xj3jjiz                        0x000056171b6eb4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b80c8b9a460 __libc_start_main +
    245

    6    tmp0xj3jjiz                        0x000056171b6eb159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let triple = i * i * i + j * j + k * k\n          \
    \          if triple % 3 == 0 {\n                        a.append(triple)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpf76elgf4/tmpf76elgf4.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0835d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0835a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0835a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0835a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf76elgf4                        0x0000555c31546495 <unavailable> + 5269

    5    libc.so.6                          0x00002b0835f24460 __libc_start_main +
    245

    6    tmpf76elgf4                        0x0000555c31546149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var sum\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                sum += a[i] - a[j] - a[k]\n            }\n        }\n   \
    \ }\n    return sum % 3 == 0 ? 1 : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpt40i1z94/tmpt40i1z94.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7f1fe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7f1cdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7f1cda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7f1cd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt40i1z94                        0x00005604da11a6b5 <unavailable> + 5813

    5    libc.so.6                          0x00002ab7f21cf460 __libc_start_main +
    245

    6    tmpt40i1z94                        0x00005604da11a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660009293
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i -\
    \ i + 1\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b62dd1b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62dceb0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62dceb0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62dceb013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62dceafbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62dccaf7ec <unavailable> + 186348

    6    tmps3m2kpji                        0x000056080b3d17c9 <unavailable> + 6089

    7    tmps3m2kpji                        0x000056080b3d1418 <unavailable> + 5144

    8    libc.so.6                          0x00002b62dd3a5460 __libc_start_main +
    245

    9    tmps3m2kpji                        0x000056080b3d1139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepopq1kv.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpf2o79i1d/tmpf2o79i1d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad82202ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad821d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad821d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad821d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2o79i1d                        0x0000564b1ab3a495 <unavailable> + 5269

    5    libc.so.6                          0x00002ad822216460 __libc_start_main +
    245

    6    tmpf2o79i1d                        0x0000564b1ab3a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwcn7tttb/tmpwcn7tttb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878577bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8785472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8785472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87854717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcn7tttb                        0x0000563ba663e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8785967460 __libc_start_main +
    245

    6    tmpwcn7tttb                        0x0000563ba663e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmprz8zcut6/tmprz8zcut6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a508c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a505beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a505be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a505bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8zcut6                        0x0000561342a5f495 <unavailable> + 5269

    5    libc.so.6                          0x00002b4a50ab3460 __libc_start_main +
    245

    6    tmprz8zcut6                        0x0000561342a5f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if i < j < k {\n                \
    \    a[i] += a[j] + a[k]\n                    if a[i] % 3 == 0 {\n           \
    \             count += 1\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpb_t18gxs.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpb_t18gxs.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvkcqdp7p/tmpvkcqdp7p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af072b58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af07284fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af07284f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af07284e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkcqdp7p                        0x00005626e9336495 <unavailable> + 5269

    5    libc.so.6                          0x00002af072d44460 __libc_start_main +
    245

    6    tmpvkcqdp7p                        0x00005626e9336149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ddecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ddbc6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b95ddbc6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b95ddbc613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b95ddbc5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95dd9c5e83 <unavailable> + 188035

    6    tmpt9l7gr8a                        0x000055fff04feab0 <unavailable> + 6832

    7    tmpt9l7gr8a                        0x000055fff04fe468 <unavailable> + 5224

    8    libc.so.6                          0x00002b95de0bb460 __libc_start_main +
    245

    9    tmpt9l7gr8a                        0x000055fff04fe189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4dedkhw9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp4dedkhw9.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp4dedkhw9.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[j] > a[k] {\n                        a[j] = a[k]\n\
    \                    }\n                    if a[i] > a[j] {\n               \
    \         a[i] = a[j]\n                    }\n                }\n            }\n\
    \        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad845f0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad845c02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad845c02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad845c0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad845c01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad845a01e83 <unavailable> + 188035

    6    tmpuqqsc0s_                        0x000055a9d325aab0 <unavailable> + 6832

    7    tmpuqqsc0s_                        0x000055a9d325a468 <unavailable> + 5224

    8    libc.so.6                          0x00002ad8460f7460 __libc_start_main +
    245

    9    tmpuqqsc0s_                        0x000055a9d325a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphd5eq6up.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i in 0..<n {\n        a[i] = i *\
    \ i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i != j && i != k &&\
    \ j != k {\n                    if a[i + j + k] == a[i + j] * a[j] * a[k] {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_3cm6vc1.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009291
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp0xj3jjiz/tmp0xj3jjiz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c89aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c86a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c86a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c86a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xj3jjiz                        0x000056171b6eb4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b80c8b9a460 __libc_start_main +
    245

    6    tmp0xj3jjiz                        0x000056171b6eb159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptxpgfl1w.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    for _ in 1...n {\n        a[n - 1] += 1\n    }\n    for _ in 1...n\
    \ {\n        a[n - 1] += 1\n    }\n    return a.filter({ ($0 % 3) == 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvfffs0v4/tmpvfffs0v4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1e287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1df7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1df7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1df7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfffs0v4                        0x0000562dbe88a5a5 <unavailable> + 5541

    5    libc.so.6                          0x00002baa1e473460 __libc_start_main +
    245

    6    tmpvfffs0v4                        0x0000562dbe88a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i\
    \ - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmprhepj5yi/tmprhepj5yi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13440afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1343da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1343da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1343da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhepj5yi                        0x00005652188f0495 <unavailable> + 5269

    5    libc.so.6                          0x00002b134429b460 __libc_start_main +
    245

    6    tmprhepj5yi                        0x00005652188f0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i * i - i + 1 + j * j + k\n                    if triple\
    \ % 3 == 0 {\n                        a.append(triple)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprqve6dpm.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmprqve6dpm.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i - i*i + i*i + i*i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i +\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphzdn2fpm.swift:19:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmphzdn2fpm.swift:37:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmphzdn2fpm.swift:16:28: note: to match this opening '{'\n     \
    \       for k in 1...n {\n                           ^\n/tmp/tmphzdn2fpm.swift:37:41:\
    \ error: expected '}' at end of brace statement\nassert(get_max_triples(n: 100)\
    \ == 53361)\n                                        ^\n/tmp/tmphzdn2fpm.swift:15:24:\
    \ note: to match this opening '{'\n        for j in 1...n {\n                \
    \       ^\n/tmp/tmphzdn2fpm.swift:37:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmphzdn2fpm.swift:14:20: note: to match this opening '{'\n    for\
    \ i in 1...n {\n                   ^\n/tmp/tmphzdn2fpm.swift:37:41: error: expected\
    \ '}' at end of brace statement\nassert(get_max_triples(n: 100) == 53361)\n  \
    \                                      ^\n/tmp/tmphzdn2fpm.swift:12:37: note:\
    \ to match this opening '{'\nfunc get_max_triples(n: Int) -> Int {\n         \
    \                           ^\n/tmp/tmphzdn2fpm.swift:22:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n            \
    \            count += 1\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphn_rmwyi.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmphn_rmwyi.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmphn_rmwyi.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpirq99ag6.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i*i - i + 1)\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzn7awgq7.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpzn7awgq7.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[j] < a[i] && a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \       if a[k] < a[i] && a[k] < a[j] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk4l7shcx.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpk4l7shcx.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpk4l7shcx.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = i * i - i +\
    \ 1\n    }\n    var count = 0\n    for i in 0..(n-1) { \n        for j in (i+1)...n\
    \ {\n            for k in (i+1)...n {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpze9hjgs3.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpsl1mxgt5/tmpsl1mxgt5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba589115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba588e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba588e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba588e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1mxgt5                        0x000055e4b7d7f495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba589301460 __libc_start_main +
    245

    6    tmpsl1mxgt5                        0x000055e4b7d7f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                if a[i] < a[j] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqj169hvo.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpqj169hvo.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmpqj169hvo.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n/tmp/tmpqj169hvo.swift:22:29:\
    \ error: adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \                    if a[i] < a[j] < a[k] {\n                            ^  \
    \    ~\n/tmp/tmpqj169hvo.swift:22:36: error: binary operator '<' cannot be applied\
    \ to operands of type 'Bool' and '()'\n                    if a[i] < a[j] < a[k]\
    \ {\n                       ~~~~~~~~~~~ ^ ~~~~\n/tmp/tmpqj169hvo.swift:22:36:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n                    if a[i] < a[j] < a[k] {\n     \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo255fvuc.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[0] += i * i - i + 1\n                    a[1] += j * j\
    \ - j + 1\n                    a[2] += k * k - k + 1\n                }\n    \
    \        }\n        }\n    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aab3b679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab3b370561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab3b370286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab3b37013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab3b36fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aab3b16f7ec <unavailable> + 186348

    6    tmpg0v_go2n                        0x000055b3f7049c1a <unavailable> + 7194

    7    tmpg0v_go2n                        0x000055b3f7049478 <unavailable> + 5240

    8    libc.so.6                          0x00002aab3b865460 __libc_start_main +
    245

    9    tmpg0v_go2n                        0x000055b3f7049199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = a[i] + a[j] + a[k]\n                }\n            }\n     \
    \   }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpe45dz48j.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpe45dz48j.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpdpvf0fs5/tmpdpvf0fs5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada74e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada74e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada74e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpvf0fs5                        0x0000564c1b89c495 <unavailable> + 5269

    5    libc.so.6                          0x00002aada79dc460 __libc_start_main +
    245

    6    tmpdpvf0fs5                        0x0000564c1b89c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && i != k && j != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                }\n          \
    \  }\n        }\n    }\n    return a.max() % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpavx3rgd1.swift:23:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return a.max() % 3 == 0\n       \
    \      ^\n/tmp/tmpavx3rgd1.swift:23:14: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n    return a.max() % 3 == 0\n\
    \             ^\n           (       ?? <#default value#>)\n/tmp/tmpavx3rgd1.swift:23:14:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return a.max() % 3 == 0\n             ^\n                  !\n/tmp/tmpavx3rgd1.swift:23:24:\
    \ error: cannot convert return expression of type 'Bool' to return type 'Int'\n\
    \    return a.max() % 3 == 0\n           ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 count += 1\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpfxz4ykje/tmpfxz4ykje.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf1b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf1821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf1821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf18207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxz4ykje                        0x000055cb7e116535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4bf1d16460 __libc_start_main +
    245

    6    tmpfxz4ykje                        0x000055cb7e1161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] + a[k] > a[i] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b800203ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8001d31561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8001d31286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8001d3113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8001d30bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8001b30e83 <unavailable> + 188035

    6    tmphg0n77_f                        0x000055a87e3c1ab0 <unavailable> + 6832

    7    tmphg0n77_f                        0x000055a87e3c1468 <unavailable> + 5224

    8    libc.so.6                          0x00002b8002226460 __libc_start_main +
    245

    9    tmphg0n77_f                        0x000055a87e3c1189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k && a[i] + a[j] + a[k] == i*i*i + j*j*j {\n                    a.append(i*i*i\
    \ + j*j*j)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1408b33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140882a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b140882a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b140882a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1408829bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1408629e83 <unavailable> + 188035

    6    tmpca06s0zk                        0x000055a0a1854ac0 <unavailable> + 6848

    7    tmpca06s0zk                        0x000055a0a1854478 <unavailable> + 5240

    8    libc.so.6                          0x00002b1408d1f460 __libc_start_main +
    245

    9    tmpca06s0zk                        0x000055a0a1854199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpsl1mxgt5/tmpsl1mxgt5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba589115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba588e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba588e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba588e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1mxgt5                        0x000055e4b7d7f495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba589301460 __libc_start_main +
    245

    6    tmpsl1mxgt5                        0x000055e4b7d7f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j - j + k * k\n         \
    \           if sum % 3 == 0 {\n                        a.append(sum)\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp2urbec0a/tmp2urbec0a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76bbd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76bba0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76bba0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76bba0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2urbec0a                        0x000055990818f495 <unavailable> + 5269

    5    libc.so.6                          0x00002b76bbf04460 __libc_start_main +
    245

    6    tmp2urbec0a                        0x000055990818f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpycrkhsh0.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i < j < k {\n                 \
    \   a[i] = a[i] + a[j] + a[k]\n                    if a[i] % 3 == 0 {\n      \
    \                  count += 1\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpo_96nk7d.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpo_96nk7d.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmprz8zcut6/tmprz8zcut6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a508c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a505beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a505be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a505bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8zcut6                        0x0000561342a5f495 <unavailable> + 5269

    5    libc.so.6                          0x00002b4a50ab3460 __libc_start_main +
    245

    6    tmprz8zcut6                        0x0000561342a5f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpcom682ld/tmpcom682ld.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dd624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dd31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dd31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dd31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcom682ld                        0x00005580f88704a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b33dd810460 __libc_start_main +
    245

    6    tmpcom682ld                        0x00005580f8870159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i\
    \ - i + 1)\n    }\n    \n    var count = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 count += 1\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpq_34nis6/tmpq_34nis6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20553bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af205232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af205232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2052317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_34nis6                        0x000055b96dca2535 <unavailable> + 5429

    5    libc.so.6                          0x00002af205727460 __libc_start_main +
    245

    6    tmpq_34nis6                        0x000055b96dca21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let triple = i + j + k\n                    if triple % 3 == 0 {\n\
    \                        a.append(triple)\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3xkse9mi.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp3xkse9mi.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        a[i]\
    \ = a[j] + a[k]\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b652e87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b652e576561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b652e576286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b652e57613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b652e575bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b652e375e83 <unavailable> + 188035

    6    tmpu2rpcksr                        0x0000559c8269dadb <unavailable> + 6875

    7    tmpu2rpcksr                        0x0000559c8269d488 <unavailable> + 5256

    8    libc.so.6                          0x00002b652ea6b460 __libc_start_main +
    245

    9    tmpu2rpcksr                        0x0000559c8269d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwcn7tttb/tmpwcn7tttb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878577bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8785472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8785472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87854717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcn7tttb                        0x0000563ba663e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8785967460 __libc_start_main +
    245

    6    tmpwcn7tttb                        0x0000563ba663e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a.append(i*i - i + 1)\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpzn7awgq7.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpzn7awgq7.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphd5eq6up.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 triples++\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpwgr44q2u.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmpwgr44q2u.swift:23:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                        triples++\n   \
    \                            ^~\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp4x0n40rl/tmp4x0n40rl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af03d795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af03d48cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af03d48c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af03d48b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x0n40rl                        0x000055b0ee5414a5 <unavailable> + 5285

    5    libc.so.6                          0x00002af03d981460 __libc_start_main +
    245

    6    tmp4x0n40rl                        0x000055b0ee541159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples(of: 3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjixqwv_8.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i*i - i + 1)\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwcn7tttb/tmpwcn7tttb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878577bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8785472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8785472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87854717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcn7tttb                        0x0000563ba663e495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8785967460 __libc_start_main +
    245

    6    tmpwcn7tttb                        0x0000563ba663e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_42tbj6u/tmp_42tbj6u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7390c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7390906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7390906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73909057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_42tbj6u                        0x000055b12be59495 <unavailable> + 5269

    5    libc.so.6                          0x00002b7390dfb460 __libc_start_main +
    245

    6    tmp_42tbj6u                        0x000055b12be59149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824871
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let triple = i * i - i + j + k\n                  \
    \  if triple % 3 == 0 {\n                        a.append(triple)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr749jl_q/tmpr749jl_q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b402f5e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402f2d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b402f2d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b402f2d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr749jl_q                        0x0000559c7ba32495 <unavailable> + 5269

    5    libc.so.6                          0x00002b402f7cc460 __libc_start_main +
    245

    6    tmpr749jl_q                        0x0000559c7ba32149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afbf1461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbf1158561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afbf1158286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afbf115813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afbf1157bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afbf0f57e83 <unavailable> + 188035

    6    tmp78amjzpz                        0x0000564dcbcb9ac0 <unavailable> + 6848

    7    tmp78amjzpz                        0x0000564dcbcb9478 <unavailable> + 5240

    8    libc.so.6                          0x00002afbf164d460 __libc_start_main +
    245

    9    tmp78amjzpz                        0x0000564dcbcb9199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpulqbd2v1/tmpulqbd2v1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b374f9a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b374f69bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b374f69b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b374f69a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulqbd2v1                        0x000056292077c4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b374fb90460 __libc_start_main +
    245

    6    tmpulqbd2v1                        0x000056292077c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    a[i] = a[i] + a[j] + a[k]\n                }\n    \
    \        }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b38a5d01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38a59f8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b38a59f8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b38a59f813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b38a59f7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b38a57f7e83 <unavailable> + 188035

    6    tmp57rzirhm                        0x00005644e81fbab0 <unavailable> + 6832

    7    tmp57rzirhm                        0x00005644e81fb468 <unavailable> + 5224

    8    libc.so.6                          0x00002b38a5eed460 __libc_start_main +
    245

    9    tmp57rzirhm                        0x00005644e81fb189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n \
    \   }\n    var triples = 0\n    for i in 1...n {\n        for j in 1...n {\n \
    \           for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] + a[k] {\n                        a[i] = a[j]\
    \ + a[k]\n                        triples++\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpolp9oxhk.swift:24:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1..<n {\n        for j in 1..<n {\n\
    \            for k in 1..<n {\n                if i != j && i != k && j != k {\n\
    \                    a[0] += i * i - i + 1\n                    a[1] += j * j\
    \ - j + 1\n                    a[2] += k * k - k + 1\n                }\n    \
    \        }\n        }\n    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf313d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf310cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf310cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf310cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf310cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf30ece7ec <unavailable> + 186348

    6    tmpqnj1ggca                        0x0000560dd8c9abf0 <unavailable> + 7152

    7    tmpqnj1ggca                        0x0000560dd8c9a478 <unavailable> + 5240

    8    libc.so.6                          0x00002aaf315c4460 __libc_start_main +
    245

    9    tmpqnj1ggca                        0x0000560dd8c9a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    return a.maxTriples()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptxpgfl1w.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    var count = 0\n    for _ in 1...n {\n        if a[0] > 0 {\n     \
    \       count += 3\n        }\n        a[0] += a[1]\n        a[1] += a[2]\n  \
    \      a[2] += a[0]\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpklyr76ui/tmpklyr76ui.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b968f776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b968f46db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b968f46d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b968f46c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklyr76ui                        0x000055613756a495 <unavailable> + 5269

    5    libc.so.6                          0x00002b968f962460 __libc_start_main +
    245

    6    tmpklyr76ui                        0x000055613756a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(n + 1)\n    for i : Int in 1...n {\n        a[i]\
    \ = i * i - i + 1\n    }\n    var count = 0\n    for i : Int in 1...n {\n    \
    \    for j : Int in 1...n {\n            for k : Int in 1...n {\n            \
    \    if i != j && i != k && j != k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpirq99ag6.swift:13:19: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array(n + 1)\n                  ^\n                  arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3d2b26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3d281d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3d281d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3d281d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3d281cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3d261ce83 <unavailable> + 188035

    6    tmplm0ekxid                        0x000055958ad3da4d <unavailable> + 6733

    7    tmplm0ekxid                        0x000055958ad3d3c8 <unavailable> + 5064

    8    libc.so.6                          0x00002ae3d2d12460 __libc_start_main +
    245

    9    tmplm0ekxid                        0x000055958ad3d0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>(n)\n    for i in 0..<n {\n        a[i] = i\
    \ * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            for k in 0..<n {\n                if i < j < k {\n    \
    \                let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n               \
    \     if sum % 3 == 0 {\n                        count += 1\n                \
    \    }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4dedkhw9.swift:13:24: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var a = Array<Int>(n)\n                       ^\n             \
    \          arrayLiteral: \n/tmp/tmp4dedkhw9.swift:21:22: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n           \
    \     if i < j < k {\n                     ^   ~\n/tmp/tmp4dedkhw9.swift:21:22:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \                if i < j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    a.append(i * i - i + 1)\n                }\n      \
    \      }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpwjzoa2ha/tmpwjzoa2ha.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40193cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4016327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjzoa2ha                        0x000056548c7b9495 <unavailable> + 5269

    5    libc.so.6                          0x00002ba401b28460 __libc_start_main +
    245

    6    tmpwjzoa2ha                        0x000056548c7b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824950
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    var count = 0\n    for _ in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if j > k {\n                    if\
    \ a[j] + a[k] == a[j] + a[k] + 3 {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac48e935c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac48e62c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac48e62c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac48e62c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac48e62bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac48e42be83 <unavailable> + 188035

    6    tmp76h64u29                        0x0000559d8eaebaa7 <unavailable> + 6823

    7    tmp76h64u29                        0x0000559d8eaeb3d8 <unavailable> + 5080

    8    libc.so.6                          0x00002ac48eb21460 __libc_start_main +
    245

    9    tmp76h64u29                        0x0000559d8eaeb0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a76c31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a76928561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a76928286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a7692813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a76927bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a76727e83 <unavailable> + 188035

    6    tmpdlrntk8p                        0x000055f539cf1a4d <unavailable> + 6733

    7    tmpdlrntk8p                        0x000055f539cf13c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b3a76e1d460 __libc_start_main +
    245

    9    tmpdlrntk8p                        0x000055f539cf10e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for _ in 1...n {\n        a.append(0)\n\
    \    }\n    for _ in 1...n {\n        for _ in 1...n {\n            for _ in 1...n\
    \ {\n                let i = Int(arc4random_uniform(UInt32(n)))\n            \
    \    let j = Int(arc4random_uniform(UInt32(n)))\n                let k = Int(arc4random_uniform(UInt32(n)))\n\
    \                if i < j && j < k && a[i] + a[j] + a[k] == 3 {\n            \
    \        a[i] += a[j] + a[k]\n                }\n            }\n        }\n  \
    \  }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpndgo_z3t.swift:20:29: error: cannot find 'arc4random_uniform' in\
    \ scope\n                let i = Int(arc4random_uniform(UInt32(n)))\n        \
    \                    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpndgo_z3t.swift:21:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n                let j = Int(arc4random_uniform(UInt32(n)))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpndgo_z3t.swift:22:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n                let k = Int(arc4random_uniform(UInt32(n)))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map({ _ in 0 })\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n     \
    \           if i < j < k {\n                    let sum = i * i + j * j + k *\
    \ k\n                    if sum % 3 == 0 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpepit_axn.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpepit_axn.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n\
    \                        a.append(i)\n                        a.append(j)\n  \
    \                      a.append(k)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af7f4da6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7f4a9d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7f4a9d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7f4a9d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7f4a9cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af7f489ce83 <unavailable> + 188035

    6    tmp7j2z6pmv                        0x00005640987f3ac0 <unavailable> + 6848

    7    tmp7j2z6pmv                        0x00005640987f3478 <unavailable> + 5240

    8    libc.so.6                          0x00002af7f4f92460 __libc_start_main +
    245

    9    tmp7j2z6pmv                        0x00005640987f3199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let triple = i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1\n                    if triple % 3 == 0 {\n                        a.append(triple)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpa6ma99oo/tmpa6ma99oo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0d8120c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0d7e17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0d7e17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0d7e167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6ma99oo                        0x000055fbd6702495 <unavailable> + 5269

    5    libc.so.6                          0x00002af0d830c460 __libc_start_main +
    245

    6    tmpa6ma99oo                        0x000055fbd6702149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == i * i * i - i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i\
    \ + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i\
    \ * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i * i + i * i\
    \ * i + i * \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp6rzyom_7.swift:19:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp6rzyom_7.swift:37:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmp6rzyom_7.swift:16:28: note: to match this opening '{'\n     \
    \       for k in 1...n {\n                           ^\n/tmp/tmp6rzyom_7.swift:37:41:\
    \ error: expected '}' at end of brace statement\nassert(get_max_triples(n: 100)\
    \ == 53361)\n                                        ^\n/tmp/tmp6rzyom_7.swift:15:24:\
    \ note: to match this opening '{'\n        for j in 1...n {\n                \
    \       ^\n/tmp/tmp6rzyom_7.swift:37:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmp6rzyom_7.swift:14:20: note: to match this opening '{'\n    for\
    \ i in 1...n {\n                   ^\n/tmp/tmp6rzyom_7.swift:37:41: error: expected\
    \ '}' at end of brace statement\nassert(get_max_triples(n: 100) == 53361)\n  \
    \                                      ^\n/tmp/tmp6rzyom_7.swift:12:37: note:\
    \ to match this opening '{'\nfunc get_max_triples(n: Int) -> Int {\n         \
    \                           ^\n/tmp/tmp6rzyom_7.swift:22:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i + j * j + k * k\n                 \
    \   if sum % 3 == 0 {\n                        a.append(sum)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpcom682ld/tmpcom682ld.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dd624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dd31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dd31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dd31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcom682ld                        0x00005580f88704a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b33dd810460 __libc_start_main +
    245

    6    tmpcom682ld                        0x00005580f8870159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpf2o79i1d/tmpf2o79i1d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad82202ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad821d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad821d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad821d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2o79i1d                        0x0000564b1ab3a495 <unavailable> + 5269

    5    libc.so.6                          0x00002ad822216460 __libc_start_main +
    245

    6    tmpf2o79i1d                        0x0000564b1ab3a149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          a[i] = i * i - i + 1\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpu_sev7p5.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpu_sev7p5.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] == a[j] + a[k] {\n                        return\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b42a7746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42a743d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b42a743d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b42a743d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b42a743cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b42a723ce83 <unavailable> + 188035

    6    tmp1wcth7lc                        0x00005643e6cc9a4d <unavailable> + 6733

    7    tmp1wcth7lc                        0x00005643e6cc93c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b42a7932460 __libc_start_main +
    245

    9    tmp1wcth7lc                        0x00005643e6cc90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i\
    \ - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmprhepj5yi/tmprhepj5yi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13440afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1343da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1343da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1343da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhepj5yi                        0x00005652188f0495 <unavailable> + 5269

    5    libc.so.6                          0x00002b134429b460 __libc_start_main +
    245

    6    tmprhepj5yi                        0x00005652188f0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [0]\n    for i in 1...n {\n        a[i] = a[i] * a[i]\
    \ - a[i] + i + 1\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphd5eq6up.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          let sum = i * i - i + j * j + k * k\n                    if sum % 3\
    \ == 0 {\n                        a.append(sum)\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return a.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpe0of9t9t.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpe0of9t9t.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            for k in 0..<n {\n                if i != j && i !=\
    \ k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n       \
    \                 count += 1\n                    }\n                    if a[j]\
    \ < a[i] && a[j] < a[k] {\n                        count += 1\n              \
    \      }\n                    if a[k] < a[i] && a[k] < a[j] {\n              \
    \          count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp8vdqgy22/tmp8vdqgy22.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08eacfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08ea9f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08ea9f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08ea9f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vdqgy22                        0x0000559d624f4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b08eaee9460 __libc_start_main +
    245

    6    tmp8vdqgy22                        0x0000559d624f41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i != j && j != k && i !=\
    \ k {\n                    let sum = i * i - i + j * j + k * k\n             \
    \       if sum % 3 == 0 {\n                        a.append(sum)\n           \
    \         }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpulqbd2v1/tmpulqbd2v1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b374f9a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b374f69bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b374f69b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b374f69a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulqbd2v1                        0x000056292077c4a5 <unavailable> + 5285

    5    libc.so.6                          0x00002b374fb90460 __libc_start_main +
    245

    6    tmpulqbd2v1                        0x000056292077c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(0..<n).map { Int($0 * $0 - $0 + 1) }\n    var count\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    count += a[i] - a[j]\
    \ - a[k] == 0\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbnicihhf.swift:18:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbnicihhf.swift:18:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmpbnicihhf.swift:19:49: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Int'\n             \
    \       count += a[i] - a[j] - a[k] == 0\n                                   \
    \             ^\n"
  stdout: ''
  timestamp: 1660009294
