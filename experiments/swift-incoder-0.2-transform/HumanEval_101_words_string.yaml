name: HumanEval_101_words_string
language: swift
prompt: "\n/// You will be given a string of words separated by commas or spaces.\
  \ Your task is\n/// to split the string into words and return an array of the words.\n\
  /// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n/// [\"Hi\"\
  , \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One, two, three,\
  \ four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ]\nfunc words_string(s: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_string(s: \"Hi, my name is John\"\
  ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One,\
  \ two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
  ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\",\
  \ \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\"\
  ) == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
  , \"gamal\"])"
completions: ['    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', "    var words = [String]()\n\
    \    var word = \"\"\n    for c in s {\n        if c == \",\" || c == \" \" {\n\
    \            if word != \"\" {\n                words.append(word)\n         \
    \       word = \"\"\n            }\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        words.append(word)\n    }\n\
    \    return words", '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")', '    return s.components(separatedBy: ",")', '    return s.components(separatedBy:
    ",")']
stop_tokens:
- "\n}"
