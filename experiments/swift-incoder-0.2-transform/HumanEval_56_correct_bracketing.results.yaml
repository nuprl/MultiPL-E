language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] != \"<\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n    }\n\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ != \">\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    if openingBracketIndex == closingBracketIndex {\n       \
    \ return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv1xh70fv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv1xh70fv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv1xh70fv.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpv1xh70fv.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8jco85_f.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8jco85_f.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpggrfg7xs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpggrfg7xs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\
    \ && closing.count == 0\n    }\n    if closing.isEmpty {\n        return opening.count\
    \ == 0\n    }\n    if opening.count != closing.count {\n        return false\n\
    \    }\n    if opening.count == 1 {\n        return opening.first! == closing.first!\n\
    \    }\n    if opening.count == 2 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 3 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 4 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 5 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 6 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 7 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 8 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 9 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 10 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 11 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 12 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 13 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 14 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 15 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 16 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 17 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 18 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 19 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 20 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 21 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz6vhzz0d.swift:92:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpz6vhzz0d.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpz6vhzz0d.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnlcigie.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfnlcigie.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    return opening.count == closing.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6y8mzu4h.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp6y8mzu4h.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    var\
    \ openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1cdi4t.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpns1cdi4t.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpns1cdi4t.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpns1cdi4t.swift:24:29: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex -= 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        openingBracketIndex += 1\n\n\
    \        if openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ == \">\" {\n                openingBracketIndex += 1\n                continue\n\
    \            }\n\n            if openingBrackets[openingBracketIndex] != \"<\"\
    \ {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpukhjmtla.swift:127:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpukhjmtla.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpukhjmtla.swift:127:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpukhjmtla.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpukhjmtla.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukhjmtla.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukhjmtla.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpukhjmtla.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpukhjmtla.swift:28:37: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpukhjmtla.swift:36:33:\
    \ error: binary operator '+=' cannot be applied to operan"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsFound = false\n    var closingBracketsFound = false\n\
    \n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsCountIndex\
    \ += 1\n        if openingBracketsCountIndex == openingBracketsCount {\n     \
    \       openingBracketsCountIndex = 0\n            openingBracketsIndex += 1\n\
    \        }\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \      openingBracketsFound = true\n            openingBracketsIndex += 1\n  \
    \      }\n        if openingBrackets[openingBracketsIndex] == '>' {\n        \
    \    openingBracketsFound = true\n            openingBracketsIndex += 1\n    \
    \    }\n        if openingBracketsFound {\n            openingBracketsCount -=\
    \ openingBracketsCountIndex\n            if openingBracketsCount == 0 {\n    \
    \            openingBracketsFound = false\n            }\n        }\n    }\n \
    \   while closingBracketsIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsIndex += 1\n\
    \        }\n        if closingBrackets[closingBracketsIndex] == '<' {\n      \
    \      closingBracketsFound = true\n            closingBracketsIndex += 1\n  \
    \      }\n        if closingBrackets[closingBracketsIndex] == '>' {\n        \
    \    closingBracketsFound = true\n            closingBracketsIndex += 1\n    \
    \    }\n        if closingBracketsFound {\n            closingBracketsCount -=\
    \ closingBracketsCountIndex\n            if closingBracketsCount == 0 {\n    \
    \            closingBracketsFound = false\n            }\n        }\n    }\n \
    \   return openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmvu3kt_w.swift:30:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmpmvu3kt_w.swift:34:53: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpmvu3kt_w.swift:51:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '<' {\n                                                    ^~~\n        \
    \                                            \"<\"\n/tmp/tmpmvu3kt_w.swift:55:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpmvu3kt_w.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmvu3kt_w.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmvu3kt_w.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmvu3kt_w.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String direc"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnwjc_ux.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmprnwjc_ux.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \">\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n    }\n\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzisjg_nx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzisjg_nx.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzisjg_nx.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzisjg_nx.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgcdt_i5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmptgcdt_i5.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmptgcdt_i5.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmptgcdt_i5.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"<\" {\n            openingBracketIndex += 1\n          \
    \  continue\n        }\n        if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            if closingBracketCount\
    \ > 1 {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ = 0\n                continue\n            }\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    return openingBracketCount == closingBracketCount\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps08thvd8.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps08thvd8.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps08thvd8.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmps08thvd8.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmps08thvd8.swift:30:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmps08thvd8.swift:35:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n            closingBracketIndex += 1\n  \
    \      } else if openingBracket == \">\" {\n            openingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          let nextOpeningBracket = brackets[openingBracketIndex]\n          \
    \  if nextOpeningBracket == \"<\" {\n                openingBracketIndex += 1\n\
    \            } else {\n                openingBracketIndex += 1\n            \
    \    closingBracketIndex += 1\n            }\n        }\n\n        if closingBracketIndex\
    \ < brackets.endIndex {\n            let nextClosingBracket = brackets[closingBracketIndex]\n\
    \            if nextClosingBracket == \">\" {\n                closingBracketIndex\
    \ += 1\n            } else {\n                closingBracketIndex += 1\n     \
    \           openingBracketIndex += 1\n            }\n        }\n    }\n\n    return\
    \ openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk1ibe3c4.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1ibe3c4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1ibe3c4.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:24:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:35:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:37:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:38:37:\
    \ error: bina"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    brackets = brackets.lowercased()\n    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ openingBrackets.startIndex\n    var closingBracketIndex = closingBrackets.startIndex\n\
    \    while openingBracketIndex < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ == \">\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < openingBrackets.endIndex {\n                openingBrackets[openingBracketIndex]\
    \ = \"<\"\n                closingBrackets[closingBracketIndex] = \"<\"\n    \
    \            closingBracketIndex += 1\n            }\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    return openingBracketIndex == openingBrackets.endIndex && closingBracketIndex\
    \ == closingBrackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ulsj21r.swift:13:5: error: cannot assign to value: 'brackets'\
    \ is a 'let' constant\n    brackets = brackets.lowercased()\n    ^~~~~~~~\n/tmp/tmp1ulsj21r.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1ulsj21r.swift:15:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1ulsj21r.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1ulsj21r.swift:22:32: error:\
    \ cannot assign through subscript: subscript is get-only\n                openingBrackets[openingBracketIndex]\
    \ = \"<\"\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ulsj21r.swift:23:32:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    closingBrackets[closingBracketIndex] = \"<\"\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1ulsj21r.swift:24:37: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1ulsj21r.swift:29:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnlcigie.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfnlcigie.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"=\":\n           \
    \ openingBracketCount += 1\n        case \"==\":\n            openingBracketCount\
    \ += 1\n        case \"!=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpufp2ir5w.swift:115:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpufp2ir5w.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpufp2ir5w.swift:115:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpufp2ir5w.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpufp2ir5w.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpufp2ir5w.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpufp2ir5w.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpufp2ir5w.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpufp2ir5w.swift:30:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"!=\":\n\
    \             ^~~~\n/tmp/tmpufp2ir5w.swift:32:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpufp2ir5w.swift:92:6: error: operator functions can\
    \ only be dec"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    while openingBracketIndex\
    \ < openingBracketCount {\n        openingBracketIndex = openingBracketIndex +\
    \ 1\n        let openingBracket = brackets.characters[openingBracketIndex]\n \
    \       if openingBracket == \"<\" {\n            if closingBracketIndex < closingBracketCount\
    \ {\n                closingBracketIndex = closingBracketIndex + 1\n         \
    \       let closingBracket = brackets.characters[closingBracketIndex]\n      \
    \          if closingBracket == \">\" {\n                    openingBracketIndex\
    \ = openingBracketIndex + 1\n                    closingBracketIndex = closingBracketIndex\
    \ + 1\n                    openingBracketCount = openingBracketCount - 1\n   \
    \                 closingBracketCount = closingBracketCount - 1\n            \
    \    } else {\n                    return false\n                }\n         \
    \   } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp875actln.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp875actln.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp875actln.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp875actln.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp875actln.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp875actln.swift:21:51: error: binary operator\
    \ '+' cannot be applied to operands of type 'String.Index' and 'Int'\n       \
    \ openingBracketIndex = openingBracketIndex + 1\n                            \
    \  ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmp875actln.swift:21:51: note: overloads for\
    \ '+' exist with these partially matching parameter lists: (Int, Int)\n      \
    \  openingBracketIndex = openingBracketIndex + 1\n                           \
    \         "
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    brackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    brackets = brackets.stringByReplacingOccurrencesOfString(\"<<\", withString:\
    \ \">\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n    brackets\
    \ = brackets.stringByReplacingOccurrencesOfString(\">>\", withString: \"<\", options:\
    \ NSStringCompareOptions.LiteralSearch, range: nil)\n    return brackets.rangeOfString(\"\
    <\") != nil && brackets.rangeOfString(\">\") != nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfrrk0zql.swift:13:57: error: cannot find 'NSCharacterSet' in scope\n\
    \    brackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \                                                        ^~~~~~~~~~~~~~\n/tmp/tmpfrrk0zql.swift:13:5:\
    \ error: cannot assign to value: 'brackets' is a 'let' constant\n    brackets\
    \ = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    ^~~~~~~~\n/tmp/tmpfrrk0zql.swift:13:25: error: value of type 'String' has\
    \ no member 'stringByTrimmingCharactersInSet'\n    brackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfrrk0zql.swift:14:94:\
    \ error: cannot find 'NSStringCompareOptions' in scope\n    brackets = brackets.stringByReplacingOccurrencesOfString(\"\
    <<\", withString: \">\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                        ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfrrk0zql.swift:14:5:\
    \ error: cannot assign to value: 'brackets' is a 'let' constant\n    brackets\
    \ = brackets.stringByReplacingOccurrencesOfString(\"<<\", withString: \">\", options:\
    \ NSStringCompareOptions.LiteralSearch, range: nil)\n    ^~~~~~~~\n/tmp/tmpfrrk0zql.swift:14:25:\
    \ error: value of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n\
    \    brackets = brackets.stringByReplacingOccurrencesOfString(\"<<\", withString:\
    \ \">\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n        \
    \       ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfrrk0zql.swift:14:139:\
    \ error: 'nil' requires a contextual type\n    brackets = brackets.stringByReplacingOccurrencesOfString(\"\
    <<\", withString: \">\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                                                                     ^\n/tmp/tmpfrrk0zql.swift:15:94:\
    \ error: cannot find 'NSS"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.split{$0 == \">\"}.count\n    var closing\
    \ = brackets.characters.split{$0 == \"<\"}.count\n    return opening == closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppe1lqm6h.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \">\"\
    }.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppe1lqm6h.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters.split{$0 ==\
    \ \"<\"}.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmppe1lqm6h.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \">\"}.count\n    ~~~ ^\n    let\n/tmp/tmppe1lqm6h.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters.split{$0 == \"<\"}.count\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex += 1\n      \
    \  } else if openingBracket == \">\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else {\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let closingBracket = brackets[closingBracketIndex]\n        closingBracketCount\
    \ += 1\n\n        if closingBracket == \"<\" {\n            closingBracketIndex\
    \ += 1\n        } else if closingBracket == \">\" {\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        } else {\n            closingBracketIndex\
    \ += 1\n        }\n\n        if closingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n    }\n\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2kglt840.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2kglt840.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2kglt840.swift:25:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2kglt840.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2kglt840.swift:28:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2kglt840.swift:30:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2kglt840.swift:43:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2kglt840.swift:45:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2kglt840.swift:46:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2kglt840.swift:48:33: error:\
    \ binary operator '+='"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsCount > 0 && closingBracketsCount\
    \ > 0 {\n        if openingBrackets[openingBracketsCount - 1] == closingBrackets[closingBracketsCount\
    \ - 1] {\n            openingBracketsCount -= 1\n            closingBracketsCount\
    \ -= 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsem_u_2q.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsem_u_2q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsem_u_2q.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpsem_u_2q.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpsem_u_2q.swift:19:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCount - 1] == closingBrackets[closingBracketsCount\
    \ - 1] {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsem_u_2q.swift:19:57:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[openingBracketsCount\
    \ - 1] == closingBrackets[closingBracketsCount - 1] {\n                      \
    \                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     if openingBracket != closingBracket {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ihgnts5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7ihgnts5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        }\n    }\n\n\
    \    return openingBrackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw4nmsyaj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw4nmsyaj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw4nmsyaj.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpw4nmsyaj.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpw4nmsyaj.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnwjc_ux.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmprnwjc_ux.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n\n        while closingBracketIndex < closingBrackets.count {\n      \
    \      guard closingBrackets[closingBracketIndex] == \">\" else {\n          \
    \      return false\n            }\n            closingBracketIndex += 1\n   \
    \     }\n\n        openingBracketIndex += 1\n        closingBracketIndex = 0\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt1m3uw39.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt1m3uw39.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt1m3uw39.swift:19:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \">\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt1m3uw39.swift:25:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == \">\" else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt1m3uw39.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpt1m3uw39.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8wt7ycph.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8wt7ycph.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8wt7ycph.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8wt7ycph.swift:22:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"=\":\n           \
    \ openingBracketCount += 1\n        case \"==\":\n            openingBracketCount\
    \ += 1\n        case \"!=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \">\":\n       \
    \     openingBracketCount -= 1\n        case \"<\":\n            openingBracketCount\
    \ -= 1\n        case \"<=\":\n            openingBracketCount -= 1\n        case\
    \ \"=\":\n            openingBracketCount -= 1\n        case \"==\":\n       \
    \     openingBracketCount -= 1\n        case \"!=\":\n            openingBracketCount\
    \ -= 1\n        case \"<\":\n            openingBracketCount -= 1\n        case\
    \ \">\":\n            closingBracketCount += 1\n        case \"<=\":\n       \
    \     closingBracketCount += 1\n        case \"=\":\n            closingBracketCount\
    \ += 1\n        case \"==\":\n            closingBracketCount += 1\n        case\
    \ \"!=\":\n            closingBracketCount += 1\n        case \"<=\":\n      \
    \      closingBracketCount += 1\n        case \">\":\n            closingBracketCount\
    \ -= 1\n        case \"<\":\n            closingBracketCount -= 1\n        case\
    \ \"<=\":\n            closingBracketCount -= 1\n        case \"=\":\n       \
    \     closingBracketCount -= 1\n        case \"==\":\n            closingBracketCount\
    \ -= 1\n        case \"!=\":\n            closingBracketCount -= 1\n        case\
    \ \"<\":\n            closingBracketCount -= 1\n        case \">\":\n        \
    \    openingBracketIndex += 1\n        case \">\":\n            openingBracketIndex\
    \ += 1\n        case \">\":\n            openingBracketIndex += 1\n        case\
    \ \">\":\n            openingBracketIndex += 1\n        case \">\":\n        \
    \    openingBracketIndex += 1\n        case \">\":\n            openingBracketIndex\
    \ += 1\n        case \">\":\n            openingBracketIndex += 1\n        case\
    \ \">\":\n            openingBracketIndex += 1\n        case \">\":\n        \
    \    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4icrvmah.swift:90:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \">\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp4icrvmah.swift:118:66: error: expected '}' at\
    \ end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp4icrvmah.swift:20:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp4icrvmah.swift:118:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp4icrvmah.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp4icrvmah.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4icrvmah.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4icrvmah.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp4icrvmah.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmp4icrvmah.swift:30:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"!=\":\n\
    \             ^~~~\n/tmp/tmp4icrvmah.swift:32:14: error: expression patte"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnlcigie.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfnlcigie.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n    openingBrackets.reverse()\n\
    \    closingBrackets.reverse()\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for index in 0..<openingBrackets.count {\n\
    \        if openingBrackets[index] != closingBrackets[index] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwhqewm8u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwhqewm8u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwhqewm8u.swift:17:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwhqewm8u.swift:18:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpwhqewm8u.swift:23:12: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwhqewm8u.swift:23:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    for index in 0..<openingBrackets.count\
    \ {\n        if openingBrackets[index] == '<' {\n            openingBracketCount++\n\
    \        }\n        if openingBrackets[index] == '>' {\n            openingBracketCount--\n\
    \        }\n    }\n    for index in 0..<closingBrackets.count {\n        if closingBrackets[index]\
    \ == '<' {\n            closingBracketCount++\n        }\n        if closingBrackets[index]\
    \ == '>' {\n            closingBracketCount--\n        }\n    }\n    return openingBracketCount\
    \ == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwx4gcwc.swift:20:38: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[index] == '<' {\n                     \
    \                ^~~\n                                     \"<\"\n/tmp/tmpvwx4gcwc.swift:23:38:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[index]\
    \ == '>' {\n                                     ^~~\n                       \
    \              \">\"\n/tmp/tmpvwx4gcwc.swift:28:38: error: single-quoted string\
    \ literal found, use '\"'\n        if closingBrackets[index] == '<' {\n      \
    \                               ^~~\n                                     \"<\"\
    \n/tmp/tmpvwx4gcwc.swift:31:38: error: single-quoted string literal found, use\
    \ '\"'\n        if closingBrackets[index] == '>' {\n                         \
    \            ^~~\n                                     \">\"\n/tmp/tmpvwx4gcwc.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvwx4gcwc.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvwx4gcwc.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvwx4gcwc.swift:21:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketCount++\n                               ^~\n/tmp/tmpvwx4gcwc.swift:23:12:\
    \ error: 'subscript(_:)' is unavailable: cannot s"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n\n      \
    \  if openingBracket == \"<\" {\n            if closingBracketIndex < brackets.endIndex\
    \ && brackets[closingBracketIndex] == \">\" {\n                closingBracketCount\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           return false\n            }\n        } else {\n            if closingBracketIndex\
    \ < brackets.endIndex && brackets[closingBracketIndex] == \">\" {\n          \
    \      closingBracketCount += 1\n                closingBracketIndex += 1\n  \
    \          } else {\n                return false\n            }\n        }\n\n\
    \        openingBracketIndex += 1\n    }\n\n    if openingBracketCount != closingBracketCount\
    \ {\n        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuw68e7b9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuw68e7b9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuw68e7b9.swift:27:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpuw68e7b9.swift:34:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpuw68e7b9.swift:40:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n\n    if openingBracketCount < 1 {\n        return\
    \ false\n    }\n\n    if openingBracketCount > closingBracketCount {\n       \
    \ return true\n    }\n\n    if openingBracketCount > 1 {\n        for openingBracket\
    \ in 0..<openingBracketCount {\n            if openingBrackets[openingBracket]\
    \ != closingBrackets[openingBracket] {\n                return false\n       \
    \     }\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2l2hri4p.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l2hri4p.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l2hri4p.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l2hri4p.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l2hri4p.swift:28:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[openingBracket] != closingBrackets[openingBracket] {\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2l2hri4p.swift:28:51: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if openingBrackets[openingBracket] != closingBrackets[openingBracket]\
    \ {\n                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been expli"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !openingBracket.hasPrefix(\"<\") {\n            return false\n   \
    \     }\n        if !openingBracket.hasSuffix(\">\") {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9u415m7t.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9u415m7t.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_brackets_count = brackets.characters.count\n    var closing_brackets_count\
    \ = brackets.characters.count\n\n    if opening_brackets_count > 0 {\n       \
    \ opening_brackets.removeLast()\n        opening_brackets_count -= 1\n    }\n\n\
    \    if closing_brackets_count > 0 {\n        closing_brackets.removeLast()\n\
    \        closing_brackets_count -= 1\n    }\n\n    if opening_brackets_count !=\
    \ closing_brackets_count {\n        return false\n    }\n\n    if opening_brackets.count\
    \ != closing_brackets.count {\n        return false\n    }\n\n    for opening_bracket\
    \ in opening_brackets {\n        if closing_brackets.contains(opening_bracket)\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2y96gijo.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2y96gijo.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2y96gijo.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2y96gijo.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        openingBracketCount++\n\
    \        openingBracketIndex = brackets.index(after: openingBracketIndex)\n  \
    \  }\n    while closingBracketIndex < brackets.endIndex {\n        closingBracketCount++\n\
    \        closingBracketIndex = brackets.index(after: closingBracketIndex)\n  \
    \  }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    var openingBracketIndexEnd = brackets.endIndex\n    while openingBracketIndex\
    \ < openingBracketIndexEnd {\n        openingBracketIndex = brackets.index(after:\
    \ openingBracketIndexEnd)\n        openingBracketIndexEnd = brackets.index(after:\
    \ openingBracketIndexEnd)\n    }\n    while openingBracketIndex < openingBracketIndexEnd\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n        openingBracketIndexEnd = brackets.index(after:\
    \ openingBracketIndexEnd)\n        openingBracketIndex++\n        closingBracketIndex++\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdzltxc6x.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdzltxc6x.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdzltxc6x.swift:20:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmpdzltxc6x.swift:24:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketCount++\n       \
    \                    ^~\n/tmp/tmpdzltxc6x.swift:42:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n       \
    \                    ^~\n/tmp/tmpdzltxc6x.swift:43:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n       \
    \                    ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.endIndex\n\
    \    var opening_brackets = [String]()\n    var closing_brackets = [String]()\n\
    \    var opening_brackets_count = brackets.characters.count\n    var closing_brackets_count\
    \ = brackets.characters.count\n    var opening_brackets_index = brackets.startIndex\n\
    \    var closing_brackets_index = brackets.endIndex\n    var opening_brackets_index_count\
    \ = brackets.startIndex.distanceTo(brackets.endIndex)\n    var closing_brackets_index_count\
    \ = brackets.startIndex.distanceTo(brackets.endIndex)\n    var opening_brackets_index_count_minus_1\
    \ = opening_brackets_index_count - 1\n    var closing_brackets_index_count_minus_1\
    \ = closing_brackets_index_count - 1\n    var opening_brackets_index_count_minus_2\
    \ = opening_brackets_index_count - 2\n    var closing_brackets_index_count_minus_2\
    \ = closing_brackets_index_count - 2\n    var opening_brackets_index_count_minus_3\
    \ = opening_brackets_index_count - 3\n    var closing_brackets_index_count_minus_3\
    \ = closing_brackets_index_count - 3\n    var opening_brackets_index_count_minus_4\
    \ = opening_brackets_index_count - 4\n    var closing_brackets_index_count_minus_4\
    \ = closing_brackets_index_count - 4\n    var opening_brackets_index_count_minus_5\
    \ = opening_brackets_index_count - 5\n    var closing_brackets_index_count_minus_5\
    \ = closing_brackets_index_count - 5\n    var opening_brackets_index_count_minus_6\
    \ = opening_brackets_index_count - 6\n    var closing_brackets_index_count_minus_6\
    \ = closing_brackets_index_count - 6\n    var opening_brackets_index_count_minus_7\
    \ = opening_brackets_index_count - 7\n    var closing_brackets_index_count_minus_7\
    \ = closing_brackets_index_count - 7\n    var opening_brackets_index_count_minus_8\
    \ = opening_brackets_index_count - 8\n    var closing_brackets_index_count_minus_8\
    \ = closing_brackets_index_count - 8\n    var open\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb56oxwo_.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb56oxwo_.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb56oxwo_.swift:17:9: error: invalid redeclaration of\
    \ 'opening_brackets'\n    var opening_brackets = [String]()\n        ^\n/tmp/tmpb56oxwo_.swift:13:9:\
    \ note: 'opening_brackets' previously declared here\n    var opening_brackets\
    \ = brackets.characters\n        ^\n/tmp/tmpb56oxwo_.swift:18:9: error: invalid\
    \ redeclaration of 'closing_brackets'\n    var closing_brackets = [String]()\n\
    \        ^\n/tmp/tmpb56oxwo_.swift:14:9: note: 'closing_brackets' previously declared\
    \ here\n    var closing_brackets = brackets.characters\n        ^\n/tmp/tmpb56oxwo_.swift:19:43:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets_count\
    \ = brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpb56oxwo_.swift:20:43:\
    \ error: 'characters' is unavailable: Please use String directly\n    var closing_brackets_count\
    \ = brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpb56oxwo_.swift:23:60:\
    \ error: value of type 'String.Index' has no member 'distanceTo'\n    var opening_brackets_index_count\
    \ = brackets.startIndex.distanceTo(brackets.endIndex)\n                      \
    \                 ~~~"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"<\" {\n            if closingIndex < closingCount\
    \ {\n                closing = brackets.substringWithRange(NSMakeRange(closingIndex\
    \ + 1, 1))\n            }\n            if closing == \">\" {\n               \
    \ openingIndex++\n                closingIndex++\n            } else {\n     \
    \           openingIndex++\n                closingIndex++\n                openingCount--\n\
    \                closingCount--\n            }\n        } else {\n           \
    \ if closingIndex < closingCount {\n                closing = brackets.substringWithRange(NSMakeRange(closingIndex\
    \ + 1, 1))\n            }\n            if opening == \">\" {\n               \
    \ openingIndex++\n                closingIndex++\n                openingCount--\n\
    \                closingCount--\n            } else {\n                openingIndex++\n\
    \                closingIndex++\n                openingCount--\n            \
    \    closingCount--\n            }\n        }\n    }\n    return openingCount\
    \ == closingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd508lpqp.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpd508lpqp.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpd508lpqp.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpd508lpqp.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd508lpqp.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmpd508lpqp.swift:20:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        opening\
    \ = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n              \
    \    ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpd508lpqp.swift:21:47: error: cannot\
    \ find 'NSMakeRange' in scope\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmpd508lpqp.swift:21:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        closing\
    \ = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n              \
    \    ~~~~~~~~ ^"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     if openingBracket != closingBracket! {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykwbieno.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpykwbieno.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty {\n        return false\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return true\n    }\n    if opening_brackets.first != closing_brackets.first\
    \ {\n        return false\n    }\n    return correct_bracketing(opening_brackets)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplushslt4.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplushslt4.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplushslt4.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(opening_brackets)\n     \
    \                         ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount < 1 {\n        return\
    \ false\n    }\n\n    if openingBracketsCount > closingBracketsCount {\n     \
    \   return true\n    }\n\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        openingBrackets.remove(at: 0)\n        closingBrackets.remove(at:\
    \ 0)\n        openingBracketsCount -= 1\n        closingBracketsCount -= 1\n \
    \   }\n\n    if openingBracketsCount != closingBracketsCount {\n        return\
    \ true\n    }\n\n    if openingBrackets.last == closingBrackets.last {\n     \
    \   openingBrackets.remove(at: openingBrackets.count - 1)\n        closingBrackets.remove(at:\
    \ closingBrackets.count - 1)\n        openingBracketsCount -= 1\n        closingBracketsCount\
    \ -= 1\n    }\n\n    if openingBrackets.count != closingBrackets.count {\n   \
    \     return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppv78bwr7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppv78bwr7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppv78bwr7.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmppv78bwr7.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmppv78bwr7.swift:27:36: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String.Index'\n        openingBrackets.remove(at:\
    \ 0)\n                                   ^\n/tmp/tmppv78bwr7.swift:28:36: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        closingBrackets.remove(at: 0)\n                                   ^\n\
    /tmp/tmppv78bwr7.swift:38:58: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String.Index'\n        openingBrackets.remove(at: openingBrackets.count\
    \ - 1)\n                                                         ^\n/tmp/tmppv78bwr7.swift:39:58:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        closingBrackets.remove(at: closin"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsString = \"\"\n    var closingBracketsString = \"\
    \"\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsString\
    \ += openingBrackets[openingBracketsIndex]\n        openingBracketsIndex += 1\n\
    \    }\n\n    while closingBracketsIndex < closingBracketsCount {\n        closingBracketsString\
    \ += closingBrackets[closingBracketsIndex]\n        closingBracketsIndex += 1\n\
    \    }\n\n    if openingBracketsString == closingBracketsString {\n        return\
    \ true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ih0qc6v.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_ih0qc6v.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_ih0qc6v.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_ih0qc6v.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_ih0qc6v.swift:23:49: error: no exact matches\
    \ in call to subscript \n        openingBracketsString += openingBrackets[openingBracketsIndex]\n\
    \                                                ^\nSwift.String:3:12: note: candidate\
    \ expects value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n \
    \   public subscript(r: Range<String.Index>) -> Substring { get }\n          \
    \ ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_)\
    \ -> ()) -> Self.SubSequence { get }\n                      ^\n/tmp/tmp_ih0qc6v.swift:28:49:\
    \ error: no exact matches in call to subscript \n        closingBracketsString\
    \ += closingBrackets[closingBracketsIndex]\n     "
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpap0b2966.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpap0b2966.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpap0b2966.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpap0b2966.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if openingBracket == \"<\" {\n\
    \            openingBracketsCount += 1\n        } else {\n            openingBracketsCount\
    \ = 0\n        }\n    }\n\n    for closingBracket in closingBrackets {\n     \
    \   if closingBracket == \">\" {\n            closingBracketsCount += 1\n    \
    \    } else {\n            closingBracketsCount = 0\n        }\n    }\n\n    return\
    \ openingBracketsCount == closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8dsx02i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr8dsx02i.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr8dsx02i.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpr8dsx02i.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    return openingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu_x_fgtj.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpu_x_fgtj.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     if openingBracket != closingBracket {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ihgnts5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7ihgnts5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        let openingBracket =\
    \ openingBrackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n\
    \            openingBracketIndex += 1\n        } else if openingBracket == \"\
    >\" {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketIndex < closingBrackets.count {\n        let closingBracket =\
    \ closingBrackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n\
    \            closingBracketIndex += 1\n        } else if closingBracket == \"\
    >\" {\n            closingBracketIndex += 1\n            openingBracketIndex +=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    return\
    \ openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdbljtcij.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdbljtcij.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdbljtcij.swift:19:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketIndex]\n                    \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpdbljtcij.swift:31:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n         \
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdbljtcij.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpdbljtcij.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    brackets = brackets.lowercased()\n    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n   \
    \ var openingBracketCount = 0\n    var closingBracketCount = 0\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"<\" {\n            openingBracketCount++\n   \
    \     } else if openingBracket == \">\" {\n            openingBracketCount--\n\
    \        }\n        openingBracketIndex++\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        if closingBracket == \"<\" {\n            closingBracketCount++\n   \
    \     } else if closingBracket == \">\" {\n            closingBracketCount--\n\
    \        }\n        closingBracketIndex++\n    }\n    return openingBracketCount\
    \ == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuov3fgd5.swift:13:5: error: cannot assign to value: 'brackets'\
    \ is a 'let' constant\n    brackets = brackets.lowercased()\n    ^~~~~~~~\n/tmp/tmpuov3fgd5.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpuov3fgd5.swift:15:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuov3fgd5.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpuov3fgd5.swift:25:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpuov3fgd5.swift:27:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpuov3fgd5.swift:32:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpuov3fgd5.swift:34:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpuov3fgd5.swift:36:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    let openingBracketsCount = openingBrackets.count\n\
    \    let closingBracketsCount = closingBrackets.count\n    if openingBracketsCount\
    \ == 0 || closingBracketsCount == 0 {\n        return false\n    }\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            let openingBracketIndex = openingBracket\n  \
    \          let closingBracketIndex = closingBracket\n            let openingBracketCount\
    \ = openingBrackets.count\n            let closingBracketCount = closingBrackets.count\n\
    \            if openingBracketIndex < closingBracketIndex {\n                return\
    \ false\n            }\n            if openingBracketIndex == closingBracketIndex\
    \ {\n                if openingBracketCount > 1 {\n                    return\
    \ false\n                }\n                if openingBracketCount > openingBracketIndex\
    \ {\n                    return false\n                }\n            }\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4h2pvzv0.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4h2pvzv0.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgcdt_i5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmptgcdt_i5.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmptgcdt_i5.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmptgcdt_i5.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsFound = false\n    var closingBracketsFound = false\n\
    \n    while openingBracketsIndex < openingBracketsCount {\n        if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n            if closingBracketsIndex < closingBracketsCount {\n   \
    \             if closingBrackets[closingBracketsIndex] == '>' {\n            \
    \        openingBracketsFound = true\n                    closingBracketsFound\
    \ = true\n                    openingBracketsIndex += 1\n                    closingBracketsIndex\
    \ += 1\n                } else {\n                    openingBracketsFound = false\n\
    \                    closingBracketsFound = false\n                    openingBracketsIndex\
    \ += 1\n                }\n            } else {\n                openingBracketsFound\
    \ = false\n                closingBracketsFound = false\n                openingBracketsIndex\
    \ += 1\n            }\n        } else {\n            openingBracketsFound = false\n\
    \            closingBracketsFound = false\n            openingBracketsIndex +=\
    \ 1\n        }\n    }\n\n    return openingBracketsFound == closingBracketsFound\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnvt4x3a0.swift:23:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmpnvt4x3a0.swift:25:61: error: single-quoted\
    \ string literal found, use '\"'\n                if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                            ^~~\n\
    \                                                            \">\"\n/tmp/tmpnvt4x3a0.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnvt4x3a0.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnvt4x3a0.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnvt4x3a0.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnvt4x3a0.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty {\n        return true\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return false\n    }\n    if opening_brackets.first == closing_brackets.last\
    \ {\n        return false\n    }\n    if opening_brackets.first == \">\" && closing_brackets.first\
    \ == \"<\" {\n        return false\n    }\n    if opening_brackets.first == \"\
    <\" && closing_brackets.first == \">\" {\n        return false\n    }\n    if\
    \ opening_brackets.first == \"<\" && closing_brackets.first == \"<\" {\n     \
    \   return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn1gle_9d.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpn1gle_9d.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if let index = closingBrackets.index(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: index)\n        }\n\
    \    }\n\n    return brackets.characters.count == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcyvkpnpm.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcyvkpnpm.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcyvkpnpm.swift:17:40: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let index = closingBrackets.index(of:\
    \ openingBracket) {\n                                       ^\n/tmp/tmpcyvkpnpm.swift:17:40:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = closingBrackets.index(of:\
    \ openingBracket) {\n                                       ^~~~~\n          \
    \                             firstIndex\n/tmp/tmpcyvkpnpm.swift:22:21: error:\
    \ 'characters' is unavailable: Please use String directly\n    return brackets.characters.count\
    \ == 0\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcyvkpnpm.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketIndex += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketIndex += 1\n            closingBracketIndex += 1\n\
    \        } else {\n            return false\n        }\n    }\n\n    while closingBracketIndex\
    \ < closingBracketCount {\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        if closingBracket == \"<\" {\n            closingBracketIndex += 1\n\
    \        } else if closingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9lrm6i3e.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9lrm6i3e.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9lrm6i3e.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9lrm6i3e.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp9lrm6i3e.swift:22:33: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \      openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9lrm6i3e.swift:24:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9lrm6i3e.swift:25:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9lrm6i3e.swift:31:33: error:\
    \ cannot find 'closingBracketCount' in scope\n    while closingBracketIndex <\
    \ closingBracketCount {\n                                ^~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        openingIndex += 1\n        if opening[openingIndex]\
    \ == '<' {\n            openingIndex += 1\n            if openingIndex < openingCount\
    \ {\n                openingIndex += 1\n            }\n        }\n    }\n    while\
    \ closingIndex < closingCount {\n        closingIndex += 1\n        if closing[closingIndex]\
    \ == '>' {\n            closingIndex += 1\n            if closingIndex < closingCount\
    \ {\n                closingIndex += 1\n            }\n        }\n    }\n    if\
    \ openingIndex == openingCount {\n        return true\n    }\n    if closingIndex\
    \ == closingCount {\n        return false\n    }\n    return openingIndex == closingIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpck0ets7t.swift:21:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '<' {\n                      \
    \              ^~~\n                                    \"<\"\n/tmp/tmpck0ets7t.swift:30:37:\
    \ error: single-quoted string literal found, use '\"'\n        if closing[closingIndex]\
    \ == '>' {\n                                    ^~~\n                        \
    \            \">\"\n/tmp/tmpck0ets7t.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpck0ets7t.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var closing = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpck0ets7t.swift:15:33: error: 'characters' is unavailable: Please use String\
    \ directly\n    var openingCount = brackets.characters.count\n               \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpck0ets7t.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var closingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpck0ets7t.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ opening[openingIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpck0ets7t.swift:30:12:\
    \ error: 'subscript(_:)' is unavailab"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) else {\n            return false\n        }\n        guard openingBracket\
    \ != closingBracket else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd4kvb23_.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpd4kvb23_.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty() {\n        return true\n    }\n    if closing_brackets.isEmpty()\
    \ {\n        return false\n    }\n    if opening_brackets.first == closing_brackets.last\
    \ {\n        return true\n    }\n    if opening_brackets.first == \">\" && closing_brackets.first\
    \ == \"<\" {\n        return true\n    }\n    if opening_brackets.first == \"\
    <\" && closing_brackets.first == \">\" {\n        return true\n    }\n    if opening_brackets.first\
    \ == \"<\" && closing_brackets.first == \"<\" {\n        return true\n    }\n\
    \    if opening_brackets.first == \">\" && closing_brackets.first == \">\" {\n\
    \        return true\n    }\n    if opening_brackets.first == \"<\" && closing_brackets.first\
    \ == \"<\" {\n        return true\n    }\n    if opening_brackets.first == \"\
    >\" && closing_brackets.first == \">\" {\n        return true\n    }\n    if opening_brackets.first\
    \ == \"<\" && closing_brackets.first == \"<\" {\n        return true\n    }\n\
    \    if opening_brackets.first == \">\" && closing_brackets.first == \">\" {\n\
    \        return true\n    }\n    if opening_brackets.first == \"<\" && closing_brackets.first\
    \ == \"<\" {\n        return true\n    }\n    if opening_brackets.first == \"\
    >\" && closing_brackets.first == \">\" {\n        return true\n    }\n    if opening_brackets.first\
    \ == \"<\" && closing_brackets.first == \"<\" {\n        return true\n    }\n\
    \    if opening_brackets.first == \">\" && closing_brackets.first == \">\" {\n\
    \        return true\n    }\n    if opening_brackets.first == \"<\" && closing_brackets.first\
    \ == \"<\" {\n        return true\n    }\n    if opening_brackets.first == \"\
    >\" && closing_brackets.first == \">\" {\n        return true\n    }\n    if opening_brackets.first\
    \ == \"<\" && closing_brackets.first == \"<\" {\n        return true\n    }\n\
    \    if opening_brackets.first == \">\" && closing_brackets.\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdwn69ksz.swift:71:57: error: expected member name following '.'\n\
    \    if opening_brackets.first == \">\" && closing_brackets.\n               \
    \                                         ^\n/tmp/tmpdwn69ksz.swift:71:58: error:\
    \ expected '{' after 'if' condition\n    if opening_brackets.first == \">\" &&\
    \ closing_brackets.\n                                                        \
    \ ^\n/tmp/tmpdwn69ksz.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdwn69ksz.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdwn69ksz.swift:17:25: error: cannot call value of non-function\
    \ type 'Bool'\n    if opening_brackets.isEmpty() {\n                        ^\
    \      ~~\n                               \n/tmp/tmpdwn69ksz.swift:20:25: error:\
    \ cannot call value of non-function type 'Bool'\n    if closing_brackets.isEmpty()\
    \ {\n                        ^      ~~\n                               \n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    var currentOpeningBracket: Character?\n    var currentClosingBracket:\
    \ Character?\n    while openingBracketIndex < brackets.endIndex {\n        currentOpeningBracket\
    \ = openingBrackets[openingBracketIndex]\n        openingBracketCount++\n    \
    \    if currentOpeningBracket == \"<\" {\n            openingBracketIndex++\n\
    \            openingBracketCount++\n        } else if currentOpeningBracket ==\
    \ \">\" {\n            openingBracketIndex++\n            openingBracketCount++\n\
    \            closingBracketIndex++\n            closingBracketCount++\n      \
    \  } else if currentOpeningBracket == \"<\" {\n            openingBracketIndex++\n\
    \            openingBracketCount++\n            closingBracketIndex++\n      \
    \      closingBracketCount++\n        } else if currentOpeningBracket == \">\"\
    \ {\n            openingBracketIndex++\n            openingBracketCount++\n  \
    \          closingBracketIndex++\n            closingBracketCount++\n        \
    \    openingBracketIndex++\n            openingBracketCount++\n        } else\
    \ if currentOpeningBracket == \"<\" {\n            openingBracketIndex++\n   \
    \         openingBracketCount++\n            closingBracketIndex++\n         \
    \   closingBracketCount++\n            openingBracketIndex++\n            openingBracketCount++\n\
    \            closingBracketIndex++\n            closingBracketCount++\n      \
    \  } else if currentOpeningBracket == \">\" {\n            openingBracketIndex++\n\
    \            openingBracketCount++\n            closingBracketIndex++\n      \
    \      closingBracketCount++\n            openingBracketIndex++\n            openingBracketCount++\n\
    \            closingBracketIndex++\n            closingBracketCount++\n      \
    \      openingBracketIndex++\n            openingBracketCount++\n            closingBracketIndex++\n\
    \            closingBracketCount++\n        } else if currentOpeningBracket ==\
    \ \"<\" {\n            openingBracketIndex++\n            openingBracketCount++\n\
    \            closingBracketIndex++\n            closingBracketCount++\n      \
    \      openingBracketIndex++\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps1ywxwy6.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmps1ywxwy6.swift:21:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmps1ywxwy6.swift:99:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmps1ywxwy6.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmps1ywxwy6.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps1ywxwy6.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps1ywxwy6.swift:23:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmps1ywxwy6.swift:25:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n   \
    \                            ^~\n/tmp/tmps1ywxwy6.swift:26:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmps1ywxwy6.swift:28:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n\
    \                               ^~\n/tmp/tmps1ywxwy6.swift:29:32: er"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != \"<\" {\n            return false\n        }\n\
    \        if closingBrackets[i] != \">\" {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ph6g9sf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp2ph6g9sf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        openingBracketIndex += 1\n\
    \        closingBracketIndex += 1\n        if openingBracketIndex >= brackets.endIndex\
    \ {\n            return false\n        }\n\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] != \"\
    <\" {\n            return false\n        }\n\n        openingBracketIndex += 1\n\
    \        closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfml_r3vh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfml_r3vh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfml_r3vh.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfml_r3vh.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpfml_r3vh.swift:25:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfml_r3vh.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfml_r3vh.swift:35:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpfml_r3vh.swift:43:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfml_r3vh.swift:44:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        let closingBracket = brackets[closingBracketIndex]\n\
    \n        if openingBracket == \"<\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n\n        if openingBracketIndex >= openingBracketCount {\n\
    \            return true\n        }\n\n        if closingBracketIndex >= closingBracketCount\
    \ {\n            return false\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprv9wmsjv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprv9wmsjv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprv9wmsjv.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprv9wmsjv.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmprv9wmsjv.swift:24:33: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \      openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmprv9wmsjv.swift:26:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmprv9wmsjv.swift:27:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmprv9wmsjv.swift:32:32: error:\
    \ referencing operator function '>=' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n        if openingBracketIndex "
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        let closingBracketIndex = openingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracketIndex == nil {\n            return\
    \ false\n        }\n        let closingBracket = openingBrackets[closingBracketIndex!]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzd_3jcn9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzd_3jcn9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == '<' else {\n          \
    \  return false\n        }\n        openingBracketIndex += 1\n        guard closingBracketIndex\
    \ < brackets.endIndex else {\n            return false\n        }\n        guard\
    \ openingBrackets[openingBracketIndex] == '>' else {\n            return false\n\
    \        }\n        closingBracketIndex += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk79_dr2z.swift:18:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '<' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"<\"\n/tmp/tmpk79_dr2z.swift:25:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '>' else {\n                                                      ^~~\n \
    \                                                     \">\"\n/tmp/tmpk79_dr2z.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpk79_dr2z.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk79_dr2z.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk79_dr2z.swift:28:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\n\
    \    }\n    if closing.isEmpty {\n        return opening.isEmpty\n    }\n    if\
    \ opening.first != closing.first {\n        return false\n    }\n    if opening.last\
    \ != closing.last {\n        return false\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    for index in 0..<opening.count {\n     \
    \   if opening[index] != closing[index] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb0jqthtl.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpb0jqthtl.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpb0jqthtl.swift:35:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \           ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpb0jqthtl.swift:35:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if opening[index] != closing[index] {\n                             ^~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount -= 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    while closingBracketIndex < brackets.endIndex {\n        let\
    \ closingBracket = brackets[closingBracketIndex]\n        if closingBracket ==\
    \ \"<\" {\n            closingBracketCount += 1\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiufjmiok.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiufjmiok.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiufjmiok.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpiufjmiok.swift:35:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8jco85_f.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8jco85_f.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    var openingBracketFound = false\n    var closingBracketFound = false\n\
    \    while openingBracketIndex < brackets.endIndex {\n        let character =\
    \ brackets[openingBracketIndex]\n        if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closingBracketFound = true\n          \
    \  closingBracketCount++\n        } else if character == \"<\" {\n           \
    \ openingBracketFound = true\n            openingBracketCount++\n        } else\
    \ if character == \">\" {\n            closing\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq3p__ftb.swift:102:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpq3p__ftb.swift:21:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpq3p__ftb.swift:102:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpq3p__ftb.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpq3p__ftb.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq3p__ftb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq3p__ftb.swift:25:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpq3p__ftb.swift:28:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n   \
    \                            ^~\n/tmp/tmpq3p__ftb.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpq3p__ftb.swift:34:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpq3p__ftb.swift"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount - openingIndex))\n        openingIndex += opening.characters.count\n\
    \        if opening.characters.count == 0 {\n            openingIndex++\n    \
    \        continue\n        }\n        closing = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount - openingIndex))\n        closingIndex += closing.characters.count\n\
    \        if closing.characters.count == 0 {\n            closingIndex++\n    \
    \        continue\n        }\n        if opening.characters[openingIndex - 1]\
    \ == closing.characters[closingIndex - 1] {\n            openingIndex++\n    \
    \        closingIndex++\n            continue\n        }\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5phn3bof.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp5phn3bof.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp5phn3bof.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5phn3bof.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5phn3bof.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount - openingIndex))\n                                            \
    \  ^~~~~~~~~~~\n/tmp/tmp5phn3bof.swift:20:28: error: value of type 'String' has\
    \ no member 'substringWithRange'\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount - openingIndex))\n                  ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5phn3bof.swift:21:33: error: 'characters' is unavailable: Please use String\
    \ directly\n        openingIndex += opening.characters.count\n               \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5phn3bof.swift:22:20: error: 'ch"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \n    var opening_bracket = opening_brackets.first!\n    var closing_bracket =\
    \ closing_brackets.first!\n\n    while opening_bracket != nil {\n        if opening_bracket.unicodeScalars.count\
    \ != 1 {\n            return false\n        }\n        opening_bracket = opening_bracket.successor()\n\
    \    }\n\n    while closing_bracket != nil {\n        if closing_bracket.unicodeScalars.count\
    \ != 1 {\n            return false\n        }\n        closing_bracket = closing_bracket.predecessor()\n\
    \    }\n\n    return opening_brackets == closing_brackets\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf676k2vl.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf676k2vl.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf676k2vl.swift:19:27: warning: comparing non-optional\
    \ value of type 'String.Element' (aka 'Character') to 'nil' always returns true\n\
    \    while opening_bracket != nil {\n          ~~~~~~~~~~~~~~~ ^  ~~~\n/tmp/tmpf676k2vl.swift:23:43:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'successor'\n\
    \        opening_bracket = opening_bracket.successor()\n                     \
    \     ~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpf676k2vl.swift:26:27: warning: comparing\
    \ non-optional value of type 'String.Element' (aka 'Character') to 'nil' always\
    \ returns true\n    while closing_bracket != nil {\n          ~~~~~~~~~~~~~~~\
    \ ^  ~~~\n/tmp/tmpf676k2vl.swift:30:43: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'predecessor'\n        closing_bracket = closing_bracket.predecessor()\n\
    \                          ~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpohyoo1xq.swift:59:26: error: expected initial value after '='\n\
    \    var opening_bracket = \n                         ^\n/tmp/tmpohyoo1xq.swift:13:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpohyoo1xq.swift:14:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpohyoo1xq.swift:17:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpohyoo1xq.swift:17:9: error: invalid redeclaration of\
    \ 'opening_brackets'\n    var opening_brackets = brackets.characters\n       \
    \ ^\n/tmp/tmpohyoo1xq.swift:13:9: note: 'opening_brackets' previously declared\
    \ here\n    var opening_brackets = brackets.characters\n        ^\n/tmp/tmpohyoo1xq.swift:18:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var closing_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpohyoo1xq.swift:18:9: error: invalid redeclaration\
    \ of 'closing_brackets'\n    var closing_brackets = brackets.characters\n    \
    \    ^\n/tmp/tmpohyoo1xq.swift:14:9: note: 'closing_brackets' previously declared\
    \ here\n    var closing_brackets = brackets.characters\n        ^\n/tmp/tmpohyoo1xq.swift:19:9:\
    \ error: invalid redeclaration of 'opening_bracket'\n    var opening_bracket =\
    \ brackets.star"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == \">\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex == openingBrackets.endIndex {\n   \
    \             return false\n            }\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBrackets.endIndex {\n\
    \        if closingBrackets[closingBracketIndex] == \">\" {\n            closingBracketIndex\
    \ += 1\n            if closingBracketIndex == closingBrackets.endIndex {\n   \
    \             return false\n            }\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"<\" {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ynipkwf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8ynipkwf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8ynipkwf.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8ynipkwf.swift:28:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp8ynipkwf.swift:33:33: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            closingBracketIndex +=\
    \ 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8ynipkwf.swift:40:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if openingBracket == \"<\" {\n\
    \            openingBracketsCount++\n        } else if openingBracket == \">\"\
    \ {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            closingBracketsCount--\n\
    \        }\n    }\n\n    if openingBracketsCount != 0 {\n        return false\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpybs9mf97.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpybs9mf97.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpybs9mf97.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketsCount++\n       \
    \                         ^~\n/tmp/tmpybs9mf97.swift:23:33: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmpybs9mf97.swift:33:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmpybs9mf97.swift:35:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    var openingBracketCount\
    \ = openingBrackets.count\n    var closingBracketCount = closingBrackets.count\n\
    \    if openingBracketCount != closingBracketCount {\n        return false\n \
    \   }\n    if openingBracketCount == 0 {\n        return true\n    }\n    if openingBracketCount\
    \ == 1 {\n        if openingBrackets[0] != closingBrackets[0] {\n            return\
    \ false\n        }\n        return true\n    }\n    if openingBracketCount > 1\
    \ {\n        var lastOpeningBracket = openingBrackets.last\n        var lastClosingBracket\
    \ = closingBrackets.last\n        if lastOpeningBracket != lastClosingBracket\
    \ {\n            return false\n        }\n        if lastOpeningBracket == \"\
    >\" && lastClosingBracket == \"<\" {\n            return true\n        }\n   \
    \     if lastOpeningBracket == \"<\" && lastClosingBracket == \">\" {\n      \
    \      return true\n        }\n        if lastOpeningBracket == \"<\" && lastClosingBracket\
    \ == \"<\" {\n            return true\n        }\n        if lastOpeningBracket\
    \ == \">\" && lastClosingBracket == \">\" {\n            return true\n       \
    \ }\n        if lastOpeningBracket == \"<\" && lastClosingBracket == \"<\" {\n\
    \            return true\n        }\n        if lastOpeningBracket == \"<\" &&\
    \ lastClosingBracket == \"<\" {\n            return true\n        }\n        if\
    \ lastOpeningBracket == \">\" && lastClosingBracket == \">\" {\n            return\
    \ true\n        }\n        if lastOpeningBracket == \">\" && lastClosingBracket\
    \ == \">\" {\n            return true\n        }\n        if lastOpeningBracket\
    \ == \">\" && lastClosingBracket == \"<\" {\n            return true\n       \
    \ }\n        if lastOpeningBracket == \"<\" && lastClosingBracket == \">\" {\n\
    \            return true\n        }\n        if lastOpeningBracket == \"<\" &&\
    \ lastClosingBracket == \"<\" {\n            return true\n        }\n        if\
    \ lastOpeningBracket == \"<\" && lastClosingBracket == \"<\" {\n            return\
    \ true\n        }\n        if lastOpeningBracket == \">\" && lastClosingBracket\
    \ == \">\" {\n            return true\n        }\n        if lastOpeningBracket\
    \ == \">\" && lastClosingBracket == \">\" {\n            return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9vj623l7.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp9vj623l7.swift:31:32:\
    \ note: to match this opening '{'\n    if openingBracketCount > 1 {\n        \
    \                       ^\n/tmp/tmp9vj623l7.swift:104:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp9vj623l7.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp9vj623l7.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp9vj623l7.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9vj623l7.swift:26:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[0] != closingBrackets[0] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vj623l7.swift:26:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[0] != closingBrackets[0]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscr"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty()\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty() {\n        return\
    \ false\n    }\n    if openingBrackets.first == closingBrackets.first {\n    \
    \    return false\n    }\n    if openingBrackets.first == \">\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBrackets.first == \"\
    <\" && closingBrackets.first == \">\" {\n        return false\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return false\n    }\n\
    \    if openingBrackets.first == \">\" && closingBrackets.first == \">\" {\n \
    \       return false\n    }\n    if openingBrackets.first == \"<\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBrackets.first == \"\
    >\" && closingBrackets.first == \">\" {\n        return false\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return false\n    }\n\
    \    if openingBrackets.first == \">\" && closingBrackets.first == \">\" {\n \
    \       return false\n    }\n    if openingBrackets.first == \"<\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBrackets.first == \"\
    >\" && closingBrackets.first == \">\" {\n        return false\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return false\n    }\n\
    \    if openingBrackets.first == \">\" && closingBrackets.first == \">\" {\n \
    \       return false\n    }\n    if openingBrackets.first == \"<\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBrackets.first == \"\
    >\" && closingBrackets.first == \">\" {\n        return false\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return false\n    }\n\
    \    if openingBrackets.first == \">\" && closingBrackets.first == \">\" {\n \
    \       return false\n    }\n    if openingBrackets.first == \"<\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBra\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkxb93awl.swift:77:18: error: expected '{' after 'if' condition\n\
    \    if openingBra\n                 ^\n/tmp/tmpkxb93awl.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkxb93awl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkxb93awl.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmpkxb93awl.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n/tmp/tmpkxb93awl.swift:77:8:\
    \ error: cannot find 'openingBra' in scope\n    if openingBra\n       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    if opening.first != closing.last {\n   \
    \     return false\n    }\n    if opening.count == 1 {\n        return true\n\
    \    }\n    return opening.count == 2 && opening.first == closing.last\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxhu0yila.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpxhu0yila.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let character\
    \ = brackets.characters[openingBracketIndex]\n        if character == \"<\" {\n\
    \            openingBracketCount += 1\n        } else if character == \">\" {\n\
    \            closingBracketCount += 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    if openingBracketCount != closingBracketCount {\n        return\
    \ false\n    }\n    if openingBracketCount > 0 {\n        openingBracketIndex\
    \ = 0\n        while openingBracketIndex < brackets.endIndex {\n            let\
    \ character = brackets.characters[openingBracketIndex]\n            if character\
    \ == \"<\" {\n                openingBracketIndex += 1\n            } else if\
    \ character == \">\" {\n                openingBracketIndex += 1\n           \
    \     closingBracketIndex += 1\n            }\n        }\n    }\n    if openingBracketIndex\
    \ != brackets.startIndex {\n        return false\n    }\n    if closingBracketIndex\
    \ != brackets.endIndex {\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2tbn5w6l.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2tbn5w6l.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2tbn5w6l.swift:20:34: error: 'characters' is unavailable:\
    \ Please use String directly\n        let character = brackets.characters[openingBracketIndex]\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2tbn5w6l.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2tbn5w6l.swift:32:31: error:\
    \ cannot assign value of type 'Int' to type 'String.Index'\n        openingBracketIndex\
    \ = 0\n                              ^\n/tmp/tmp2tbn5w6l.swift:34:38: error: 'characters'\
    \ is unavailable: Please use String directly\n            let character = brackets.characters[openingBracketIndex]\n\
    \                                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2tbn5w6l.swift:36:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2tbn5w6l.swift:38:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tm"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracket == nil {\n            return false\n\
    \        }\n        \n        if openingBracket != closingBracket! {\n       \
    \     return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsjw9d6w2.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsjw9d6w2.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_bracket = brackets.startIndex\n    var closing_bracket = brackets.startIndex\n\
    \    while opening_bracket < brackets.endIndex {\n        opening_bracket = brackets.index(after:\
    \ opening_bracket)\n        closing_bracket = brackets.index(after: closing_bracket)\n\
    \        if opening_bracket < closing_bracket {\n            opening_brackets.append(contentsOf:\
    \ brackets[opening_bracket..<closing_bracket])\n            closing_brackets.append(contentsOf:\
    \ brackets[closing_bracket..<opening_bracket])\n        }\n    }\n    return opening_brackets.count\
    \ == closing_brackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz7vinv8o.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz7vinv8o.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.split{$0 == \">\"}.count\n    var closing\
    \ = brackets.characters.split{$0 == \"<\"}.count\n    return opening == closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppe1lqm6h.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \">\"\
    }.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppe1lqm6h.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters.split{$0 ==\
    \ \"<\"}.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmppe1lqm6h.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \">\"}.count\n    ~~~ ^\n    let\n/tmp/tmppe1lqm6h.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters.split{$0 == \"<\"}.count\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    closing.removeLast()\n    if opening.isEmpty()\
    \ {\n        return true\n    }\n    if closing.isEmpty() {\n        return false\n\
    \    }\n    if opening.first == closing.first {\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpogdjgbkz.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpogdjgbkz.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpogdjgbkz.swift:17:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if opening.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpogdjgbkz.swift:20:16:\
    \ error: cannot call value of non-function type 'Bool'\n    if closing.isEmpty()\
    \ {\n               ^      ~~\n                      \n/tmp/tmpogdjgbkz.swift:24:64:\
    \ error: extra argument in call\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmpogdjgbkz.swift:24:43: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(opening.dropFirst(),\
    \ closing.dropLast())\n                                          ^\n         \
    \                         String(            )\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex += 1\n      \
    \  } else if openingBracket == \">\" {\n            openingBracketIndex += 1\n\
    \            closingBracketCount += 1\n        } else {\n            openingBracketIndex\
    \ += 1\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let closingBracket = brackets[closingBracketIndex]\n        closingBracketCount\
    \ += 1\n\n        if closingBracket == \"<\" {\n            closingBracketIndex\
    \ += 1\n        } else if closingBracket == \">\" {\n            closingBracketIndex\
    \ += 1\n            openingBracketCount += 1\n        } else {\n            closingBracketIndex\
    \ += 1\n        }\n    }\n\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7hr5ryse.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7hr5ryse.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7hr5ryse.swift:25:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7hr5ryse.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp7hr5ryse.swift:30:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7hr5ryse.swift:39:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp7hr5ryse.swift:41:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7hr5ryse.swift:44:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex++\n    \
    \    closingBracketIndex++\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpssdc4vt1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpssdc4vt1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpssdc4vt1.swift:23:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketIndex++\n            \
    \               ^~\n/tmp/tmpssdc4vt1.swift:24:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n       \
    \                    ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    opening.removeLast()\n    closing.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\n\
    \    }\n    if closing.isEmpty {\n        return opening.isEmpty\n    }\n    if\
    \ opening.first != closing.first {\n        return false\n    }\n    if opening.last\
    \ != closing.last {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5yry8q1d.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp5yry8q1d.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    for openingBracket in openingBrackets {\n\
    \        if openingBracket == \"<\" {\n            openingBracketsCount--\n  \
    \      } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfahxqo_9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfahxqo_9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfahxqo_9.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfahxqo_9.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfahxqo_9.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmpfahxqo_9.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmpfahxqo_9.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmpfahxqo_9.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n\n      \
    \  if openingBracket == \"<\" {\n            if openingBracketIndex < brackets.endIndex\
    \ && brackets[openingBracketIndex + 1] == \"<\" {\n                openingBracketIndex\
    \ += 1\n            }\n        }\n\n        if openingBracket == \">\" {\n   \
    \         if openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \">\" {\n                openingBracketIndex += 1\n            }\n \
    \       }\n\n        if openingBracketIndex < brackets.endIndex && openingBracketIndex\
    \ < brackets.endIndex && openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \">\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && openingBracketIndex\
    \ < brackets.endIndex && openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \"<\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && openingBracketIndex\
    \ < brackets.endIndex && brackets[openingBracketIndex + 1] == \">\" {\n      \
    \      openingBracketIndex += 1\n            closingBracketCount += 1\n      \
    \  }\n\n        if openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \"<\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \">\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \"<\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && brackets[openingBracketIndex\
    \ + 1] == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsay8ullm.swift:67:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpsay8ullm.swift:93:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpsay8ullm.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpsay8ullm.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsay8ullm.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsay8ullm.swift:25:68: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n            if openingBracketIndex\
    \ < brackets.endIndex && brackets[openingBracketIndex + 1] == \"<\" {\n      \
    \                                                             ^\n/tmp/tmpsay8ullm.swift:26:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpsay8ullm.swift:31:68: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            if openingBracketIndex < brackets.endIndex\
    \ && brackets[openingBracketIndex + 1] == \">\" {\n                          \
    \                                         ^\n/tmp/tmpsay8ullm.swift:32:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty {\n        return true\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return false\n    }\n    if opening_brackets.first != closing_brackets.first\
    \ {\n        return false\n    }\n    if opening_brackets.last != closing_brackets.last\
    \ {\n        return false\n    }\n    if opening_brackets.count == 1 {\n     \
    \   return true\n    }\n    return correct_bracketing(String(opening_brackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8vhm2pq.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc8vhm2pq.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc8vhm2pq.swift:32:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(opening_brackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsIndex\
    \ += 1\n        openingBracketsCount -= 1\n        closingBracketsCount += 1\n\
    \        closingBracketsIndex += 1\n        if openingBracketsIndex < openingBracketsCount\
    \ {\n            openingBracketsCount += 1\n            openingBracketsIndex +=\
    \ 1\n        }\n        if closingBracketsIndex < closingBracketsCount {\n   \
    \         closingBracketsCount -= 1\n            closingBracketsIndex += 1\n \
    \       }\n        if openingBracketsIndex < openingBracketsCount {\n        \
    \    openingBracketsCount += 1\n            openingBracketsIndex += 1\n      \
    \  }\n        if closingBracketsIndex < closingBracketsCount {\n            closingBracketsCount\
    \ -= 1\n            closingBracketsIndex += 1\n        }\n        if openingBracketsIndex\
    \ < openingBracketsCount {\n            openingBracketsCount += 1\n          \
    \  openingBracketsIndex += 1\n        }\n        if closingBracketsIndex < closingBracketsCount\
    \ {\n            closingBracketsCount -= 1\n            closingBracketsIndex +=\
    \ 1\n        }\n        if openingBracketsIndex < openingBracketsCount {\n   \
    \         openingBracketsCount += 1\n            openingBracketsIndex += 1\n \
    \       }\n        if closingBracketsIndex < closingBracketsCount {\n        \
    \    closingBracketsCount -= 1\n            closingBracketsIndex += 1\n      \
    \  }\n        if openingBracketsIndex < openingBracketsCount {\n            openingBracketsCount\
    \ += 1\n            openingBracketsIndex += 1\n        }\n        if closingBracketsIndex\
    \ < closingBracketsCount {\n            closingBracketsCount -= 1\n          \
    \  closingBracketsIndex += 1\n        }\n        if openingBracketsIndex < openingBracketsCount\
    \ {\n            openingBracketsCount += 1\n            openingBracketsIndex +=\
    \ 1\n        }\n        if closingBracketsIndex < closingBracketsCount {\n   \
    \         closingBracketsCount -= 1\n            closingBrackets\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmqw9qja9.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpmqw9qja9.swift:20:55:\
    \ note: to match this opening '{'\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n                                                      ^\n/tmp/tmpmqw9qja9.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpmqw9qja9.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpmqw9qja9.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmqw9qja9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmqw9qja9.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmqw9qja9.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/t"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \"<\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \"<\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \"<\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < openingBrackets.count else {\n   \
    \         return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \"<\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbox38j7.swift:78:34: error: expected 'else' after 'guard' condition\n\
    \        guard openingBracketIndex\n                                 ^\n/tmp/tmppbox38j7.swift:105:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmppbox38j7.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmppbox38j7.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppbox38j7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppbox38j7.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \">\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppbox38j7.swift:25:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppbox38j7.swift:32:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8pqw4o94.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8pqw4o94.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8pqw4o94.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp8pqw4o94.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty()\
    \ {\n        return false\n    }\n    if closingBrackets.isEmpty() {\n       \
    \ return true\n    }\n    if openingBrackets.first == closingBrackets.first {\n\
    \        return correct_bracketing(openingBrackets.dropFirst(), closingBrackets.dropLast())\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8a61c63y.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8a61c63y.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8a61c63y.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmp8a61c63y.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n/tmp/tmp8a61c63y.swift:24:80:\
    \ error: extra argument in call\n        return correct_bracketing(openingBrackets.dropFirst(),\
    \ closingBrackets.dropLast())\n                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    /tmp/tmp8a61c63y.swift:24:51: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        return correct_bracketing(openingBrackets.dropFirst(),\
    \ closingBrackets.dropLast())\n                                              \
    \    ^\n                                  String(                    )\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    if openingBracketCount\
    \ == 0 {\n        return true\n    }\n    let firstOpeningBracket = openingBrackets[0]\n\
    \    let lastClosingBracket = closingBrackets.last!\n    if firstOpeningBracket\
    \ != lastClosingBracket {\n        return false\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4618st1y.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4618st1y.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if closingBrackets.contains(where: { $0 == openingBracket }) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe87b_m4i.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpe87b_m4i.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount++\n        case \"<=\"\
    :\n            openingBracketCount++\n        case \"=\":\n            openingBracketCount++\n\
    \        case \"<>\":\n            openingBracketCount++\n        case \"<\":\n\
    \            openingBracketCount++\n        case \"<=\":\n            openingBracketCount++\n\
    \        case \"=\":\n            openingBracketCount++\n        case \"<>\":\n\
    \            openingBracketCount++\n        case \"<\":\n            openingBracketCount++\n\
    \        case \"<=\":\n            openingBracketCount++\n        case \"=\":\n\
    \            openingBracketCount++\n        case \"<>\":\n            openingBracketCount++\n\
    \        case \"<\":\n            openingBracketCount++\n        case \"<=\":\n\
    \            openingBracketCount++\n        case \"=\":\n            openingBracketCount++\n\
    \        case \"<>\":\n            openingBracketCount++\n        case \"<\":\n\
    \            openingBracketCount++\n        case \"<=\":\n            openingBracketCount++\n\
    \        case \"=\":\n            openingBracketCount++\n        case \"<>\":\n\
    \            openingBracketCount++\n        case \"<\":\n            openingBracketCount++\n\
    \        case \"<=\":\n            openingBracketCount++\n        case \"=\":\n\
    \            openingBracketCount++\n        case \"<>\":\n            openingBracketCount++\n\
    \        case \"<\":\n            openingBracketCount++\n        case \"<=\":\n\
    \            openingBracketCount++\n        case \"=\":\n            openingBracketCount++\n\
    \        case \"<>\":\n            openingBracketCount++\n        case \"<\":\n\
    \            openingBracketCount++\n        case \"<=\":\n            openingBracketCount++\n\
    \        case \"=\":\n            openingBracketCount++\n        case \"<>\":\n\
    \            openingBracketCount++\n        case \"<\":\n            openingBra\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps6qu70sh.swift:113:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmps6qu70sh.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmps6qu70sh.swift:113:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmps6qu70sh.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmps6qu70sh.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps6qu70sh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps6qu70sh.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmps6qu70sh.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmps6qu70sh.swift:31:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmps6qu70sh.swift:35:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmps6qu70sh.swift:39:14: error: expression pattern of\
    \ type 'Strin"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n    while\
    \ openingBracketsIndex < openingBrackets.count {\n        if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n            if closingBrackets[closingBracketsIndex] == '>' {\n  \
    \              openingBracketsIndex += 1\n                closingBracketsIndex\
    \ += 1\n            } else {\n                openingBracketsIndex += 1\n    \
    \        }\n        } else {\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                openingBracketsIndex += 1\n            } else {\n\
    \                openingBracketsIndex += 1\n                closingBracketsIndex\
    \ += 1\n            }\n        }\n    }\n\n    return openingBracketsIndex ==\
    \ openingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7r4ygcyw.swift:20:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmp7r4ygcyw.swift:21:57: error: single-quoted\
    \ string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                        ^~~\n    \
    \                                                    \">\"\n/tmp/tmp7r4ygcyw.swift:28:57:\
    \ error: single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                        ^~~\n    \
    \                                                    \">\"\n/tmp/tmp7r4ygcyw.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7r4ygcyw.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7r4ygcyw.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7r4ygcyw.swift:21:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.S"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracket == nil {\n            return false\n\
    \        }\n        \n        if openingBracket != closingBracket! {\n       \
    \     return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsjw9d6w2.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsjw9d6w2.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnwjc_ux.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmprnwjc_ux.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeFirst()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty\n    }\n    if closing.isEmpty {\n        return\
    \ opening.isEmpty && closing.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    for index in 0..<opening.count {\n     \
    \   if opening[index] != closing[index] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3iccqjet.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp3iccqjet.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp3iccqjet.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \           ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp3iccqjet.swift:27:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if opening[index] != closing[index] {\n                             ^~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"=\":\n           \
    \ openingBracketCount += 1\n        case \"==\":\n            openingBracketCount\
    \ += 1\n        case \"!\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg89b_78q.swift:87:14: error: unterminated string literal\n    \
    \    case \"\n             ^\n/tmp/tmpg89b_78q.swift:87:15: error: expected ':'\
    \ after 'case'\n        case \"\n              ^\n/tmp/tmpg89b_78q.swift:114:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpg89b_78q.swift:19:51: note: to match this opening\
    \ '{'\n    while openingBracketIndex < brackets.endIndex {\n                 \
    \                                 ^\n/tmp/tmpg89b_78q.swift:114:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpg89b_78q.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpg89b_78q.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpg89b_78q.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg89b_78q.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpg89b_78q.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpg89b_78q.swift:31:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpg89b_78q.swift:91:6: er"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount == 1 {\n        if closingBracketsCount\
    \ == 0 {\n            return true\n        }\n        if closingBracketsCount\
    \ == 1 {\n            if openingBrackets[0] == closingBrackets[0] {\n        \
    \        return true\n            }\n        }\n    }\n\n    if openingBracketsCount\
    \ == 2 {\n        if closingBracketsCount == 0 {\n            return true\n  \
    \      }\n        if closingBracketsCount == 1 {\n            if openingBrackets[0]\
    \ == closingBrackets[1] {\n                return true\n            }\n      \
    \  }\n    }\n\n    if openingBracketsCount == 3 {\n        if closingBracketsCount\
    \ == 0 {\n            return true\n        }\n        if closingBracketsCount\
    \ == 1 {\n            if openingBrackets[0] == closingBrackets[2] {\n        \
    \        return true\n            }\n        }\n    }\n\n    if openingBracketsCount\
    \ == 4 {\n        if closingBracketsCount == 0 {\n            return true\n  \
    \      }\n        if closingBracketsCount == 1 {\n            if openingBrackets[0]\
    \ == closingBrackets[3] {\n                return true\n            }\n      \
    \  }\n    }\n\n    if openingBracketsCount == 5 {\n        if closingBracketsCount\
    \ == 0 {\n            return true\n        }\n        if closingBracketsCount\
    \ == 1 {\n            if openingBrackets[0] == closingBrackets[4] {\n        \
    \        return true\n            }\n        }\n    }\n\n    if openingBracketsCount\
    \ == 6 {\n        if closingBracketsCount == 0 {\n            return true\n  \
    \      }\n        if closingBracketsCount == 1 {\n            if openingBrackets[0]\
    \ == closingBrackets[5] {\n                return true\n            }\n      \
    \  }\n    }\n\n    if openingBracketsCount == 7 {\n        if closingBracketsCount\
    \ == 0 {\n            return true\n        }\n        if closingBracketsCount\
    \ == 1 {\n            if openingBrackets[0] == closingBrackets[6] {\n        \
    \        return true\n            }\n        }\n    }\n\n    if openingBracketsCount\
    \ == 8 {\n        if closingBracketsCount == 0 {\n            return true\n  \
    \      }\n        if closingBracketsCount == 1 {\n            if openingBrackets[0]\
    \ == closingBrackets[7] {\n                return true\n            }\n      \
    \  }\n    }\n\n    if opening\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0vspckdr.swift:111:15: error: expected '{' after 'if' condition\n\
    \    if opening\n              ^\n/tmp/tmp0vspckdr.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0vspckdr.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0vspckdr.swift:28:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[0] == closingBrackets[0] {\n               ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0vspckdr.swift:28:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[0] == closingBrackets[0]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0vspckdr.swift:39:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[0] == closingBrackets[1]\
    \ {\n               ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp0vspckdr.swift:39:38: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if openingBrackets[0] == clos"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9r3o4523.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9r3o4523.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9r3o4523.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmp9r3o4523.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmp9r3o4523.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbn48ueeh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbn48ueeh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbn48ueeh.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbn48ueeh.swift:21:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpbn48ueeh.swift:13:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpbn48ueeh.swift:14:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketIndex += 1\n            if openingBracketIndex < brackets.endIndex\
    \ {\n                openingBracket = brackets[openingBracketIndex]\n        \
    \    }\n        } else {\n            if closingBracket == \">\" {\n         \
    \       closingBracketIndex += 1\n                if closingBracketIndex < brackets.endIndex\
    \ {\n                    closingBracket = brackets[closingBracketIndex]\n    \
    \            }\n            } else {\n                return false\n         \
    \   }\n        }\n        openingBrackets.append(openingBracket)\n        closingBrackets.append(closingBracket)\n\
    \    }\n    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ifm2nw3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ifm2nw3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ifm2nw3.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp3ifm2nw3.swift:23:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmp3ifm2nw3.swift:18:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmp3ifm2nw3.swift:27:37: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp3ifm2nw3.swift:29:21:\
    \ error: cannot assign to value: 'closingBracket' is a 'let' constant\n      \
    \              closingBracket = brackets[closingBracketIndex]\n              \
    \      ^~~~~~~~~~~~~~\n/tmp/tmp3ifm2nw3.swift:19:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        let openingBracket\
    \ = brackets.character(at: openingBracketIndex)\n        if openingBracket ==\
    \ \"<\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < openingBracketCount {\n                openingBracketIndex += 1\n        \
    \    }\n        } else {\n            openingBracketIndex += 1\n        }\n  \
    \  }\n\n    while closingBracketIndex < closingBracketCount {\n        let closingBracket\
    \ = brackets.character(at: closingBracketIndex)\n        if closingBracket ==\
    \ \">\" {\n            closingBracketIndex += 1\n            if closingBracketIndex\
    \ < closingBracketCount {\n                closingBracketIndex += 1\n        \
    \    }\n        } else {\n            closingBracketIndex += 1\n        }\n  \
    \  }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwi_l50kg.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwi_l50kg.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwi_l50kg.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwi_l50kg.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpwi_l50kg.swift:20:39: error: value of\
    \ type 'String' has no member 'character'\n        let openingBracket = brackets.character(at:\
    \ openingBracketIndex)\n                             ~~~~~~~~ ^~~~~~~~~\n/tmp/tmpwi_l50kg.swift:22:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpwi_l50kg.swift:23:36: error: referencing operator function '<'\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \            if openingBracketIndex < openingBracketCount {\n                \
    \                   ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmpwi_l50kg.sw"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    \n \
    \   if openingBrackets.isEmpty {\n        return false\n    }\n    \n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    \n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    \n    return correct_bracketing(openingBrackets.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ykgvrqr.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ykgvrqr.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ykgvrqr.swift:30:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(openingBrackets.dropFirst())\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd7xk7vz0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpd7xk7vz0.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpd7xk7vz0.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpd7xk7vz0.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd7xk7vz0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpd7xk7vz0.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpd7xk7vz0.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpd7xk7vz0.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     if openingBracket != closingBracket! {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykwbieno.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpykwbieno.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    var openingBracketFound\
    \ = false\n    var closingBracketFound = false\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        if openingBracket == \"<\" {\n            openingBracketFound = true\n\
    \            openingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && !openingBracketFound {\n            openingBracketFound = true\n      \
    \      openingBracketIndex += 1\n        } else if openingBracket == \"<\" {\n\
    \            openingBracketFound = true\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \"<\" && !openingBracketFound {\n       \
    \     openingBracketFound = true\n            openingBracketIndex += 1\n     \
    \   } else if openingBracket == \"<\" {\n            openingBracketFound = true\n\
    \            openingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && !openingBracketFound {\n            openingBracketFound = true\n      \
    \      openingBracketIndex += 1\n        } else if openingBracket == \"<\" {\n\
    \            openingBracketFound = true\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \"<\" && !openingBracketFound {\n       \
    \     openingBracketFound = true\n            openingBracketIndex += 1\n     \
    \   } else if openingBracket == \"<\" {\n            openingBracketFound = true\n\
    \            openingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && !openingBracketFound {\n            openingBracketFound = true\n      \
    \      openingBracketIndex += 1\n        } else if openingBracket == \"<\" {\n\
    \            openingBracketFound = true\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \"<\" && !openingBracketFound {\n       \
    \     openingBracketFound = true\n            openingBracketIndex += 1\n     \
    \   } else if openingBracket == \"<\" {\n            openingBracketFound = true\n\
    \            openingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && !openingBracketFound {\n            openingBracketFound = true\n      \
    \      openingBracketIndex += 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc4mwf5ii.swift:89:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpc4mwf5ii.swift:19:55:\
    \ note: to match this opening '{'\n    while openingBracketIndex < openingBrackets.count\
    \ {\n                                                      ^\n/tmp/tmpc4mwf5ii.swift:89:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpc4mwf5ii.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpc4mwf5ii.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc4mwf5ii.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc4mwf5ii.swift:20:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketIndex]\n                    \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpc4mwf5ii.swift:66:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpc4mwf5ii.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutate"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount != closingBracketsCount {\n     \
    \   return false\n    }\n\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBracketsCount {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n \
    \   }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpegr1b0lu.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpegr1b0lu.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpegr1b0lu.swift:31:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpegr1b0lu.swift:31:52: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpegr1b0lu.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpegr1b0lu.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpegr1b0lu.swift:16:9: warning:\
    \ variable 'openingBracketsCount' was never mutated; consider changing to 'let'\
    \ constant\n    var openingBracketsCount = openingBrackets.co"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n            openingBracketsIndex += 1\n            if openingBracketsIndex\
    \ < openingBracketsCount {\n                openingBrackets[openingBracketsIndex]\
    \ = '='\n                openingBracketsIndex += 1\n            }\n        } else\
    \ {\n            openingBrackets[openingBracketsIndex] = '>'\n            openingBracketsIndex\
    \ += 1\n        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        if closingBrackets[closingBracketsIndex] == '>' {\n            closingBracketsIndex\
    \ += 1\n            if closingBracketsIndex < closingBracketsCount {\n       \
    \         closingBrackets[closingBracketsIndex] = '='\n                closingBracketsIndex\
    \ += 1\n            }\n        } else {\n            closingBrackets[closingBracketsIndex]\
    \ = '<'\n            closingBracketsIndex += 1\n        }\n    }\n\n    return\
    \ openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4m5lp283.swift:21:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmp4m5lp283.swift:24:57: error: single-quoted\
    \ string literal found, use '\"'\n                openingBrackets[openingBracketsIndex]\
    \ = '='\n                                                        ^~~\n       \
    \                                                 \"=\"\n/tmp/tmp4m5lp283.swift:28:53:\
    \ error: single-quoted string literal found, use '\"'\n            openingBrackets[openingBracketsIndex]\
    \ = '>'\n                                                    ^~~\n           \
    \                                         \">\"\n/tmp/tmp4m5lp283.swift:34:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmp4m5lp283.swift:37:57:\
    \ error: single-quoted string literal found, use '\"'\n                closingBrackets[closingBracketsIndex]\
    \ = '='\n                                                        ^~~\n       \
    \                                                 \"=\"\n/tmp/tmp4m5lp283.swift:41:53:\
    \ error: single-quoted string literal found, use '\"'\n            closingBrackets[closingBracketsIndex]\
    \ = '<'\n                                                    ^~~\n           \
    \                                         \"<\"\n/tmp/tmp4m5lp283.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4m5lp283.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'ch"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        openingBracketIndex\
    \ = advance(openingBracketIndex, 1)\n\n        if openingBracket == \"<\" {\n\
    \            if closingBracketIndex < brackets.endIndex && brackets[closingBracketIndex]\
    \ == \">\" {\n                closingBracketIndex = advance(closingBracketIndex,\
    \ 1)\n            } else {\n                return false\n            }\n    \
    \    } else {\n            if closingBracketIndex < brackets.endIndex && brackets[closingBracketIndex]\
    \ == \">\" {\n                closingBracketIndex = advance(closingBracketIndex,\
    \ 1)\n                openingBracketIndex = advance(openingBracketIndex, 1)\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n\n    return openingBracketIndex == brackets.endIndex && closingBracketIndex\
    \ == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz2pema0q.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz2pema0q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz2pema0q.swift:20:31: error: cannot find 'advance'\
    \ in scope\n        openingBracketIndex = advance(openingBracketIndex, 1)\n  \
    \                            ^~~~~~~\n/tmp/tmpz2pema0q.swift:24:39: error: cannot\
    \ find 'advance' in scope\n                closingBracketIndex = advance(closingBracketIndex,\
    \ 1)\n                                      ^~~~~~~\n/tmp/tmpz2pema0q.swift:30:39:\
    \ error: cannot find 'advance' in scope\n                closingBracketIndex =\
    \ advance(closingBracketIndex, 1)\n                                      ^~~~~~~\n\
    /tmp/tmpz2pema0q.swift:31:39: error: cannot find 'advance' in scope\n        \
    \        openingBracketIndex = advance(openingBracketIndex, 1)\n             \
    \                         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let currentChar\
    \ = brackets[openingBracketIndex]\n        if currentChar == \"<\" {\n       \
    \     openingBracketCount += 1\n        } else if currentChar == \">\" {\n   \
    \         closingBracketCount += 1\n        }\n        openingBracketIndex +=\
    \ 1\n    }\n\n    if openingBracketCount != closingBracketCount {\n        return\
    \ false\n    }\n\n    while openingBracketIndex < brackets.endIndex {\n      \
    \  let currentChar = brackets[openingBracketIndex]\n        if currentChar ==\
    \ \"<\" {\n            openingBracketIndex += 1\n        } else if currentChar\
    \ == \">\" {\n            closingBracketIndex += 1\n        }\n    }\n\n    if\
    \ openingBracketIndex != brackets.endIndex {\n        return false\n    }\n\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq5h26yzq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq5h26yzq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq5h26yzq.swift:27:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpq5h26yzq.swift:37:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpq5h26yzq.swift:39:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount++\n\n        if\
    \ openingBracket == \"<\" {\n            openingBracketIndex++\n            continue\n\
    \        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBracketIndex++\n         \
    \   continue\n        }\n\n        if openingBracket == \">\" {\n            openingBracketIndex++\n\
    \            closingBracketIndex++\n            continue\n        }\n\n      \
    \  if openingBracket == \"<\" {\n            openingBra\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ot8i_w7.swift:140:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp2ot8i_w7.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp2ot8i_w7.swift:140:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp2ot8i_w7.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp2ot8i_w7.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2ot8i_w7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2ot8i_w7.swift:22:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmp2ot8i_w7.swift:25:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n   \
    \                            ^~\n/tmp/tmp2ot8i_w7.swift:30:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n\
    \                               ^~\n/tmp/tmp2ot8i_w7.swift:31:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketIndex++\n\
    \                               ^~\n/tmp/tmp2ot8i_w7.swift:36:32: "
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        \n        if closingBracket == nil {\n            return\
    \ false\n        }\n        \n        if openingBracket != closingBracket! {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzd9nndc.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmptzd9nndc.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket)\n        if closingBracket == nil {\n            return false\n\
    \        }\n        \n        if openingBracket != closingBracket! {\n       \
    \     return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsjw9d6w2.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsjw9d6w2.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty()\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty() {\n        return\
    \ false\n    }\n    var openingBracketIndex = openingBrackets.startIndex\n   \
    \ var closingBracketIndex = closingBrackets.startIndex\n    var openingBracket\
    \ = openingBrackets[openingBracketIndex]\n    var closingBracket = closingBrackets[closingBracketIndex]\n\
    \    while openingBracketIndex < openingBrackets.endIndex {\n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex -= 1\n        openingBracket = openingBrackets[openingBracketIndex]\n\
    \        closingBracket = closingBrackets[closingBracketIndex]\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj372kc40.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj372kc40.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj372kc40.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmpj372kc40.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n/tmp/tmpj372kc40.swift:31:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpj372kc40.swift:32:29: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex -=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if !closingBrackets.contains(where: { $0 == openingBracket\
    \ }) {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnrpsuiax.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpnrpsuiax.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsCountIndex\
    \ += 1\n        if openingBracketsCountIndex == openingBracketsCount {\n     \
    \       openingBracketsCountIndex = 0\n            openingBracketsIndex += 1\n\
    \        }\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \      openingBracketsIndex += 1\n            openingBracketsCountIndex += 1\n\
    \        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount {\n\
    \        closingBracketsCountIndex += 1\n        if closingBracketsCountIndex\
    \ == closingBracketsCount {\n            closingBracketsCountIndex = 0\n     \
    \       closingBracketsIndex += 1\n        }\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n            closingBracketsIndex += 1\n            closingBracketsCountIndex\
    \ += 1\n        }\n    }\n\n    if openingBracketsIndex == openingBracketsCount\
    \ {\n        return true\n    }\n\n    if closingBracketsIndex == closingBracketsCount\
    \ {\n        return false\n    }\n\n    if openingBracketsIndex < closingBracketsIndex\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7xyfu2q4.swift:28:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmp7xyfu2q4.swift:40:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmp7xyfu2q4.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7xyfu2q4.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7xyfu2q4.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7xyfu2q4.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7xyfu2q4.swift:28:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \">\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           return false\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8_c25mdo.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8_c25mdo.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8_c25mdo.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8_c25mdo.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp8_c25mdo.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8_c25mdo.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp8_c25mdo.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount -= 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    while closingBracketIndex < brackets.endIndex {\n        let\
    \ closingBracket = brackets[closingBracketIndex]\n        if closingBracket ==\
    \ \"<\" {\n            closingBracketCount += 1\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiufjmiok.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiufjmiok.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiufjmiok.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpiufjmiok.swift:35:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n\n    // If there are no brackets, return true\n\
    \    if openingBracketCount == 0 || closingBracketCount == 0 {\n        return\
    \ true\n    }\n\n    // If there are only 1 opening bracket, return true\n   \
    \ if openingBracketCount == 1 {\n        return true\n    }\n\n    // If there\
    \ are only 1 closing bracket, return true\n    if closingBracketCount == 1 {\n\
    \        return true\n    }\n\n    // If there are 2 or more opening brackets,\
    \ return false\n    if openingBracketCount > 1 {\n        return false\n    }\n\
    \n    // If there are 2 or more closing brackets, return false\n    if closingBracketCount\
    \ > 1 {\n        return false\n    }\n\n    // If there are 3 or more opening\
    \ brackets, return true\n    if openingBracketCount > 2 {\n        return true\n\
    \    }\n\n    // If there are 3 or more closing brackets, return true\n    if\
    \ closingBracketCount > 2 {\n        return true\n    }\n\n    // If there are\
    \ 4 or more opening brackets, return false\n    if openingBracketCount > 3 {\n\
    \        return false\n    }\n\n    // If there are 4 or more closing brackets,\
    \ return false\n    if closingBracketCount > 3 {\n        return false\n    }\n\
    \n    // If there are 5 or more opening brackets, return true\n    if openingBracketCount\
    \ > 4 {\n        return true\n    }\n\n    // If there are 5 or more closing brackets,\
    \ return true\n    if closingBracketCount > 4 {\n        return true\n    }\n\n\
    \    // If there are 6 opening brackets, return false\n    if openingBracketCount\
    \ > 5 {\n        return false\n    }\n\n    // If there are 6 closing brackets,\
    \ return false\n    if closingBracketCount > 5 {\n        return false\n    }\n\
    \n    // If there are 7 opening brackets, return true\n    if openingBracketCount\
    \ > 6 {\n        return true\n    }\n\n    // If there are 7 closing brackets,\
    \ return true\n    if closingBracketCount > 6 {\n        return true\n    }\n\n\
    \    // If there are 8 opening brackets, return false\n    if openingBracketCount\
    \ > 7 {\n        return false\n    }\n\n    // If there are 8 closing brackets,\
    \ return false\n    if closingBracketCount > 7 {\n        return false\n    }\n\
    \n    // If there are 9 opening brackets, return true\n    if openingBracketCount\
    \ > 8 {\n        return true\n    }\n\n    // If there are 9 closing brackets,\
    \ return true\n    if closingBracketCount > 8 {\n        return true\n    }\n\n\
    \    // If there are \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4om_6w_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt4om_6w_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt4om_6w_.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt4om_6w_.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt4om_6w_.swift:13:9: warning: initialization of variable\
    \ 'openingBrackets' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var openingBrackets = brackets.characters\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpt4om_6w_.swift:14:9: warning: initialization of variable 'closingBrackets'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closingBrackets = brackets.characters\n    ~~~~^~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpt4om_6w_.swift:15:9: warning: variable 'openingBracketCount' was never\
    \ mutated; consider changing to 'let' constant\n    var openingBracketCount =\
    \ brackets.characters.count\n    ~~~ ^\n    let\n/tmp/tmpt4om_6w_.swift:16:9:\
    \ warning: variable 'closingBracketCount' was never mutated; consider changing "
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpap0b2966.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpap0b2966.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpap0b2966.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpap0b2966.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if openingBracket == \"<\" {\n\
    \            openingBracketsCount++\n        } else if openingBracket == \">\"\
    \ {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            closingBracketsCount--\n\
    \        }\n    }\n\n    if openingBracketsCount != 0 {\n        return false\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpybs9mf97.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpybs9mf97.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpybs9mf97.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketsCount++\n       \
    \                         ^~\n/tmp/tmpybs9mf97.swift:23:33: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmpybs9mf97.swift:33:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmpybs9mf97.swift:35:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n        if opening == \"<\" {\n            if closing == \">\" {\n    \
    \            openingIndex++\n                closingIndex++\n            } else\
    \ {\n                openingIndex++\n                closingIndex++\n        \
    \        openingCount--\n                closingCount--\n            }\n     \
    \   } else if opening == \">\" {\n            if closing == \"<\" {\n        \
    \        openingIndex++\n                closingIndex++\n            } else {\n\
    \                openingIndex++\n                closingIndex++\n            \
    \    openingCount--\n                closingCount--\n            }\n        }\
    \ else {\n            openingIndex++\n            closingIndex++\n           \
    \ openingCount--\n            closingCount--\n        }\n    }\n    return openingCount\
    \ == 0 && closingCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz6hzwixr.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpz6hzwixr.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpz6hzwixr.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpz6hzwixr.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz6hzwixr.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmpz6hzwixr.swift:20:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        opening\
    \ = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n              \
    \    ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpz6hzwixr.swift:21:47: error: cannot\
    \ find 'NSMakeRange' in scope\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ 1))\n                                              ^~~~~~~~~~~\n/tmp/tmpz6hzwixr.swift:21:28:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        closing\
    \ = brackets.substringWithRange(NSMakeRange(closingIndex, 1))\n              \
    \    ~~~~~~~~ ^"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount -= 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ let closingBracket = brackets[closingBracketIndex]\n        if closingBracket\
    \ == \"<\" {\n            closingBracketCount += 1\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketCount == 0 && closingBracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcbb0bq44.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbb0bq44.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbb0bq44.swift:27:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcbb0bq44.swift:37:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          if closingBracket != \">\" {\n                openingBracketIndex +=\
    \ 1\n            } else {\n                closingBracketIndex += 1\n        \
    \    }\n        } else if openingBracket == \">\" {\n            if closingBracket\
    \ != \"<\" {\n                openingBracketIndex += 1\n            } else {\n\
    \                closingBracketIndex += 1\n            }\n        } else {\n \
    \           if openingBracket != closingBracket {\n                return false\n\
    \            }\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsow2gfg4.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsow2gfg4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsow2gfg4.swift:24:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsow2gfg4.swift:26:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpsow2gfg4.swift:30:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsow2gfg4.swift:32:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpsow2gfg4.swift:38:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsow2gfg4.swift:39:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty {\n        return\
    \ false\n    }\n    if openingBrackets.first == closingBrackets.last {\n     \
    \   return false\n    }\n    if openingBrackets.first < closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last > closingBrackets.last\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1534ekx1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1534ekx1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1534ekx1.swift:26:30: error: binary operator '<' cannot\
    \ be applied to two 'String.Element?' (aka 'Optional<Character>') operands\n \
    \   if openingBrackets.first < closingBrackets.first {\n       ~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1534ekx1.swift:26:30: note: overloads for '<'\
    \ exist with these partially matching parameter lists: (Character, Character)\n\
    \    if openingBrackets.first < closingBrackets.first {\n                    \
    \         ^\n/tmp/tmp1534ekx1.swift:29:29: error: binary operator '>' cannot be\
    \ applied to two 'String.Element?' (aka 'Optional<Character>') operands\n    if\
    \ openingBrackets.last > closingBrackets.last {\n       ~~~~~~~~~~~~~~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingCount = brackets.characters.count\n    var closingCount = brackets.characters.count\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ openingCount {\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount))\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ closingCount))\n        if opening == \">\" && closing == \"<\" {\n        \
    \    openingIndex++\n            closingIndex++\n        } else if opening ==\
    \ \"<\" && closing == \">\" {\n            openingIndex++\n            closingIndex++\n\
    \        } else if opening == \"<\" && closing == \"<\" {\n            openingIndex++\n\
    \            closingIndex++\n        } else if opening == \">\" && closing ==\
    \ \">\" {\n            openingIndex++\n            closingIndex++\n        } else\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw3i16gya.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpw3i16gya.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpw3i16gya.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpw3i16gya.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw3i16gya.swift:20:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.substringWithRange(NSMakeRange(openingIndex,\
    \ openingCount))\n                                              ^~~~~~~~~~~\n\
    /tmp/tmpw3i16gya.swift:20:28: error: value of type 'String' has no member 'substringWithRange'\n\
    \        opening = brackets.substringWithRange(NSMakeRange(openingIndex, openingCount))\n\
    \                  ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw3i16gya.swift:21:47:\
    \ error: cannot find 'NSMakeRange' in scope\n        closing = brackets.substringWithRange(NSMakeRange(closingIndex,\
    \ closingCount))\n                                              ^~~~~~~~~~~\n\
    /tmp/tmpw3i16gya.swift:21:28: error: value of type 'String' has no member 'substringWithRange'\n\
    \        closing = brackets.substringWithRange(NSMakeRange(closingIndex,"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8pqw4o94.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8pqw4o94.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8pqw4o94.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp8pqw4o94.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_brackets_count = brackets.characters.count\n    var closing_brackets_count\
    \ = brackets.characters.count\n    var opening_brackets_index = opening_brackets.startIndex\n\
    \    var closing_brackets_index = closing_brackets.startIndex\n\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        if opening_brackets[opening_brackets_index]\
    \ == \">\" {\n            opening_brackets_index++\n            closing_brackets_index--\n\
    \        } else {\n            opening_brackets_index++\n        }\n    }\n\n\
    \    while closing_brackets_index > 0 {\n        if closing_brackets[closing_brackets_index-1]\
    \ == \"<\" {\n            opening_brackets_index--\n            closing_brackets_index--\n\
    \        } else {\n            closing_brackets_index--\n        }\n    }\n\n\
    \    return opening_brackets_count == closing_brackets_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi4qy9s0p.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi4qy9s0p.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi4qy9s0p.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpi4qy9s0p.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi4qy9s0p.swift:20:34:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while opening_brackets_index < opening_brackets_count\
    \ {\n                                 ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmpi4qy9s0p.swift:22:35:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  opening_brackets_index++\n                                  ^~\n/tmp/tmpi4qy9s0p.swift:23:35:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closing_brackets_index--\n                                  ^~\n/tmp/tmpi4qy9s0p.swift:25:35:\
    \ error: cannot find operator '++' in scope; di"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty()\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty() {\n        return\
    \ false\n    }\n    if openingBrackets.first == closingBrackets.last {\n     \
    \   return true\n    }\n    if openingBrackets.first < closingBrackets.first {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyvwk0aii.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyvwk0aii.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyvwk0aii.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmpyvwk0aii.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n/tmp/tmpyvwk0aii.swift:26:30:\
    \ error: binary operator '<' cannot be applied to two 'String.Element?' (aka 'Optional<Character>')\
    \ operands\n    if openingBrackets.first < closingBrackets.first {\n       ~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyvwk0aii.swift:26:30: note: overloads for '<'\
    \ exist with these partially matching parameter lists: (Character, Character)\n\
    \    if openingBrackets.first < closingBrackets.first {\n                    \
    \         ^\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    if openingBrackets.isEmpty()\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty() {\n        return\
    \ false\n    }\n    var openingBracket = openingBrackets.first!\n    var closingBracket\
    \ = closingBrackets.first!\n    while openingBracket != closingBracket {\n   \
    \     if openingBracket == \"<\" {\n            openingBrackets.removeFirst()\n\
    \            closingBrackets.removeFirst()\n        } else {\n            openingBrackets.removeLast()\n\
    \            closingBrackets.removeLast()\n        }\n        if openingBrackets.isEmpty()\
    \ {\n            return true\n        }\n        if closingBrackets.isEmpty()\
    \ {\n            return false\n        }\n        openingBracket = openingBrackets.first!\n\
    \        closingBracket = closingBrackets.first!\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphx9pfocv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphx9pfocv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphx9pfocv.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmphx9pfocv.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n/tmp/tmphx9pfocv.swift:33:28:\
    \ error: cannot call value of non-function type 'Bool'\n        if openingBrackets.isEmpty()\
    \ {\n                           ^      ~~\n                                  \n\
    /tmp/tmphx9pfocv.swift:36:28: error: cannot call value of non-function type 'Bool'\n\
    \        if closingBrackets.isEmpty() {\n                           ^      ~~\n\
    \                                  \n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketCount = brackets.characters.count\n    var closingBracketCount\
    \ = brackets.characters.count\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketFound = false\n    var closingBracketFound = false\n\
    \n    while openingBracketIndex < openingBracketCount {\n        openingBracketFound\
    \ = false\n        closingBracketFound = false\n        while openingBracketIndex\
    \ < openingBracketCount && !openingBracketFound {\n            if openingBrackets[openingBracketIndex]\
    \ == '<' {\n                openingBracketFound = true\n                openingBracketIndex\
    \ += 1\n            } else if openingBrackets[openingBracketIndex] == '>' {\n\
    \                closingBracketFound = true\n                closingBracketIndex\
    \ += 1\n            } else {\n                openingBracketIndex += 1\n     \
    \       }\n        }\n\n        if openingBracketFound {\n            if closingBracketFound\
    \ {\n                openingBracketIndex += 1\n            } else {\n        \
    \        openingBracketIndex += 1\n                closingBracketIndex += 1\n\
    \            }\n        } else {\n            if closingBracketFound {\n     \
    \           closingBracketIndex += 1\n            } else {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            }\n        }\n \
    \   }\n\n    return openingBracketIndex == openingBracketCount && closingBracketIndex\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1xtf3ykf.swift:26:56: error: single-quoted string literal found,\
    \ use '\"'\n            if openingBrackets[openingBracketIndex] == '<' {\n   \
    \                                                    ^~~\n                   \
    \                                    \"<\"\n/tmp/tmp1xtf3ykf.swift:29:63: error:\
    \ single-quoted string literal found, use '\"'\n            } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                              ^~~\n\
    \                                                              \">\"\n/tmp/tmp1xtf3ykf.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1xtf3ykf.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1xtf3ykf.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1xtf3ykf.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1xtf3ykf.swift:26:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[openingBracketIndex] == '<' {\n               ^~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"<<\":\n          \
    \  openingBracketCount += 1\n        case \"<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"<<=\":\n            openingBracketCount += 1\n        case \"<<<\":\n    \
    \        openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp740wyoj0.swift:80:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"<<<=\":\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmp740wyoj0.swift:108:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp740wyoj0.swift:20:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp740wyoj0.swift:108:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp740wyoj0.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp740wyoj0.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp740wyoj0.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp740wyoj0.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp740wyoj0.swift:26:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<<\":\n\
    \             ^~~~\n/tmp/tmp740wyoj0.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<<=\"\
    :\n             ^~~~~\n/tmp/tmp740wyoj0.swift:30:14: error: expre"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_brackets_count = brackets.characters.count\n    var closing_brackets_count\
    \ = brackets.characters.count\n    var opening_brackets_index = opening_brackets.startIndex\n\
    \    var closing_brackets_index = closing_brackets.startIndex\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        if opening_brackets[opening_brackets_index]\
    \ == \">\" {\n            opening_brackets_index++\n            closing_brackets_index--\n\
    \        } else if opening_brackets[opening_brackets_index] != \"<\" {\n     \
    \       return false\n        }\n    }\n    while closing_brackets_index >= 0\
    \ {\n        if closing_brackets[closing_brackets_index] == \">\" {\n        \
    \    opening_brackets_index--\n            closing_brackets_index++\n        }\
    \ else if closing_brackets[closing_brackets_index] != \"<\" {\n            return\
    \ false\n        }\n    }\n    return opening_brackets_count == closing_brackets_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk6ffggyg.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk6ffggyg.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk6ffggyg.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpk6ffggyg.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk6ffggyg.swift:19:34:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while opening_brackets_index < opening_brackets_count\
    \ {\n                                 ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmpk6ffggyg.swift:21:35:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  opening_brackets_index++\n                                  ^~\n/tmp/tmpk6ffggyg.swift:22:35:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closing_brackets_index--\n                                  ^~\n/tmp/tmpk6ffggyg.swift:27:34:\
    \ error: referencing operator function '>=' on "
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n    if\
    \ opening_brackets.count != closing_brackets.count {\n        return false\n \
    \   }\n    var opening_bracket = opening_brackets.first!\n    var closing_bracket\
    \ = closing_brackets.last!\n    if opening_bracket != closing_bracket {\n    \
    \    return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw8ct73dk.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8ct73dk.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8ct73dk.swift:20:9: warning: variable 'opening_bracket'\
    \ was never mutated; consider changing to 'let' constant\n    var opening_bracket\
    \ = opening_brackets.first!\n    ~~~ ^\n    let\n/tmp/tmpw8ct73dk.swift:21:9:\
    \ warning: variable 'closing_bracket' was never mutated; consider changing to\
    \ 'let' constant\n    var closing_bracket = closing_brackets.last!\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \">\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == \">\" else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \">\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \">\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \">\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \">\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        open\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr5s40w0f.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpr5s40w0f.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpr5s40w0f.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpr5s40w0f.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr5s40w0f.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpr5s40w0f.swift:26:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpr5s40w0f.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpr5s40w0f.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpr5s40w0f.swift:38:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpr5s40w0f.swift:42:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        let closingBracket = closingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracket == nil {\n            return false\n        }\n   \
    \     if openingBracket != closingBracket! {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykwbieno.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpykwbieno.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let index = closingBrackets.index(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: index)\n        }\n    }\n    \n \
    \   return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6o1271vq.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp6o1271vq.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \n    var opening_brackets_count = opening_brackets.count\n    var closing_brackets_count\
    \ = closing_brackets.count\n\n    if opening_brackets_count != closing_brackets_count\
    \ {\n        return false\n    }\n\n    var opening_brackets_index = opening_brackets.startIndex\n\
    \    var closing_brackets_index = closing_brackets.startIndex\n\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        let opening_bracket = opening_brackets[opening_brackets_index]\n\
    \        let closing_bracket = closing_brackets[closing_brackets_index]\n\n  \
    \      if opening_bracket != closing_bracket {\n            return false\n   \
    \     }\n\n        opening_brackets_index++\n        closing_brackets_index++\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjv5f6w10.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjv5f6w10.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjv5f6w10.swift:26:34: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while opening_brackets_index < opening_brackets_count {\n               \
    \                  ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmpjv5f6w10.swift:34:31: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        opening_brackets_index++\n\
    \                              ^~\n/tmp/tmpjv5f6w10.swift:35:31: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closing_brackets_index++\n\
    \                              ^~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty()\
    \ {\n        return true\n    }\n    if closingBrackets.isEmpty() {\n        return\
    \ false\n    }\n    if openingBrackets.first == closingBrackets.last {\n     \
    \   return false\n    }\n    if openingBrackets.first == \">\" && closingBrackets.first\
    \ == \"<\" {\n        return false\n    }\n    if openingBrackets.first == \"\
    <\" && closingBrackets.first == \">\" {\n        return false\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return false\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgzso6sq9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgzso6sq9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgzso6sq9.swift:17:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmpgzso6sq9.swift:20:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeLast()\n    var openingBracketsCount\
    \ = openingBrackets.count\n    var closingBracketsCount = closingBrackets.count\n\
    \    if openingBracketsCount != closingBracketsCount {\n        return false\n\
    \    }\n    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n   \
    \ while openingBracketIndex < openingBracketsCount {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uzuc4co.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6uzuc4co.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6uzuc4co.swift:25:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp6uzuc4co.swift:25:52: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6uzuc4co.swift:17:9:\
    \ warning: variable 'openingBracketsCount' was never mutated; consider changing\
    \ to 'let' constant\n    var openingBracketsCount = openingBrackets.count\n  \
    \  ~~~ ^\n    let\n/tmp/tmp6uzuc4co.swift:18:9: warning: variable 'closingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var closingBracketsCount\
    \ = closingBrackets.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBracketIndex == brackets.endIndex\
    \ {\n            openingBracketIndex = brackets.startIndex\n        }\n      \
    \  if closingBracketIndex == brackets.endIndex {\n            closingBracketIndex\
    \ = brackets.startIndex\n        }\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp19parwpk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp19parwpk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp19parwpk.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp19parwpk.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    if opening.first != closing.first {\n  \
    \      return false\n    }\n    if opening.last != closing.last {\n        return\
    \ false\n    }\n    if opening.count == 1 {\n        return true\n    }\n    if\
    \ opening.count == 2 {\n        return opening.first == closing.last\n    }\n\
    \    if opening.count == 3 {\n        return opening.first == closing.last &&\
    \ opening.last == closing.first\n    }\n    if opening.count == 4 {\n        return\
    \ opening.first == closing.last && opening.last == closing.first && opening.first\
    \ == closing.last\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbp34k1rs.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpbp34k1rs.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"=\":\n           \
    \ openingBracketCount += 1\n        case \"==\":\n            openingBracketCount\
    \ += 1\n        case \"!=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<<\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \">\":\n            openingBracketCount += 1\n        case \">=\":\n       \
    \     openingBracketCount += 1\n        case \">>\":\n            openingBracketCount\
    \ += 1\n        case \">=\":\n            openingBracketCount += 1\n        case\
    \ \"<<=\":\n            openingBracketCount += 1\n        case \"<<<\":\n    \
    \        openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphjabj0ll.swift:81:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"<<<=\":\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmphjabj0ll.swift:109:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmphjabj0ll.swift:19:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmphjabj0ll.swift:109:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmphjabj0ll.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmphjabj0ll.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphjabj0ll.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphjabj0ll.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmphjabj0ll.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmphjabj0ll.swift:29:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"!=\":\n\
    \             ^~~~\n/tmp/tmphjabj0ll.swift:31:14: error: express"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != '<' {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < closingBrackets.endIndex {\n        if closingBrackets[closingBracketIndex]\
    \ != '>' {\n            return false\n        }\n        closingBracketIndex +=\
    \ 1\n    }\n\n    if openingBracketIndex == openingBrackets.endIndex && closingBracketIndex\
    \ == closingBrackets.endIndex {\n        return true\n    }\n\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoxh4mkt5.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] != '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpoxh4mkt5.swift:27:52: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ != '>' {\n                                                   ^~~\n         \
    \                                          \">\"\n/tmp/tmpoxh4mkt5.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoxh4mkt5.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoxh4mkt5.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpoxh4mkt5.swift:30:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    for openingBracket in openingBrackets {\n\
    \        if openingBracket == \"<\" {\n            openingBracketsCount--\n  \
    \      } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    return\
    \ openingBracketsCount == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp88ji0q6z.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp88ji0q6z.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp88ji0q6z.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp88ji0q6z.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp88ji0q6z.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp88ji0q6z.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp88ji0q6z.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmp88ji0q6z.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.first\
    \ {\n            if openingBracket != closingBracket {\n                return\
    \ false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5e5fw7p9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5e5fw7p9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy3okcpev.swift:100:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpy3okcpev.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpy3okcpev.swift:100:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpy3okcpev.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpy3okcpev.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy3okcpev.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy3okcpev.swift:19:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpy3okcpev.swift:19:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpy3okcpev.swift:23:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"<\" {\n            if openingBracketIndex < brackets.endIndex\
    \ {\n                let nextOpeningBracket = brackets[openingBracketIndex + 1]\n\
    \                if nextOpeningBracket == \"<\" {\n                    openingBracketIndex\
    \ += 1\n                } else {\n                    openingBracketIndex += 1\n\
    \                    openingBracketCount -= 1\n                }\n           \
    \ } else {\n                openingBracketIndex += 1\n                openingBracketCount\
    \ -= 1\n            }\n        } else {\n            if openingBracketIndex <\
    \ brackets.endIndex {\n                let nextOpeningBracket = brackets[openingBracketIndex\
    \ + 1]\n                if nextOpeningBracket == \"<\" {\n                   \
    \ openingBracketIndex += 1\n                } else {\n                    openingBracketIndex\
    \ += 1\n                    openingBracketCount -= 1\n                }\n    \
    \        } else {\n                openingBracketIndex += 1\n                openingBracketCount\
    \ -= 1\n            }\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let closingBracket = brackets[closingBracketIndex]\n        closingBracketCount\
    \ += 1\n        if closingBracket == \">\" {\n            if closingBracketIndex\
    \ < brackets.endIndex {\n                let nextClosingBracket = brackets[closingBracketIndex\
    \ + 1]\n                if nextClosingBracket == \">\" {\n                   \
    \ closingBracketIndex += 1\n                } else {\n                    closingBracketIndex\
    \ += 1\n                    closingBracketCount -= 1\n                }\n    \
    \        } else {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ -= 1\n            }\n        } else {\n            if closingBracketIndex <\
    \ brackets.endIndex {\n                let nextClosingBracket = brackets[closingBracketIndex\
    \ + 1]\n                if nextClosingBracket == \">\" {\n                   \
    \ closingBracketIndex += 1\n                } else {\n                    closingBracketIndex\
    \ += 1\n                    closingBracketCount -= 1\n                }\n    \
    \        } else {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ -= 1\n            }\n        }\n    }\n\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4_r9ppsk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4_r9ppsk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4_r9ppsk.swift:25:51: error: cannot convert value of\
    \ type 'String.Index' to expected argument type 'Int'\n                let nextOpeningBracket\
    \ = brackets[openingBracketIndex + 1]\n                                      \
    \            ^\n/tmp/tmp4_r9ppsk.swift:27:41: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                  \
    \  openingBracketIndex += 1\n                    ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp4_r9ppsk.swift:29:41:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                    openingBracketIndex += 1\n                  \
    \  ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp4_r9ppsk.swift:33:37: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \          openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp4_r9ppsk.swift:38:51: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                let nextOpeningBracket = brackets[openingBracketIndex\
    \ + 1]\n                                                  ^\n/tmp/tmp4_r9ppsk.swift:40:41:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                    openingBracketIndex += 1\n                  \
    \  ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp4_r9ppsk.swift:42:41: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.In"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount -= 1\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ let closingBracket = brackets[closingBracketIndex]\n        if closingBracket\
    \ == \"<\" {\n            closingBracketCount += 1\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketCount == 0 && closingBracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcbb0bq44.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbb0bq44.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbb0bq44.swift:27:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcbb0bq44.swift:37:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    var openingIndex = 0\n    var closingIndex = 0\n    while openingIndex <\
    \ opening.count {\n        openingIndex++\n        if opening[openingIndex] ==\
    \ '<' {\n            openingIndex++\n            if openingIndex < opening.count\
    \ {\n                openingIndex++\n                if opening[openingIndex]\
    \ == '>' {\n                    openingIndex++\n                    if openingIndex\
    \ < opening.count {\n                        openingIndex++\n                \
    \        if opening[openingIndex] == '>' {\n                            openingIndex++\n\
    \                            if openingIndex < opening.count {\n             \
    \                   openingIndex++\n                                if opening[openingIndex]\
    \ == '>' {\n                                    openingIndex++\n             \
    \                       if openingIndex < opening.count {\n                  \
    \                      openingIndex++\n                                      \
    \  if opening[openingIndex] == '>' {\n                                       \
    \     openingIndex++\n                                            if openingIndex\
    \ < opening.count {\n                                                openingIndex++\n\
    \                                                if opening[openingIndex] == '>'\
    \ {\n                                                    openingIndex++\n    \
    \                                                if openingIndex < opening.count\
    \ {\n                                                        openingIndex++\n\
    \                                                        if opening[openingIndex]\
    \ == '>' {\n                                                            openingIndex++\n\
    \                                                        }\n                 \
    \                                   }\n                                      \
    \          }\n                                            }\n                \
    \                        }\n                                    }\n          \
    \                      }\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    while closingIndex < closing.count {\n        closingIndex++\n    \
    \    if closing[closingIndex] == '>' {\n            closingIndex++\n         \
    \   if closingIndex < closing.count {\n                closingIndex++\n      \
    \          if closing[closingIndex] == '>' {\n                    closingIndex++\n\
    \                    if closingIndex < closing.count {\n                     \
    \   closingIndex++\n                        if closing[closingIndex] == '>' {\n\
    \                            closingIndex++\n                            if closingIndex\
    \ < closing.count {\n                                closingIndex++\n        \
    \                        if closing[closingIndex] == '>' {\n                 \
    \                   closingIndex++\n                                    if closingIndex\
    \ < closing.count {\n                                        closingIndex++\n\
    \                                        if closing[closingIndex] == '>' {\n \
    \                                           closingIndex++\n                 \
    \                           if closingIndex < closing.count {\n              \
    \                                  closingIndex++\n                          \
    \                      if closing[closingIndex] == '>' {\n                   \
    \                                 closingIndex++\n                           \
    \                         if closingIndex < closing.count {\n                \
    \                                        closingIndex++\n                    \
    \                                    if closing[closingIndex] == '>' {\n     \
    \                                                       closingIndex++\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpep1jj_id.swift:19:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '<' {\n                      \
    \              ^~~\n                                    \"<\"\n/tmp/tmpep1jj_id.swift:23:45:\
    \ error: single-quoted string literal found, use '\"'\n                if opening[openingIndex]\
    \ == '>' {\n                                            ^~~\n                \
    \                            \">\"\n/tmp/tmpep1jj_id.swift:27:53: error: single-quoted\
    \ string literal found, use '\"'\n                        if opening[openingIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpep1jj_id.swift:31:61:\
    \ error: single-quoted string literal found, use '\"'\n                      \
    \          if opening[openingIndex] == '>' {\n                               \
    \                             ^~~\n                                          \
    \                  \">\"\n/tmp/tmpep1jj_id.swift:35:69: error: single-quoted string\
    \ literal found, use '\"'\n                                        if opening[openingIndex]\
    \ == '>' {\n                                                                 \
    \   ^~~\n                                                                    \"\
    >\"\n/tmp/tmpep1jj_id.swift:39:77: error: single-quoted string literal found,\
    \ use '\"'\n                                                if opening[openingIndex]\
    \ == '>' {\n                                                                 \
    \           ^~~\n                                                            \
    \                \">\"\n/tmp/tmpep1jj_id.swift:43:85: error: single-quoted string\
    \ literal found, use '\"'\n                                                  \
    \      if opening[openingIndex] == '>' {\n                                   \
    \                                                 ^~~\n                      \
    \                                                              \">\"\n/tmp/tmpep1jj_id.swift:61:37:\
    \ error: single-quoted string literal found, use '\"'\n        if closing[closingIndex]\
    \ == '>' {\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters.split{$0 == \">\"}.count\n    var closing\
    \ = brackets.characters.split{$0 == \"<\"}.count\n    if opening != closing {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuz0hk17g.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \">\"\
    }.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuz0hk17g.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters.split{$0 ==\
    \ \"<\"}.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpuz0hk17g.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \">\"}.count\n    ~~~ ^\n    let\n/tmp/tmpuz0hk17g.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters.split{$0 == \"<\"}.count\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    openingBrackets.reverse()\n\
    \    closingBrackets.reverse()\n    for openingBracket in openingBrackets {\n\
    \        if closingBrackets.contains(openingBracket) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuf09nwck.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuf09nwck.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuf09nwck.swift:17:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpuf09nwck.swift:18:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount != closingBracketsCount {\n     \
    \   return false\n    }\n\n    var lastOpeningBracket = openingBrackets.last\n\
    \    var lastClosingBracket = closingBrackets.last\n\n    if lastOpeningBracket\
    \ == lastClosingBracket {\n        openingBrackets.removeLast()\n        closingBrackets.removeLast()\n\
    \    }\n\n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb_rrj28s.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb_rrj28s.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb_rrj28s.swift:16:9: warning: variable 'openingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBracketsCount\
    \ = openingBrackets.count\n    ~~~ ^\n    let\n/tmp/tmpb_rrj28s.swift:17:9: warning:\
    \ variable 'closingBracketsCount' was never mutated; consider changing to 'let'\
    \ constant\n    var closingBracketsCount = closingBrackets.count\n    ~~~ ^\n\
    \    let\n/tmp/tmpb_rrj28s.swift:27:9: warning: variable 'lastOpeningBracket'\
    \ was never mutated; consider changing to 'let' constant\n    var lastOpeningBracket\
    \ = openingBrackets.last\n    ~~~ ^\n    let\n/tmp/tmpb_rrj28s.swift:28:9: warning:\
    \ variable 'lastClosingBracket' was never mutated; consider changing to 'let'\
    \ constant\n    var lastClosingBracket = closingBrackets.last\n    ~~~ ^\n   \
    \ let\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        switch brackets[openingBracketIndex]\
    \ {\n        case \"<\":\n            openingBracketCount += 1\n        case \"\
    <=\":\n            openingBracketCount += 1\n        case \"<<\":\n          \
    \  openingBracketCount += 1\n        case \"<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"<<=\":\n            openingBracketCount += 1\n        case \"<<<\":\n    \
    \        openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n            openingBracketCount += 1\n        case \"<<<=\"\
    :\n            openingBracketCount += 1\n        case \"<<<=\":\n            openingBracketCount\
    \ += 1\n        case \"<<<=\":\n            openingBracketCount += 1\n       \
    \ case \"<<<=\":\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp502ububi.swift:79:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"<<<=\":\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmp502ububi.swift:107:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp502ububi.swift:19:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp502ububi.swift:107:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp502ububi.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp502ububi.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp502ububi.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp502ububi.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp502ububi.swift:25:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<<\":\n\
    \             ^~~~\n/tmp/tmp502ububi.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<<=\"\
    :\n             ^~~~~\n/tmp/tmp502ububi.swift:29:14: error: expre"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \">\"\
    \ {\n            closingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n\n        if openingBracketIndex < brackets.endIndex && closingBracketIndex\
    \ < brackets.endIndex {\n            let nextOpeningBracket = brackets[openingBracketIndex]\n\
    \            let nextClosingBracket = brackets[closingBracketIndex]\n\n      \
    \      if nextOpeningBracket == \"<\" {\n                openingBracketIndex +=\
    \ 1\n            } else if nextOpeningBracket == \">\" {\n                closingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphc5voubd.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphc5voubd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphc5voubd.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphc5voubd.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmphc5voubd.swift:35:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphc5voubd.swift:37:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd7xk7vz0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpd7xk7vz0.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpd7xk7vz0.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpd7xk7vz0.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    brackets = brackets.lowercased()\n    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ -1\n    var closingBracketIndex = -1\n    var openingBracketCount = 0\n    var\
    \ closingBracketCount = 0\n    for openingBracketIndex < openingBrackets.count\
    \ {\n        let openingBracket = openingBrackets[openingBracketIndex]\n     \
    \   if openingBracket == \"<\" {\n            openingBracketCount += 1\n     \
    \   } else if openingBracket == \">\" {\n            openingBracketCount -= 1\n\
    \        }\n        if openingBracketCount < 0 {\n            return false\n \
    \       }\n    }\n    for closingBracketIndex < closingBrackets.count {\n    \
    \    let closingBracket = closingBrackets[closingBracketIndex]\n        if closingBracket\
    \ == \"<\" {\n            closingBracketCount += 1\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketCount -= 1\n        }\n        if closingBracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm4mv7agc.swift:20:29: error: expected 'in' after for-each pattern\n\
    \    for openingBracketIndex < openingBrackets.count {\n                     \
    \       ^\n/tmp/tmpm4mv7agc.swift:20:29: error: unary operator cannot be separated\
    \ from its operand\n    for openingBracketIndex < openingBrackets.count {\n  \
    \                          ^~\n                             \n/tmp/tmpm4mv7agc.swift:31:29:\
    \ error: expected 'in' after for-each pattern\n    for closingBracketIndex < closingBrackets.count\
    \ {\n                            ^\n/tmp/tmpm4mv7agc.swift:31:29: error: unary\
    \ operator cannot be separated from its operand\n    for closingBracketIndex <\
    \ closingBrackets.count {\n                            ^~\n                  \
    \           \n/tmp/tmpm4mv7agc.swift:13:5: error: cannot assign to value: 'brackets'\
    \ is a 'let' constant\n    brackets = brackets.lowercased()\n    ^~~~~~~~\n/tmp/tmpm4mv7agc.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm4mv7agc.swift:15:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm4mv7agc.swift:20:29: error: '<' is not a prefix unary\
    \ operator\n    for openingBracketIndex < openingBrackets.count {\n          \
    \                  ^\n/tmp/tmpm4mv7agc.swift:31:29: error: '<' is not a prefix\
    \ unary operator\n    for closingBracketIndex < closingBrackets.count {\n    \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n        openingBracketCount++\n\
    \        openingBracketIndex++\n    }\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        guard closingBrackets[closingBracketIndex] != \">\" else {\n    \
    \        return false\n        }\n        closingBracketCount++\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpba5pvtgw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpba5pvtgw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpba5pvtgw.swift:23:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmpba5pvtgw.swift:24:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n       \
    \                    ^~\n/tmp/tmpba5pvtgw.swift:30:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketCount++\n       \
    \                    ^~\n/tmp/tmpba5pvtgw.swift:31:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n       \
    \                    ^~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbn48ueeh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbn48ueeh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbn48ueeh.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbn48ueeh.swift:21:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpbn48ueeh.swift:13:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpbn48ueeh.swift:14:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    opening.removeLast()\n\
    \    opening.removeLast()\n    opening.removeLast()\n    \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3bb95acj.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp3bb95acj.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp3bb95acj.swift:14:9:\
    \ warning: initialization of variable 'closing' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var closing = brackets.characters\n\
    \    ~~~~^~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    var\
    \ openingBracketCount = openingBrackets.count\n    var closingBracketCount = closingBrackets.count\n\
    \    if openingBracketCount != closingBracketCount {\n        return false\n \
    \   }\n    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpand9m3sn.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpand9m3sn.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpand9m3sn.swift:28:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpand9m3sn.swift:29:29: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex -= 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n\n        if openingBracketCount\
    \ < 0 {\n            return false\n        }\n\n        openingBracketIndex++\n\
    \    }\n\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n\n        if closingBracketCount\
    \ < 0 {\n            return false\n        }\n\n        closingBracketIndex++\n\
    \    }\n\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxbib7swb.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxbib7swb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxbib7swb.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpxbib7swb.swift:25:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpxbib7swb.swift:32:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpxbib7swb.swift:38:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpxbib7swb.swift:40:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpxbib7swb.swift:47:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd7xk7vz0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd7xk7vz0.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpd7xk7vz0.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpd7xk7vz0.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpd7xk7vz0.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpd7xk7vz0.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1660009741
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgcdt_i5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmptgcdt_i5.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmptgcdt_i5.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmptgcdt_i5.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    if opening.count == 0 {\n \
    \       return closing.count == 0\n    }\n    if opening.count != closing.count\
    \ {\n        return false\n    }\n    if opening.first != closing.first {\n  \
    \      return false\n    }\n    if opening.last != closing.last {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl0xddmdl.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpl0xddmdl.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount > 0 {\n        openingBrackets.removeLast()\n\
    \    }\n    if closingBracketsCount > 0 {\n        closingBrackets.removeLast()\n\
    \    }\n\n    if openingBracketsCount == closingBracketsCount {\n        return\
    \ true\n    }\n\n    if openingBrackets.count > 0 {\n        let lastOpeningBracket\
    \ = openingBrackets.last\n        let lastClosingBracket = closingBrackets.last\n\
    \        if lastOpeningBracket == lastClosingBracket {\n            openingBrackets.removeLast()\n\
    \            closingBrackets.removeLast()\n        }\n    }\n\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2wx22dcl.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2wx22dcl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2wx22dcl.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2wx22dcl.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2wx22dcl.swift:15:9: warning: variable\
    \ 'openingBracketsCount' was never mutated; consider changing to 'let' constant\n\
    \    var openingBracketsCount = brackets.characters.count\n    ~~~ ^\n    let\n\
    /tmp/tmp2wx22dcl.swift:16:9: warning: variable 'closingBracketsCount' was never\
    \ mutated; consider changing to 'let' constant\n    var closingBracketsCount =\
    \ brackets.characters.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else {\n            return false\n        }\n    }\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        let closingBracket = brackets[closingBracketIndex]\n\
    \        if closingBracket == \"<\" {\n            closingBracketIndex += 1\n\
    \        } else if closingBracket == \">\" {\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex -= 1\n        } else {\n            return\
    \ false\n        }\n    }\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp_p1o_p5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp_p1o_p5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp_p1o_p5.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp_p1o_p5.swift:22:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpp_p1o_p5.swift:23:33: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp_p1o_p5.swift:31:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpp_p1o_p5.swift:33:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpp_p1o_p5.swift:34:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \">\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if opening\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82y9jedb.swift:73:26: error: expected '{' after 'if' condition\n\
    \        } else if opening\n                         ^\n/tmp/tmp82y9jedb.swift:100:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp82y9jedb.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp82y9jedb.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp82y9jedb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp82y9jedb.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp82y9jedb.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp82y9jedb.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp82y9jedb.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp82y9jedb.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBr"
  stdout: ''
  timestamp: 1660009742
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n        } else if openingBracket == \">\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n\n        if closingBracketIndex >= brackets.endIndex\
    \ {\n            break\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzcac2cod.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzcac2cod.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzcac2cod.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzcac2cod.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpzcac2cod.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzcac2cod.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpzcac2cod.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660009742
