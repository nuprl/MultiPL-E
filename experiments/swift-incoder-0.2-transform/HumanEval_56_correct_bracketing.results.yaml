language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] != \"<\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n    }\n\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ != \">\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    if openingBracketIndex == closingBracketIndex {\n       \
    \ return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv1xh70fv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv1xh70fv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv1xh70fv.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpv1xh70fv.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    guard openingBrackets.count ==\
    \ closingBrackets.count else {\n        return false\n    }\n    for openingBracket\
    \ in openingBrackets {\n        guard let closingBracket = closingBrackets.first\
    \ else {\n            return false\n        }\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8jco85_f.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8jco85_f.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for openingBracket\
    \ in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpggrfg7xs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpggrfg7xs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for i in 0..<openingBrackets.count {\n \
    \       if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4y5ggsdf.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4y5ggsdf.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    opening.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\
    \ && closing.count == 0\n    }\n    if closing.isEmpty {\n        return opening.count\
    \ == 0\n    }\n    if opening.count != closing.count {\n        return false\n\
    \    }\n    if opening.count == 1 {\n        return opening.first! == closing.first!\n\
    \    }\n    if opening.count == 2 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 3 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 4 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 5 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 6 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 7 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 8 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 9 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 10 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 11 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 12 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 13 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 14 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 15 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 16 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 17 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 18 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 19 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 20 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == 21 {\n        return opening.first! == closing.last!\n\
    \    }\n    if opening.count == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz6vhzz0d.swift:92:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpz6vhzz0d.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpz6vhzz0d.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if !closingBrackets.contains(where: { $0 == openingBracket }) {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnlcigie.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfnlcigie.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = brackets.characters\n    var closing = brackets.characters\n\
    \    opening.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty && closing.count == 0\n    }\n    if closing.isEmpty\
    \ {\n        return opening.count == 0\n    }\n    return opening.count == closing.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6y8mzu4h.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp6y8mzu4h.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    var\
    \ openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1cdi4t.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpns1cdi4t.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpns1cdi4t.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpns1cdi4t.swift:24:29: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex -= 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        openingBracketIndex += 1\n\n\
    \        if openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ == \">\" {\n                openingBracketIndex += 1\n                continue\n\
    \            }\n\n            if openingBrackets[openingBracketIndex] != \"<\"\
    \ {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n            openingBracketIndex += 1\n        }\n\n        if\
    \ openingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n                return false\n            }\n\n            openingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          if openingBrackets[openingBracketIndex] != \"<\" {\n              \
    \  return false\n            }\n\n            openingBracketIndex += 1\n     \
    \   }\n\n        if openingBracketIndex < brackets.endIndex {\n            if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n                return false\n\
    \            }\n\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpukhjmtla.swift:127:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpukhjmtla.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpukhjmtla.swift:127:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpukhjmtla.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpukhjmtla.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukhjmtla.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukhjmtla.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpukhjmtla.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpukhjmtla.swift:28:37: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpukhjmtla.swift:36:33:\
    \ error: binary operator '+=' cannot be applied to operan"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCountIndex = 0\n    var closingBracketsCountIndex\
    \ = 0\n    var openingBracketsFound = false\n    var closingBracketsFound = false\n\
    \n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsCountIndex\
    \ += 1\n        if openingBracketsCountIndex == openingBracketsCount {\n     \
    \       openingBracketsCountIndex = 0\n            openingBracketsIndex += 1\n\
    \        }\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \      openingBracketsFound = true\n            openingBracketsIndex += 1\n  \
    \      }\n        if openingBrackets[openingBracketsIndex] == '>' {\n        \
    \    openingBracketsFound = true\n            openingBracketsIndex += 1\n    \
    \    }\n        if openingBracketsFound {\n            openingBracketsCount -=\
    \ openingBracketsCountIndex\n            if openingBracketsCount == 0 {\n    \
    \            openingBracketsFound = false\n            }\n        }\n    }\n \
    \   while closingBracketsIndex < closingBracketsCount {\n        closingBracketsCountIndex\
    \ += 1\n        if closingBracketsCountIndex == closingBracketsCount {\n     \
    \       closingBracketsCountIndex = 0\n            closingBracketsIndex += 1\n\
    \        }\n        if closingBrackets[closingBracketsIndex] == '<' {\n      \
    \      closingBracketsFound = true\n            closingBracketsIndex += 1\n  \
    \      }\n        if closingBrackets[closingBracketsIndex] == '>' {\n        \
    \    closingBracketsFound = true\n            closingBracketsIndex += 1\n    \
    \    }\n        if closingBracketsFound {\n            closingBracketsCount -=\
    \ closingBracketsCountIndex\n            if closingBracketsCount == 0 {\n    \
    \            closingBracketsFound = false\n            }\n        }\n    }\n \
    \   return openingBracketsIndex == closingBracketsIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmvu3kt_w.swift:30:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmpmvu3kt_w.swift:34:53: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpmvu3kt_w.swift:51:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '<' {\n                                                    ^~~\n        \
    \                                            \"<\"\n/tmp/tmpmvu3kt_w.swift:55:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpmvu3kt_w.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmvu3kt_w.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmvu3kt_w.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmvu3kt_w.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String direc"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    while openingBracketIndex < brackets.endIndex {\n\
    \        openingBracketIndex = openingBracketIndex.successor()\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnwjc_ux.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprnwjc_ux.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmprnwjc_ux.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for i in\
    \ 0..<openingBrackets.count {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpysp38jr4.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpysp38jr4.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        guard openingBrackets[openingBracketIndex] == \">\" else {\n        \
    \    return false\n        }\n        openingBracketIndex += 1\n    }\n\n    while\
    \ closingBracketIndex < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzisjg_nx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzisjg_nx.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzisjg_nx.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzisjg_nx.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"<\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \">\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgcdt_i5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptgcdt_i5.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmptgcdt_i5.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmptgcdt_i5.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmptgcdt_i5.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmptgcdt_i5.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        openingBracketCount += 1\n        if\
    \ openingBracket == \"<\" {\n            openingBracketIndex += 1\n          \
    \  continue\n        }\n        if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            if closingBracketCount\
    \ > 1 {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ = 0\n                continue\n            }\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    return openingBracketCount == closingBracketCount\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps08thvd8.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps08thvd8.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps08thvd8.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmps08thvd8.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmps08thvd8.swift:30:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmps08thvd8.swift:35:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n\n    while openingBracketIndex < brackets.endIndex {\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          openingBracketIndex += 1\n            closingBracketIndex += 1\n  \
    \      } else if openingBracket == \">\" {\n            openingBracketIndex +=\
    \ 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex < brackets.endIndex {\n  \
    \          let nextOpeningBracket = brackets[openingBracketIndex]\n          \
    \  if nextOpeningBracket == \"<\" {\n                openingBracketIndex += 1\n\
    \            } else {\n                openingBracketIndex += 1\n            \
    \    closingBracketIndex += 1\n            }\n        }\n\n        if closingBracketIndex\
    \ < brackets.endIndex {\n            let nextClosingBracket = brackets[closingBracketIndex]\n\
    \            if nextClosingBracket == \">\" {\n                closingBracketIndex\
    \ += 1\n            } else {\n                closingBracketIndex += 1\n     \
    \           openingBracketIndex += 1\n            }\n        }\n    }\n\n    return\
    \ openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk1ibe3c4.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1ibe3c4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk1ibe3c4.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:24:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:35:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk1ibe3c4.swift:37:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpk1ibe3c4.swift:38:37:\
    \ error: bina"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    brackets = brackets.lowercased()\n    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketIndex =\
    \ openingBrackets.startIndex\n    var closingBracketIndex = closingBrackets.startIndex\n\
    \    while openingBracketIndex < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ == \">\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < openingBrackets.endIndex {\n                openingBrackets[openingBracketIndex]\
    \ = \"<\"\n                closingBrackets[closingBracketIndex] = \"<\"\n    \
    \            closingBracketIndex += 1\n            }\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n    return openingBracketIndex == openingBrackets.endIndex && closingBracketIndex\
    \ == closingBrackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ulsj21r.swift:13:5: error: cannot assign to value: 'brackets'\
    \ is a 'let' constant\n    brackets = brackets.lowercased()\n    ^~~~~~~~\n/tmp/tmp1ulsj21r.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1ulsj21r.swift:15:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1ulsj21r.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1ulsj21r.swift:22:32: error:\
    \ cannot assign through subscript: subscript is get-only\n                openingBrackets[openingBracketIndex]\
    \ = \"<\"\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ulsj21r.swift:23:32:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    closingBrackets[closingBracketIndex] = \"<\"\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1ulsj21r.swift:24:37: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1ulsj21r.swift:29:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659821215
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpisxap0b5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpisxap0b5.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821215
