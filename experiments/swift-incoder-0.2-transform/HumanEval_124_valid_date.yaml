name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n\
  /// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date:\
  \ \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n\
  /// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    return\
    \ dateString != nil && dateString!.timeIntervalSince1970 > 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 {\n        return false\n\
    \    }\n    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day,\
    \ .month, .year], from: date)\n    return components.day >= 1 && components.day\
    \ <= 31 && components.month >= 1 && components.month <= 12 && components.year\
    \ >= 1 && components.year <= 9999", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let days = components.day!\n        return\
    \ days > 0 && days <= 29 && components.month! < 12 && components.month! > 0\n\
    \    }\n    return false", "    guard !date.isEmpty else { return false }\n  \
    \  let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0\n        && components.day\
    \ <= 31\n        && components.day >= 1\n        && components.month != 0\n  \
    \      && components.month <= 12\n        && components.month >= 4", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \        return components.day == daysInMonth\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if let date = dateFromString {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let days = components.day!\n        return days > 0 && days <= 29 &&\
    \ components.month! < 12 && components.month! > 0\n    }\n    return false", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \        return components.day == daysInMonth\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n        && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n        && components.year != nil && components.year\
    \ >= 1980 && components.year <= 2040", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 {\n        return false\n\
    \    }\n    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    guard !date.isEmpty else { return false }\n    let dateComponents\
    \ = DateComponents(year: 2000, month: 0, day: 0)\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    if date == nil { return false }\n    let dateComponents = Calendar.current.dateComponents([.day],\
    \ from: date!, to: Date())\n    return dateComponents.day != 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        return !dateFormatter.dateFormat.isEmpty\n\
    \            && date.day! >= 1\n            && date.day! <= 31\n            &&\
    \ date.month! >= 1\n            && date.month! <= 12\n            && date.year!\
    \ >= 1\n            && date.year! <= 9999\n    } else {\n        return false\n\
    \    }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    return dateFromString != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let days = components.day!\n        return\
    \ days > 0 && days <= 29 && components.month! < 12 && components.month! > 0\n\
    \    }\n    return false"]
stop_tokens:
- "\n}"
