language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = GPARange(gpa: gpa)\n    let letterGradeRange\
    \ = LetterGradeRange(gpaRange: gpaRange)\n    let letterGrade = letterGradeRange.letterGrade\n\
    \    let letterGrades = letterGradeRange.letterGrades\n    for letterGrade in\
    \ letterGrades {\n        letterGrades.append(letterGrade)\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt7hmbhxf.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpt7hmbhxf.swift:27:20:\
    \ error: cannot find 'GPARange' in scope\n    let gpaRange = GPARange(gpa: gpa)\n\
    \                   ^~~~~~~~\n/tmp/tmpt7hmbhxf.swift:28:28: error: cannot find\
    \ 'LetterGradeRange' in scope\n    let letterGradeRange = LetterGradeRange(gpaRange:\
    \ gpaRange)\n                           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var letterGradeIndex = 0\n    while\
    \ gpa > 0 {\n        let gpa = gpa / 10\n        let letterGrade = letterGrades[letterGradeIndex]\n\
    \        letterGrades.append(letterGrade)\n        gpa -= 10 * letterGradeIndex\n\
    \        letterGradeIndex += 1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl961ro7k.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    gradesArrayCopy.remove(at: 0)\n    var letterGrades = [String]()\n\
    \    var gradesArrayCopyCopy = gradesArrayCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopy = gradesArrayCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopyCopy\n    gradesArrayCopyCopy.remove(at:\
    \ 0)\n    var gradesArrayCopyCopyCopy = gradesArrayCopyCopy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9hkxeia9.swift:31:9: error: invalid redeclaration of 'gradesArrayCopyCopy'\n\
    \    var gradesArrayCopyCopy = gradesArrayCopyCopy\n        ^\n/tmp/tmp9hkxeia9.swift:29:9:\
    \ note: 'gradesArrayCopyCopy' previously declared here\n    var gradesArrayCopyCopy\
    \ = gradesArrayCopy\n        ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for i in\
    \ grades {\n        if i > 3.0 {\n            gradesArray.append(\"A+\")\n   \
    \     } else if i > 2.0 {\n            gradesArray.append(\"B\")\n        } else\
    \ if i > 1.0 {\n            gradesArray.append(\"C\")\n        } else if i > 0.7\
    \ {\n            gradesArray.append(\"D\")\n        } else if i > 0.3 {\n    \
    \        gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    F\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvfkpxd39/tmpvfkpxd39.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb15e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb15b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb15b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb15b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfkpxd39                        0x000055cedea3d7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002adb1606e460 __libc_start_main +
    245

    6    tmpvfkpxd39                        0x000055cedea3d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp73sl23_f/tmp73sl23_f.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c7aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c7798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c7798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c77977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73sl23_f                        0x0000558fdd4267a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b86c7c8d460 __libc_start_main +
    245

    6    tmp73sl23_f                        0x0000558fdd4262c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 3.0 {\n        letterGrade\
    \ = \"E\"\n    } else {\n        if gpa < 3.3 {\n            letterGrade = \"\
    D-\"\n        } else if gpa < 3.7 {\n            letterGrade = \"C+\"\n      \
    \  } else if gpa < 4.0 {\n            letterGrade = \"B+\"\n        } else if\
    \ gpa < 4.3 {\n            letterGrade = \"B-\"\n        } else if gpa < 4.7 {\n\
    \            letterGrade = \"A+\"\n        } else if gpa < 5.0 {\n           \
    \ letterGrade = \"A\"\n        } else if gpa < 5.3 {\n            letterGrade\
    \ = \"A-\"\n        } else if gpa < 5.7 {\n            letterGrade = \"B\"\n \
    \       } else if gpa < 6.0 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa < 6.3 {\n            letterGrade = \"C\"\n        } else if gpa < 6.7\
    \ {\n            letterGrade = \"C-\"\n        } else if gpa < 7.0 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa < 7.3 {\n            letterGrade\
    \ = \"D+\"\n        } else if gpa < 7.7 {\n            letterGrade = \"D+\"\n\
    \        } else if gpa < 8.0 {\n            letterGrade = \"D-\"\n        } else\
    \ {\n            letterGrade = \"D\"\n        }\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpouido_l6.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 2 {\n        return letterGrades\n    }\n    \n    let gpa = grades.reduce(0,\
    \ combine: +)\n    \n    if gpa < 3.0 {\n        letterGrades.append(\"E\")\n\
    \        return letterGrades\n    }\n    \n    let gpa = gpa - 3.0\n    \n   \
    \ if gpa < 2.0 {\n        letterGrades.append(\"D+\")\n        return letterGrades\n\
    \    }\n    \n    let gpa = gpa - 2.0\n    \n    if gpa < 1.7 {\n        letterGrades.append(\"\
    C\")\n        return letterGrades\n    }\n    \n    let gpa = gpa - 1.7\n    \n\
    \    if gpa < 1.0 {\n        letterGrades.append(\"B-\")\n        return letterGrades\n\
    \    }\n    \n    let gpa = gpa - 1.0\n    \n    if gpa < 0.7 {\n        letterGrades.append(\"\
    B\")\n        return letterGrades\n    }\n    \n    let gpa = gpa - 0.7\n    \n\
    \    if gpa < 0.3 {\n        letterGrades.append(\"B-\")\n        return letterGrades\n\
    \    }\n    \n    let gpa = gpa - 0.3\n    \n    if gpa < 0.1 {\n        letterGrades.append(\"\
    B\")\n        return letterGrades\n    }\n    \n    let gpa = gpa - 0.1\n    \n\
    \    if gpa < 0.0 {\n        letterGrades.append(\"B\")\n        return letterGrades\n\
    \    }\n    \n    letterGrades.append(\"B\")\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkus6r8yk.swift:31:28: error: extraneous argument label 'combine:'\
    \ in call\n    let gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // The\
    \ first letter grade is always A+\n    letterGrades.append(\"A+\")\n    \n   \
    \ // The second letter grade is always B\n    if grades.contains(3.7) {\n    \
    \    letterGrades.append(\"B\")\n    }\n    \n    // The third letter grade is\
    \ always C- \n    if grades.contains(3.3) {\n        letterGrades.append(\"C-\"\
    )\n    }\n    \n    // The fourth letter grade is always C\n    if grades.contains(3.0)\
    \ {\n        letterGrades.append(\"C\")\n    }\n    \n    // The fifth letter\
    \ grade is always A-\n    if grades.contains(2.7) {\n        letterGrades.append(\"\
    A-\")\n    }\n    \n    // The sixth letter grade is always B\n    if grades.contains(2.3)\
    \ {\n        letterGrades.append(\"B\")\n    }\n    \n    // The seventh letter\
    \ grade is always B-\n    if grades.contains(2.0) {\n        letterGrades.append(\"\
    B-\")\n    }\n    \n    // The eighth letter grade is always C+\n    if grades.contains(1.7)\
    \ {\n        letterGrades.append(\"C+\")\n    }\n    \n    // The ninth letter\
    \ grade is always C\n    if grades.contains(1.3) {\n        letterGrades.append(\"\
    C\")\n    }\n    \n    // The tenth letter grade is always D+\n    if grades.contains(1.0)\
    \ {\n        letterGrades.append(\"D+\")\n    }\n    \n    // The eleventh letter\
    \ grade is always D\n    if grades.contains(0.7) {\n        letterGrades.append(\"\
    D\")\n    }\n    \n    // The twelfth letter grade is always D-\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"D-\")\n    }\n    \n    // The last letter\
    \ grade is always E\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    E\")\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplyvm46np/tmplyvm46np.swift:106: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b7dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b4d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b4d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b4d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyvm46np                        0x0000559f098e1736 <unavailable> + 5942

    5    libc.so.6                          0x00002ac22b9cb460 __libc_start_main +
    245

    6    tmplyvm46np                        0x0000559f098e1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    \n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.7 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 1.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.7 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcu70wspk.swift:100:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpcu70wspk.swift:29:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpcu70wspk.swift:100:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpcu70wspk.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpcu70wspk.swift:79:13: warning: expression of type '[Double]' is unused\n\
    \            grades\n            ^~~~~~\n/tmp/tmpcu70wspk.swift:83:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpcu70wspk.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndexMax' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var gradeIndex = 0\n    while gpa\
    \ > 0 {\n        let gpa = gpa / 4.0\n        let letterGrade = letterGrade.uppercased()\n\
    \        gradesArray.append(letterGrade)\n        gpa -= gpa\n        gradeIndex\
    \ += 1\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa4l9ksw1.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades[0]\n\
    \    var gpaIndex = 0\n    for grade in grades {\n        if gpa > grade {\n \
    \           gpaIndex += 1\n            gpa = grade\n        } else {\n       \
    \     gradeLetters.append(gradeLetters[gpaIndex])\n            gpaIndex = 0\n\
    \            gpa = grade\n        }\n    }\n    gradeLetters.append(gradeLetters[gpaIndex])\n\
    \    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b13de854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13de54b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13de54b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13de54b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13de54abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b13de34afc3 <unavailable> + 188355

    6    tmppyvntd1w                        0x00005615da8f524d <unavailable> + 8781

    7    tmppyvntd1w                        0x00005615da8f470d <unavailable> + 5901

    8    libc.so.6                          0x00002b13dea40460 __libc_start_main +
    245

    9    tmppyvntd1w                        0x00005615da8f43c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa > 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa > 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa > 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa > 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa > 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa > 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa > 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa > 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa > 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa > 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa >\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa > 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9_yj8ba.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"E\"\n    for grade in gradesArray {\n        if\
    \ grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"E\"\n  \
    \      } else if grade == currentGrade {\n            currentLetterGrade = \"\
    D-\"\n        } else if grade < currentGrade {\n            currentLetterGrade\
    \ = \"D+\"\n        }\n    }\n    letterGrades.append(currentLetterGrade)\n  \
    \  return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpy5wz65o_/tmpy5wz65o_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5027ffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5027cf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5027cf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5027cf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5wz65o_                        0x000055ecb6d5f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b50281e6460 __libc_start_main +
    245

    6    tmpy5wz65o_                        0x000055ecb6d5f3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaString = String(format: \"%.1f\", gpa)\n    \n    if\
    \ gpa < 3.0 {\n        letterGrades.append(\"E\")\n        return letterGrades\n\
    \    }\n    \n    if gpa < 3.3 {\n        letterGrades.append(\"D-\")\n      \
    \  return letterGrades\n    }\n    \n    if gpa < 3.7 {\n        letterGrades.append(\"\
    C+\")\n        return letterGrades\n    }\n    \n    if gpa < 4.0 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if gpa < 4.3 {\n        letterGrades.append(\"\
    B+\")\n        return letterGrades\n    }\n    \n    if gpa < 4.7 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if gpa < 5.0 {\n        letterGrades.append(\"\
    A-\")\n        return letterGrades\n    }\n    \n    if gpa < 5.3 {\n        letterGrades.append(\"\
    A+\")\n        return letterGrades\n    }\n    \n    if gpa < 5.7 {\n        letterGrades.append(\"\
    A-\")\n        return letterGrades\n    }\n    \n    if gpa < 6.0 {\n        letterGrades.append(\"\
    A\")\n        return letterGrades\n    }\n    \n    if gpa < 6.3 {\n        letterGrades.append(\"\
    A+\")\n        return letterGrades\n    }\n    \n    if gpa < 6.7 {\n        letterGrades.append(\"\
    A-\")\n        return letterGrades\n    }\n    \n    if gpa < 7.0 {\n        letterGrades.append(\"\
    B\")\n        return letterGrades\n    }\n    \n    if gpa < 7.3 {\n        letterGrades.append(\"\
    B+\")\n        return letterGrades\n    }\n    \n    if gpa < 7.7 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if gpa < 8.0 {\n        letterGrades.append(\"\
    C\")\n        return letterGrades\n    }\n    \n    if gpa < 8.3 {\n        letterGrades.append(\"\
    C+\")\n        return letterGrades\n    }\n    \n    if gpa < 8.7 {\n        letterGrades.append(\"\
    C-\")\n        return letterGrades\n    }\n    \n    if gpa < 9.0 {\n        letterGrades.append(\"\
    D\")\n        return letterGrades\n    }\n    \n    if gpa < 9.3 {\n        letterGrades.append(\"\
    D\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbs8jx0x9.swift:125:29: error: unterminated string literal\n   \
    \     letterGrades.append(\"D\n                            ^\n/tmp/tmpbs8jx0x9.swift:146:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpbs8jx0x9.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpbs8jx0x9.swift:26:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpbs8jx0x9.swift:27:27: error: incorrect argument labels in\
    \ call (have 'format:_:', expected 'repeating:count:')\n    var gpaString = String(format:\
    \ \"%.1f\", gpa)\n                          ^~~~~~~\n                        \
    \   repeating       count: \n/tmp/tmpbs8jx0x9.swift:125:29: error: missing argument\
    \ for parameter #1 in call\n        letterGrades.append(\"D\n                \
    \            ^\n                            <#String#>\nSwift.Array:6:37: note:\
    \ 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n/tmp/tmpbs8jx0x9.swift:129:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGradeForGPA(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx2mvwy85.swift:27:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(grade)\n                \
    \          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // The\
    \ first letter grade is A+\n    letterGrades.append(\"A+\")\n    \n    // The\
    \ second letter grade is B\n    if grades[0] > 3.7 { \n        letterGrades.append(\"\
    B\")\n    }\n    \n    // The third letter grade is C- \n    if grades[1] > 3.3\
    \ { \n        letterGrades.append(\"C-\")\n    }\n    \n    // The fourth letter\
    \ grade is C\n    if grades[2] > 3.0 { \n        letterGrades.append(\"C\")\n\
    \    }\n    \n    // The fifth letter grade is A-\n    if grades[3] > 2.7 { \n\
    \        letterGrades.append(\"A-\")\n    }\n    \n    // The sixth letter grade\
    \ is B\n    if grades[4] > 2.3 { \n        letterGrades.append(\"B+\")\n    }\n\
    \    \n    // The seventh letter grade is B\n    if grades[5] > 2.0 { \n     \
    \   letterGrades.append(\"B\")\n    }\n    \n    // The eighth letter grade is\
    \ B-\n    if grades[6] > 1.7 { \n        letterGrades.append(\"B-\")\n    }\n\
    \    \n    // The ninth letter grade is C\n    if grades[7] > 1.3 { \n       \
    \ letterGrades.append(\"C+\")\n    }\n    \n    // The tenth letter grade is C\n\
    \    if grades[8] > 1.0 { \n        letterGrades.append(\"C\")\n    }\n    \n\
    \    // The eleventh letter grade is C-\n    if grades[9] > 0.7 { \n        letterGrades.append(\"\
    C-\")\n    }\n    \n    // The twelfth letter grade is D+\n    if grades[10] >\
    \ 0.0 { \n        letterGrades.append(\"D+\")\n    }\n    \n    // The thirteenth\
    \ letter grade is D\n    if grades[11] > 0.7 { \n        letterGrades.append(\"\
    D\")\n    }\n    \n    // The fourteenth letter grade is D-\n    if grades[12]\
    \ > 0.3 { \n        letterGrades.append(\"D-\")\n    }\n    \n    // The fifteenth\
    \ letter grade is E\n    if grades[13] > 0.0 { \n        letterGrades.append(\"\
    E\")\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afb6e107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb6ddfe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afb6ddfe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afb6ddfe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afb6ddfdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afb6dbfdf44 <unavailable> + 188228

    6    tmpxfl_2i4s                        0x0000558fd802d16f <unavailable> + 8559

    7    tmpxfl_2i4s                        0x0000558fd802c54d <unavailable> + 5453

    8    libc.so.6                          0x00002afb6e2f3460 __libc_start_main +
    245

    9    tmpxfl_2i4s                        0x0000558fd802c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetterGradeIndex = 0\n    var currentLetterGradeIndex2\
    \ = 1\n    var currentLetterGradeIndex3 = 2\n    var currentLetterGradeIndex4\
    \ = 3\n    var currentLetterGradeIndex5 = 4\n    var currentLetterGradeIndex6\
    \ = 5\n    var currentLetterGradeIndex7 = 6\n    var currentLetterGradeIndex8\
    \ = 7\n    var currentLetterGradeIndex9 = 8\n    var currentLetterGradeIndex10\
    \ = 9\n    var currentLetterGradeIndex11 = 10\n    var currentLetterGradeIndex12\
    \ = 11\n    var currentLetterGradeIndex13 = 12\n    var currentLetterGradeIndex14\
    \ = 13\n    var currentLetterGradeIndex15 = 14\n    var currentLetterGradeIndex16\
    \ = 15\n    var currentLetterGradeIndex17 = 16\n    var currentLetterGradeIndex18\
    \ = 17\n    var currentLetterGradeIndex19 = 18\n    var currentLetterGradeIndex20\
    \ = 19\n    var currentLetterGradeIndex21 = 20\n    var currentLetterGradeIndex22\
    \ = 21\n    var currentLetterGradeIndex23 = 22\n    var currentLetterGradeIndex24\
    \ = 23\n    var currentLetterGradeIndex25 = 24\n    var currentLetterGradeIndex26\
    \ = 25\n    var currentLetterGradeIndex27 = 26\n    var currentLetterGradeIndex28\
    \ = 27\n    var currentLetterGradeIndex29 = 28\n    var currentLetterGradeIndex30\
    \ = 29\n    var currentLetterGradeIndex31 = 30\n    var currentLetterGradeIndex32\
    \ = 31\n    var currentLetterGradeIndex33 = 32\n    var currentLetterGradeIndex34\
    \ = 33\n    var currentLetterGradeIndex35 = 34\n    var currentLetterGradeIndex36\
    \ = 35\n    var currentLetterGradeIndex37 = 36\n    var currentLetterGradeIndex38\
    \ = 37\n    var currentLetterGradeIndex39 = 38\n    var currentLetterGradeIndex40\
    \ = 39\n    var currentLetterGradeIndex41 = 40\n    var currentLetterGradeIndex42\
    \ = 41\n    var currentLetterGradeIndex43 = 42\n    var currentLetterGradeIndex44\
    \ = 43\n    var currentLetterGradeIndex45 = 44\n    var currentLetterGradeIndex46\
    \ = 45\n    var currentLetterGradeIndex47 = 46\n    var currentLetterGradeIndex48\
    \ = 47\n    var currentLetterGradeIndex49 = 48\n    var currentLetterGradeIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp16kkwlph.swift:78:9: error: type annotation missing in pattern\n\
    \    var currentLetterGradeIndex\n        ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var letterGrades = [String]()\n\
    \    var totalGrade = gradesArray[0]\n    var gradeIndex = 0\n    var grade =\
    \ totalGrade\n    var letterGrade = \"\"\n    while gradeIndex < gradesArrayCount\
    \ {\n        grade = gradesArray[gradeIndex]\n        if grade > totalGrade {\n\
    \            letterGrade = \"D-\"\n            break\n        } else if grade\
    \ < totalGrade {\n            letterGrade = \"D+\"\n            break\n      \
    \  }\n        letterGrade = \"D\"\n        totalGrade = totalGrade - grade\n \
    \       gradeIndex += 1\n    }\n    for gradeIndex in 0..<gradesArrayCount {\n\
    \        grade = gradesArray[gradeIndex]\n        if grade > totalGrade {\n  \
    \          letterGrade = \"D-\"\n            break\n        } else if grade <\
    \ totalGrade {\n            letterGrade = \"D+\"\n            break\n        }\n\
    \        letterGrade = \"D\"\n        totalGrade = totalGrade - grade\n      \
    \  gradeIndex += 1\n    }\n    for gradeIndex in 0..<gradesArrayCount {\n    \
    \    grade = gradesArray[gradeIndex]\n        if grade > totalGrade {\n      \
    \      letterGrade = \"D-\"\n            break\n        } else if grade < totalGrade\
    \ {\n            letterGrade = \"D+\"\n            break\n        }\n        letterGrade\
    \ = \"D\"\n        totalGrade = totalGrade - grade\n        gradeIndex += 1\n\
    \    }\n    for gradeIndex in 0..<gradesArrayCount {\n        grade = gradesArray[gradeIndex]\n\
    \        if grade > totalGrade {\n            letterGrade = \"D-\"\n         \
    \   break\n        } else if grade < totalGrade {\n            letterGrade = \"\
    D+\"\n            break\n        }\n        letterGrade = \"D\"\n        totalGrade\
    \ = totalGrade - grade\n        gradeIndex += 1\n    }\n    for gradeIndex in\
    \ 0..<gradesArrayCount {\n        grade = gradesArray[gradeIndex]\n        if\
    \ grade > totalGrade {\n            letterGrade = \"D-\"\n            break\n\
    \        } else if grade < totalGrade {\n            letterGrade = \"D+\"\n  \
    \          break\n        }\n        letterGrade = \"D\"\n        totalGrade =\
    \ totalGrade - grade\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7tqle7s9.swift:117:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp7tqle7s9.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp7tqle7s9.swift:57:20: error: left side of mutating operator isn't mutable:\
    \ 'gradeIndex' is a 'let' constant\n        gradeIndex += 1\n        ~~~~~~~~~~\
    \ ^\n/tmp/tmp7tqle7s9.swift:70:20: error: left side of mutating operator isn't\
    \ mutable: 'gradeIndex' is a 'let' constant\n        gradeIndex += 1\n       \
    \ ~~~~~~~~~~ ^\n/tmp/tmp7tqle7s9.swift:83:20: error: left side of mutating operator\
    \ isn't mutable: 'gradeIndex' is a 'let' constant\n        gradeIndex += 1\n \
    \       ~~~~~~~~~~ ^\n/tmp/tmp7tqle7s9.swift:100:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.0 {\n            letterGrades.append(\"A\")\n\
    \        } else if gpa > 1.7 {\n            letterGrades.append(\"A-\")\n    \
    \    } else if gpa > 1.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"B-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"C+\")\n        } else if gpa > -0.3\
    \ {\n            letterGrades.append(\"C\")\n        } else if gpa > -0.7 {\n\
    \            letterGrades.append(\"C-\")\n        } else if gpa > -1.0 {\n   \
    \         letterGrades.append(\"D+\")\n        } else if gpa > -1.7 {\n      \
    \      letterGrades.append(\"D\")\n        } else if gpa > -2.0 {\n          \
    \  letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvkgn0yqq/tmpvkgn0yqq.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b15897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b1558eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b1558e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b1558d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkgn0yqq                        0x000055e94df5c856 <unavailable> + 6230

    5    libc.so.6                          0x00002b1b15a83460 __libc_start_main +
    245

    6    tmpvkgn0yqq                        0x000055e94df5c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4rplc2ks.swift:89:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4rplc2ks.swift:25:9: warning: variable 'gradesArray' was never used;\
    \ consider replacing with '_' or removing it\n    var gradesArray: [String] =\
    \ []\n        ^~~~~~~~~~~\n        _\n/tmp/tmp4rplc2ks.swift:26:9: warning: initialization\
    \ of variable 'gradesArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:27:9: warning: initialization of variable 'gradesArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:28:9:\
    \ warning: initialization of variable 'gradesArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:30:9: warning: initialization of variable 'gradesArrayIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex6 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:32:9: warning: initialization\
    \ of variable 'gradesArrayIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex7 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:33:9: warning: initialization of variable 'gradesArrayIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:34:9:\
    \ warnin"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\
    \n        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 2.0\
    \ {\n            letterGrade = \"B+\"\n        } else if gpa > 1.7 {\n       \
    \     letterGrade = \"B\"\n        } else if gpa > 1.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > -0.3 {\n      \
    \      letterGrade = \"D\"\n        } else if gpa > -0.7 {\n            letterGrade\
    \ = \"D-\"\n        } else if gpa > -1.0 {\n            letterGrade = \"E\"\n\
    \        } else {\n            letterGrade = \"D-\"\n        }\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpf32fayte/tmpf32fayte.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41142d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4113fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4113fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4113fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf32fayte                        0x00005588b7b707a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b41144bc460 __libc_start_main +
    245

    6    tmpf32fayte                        0x00005588b7b702c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = grade\n        switch letter {\n       \
    \ case .A:\n            letterGrade = \"A+\"\n        case .B:\n            letterGrade\
    \ = \"B\"\n        case .C:\n            letterGrade = \"C+\"\n        case .D:\n\
    \            letterGrade = \"D+\"\n        case .E:\n            letterGrade =\
    \ \"E\"\n        default:\n            letterGrade = \"D-\"\n        }\n     \
    \   gradesArray.append(letterGrade)\n    }\n    return gradesArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjzit0x6b.swift:28:16: error: cannot find 'letter' in scope\n  \
    \      switch letter {\n               ^~~~~~\n/tmp/tmpjzit0x6b.swift:30:13: error:\
    \ cannot assign to value: 'letterGrade' is a 'let' constant\n            letterGrade\
    \ = \"A+\"\n            ^~~~~~~~~~~\n/tmp/tmpjzit0x6b.swift:27:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let letterGrade = grade\n       \
    \ ^~~\n        var\n/tmp/tmpjzit0x6b.swift:30:27: error: cannot assign value of\
    \ type 'String' to type 'Double'\n            letterGrade = \"A+\"\n         \
    \                 ^~~~\n/tmp/tmpjzit0x6b.swift:32:13: error: cannot assign to\
    \ value: 'letterGrade' is a 'let' constant\n            letterGrade = \"B\"\n\
    \            ^~~~~~~~~~~\n/tmp/tmpjzit0x6b.swift:27:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let letterGrade = grade\n        ^~~\n        var\n\
    /tmp/tmpjzit0x6b.swift:32:27: error: cannot assign value of type 'String' to type\
    \ 'Double'\n            letterGrade = \"B\"\n                          ^~~\n/tmp/tmpjzit0x6b.swift:34:13:\
    \ error: cannot assign to value: 'letterGrade' is a 'let' constant\n         \
    \   letterGrade = \"C+\"\n            ^~~~~~~~~~~\n/tmp/tmpjzit0x6b.swift:27:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let letterGrade = grade\n\
    \        ^~~\n        var\n/tmp/tmpjzit0x6b.swift:34:27: error: cannot assign\
    \ value of type 'String' to type 'Double'\n            letterGrade = \"C+\"\n\
    \                          ^~~~\n/tmp/tmpjzit0x6b.swift:36:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"D+\"\
    \n            ^~~~~~~~~~~\n/tmp/tmpjzit0x6b.swift:27:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = grade\n        ^~~\n   \
    \     var\n/tmp/tmpjzit0x6b.swift:36:27: error: cannot assign value of type 'String'\
    \ to type 'Double'\n            letterGrade = \"D+\"\n                       \
    \   ^~~~\n/tmp/tmpjzit0x6b.swift:38:13: error: cannot assign to value: 'letterGrade'\
    \ is a 'let' constant\n            letterGrade = \"E\"\n            ^~~~~~~~~~~\n\
    /tmp/tmpjzit0x6b.swift:27:9: note: change 'let' t"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var gradeIndex = 0\n\
    \    var letterGradeIndex = 0\n    var grade = grades[gradeIndex]\n    var letterGrade\
    \ = \"\"\n    while grade != 0.0 {\n        if gradeIndex == gradesArrayCount\
    \ {\n            letterGrades.append(letterGrade)\n            break\n       \
    \ }\n        letterGrade = \"\"\n        if grade >= 3.0 {\n            letterGrade\
    \ = \"A+\"\n            gradeIndex += 1\n            if gradeIndex == gradesArrayCount\
    \ {\n                letterGrades.append(letterGrade)\n                break\n\
    \            }\n            grade = grades[gradeIndex]\n        } else if grade\
    \ >= 2.0 {\n            letterGrade = \"A\"\n            gradeIndex += 1\n   \
    \         if gradeIndex == gradesArrayCount {\n                letterGrades.append(letterGrade)\n\
    \                break\n            }\n            grade = grades[gradeIndex]\n\
    \        } else if grade >= 1.0 {\n            letterGrade = \"B+\"\n        \
    \    gradeIndex += 1\n            if gradeIndex == gradesArrayCount {\n      \
    \          letterGrades.append(letterGrade)\n                break\n         \
    \   }\n            grade = grades[gradeIndex]\n        } else if grade >= 0.7\
    \ {\n            letterGrade = \"B\"\n            gradeIndex += 1\n          \
    \  if gradeIndex == gradesArrayCount {\n                letterGrades.append(letterGrade)\n\
    \                break\n            }\n            grade = grades[gradeIndex]\n\
    \        } else if grade >= 0.3 {\n            letterGrade = \"B-\"\n        \
    \    gradeIndex += 1\n            if gradeIndex == gradesArrayCount {\n      \
    \          letterGrades.append(letterGrade)\n                break\n         \
    \   }\n            grade = grades[gradeIndex]\n        } else if grade >= 0.0\
    \ {\n            letterGrade = \"C+\"\n            gradeIndex += 1\n         \
    \   if gradeIndex == gradesArrayCount {\n                letterGrades.append(letterGrade)\n\
    \                break\n            }\n            grade = grades[gradeIndex]\n\
    \        } else if grade >= -0.3 {\n            letterGrade = \"C\"\n        \
    \    gradeIndex += 1\n            if gradeIndex == gradesArrayCount {\n      \
    \          letterGrades.append(letterGrade)\n                break\n         \
    \   }\n            grade = grades[gradeIndex]\n        } else if grade >= -0.7\
    \ {\n            letterGrade = \"C-\"\n            gradeIndex += 1\n         \
    \   if gradeIndex == gradesArrayCount {\n                letterGrades.append(letterGrade)\n\
    \                break\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu9ml24k.swift:121:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpvu9ml24k.swift:94:33:\
    \ note: to match this opening '{'\n        } else if grade >= -0.7 {\n       \
    \                         ^\n/tmp/tmpvu9ml24k.swift:121:66: error: expected '}'\
    \ at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmpvu9ml24k.swift:32:24: note: to match this opening '{'\n\
    \    while grade != 0.0 {\n                       ^\n/tmp/tmpvu9ml24k.swift:121:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpvu9ml24k.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpvu9ml24k.swift:104:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpvu9ml24k.swift:25:9:\
    \ warning: initialization of variable 'gradesArray' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArray = grades.sorted()\n\
    \    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpvu9ml24k.swift:26:9: warning: variable 'gradesArrayCount'\
    \ was never mutated; consider changing to 'let' constant\n    var gradesArrayCount\
    \ = grades.count\n    ~~~ ^\n    let\n/tmp/tmpvu9ml24k.swift:29:9: warning: initialization\
    \ of variable 'letterGradeIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var letterGradeIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else {\n        let gpaRange = 4.0 - gpa\n        let gpaRangeInt\
    \ = Int(gpaRange)\n        let gpaRangeDouble = gpaRange * Double(gpaRangeInt)\n\
    \        \n        if gpaRangeInt < 3 {\n            letterGrade = \"D-\"\n  \
    \      } else if gpaRangeInt < 6 {\n            letterGrade = \"C+\"\n       \
    \ } else if gpaRangeInt < 9 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpaRangeInt < 12 {\n            letterGrade = \"B+\"\n        } else if gpaRangeInt\
    \ < 15 {\n            letterGrade = \"A-\"\n        } else if gpaRangeInt < 18\
    \ {\n            letterGrade = \"A+\"\n        } else {\n            letterGrade\
    \ = \"A\"\n        }\n    }\n    \n    letterGrades.append(letterGrade)\n    \n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkh7g51x3.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    for grade in grades {\n        let letterGrade = letterGradeForGPA(gpa,\
    \ grade)\n        letterGrades.append(letterGrade)\n        gpa -= grade\n   \
    \ }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdjjfnh4f.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpdjjfnh4f.swift:28:27:\
    \ error: cannot find 'letterGradeForGPA' in scope\n        let letterGrade = letterGradeForGPA(gpa,\
    \ grade)\n                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmplmqtp6pl/tmplmqtp6pl.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b109f0ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b109edc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b109edc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b109edc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmqtp6pl                        0x0000555fdcf7a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b109f2b8460 __libc_start_main +
    245

    6    tmplmqtp6pl                        0x0000555fdcf7a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    var gpaIndex2 = 0\n    while gpa > 0\
    \ {\n        let gpaIndex = Int(gpaIndex2)\n        let gpaIndex2 = gpaIndex +\
    \ 1\n        let gpaIndex3 = gpaIndex2 + 1\n        let gpaIndex4 = gpaIndex3\
    \ + 1\n        let gpaIndex5 = gpaIndex4 + 1\n        let gpaIndex6 = gpaIndex5\
    \ + 1\n        let gpaIndex7 = gpaIndex6 + 1\n        let gpaIndex8 = gpaIndex7\
    \ + 1\n        let gpaIndex9 = gpaIndex8 + 1\n        let gpaIndex10 = gpaIndex9\
    \ + 1\n        let gpaIndex11 = gpaIndex10 + 1\n        let gpaIndex12 = gpaIndex11\
    \ + 1\n        let gpaIndex13 = gpaIndex12 + 1\n        let gpaIndex14 = gpaIndex13\
    \ + 1\n        let gpaIndex15 = gpaIndex14 + 1\n        let gpaIndex16 = gpaIndex15\
    \ + 1\n        let gpaIndex17 = gpaIndex16 + 1\n        let gpaIndex18 = gpaIndex17\
    \ + 1\n        let gpaIndex19 = gpaIndex18 + 1\n        let gpaIndex20 = gpaIndex19\
    \ + 1\n        let gpaIndex21 = gpaIndex20 + 1\n        let gpaIndex22 = gpaIndex21\
    \ + 1\n        let gpaIndex23 = gpaIndex22 + 1\n        let gpaIndex24 = gpaIndex23\
    \ + 1\n        let gpaIndex25 = gpaIndex24 + 1\n        let gpaIndex26 = gpaIndex25\
    \ + 1\n        let gpaIndex27 = gpaIndex26 + 1\n        let gpaIndex28 = gpaIndex27\
    \ + 1\n        let gpaIndex29 = gpaIndex28 + 1\n        let gpaIndex30 = gpaIndex29\
    \ + 1\n        let gpaIndex31 = gpaIndex30 + 1\n        let gpaIndex32 = gpaIndex31\
    \ + 1\n        let gpaIndex33 = gpaIndex32 + 1\n        let gpaIndex34 = gpaIndex33\
    \ + 1\n        let gpaIndex35 = gpaIndex34 + 1\n        let gpaIndex36 = gpaIndex35\
    \ + 1\n        let gpaIndex37 = gpaIndex36 + 1\n        let gpaIndex38 = gpaIndex37\
    \ + 1\n        let gpaIndex39 = gpaIndex38 + 1\n        let gpaIndex40 = gpaIndex39\
    \ + 1\n        let gpaIndex41 = gpaIndex40 + 1\n        let gpaIndex42 = gpaIndex41\
    \ + 1\n        let gpaIndex4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeuinlnul.swift:93:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpeuinlnul.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpeuinlnul.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpeuinlnul.swift:72:13: error: type annotation\
    \ missing in pattern\n        let gpaIndex4\n            ^\n/tmp/tmpeuinlnul.swift:76:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayLength\
    \ = gradesArray.count\n    var letterGrades = [String]()\n    var letterGrade\
    \ = \"\"\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n\
    \    var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade = \"\"\n   \
    \ var gpaIndex = 0\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var\
    \ letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n   \
    \ var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade = \"\"\n   \
    \ var gpaIndex = 0\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var\
    \ letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n   \
    \ var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade = \"\"\n   \
    \ var gpaIndex = 0\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var\
    \ letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n   \
    \ var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade = \"\"\n   \
    \ var gpaIndex = 0\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var\
    \ letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n   \
    \ var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade = \"\"\n   \
    \ var gpaIndex = 0\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var\
    \ letterGrade = \"\"\n    var gpaIndex = 0\n    var gpa = gradesArray[0]\n   \
    \ var gpaIndex = 0\n    var letterGrade = \"\"\n    var gpaIndex = 0\n    var\
    \ gpa = gradesArray[0]\n    var g\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpik8i6lnf.swift:32:9: error: invalid redeclaration of 'letterGrade'\n\
    \    var letterGrade = \"\"\n        ^\n/tmp/tmpik8i6lnf.swift:28:9: note: 'letterGrade'\
    \ previously declared here\n    var letterGrade = \"\"\n        ^\n/tmp/tmpik8i6lnf.swift:33:9:\
    \ error: invalid redeclaration of 'gpaIndex'\n    var gpaIndex = 0\n        ^\n\
    /tmp/tmpik8i6lnf.swift:30:9: note: 'gpaIndex' previously declared here\n    var\
    \ gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:34:9: error: invalid redeclaration\
    \ of 'gpa'\n    var gpa = gradesArray[0]\n        ^\n/tmp/tmpik8i6lnf.swift:29:9:\
    \ note: 'gpa' previously declared here\n    var gpa = gradesArray[0]\n       \
    \ ^\n/tmp/tmpik8i6lnf.swift:35:9: error: invalid redeclaration of 'gpaIndex'\n\
    \    var gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:30:9: note: 'gpaIndex'\
    \ previously declared here\n    var gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:36:9:\
    \ error: invalid redeclaration of 'letterGrade'\n    var letterGrade = \"\"\n\
    \        ^\n/tmp/tmpik8i6lnf.swift:28:9: note: 'letterGrade' previously declared\
    \ here\n    var letterGrade = \"\"\n        ^\n/tmp/tmpik8i6lnf.swift:37:9: error:\
    \ invalid redeclaration of 'gpaIndex'\n    var gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:30:9:\
    \ note: 'gpaIndex' previously declared here\n    var gpaIndex = 0\n        ^\n\
    /tmp/tmpik8i6lnf.swift:38:9: error: invalid redeclaration of 'gpa'\n    var gpa\
    \ = gradesArray[0]\n        ^\n/tmp/tmpik8i6lnf.swift:29:9: note: 'gpa' previously\
    \ declared here\n    var gpa = gradesArray[0]\n        ^\n/tmp/tmpik8i6lnf.swift:39:9:\
    \ error: invalid redeclaration of 'gpaIndex'\n    var gpaIndex = 0\n        ^\n\
    /tmp/tmpik8i6lnf.swift:30:9: note: 'gpaIndex' previously declared here\n    var\
    \ gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:40:9: error: invalid redeclaration\
    \ of 'letterGrade'\n    var letterGrade = \"\"\n        ^\n/tmp/tmpik8i6lnf.swift:28:9:\
    \ note: 'letterGrade' previously declared here\n    var letterGrade = \"\"\n \
    \       ^\n/tmp/tmpik8i6lnf.swift:41:9: error: invalid redeclaration of 'gpaIndex'\n\
    \    var gpaIndex = 0\n        ^\n/tmp/tmpik8i6lnf.swift:30:9: note: 'gpaIndex' "
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetter = \"\"\n    var currentLetterIndex = 0\n    var\
    \ currentLetterIndex2 = 0\n    var currentLetterIndex3 = 0\n    var currentLetterIndex4\
    \ = 0\n    var currentLetterIndex5 = 0\n    var currentLetterIndex6 = 0\n    var\
    \ currentLetterIndex7 = 0\n    var currentLetterIndex8 = 0\n    var currentLetterIndex9\
    \ = 0\n    var currentLetterIndex10 = 0\n    var currentLetterIndex11 = 0\n  \
    \  var currentLetterIndex12 = 0\n    var currentLetterIndex13 = 0\n    var currentLetterIndex14\
    \ = 0\n    var currentLetterIndex15 = 0\n    var currentLetterIndex16 = 0\n  \
    \  var currentLetterIndex17 = 0\n    var currentLetterIndex18 = 0\n    var currentLetterIndex19\
    \ = 0\n    var currentLetterIndex20 = 0\n    var currentLetterIndex21 = 0\n  \
    \  var currentLetterIndex22 = 0\n    var currentLetterIndex23 = 0\n    var currentLetterIndex24\
    \ = 0\n    var currentLetterIndex25 = 0\n    var currentLetterIndex26 = 0\n  \
    \  var currentLetterIndex27 = 0\n    var currentLetterIndex28 = 0\n    var currentLetterIndex29\
    \ = 0\n    var currentLetterIndex30 = 0\n    var currentLetterIndex31 = 0\n  \
    \  var currentLetterIndex32 = 0\n    var currentLetterIndex33 = 0\n    var currentLetterIndex34\
    \ = 0\n    var currentLetterIndex35 = 0\n    var currentLetterIndex36 = 0\n  \
    \  var currentLetterIndex37 = 0\n    var currentLetterIndex38 = 0\n    var currentLetterIndex39\
    \ = 0\n    var currentLetterIndex40 = 0\n    var currentLetterIndex41 = 0\n  \
    \  var currentLetterIndex42 = 0\n    var currentLetterIndex43 = 0\n    var currentLetterIndex44\
    \ = 0\n    var currentLetterIndex45 = 0\n    var currentLetterIndex46 = 0\n  \
    \  var currentLetterIndex47 = 0\n    var currentLetterIndex48 = 0\n    var currentLetterIndex49\
    \ = 0\n    var currentLetterIndex50 = 0\n    var currentLetterIndex51 = 0\n  \
    \  var currentLetterIndex52 = 0\n    var currentLetterIndex53 = 0\n    var currentLetterIndex54\
    \ = 0\n    var currentLetterIndex55 = 0\n    var currentLetterIndex56 = 0\n  \
    \  var currentLetterIndex57 = 0\n    var currentLetterIndex58 = 0\n    var currentLetterIndex59\
    \ = 0\n    var currentLetterIndex60 = 0\n    var currentLetterIndex61 = 0\n  \
    \  var currentLetterIndex62 = 0\n    var currentLetterIndex63 = 0\n    var currentLetterIndex64\
    \ = 0\n    var currentLetterIndex65 = 0\n    var currentLetterIndex66 = 0\n  \
    \  var currentLetterIndex67 = 0\n    var currentLetter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp3g8xz5j.swift:97:9: error: type annotation missing in pattern\n\
    \    var currentLetter\n        ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var gradeIndex = 0\n    while gpa\
    \ > 0 {\n        let gpa = gpa / 10\n        let letterGrade = letterGrade.uppercased()\n\
    \        if gpa > 3 {\n            letterGrade = \"A+\"\n        } else if gpa\
    \ > 2.7 {\n            letterGrade = \"A\"\n        } else if gpa > 2.3 {\n  \
    \          letterGrade = \"A-\"\n        } else if gpa > 1.9 {\n            letterGrade\
    \ = \"B+\"\n        } else if gpa > 1.7 {\n            letterGrade = \"B\"\n \
    \       } else if gpa > 1.3{\n            letterGrade = \"B-\"\n        } else\
    \ if gpa > 1.0{\n            letterGrade = \"C+\"\n        } else if gpa > 0.7{\n\
    \            letterGrade = \"C\"\n        } else if gpa > 0.0{\n            letterGrade\
    \ = \"C-\"\n        } else {\n            letterGrade = \"D+\"\n        }\n  \
    \      gradesArray.append(letterGrade)\n        gpa -= gpa\n        gradeIndex\
    \ += 1\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ptczts5.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp4ptczts5.swift:33:13:\
    \ error: cannot assign to value: 'letterGrade' is a 'let' constant\n         \
    \   letterGrade = \"A+\"\n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:35:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"A\"\
    \n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:37:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"A-\"\
    \n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:39:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"B+\"\
    \n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:41:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"B\"\
    \n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:43:13: error: cannot assign\
    \ to value: 'letterGrade' is a 'let' constant\n            letterGrade = \"B-\"\
    \n            ^~~~~~~~~~~\n/tmp/tmp4ptczts5.swift:31:9: note: change 'let' to\
    \ 'var' to make it mutable\n        let letterGrade = letterGrade.uppercased()\n\
    \        ^~~\n        var\n/tmp/tmp4ptczts5.swift:45:13: error: cannot as"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3\
    \ = gradesArray\n    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5\
    \ = gradesArray\n    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7\
    \ = gradesArray\n    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9\
    \ = gradesArray\n    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11\
    \ = gradesArray\n    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13\
    \ = gradesArray\n    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15\
    \ = gradesArray\n    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17\
    \ = gradesArray\n    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19\
    \ = gradesArray\n    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21\
    \ = gradesArray\n    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23\
    \ = gradesArray\n    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25\
    \ = gradesArray\n    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27\
    \ = gradesArray\n    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29\
    \ = gradesArray\n    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31\
    \ = gradesArray\n    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33\
    \ = gradesArray\n    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35\
    \ = gradesArray\n    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37\
    \ = gradesArray\n    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39\
    \ = gradesArray\n    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41\
    \ = gradesArray\n    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43\
    \ = gradesArray\n    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45\
    \ = gradesArray\n    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47\
    \ = gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rahwn9n.swift:25:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmp0rahwn9n.swift:26:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp0rahwn9n.swift:27:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:28:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:29:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:30:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp0rahwn9n.swift:31:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:32:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:33:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:34:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [Double]()\n    for grade in\
    \ grades {\n        gradesArray.append(grade)\n    }\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopyCount = gradesArray.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopySum = gradesArrayCopy.sum\n    var gradesArrayCopySumIndex\
    \ = 0\n    var gradesArrayCopySumArray = [Double]()\n    var gradesArrayCopySumArrayIndex\
    \ = 0\n    var gradesArrayCopySumArrayCopy = [Double]()\n    var gradesArrayCopySumArrayCopyIndex\
    \ = 0\n    var gradesArrayCopySumArrayCopyCount = 0\n    var gradesArrayCopySumArrayCopySum\
    \ = 0\n    var gradesArrayCopySumArrayCopySumIndex = 0\n    var gradesArrayCopySumArrayCopySumArray\
    \ = [Double]()\n    var gradesArrayCopySumArrayCopySumArrayIndex = 0\n    var\
    \ gradesArrayCopySumArrayCopySumArrayCopy = [Double]()\n    var gradesArrayCopySumArrayCopySumArrayCopyIndex\
    \ = 0\n    var gradesArrayCopySumArrayCopySumArrayCopyCount = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySum\
    \ = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumIndex = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArray\
    \ = [Double]()\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayIndex =\
    \ 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopy = [Double]()\n\
    \    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopyIndex = 0\n    var\
    \ gradesArrayCopySumArrayCopySumArrayCopySumArrayCopyCount = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySum\
    \ = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumIndex = 0\n\
    \    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArray = [Double]()\n\
    \    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArrayIndex = 0\n\
    \    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArrayCopy = [Double]()\n\
    \    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArrayCopyIndex\
    \ = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArrayCopyCount\
    \ = 0\n    var gradesArrayCopySumArrayCopySumArrayCopySumArrayCopySumArrayCopySum\
    \ = 0\n    var gradesArrayCopySumArrayCopySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwvlounbf.swift:32:46: error: value of type '[Double]' has no member\
    \ 'sum'\n    var gradesArrayCopySum = gradesArrayCopy.sum\n                  \
    \           ~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpwvlounbf.swift:61:9: error: type annotation\
    \ missing in pattern\n    var gradesArrayCopySumArrayCopySum\n        ^\n"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade >= 3.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n \
    \       } else if grade >= 1.7 && grade < 2.3 {\n            letterGrades.append(\"\
    C+\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letterGrades.append(\"\
    C\")\n        } else if grade >= 1.0 {\n            letterGrades.append(\"D+\"\
    )\n        } else if grade >= 0.7 {\n            letterGrades.append(\"D\")\n\
    \        } else if grade < 0.7 || grade > 1.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvia9vknk/tmpvia9vknk.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accc625ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc5f51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accc5f51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accc5f507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvia9vknk                        0x0000559771b787f6 <unavailable> + 6134

    5    libc.so.6                          0x00002accc6446460 __libc_start_main +
    245

    6    tmpvia9vknk                        0x0000559771b78319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayCopy:\
    \ [Double] = grades\n    \n    for i in 0..<gradesArrayCopy.count {\n        let\
    \ grade = gradesArrayCopy[i]\n        \n        if grade > 3.0 {\n           \
    \ gradesArray.append(\"B+\")\n        } else if grade > 2.7 {\n            gradesArray.append(\"\
    B\")\n        } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n\
    \        } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n   \
    \     } else if grade > 1.0 {\n            gradesArray.append(\"C\")\n       \
    \ } else if grade > 0.7 {\n            gradesArray.append(\"D+\")\n        } else\
    \ if grade > 0.3 {\n            gradesArray.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            gradesArray.append(\"D-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    A\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqgg3szd5/tmpqgg3szd5.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafdbab4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafdb7abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafdb7ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafdb7aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgg3szd5                        0x000055e7e184a876 <unavailable> + 6262

    5    libc.so.6                          0x00002aafdbca0460 __libc_start_main +
    245

    6    tmpqgg3szd5                        0x000055e7e184a399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    for grade\
    \ in grades {\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 2.0 {\n            letterGrade = \"A\"\n        } else if\
    \ gpa > 1.7 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.0 {\n\
    \            letterGrade = \"B+\"\n        } else if gpa > 0.7 {\n           \
    \ letterGrade = \"B\"\n        } else if gpa > 0.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 0.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > -0.3 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > -0.7 {\n            letterGrade = \"C-\"\n        } else if gpa > -1.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > -1.7 {\n      \
    \      letterGrade = \"D\"\n        } else if gpa > -2.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gradesArray.append(letterGrade)\n        gpa = grade - gpa\n        gradesArrayIndex\
    \ += 1\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqgd85am9/tmpqgd85am9.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95a134c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad959e2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad959e2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad959e2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgd85am9                        0x0000561d13903856 <unavailable> + 6230

    5    libc.so.6                          0x00002ad95a320460 __libc_start_main +
    245

    6    tmpqgd85am9                        0x0000561d13903379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > 0.0 {\n\
    \            gradesArray.append(\"D\")\n        } else if grade > 0.0 {\n    \
    \        gradesArray.append(\"D-\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpf2bf3kz_/tmpf2bf3kz_.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae362c5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae362954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae362954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3629537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2bf3kz_                        0x0000557147cd07a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae362e49460 __libc_start_main +
    245

    6    tmpf2bf3kz_                        0x0000557147cd02c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B+\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade =\
    \ \"A-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"A\"\n    } else if\
    \ gpa < 0.7 {\n        letterGrade = \"A+\"\n    } else {\n        letterGrade\
    \ = \"A\"\n    }\n    \n    letterGrades.append(letterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5mvg7l_b.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    if gpa < 4.0 {\n      \
    \  letterGrade = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\
    \n    } else if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa <\
    \ 3.0 {\n        letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"\
    C-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa\
    \ < 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpngfdv4yg.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopyCount = gradesArray.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopyIndexCount = 0\n    var gradesArrayCopyIndexMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexMin = 0\n    var gradesArrayCopyIndexSum\
    \ = 0\n    var gradesArrayCopyIndexSumMax = 0\n    var gradesArrayCopyIndexSumMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n    var gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzocwwg1u.swift:37:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMaxMinMin'\n\
    \    var gradesArrayCopyIndexSumMaxMinMin = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9:\
    \ note: 'gradesArrayCopyIndexSumMaxMinMin' previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:38:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMaxMinMin'\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9: note: 'gradesArrayCopyIndexSumMaxMinMin'\
    \ previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n   \
    \     ^\n/tmp/tmpzocwwg1u.swift:39:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMaxMinMin'\n\
    \    var gradesArrayCopyIndexSumMaxMinMin = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9:\
    \ note: 'gradesArrayCopyIndexSumMaxMinMin' previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:40:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMaxMinMin'\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9: note: 'gradesArrayCopyIndexSumMaxMinMin'\
    \ previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n   \
    \     ^\n/tmp/tmpzocwwg1u.swift:41:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMaxMinMin'\n\
    \    var gradesArrayCopyIndexSumMaxMinMin = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9:\
    \ note: 'gradesArrayCopyIndexSumMaxMinMin' previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:42:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMaxMinMin'\n    var gradesArrayCopyIndexSumMaxMinMin\
    \ = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9: note: 'gradesArrayCopyIndexSumMaxMinMin'\
    \ previously declared here\n    var gradesArrayCopyIndexSumMaxMinMin = 0\n   \
    \     ^\n/tmp/tmpzocwwg1u.swift:43:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMaxMinMin'\n\
    \    var gradesArrayCopyIndexSumMaxMinMin = 0\n        ^\n/tmp/tmpzocwwg1u.swift:36:9:\
    \ note: 'gradesArrayCopyIndexSumMaxMinMin' previously declared h"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var currentGrade = totalGrade / Double(grades.count)\n\
    \    var currentLetterGrade = \"\"\n    for grade in grades {\n        if grade\
    \ > currentGrade {\n            currentGrade = grade\n            currentLetterGrade\
    \ = \"D-\"\n        } else if grade < currentGrade {\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"D+\"\n        } else {\n       \
    \     currentLetterGrade = \"D\"\n        }\n        letterGrades.append(currentLetterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu0d5cfti.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Initialize\
    \ variables\n    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    //\
    \ Loop through grades\n    for grade in grades {\n        // If gpa is greater\
    \ than or equal to 3.7\n        if gpa >= 3.7 {\n            // If gpa is greater\
    \ than or equal to 3.3\n            if gpa >= 3.3 {\n                // If gpa\
    \ is greater than or equal to 3.0\n                if gpa >= 3.0 {\n         \
    \           // If gpa is greater than or equal to 2.7\n                    if\
    \ gpa >= 2.7 {\n                        // If gpa is greater than or equal to\
    \ 2.3\n                        if gpa >= 2.3 {\n                            //\
    \ If gpa is greater than or equal to 2.0\n                            if gpa >=\
    \ 2.0 {\n                                // If gpa is greater than or equal to\
    \ 1.7\n                                if gpa >= 1.7 {\n                     \
    \               // If gpa is greater than or equal to 1.0\n                  \
    \                  if gpa >= 1.0 {\n                                        //\
    \ If gpa is greater than or equal to 0.7\n                                   \
    \     if gpa >= 0.7 {\n                                            // If gpa is\
    \ greater than or equal to 0.0\n                                            if\
    \ gpa >= 0.0 {\n                                                // If gpa is less\
    \ than or equal to 0.0\n                                                if gpa\
    \ < 0.0 {\n                                                    // If gpa is less\
    \ than or equal to 0.0\n                                                    letterGrade\
    \ = \"E\"\n                                                }\n               \
    \                             }\n                                        }\n \
    \                                   }\n                                }\n   \
    \                         }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        \n        // Append letter\
    \ grade to letterGrades array\n        letterGrades.append(letterGrade)\n    \
    \    \n        // Increment gpa\n        gpa += grade\n    }\n    \n    // Return\
    \ letterGrades array\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpp8yrojej/tmpp8yrojej.swift:93: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83876dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad838464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad838464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8384637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8yrojej                        0x000056007a394856 <unavailable> + 6230

    5    libc.so.6                          0x00002ad838959460 __libc_start_main +
    245

    6    tmpp8yrojej                        0x000056007a394379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    for grade in gradesArray {\n        if grade\
    \ > currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentGrade = grade\n            currentLetterGrade = \"\"\n       \
    \ }\n        currentLetterGrade += String(grade - currentGrade)\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpx4th35l3/tmpx4th35l3.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafa0f99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafa0c90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafa0c90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafa0c8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4th35l3                        0x000055e862526a06 <unavailable> + 6662

    5    libc.so.6                          0x00002aafa1185460 __libc_start_main +
    245

    6    tmpx4th35l3                        0x000055e862526529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n    \
    \    } else if grade > 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade > 1.3 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > -0.3 {\n\
    \            gradesArray.append(\"D\")\n        } else if grade > -0.7 {\n   \
    \         gradesArray.append(\"D-\")\n        } else if grade > -1.0 {\n     \
    \       gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    F\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa6o8j0k6/tmpa6o8j0k6.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b857796cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8577663b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8577663988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85776627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6o8j0k6                        0x000055f0be3cf7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8577b58460 __libc_start_main +
    245

    6    tmpa6o8j0k6                        0x000055f0be3cf2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesString += \"\
    A+\"\n        case 3.7:\n            gradesString += \"A\"\n        case 3.3:\n\
    \            gradesString += \"A-\"\n        case 3.0:\n            gradesString\
    \ += \"B+\"\n        case 2.7:\n            gradesString += \"B\"\n        case\
    \ 2.3:\n            gradesString += \"B-\"\n        case 2.0:\n            gradesString\
    \ += \"C+\"\n        case 1.7:\n            gradesString += \"C\"\n        case\
    \ 1.3:\n            gradesString += \"C-\"\n        case 1.0:\n            gradesString\
    \ += \"D+\"\n        case 0.7:\n            gradesString += \"D\"\n        case\
    \ 0.0:\n            gradesString += \"D-\"\n        case 0.1:\n            gradesString\
    \ += \"E\"\n        default:\n            gradesString += \"E\"\n        }\n \
    \   }\n    return gradesString.characters.split{$0 == \" \"}.map(String.init).map(String.init).map(String.init).map(String.init)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplop_l9sj.swift:58:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return gradesString.characters.split{$0 == \" \"}.map(String.init).map(String.init).map(String.init).map(String.init)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014822
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex\
    \ = gpaIndex % 4\n        let letterGrade = gpaIndex == 0 ? \"A+\" :\n       \
    \     gpaIndex == 1 ? \n                \"A\" : \n                gpaIndex ==\
    \ 2 ? \n                    \"A-\" : \n                    gpaIndex == 3 ? \n\
    \                        \"B+\" : \n                        gpaIndex == 4 ? \n\
    \                            \"B\" : \n                                gpaIndex\
    \ == 5 ? \n                                    \"B-\" : \n                   \
    \                     gpaIndex == 6 ? \n                                     \
    \       \"C+\" : \n                                                gpaIndex ==\
    \ 7 ? \n                                                    \"C\" : \n       \
    \                                                 gpaIndex == 8 ? \n         \
    \                                                   \"C-\" : \n              \
    \                                                  gpaIndex == 9 ? \n        \
    \                                                            \"D+\" : \n     \
    \                                                                   gpaIndex ==\
    \ 10 ? \n                                                                    \
    \        \"D\" : \n                                                          \
    \                      gpaIndex == 11 ? \n                                   \
    \                                                 \"D-\" : \n                \
    \                                                                        gpaIndex\
    \ == 12 ? \n                                                                 \
    \                           \"E\" : \"\"\n        letterGrades.append(letterGrade)\n\
    \        gpa -= grades[gpaIndex]\n        gpaIndex += 1\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptcymk1gd.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmptcymk1gd.swift:57:18:\
    \ error: left side of mutating operator isn't mutable: 'gpaIndex' is a 'let' constant\n\
    \        gpaIndex += 1\n        ~~~~~~~~ ^\n/tmp/tmptcymk1gd.swift:29:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let gpaIndex = gpaIndex %\
    \ 4\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        switch i {\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        case 0.1:\n            gradesArray.append(\"D-\")\n        case\
    \ 0.2:\n            gradesArray.append(\"D\")\n        case 0.3:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.4:\n            gradesArray.append(\"\
    D\")\n        case 0.5:\n            gradesArray.append(\"C+\")\n        case\
    \ 0.6:\n            gradesArray.append(\"C\")\n        case 0.7:\n           \
    \ gradesArray.append(\"C\")\n        case 0.8:\n            gradesArray.append(\"\
    C\")\n        case 0.9:\n            gradesArray.append(\"C\")\n        case 1.0:\n\
    \            gradesArray.append(\"C\")\n        case 1.1:\n            gradesArray.append(\"\
    C\")\n        case 1.2:\n            gradesArray.append(\"C\")\n        case 1.3:\n\
    \            gradesArray.append(\"C\")\n        case 1.4:\n            gradesArray.append(\"\
    C\")\n        case 1.5:\n            gradesArray.append(\"C\")\n        case 1.6:\n\
    \            gradesArray.append(\"C\")\n        case 1.7:\n            gradesArray.append(\"\
    C\")\n        case 1.8:\n            gradesArray.append(\"C\")\n        case 1.9:\n\
    \            gradesArray.append(\"C\")\n        case 2.0:\n            gradesArray.append(\"\
    C\")\n        case 2.1:\n            gradesArray.append(\"C\")\n        case 2.2:\n\
    \            gradesArray.append(\"C\")\n        case 2.3:\n            gradesArray.append(\"\
    C\")\n        case 2.4:\n            gradesArray.append(\"C\")\n        case 2.5:\n\
    \            gradesArray.append(\"C\")\n        case 2.6:\n            gradesArray.append(\"\
    C\")\n        case 2.7:\n            gradesArray.append(\"C\")\n        case 2.8:\n\
    \            gradesArray.append(\"C\")\n        case 2.9:\n            gradesArray.append(\"\
    C\")\n        case 3.0:\n            gradesArray.append(\"C\")\n        case 3.1:\n\
    \            gradesArray.append(\"C\")\n        case 3.2:\n            gradesArray.append(\"\
    C\")\n        case 3.3:\n            gradesArray.append(\"C\")\n        case 3.4:\n\
    \            gradesArray.append(\"C\")\n        case 3.5:\n            gradesArray.append(\"\
    C\")\n        case 3.6:\n            gradesArray.append(\"C\")\n        case 3.7:\n\
    \            gradesArray.append(\"C\")\n        case 3.8:\n            gradesArray.append(\"\
    C\")\n        case 3.9:\n            gradesArray.append(\"C\")\n        case 4.0:\n\
    \            gradesArray.append(\"C\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppg8njc_4.swift:131:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppg8njc_4.swift:27:21:\
    \ note: to match this opening '{'\n    for i in grades {\n                   \
    \ ^\n/tmp/tmppg8njc_4.swift:131:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppg8njc_4.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmppg8njc_4.swift:28:9: error: switch must be exhaustive\n        switch\
    \ i {\n        ^\n/tmp/tmppg8njc_4.swift:28:9: note: do you want to add a default\
    \ clause?\n        switch i {\n        ^\n/tmp/tmppg8njc_4.swift:114:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var gpaSumSquare = grades.reduce(0, combine:\
    \ *)\n    var gpaSumSquare = grades.reduce(0, combine: *)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: *)\n    var g\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy5gw1q_t.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpy5gw1q_t.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpy5gw1q_t.swift:28:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:29:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:30:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:31:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:32:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:33:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:34:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: *)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpy5gw1q_t.swift:35:37: error: extraneous argument label\
    \ 'comb"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if grade > gpa {\n            gradesArray.append(String(grade\
    \ - gpa))\n            gpa = grade\n        } else {\n            gradesArray.append(String(grade\
    \ - gpa))\n        }\n    }\n    gradesArray.append(String(gpa))\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmom74kjr/tmpmom74kjr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaa2e6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaa2b64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaa2b64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaa2b637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmom74kjr                        0x000055781ff14916 <unavailable> + 6422

    5    libc.so.6                          0x00002acaa3059460 __libc_start_main +
    245

    6    tmpmom74kjr                        0x000055781ff14439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprcb8v2c_.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmprcb8v2c_.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = GPARange(gpa: gpa)\n    let gpaRanges = gpaRange.ranges\n\
    \    for range in gpaRanges {\n        let letterGrade = range.letterGrade\n \
    \       letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9g3w4i5o.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp9g3w4i5o.swift:27:20:\
    \ error: cannot find 'GPARange' in scope\n    let gpaRange = GPARange(gpa: gpa)\n\
    \                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: +)\n    var gpaAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverage = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n    var gpaSumSquareAverageSquare = \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeo4ya3n9.swift:50:36: error: expected initial value after '='\n\
    \    var gpaSumSquareAverageSquare = \n                                   ^\n\
    /tmp/tmpeo4ya3n9.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpeo4ya3n9.swift:27:31: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSum = grades.reduce(0, combine:\
    \ +)\n                              ^   ~~~~~~~~~\n                          \
    \        \n/tmp/tmpeo4ya3n9.swift:28:35: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                  ^   ~~~~~~~~~\n                           \
    \           \n/tmp/tmpeo4ya3n9.swift:29:37: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumSquare = grades.reduce(0, combine: +)\n             \
    \                       ^   ~~~~~~~~~\n                                      \
    \  \n/tmp/tmpeo4ya3n9.swift:30:41: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaAverageSquare = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                        ^   ~~~~~~~~~\n                     \
    \                       \n/tmp/tmpeo4ya3n9.swift:31:44: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumSquareAverage = grades.reduce(0, combine:\
    \ +) / Double(grades.count)\n                                           ^   ~~~~~~~~~\n\
    \                                               \n/tmp/tmpeo4ya3n9.swift:32:50:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareAverageSquare\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n                    \
    \                             ^   ~~~~~~~~~\n                                \
    \                     \n/tmp/tmpeo4ya3n9.swift:33:50: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumSquareAverageSquare = grades.reduce(0,\
    \ combine: +) / Double(grades.count)\n                                       \
    \       "
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaDouble = gpa\n    var letterGrade = \"\"\n    while\
    \ gpa > 0 {\n        gpa -= 1\n        letterGrade = \"\\(letterGrade)\\(gpaDouble)\"\
    \n        gpaDouble -= 1\n    }\n    letterGrades.append(letterGrade)\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp75wefe_3.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var gradeIndex = 0\n\
    \    var letterGrade = \"\"\n    var grade = grades[gradeIndex]\n    while grade\
    \ != 0 {\n        if grade < 3.0 {\n            letterGrade = \"A+\"\n       \
    \     gradeIndex += 1\n            letterGrades.append(letterGrade)\n        \
    \    grade = grades[gradeIndex]\n        } else if grade < 4.0 {\n           \
    \ letterGrade = \"A\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 5.0 {\n   \
    \         letterGrade = \"A-\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 6.0 {\n   \
    \         letterGrade = \"B+\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 7.0 {\n   \
    \         letterGrade = \"B\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 8.0 {\n   \
    \         letterGrade = \"B-\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 9.0 {\n   \
    \         letterGrade = \"C+\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 10.0 {\n  \
    \          letterGrade = \"C\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 11.0 {\n  \
    \          letterGrade = \"C-\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 12.0 {\n  \
    \          letterGrade = \"D+\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 13.0 {\n  \
    \          letterGrade = \"D\"\n            gradeIndex += 1\n            letterGrades.append(letterGrade)\n\
    \            grade = grades[gradeIndex]\n        } else if grade < 14.0 {\n  \
    \          letterGrade = \"D-\"\n            gradeIndex += 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5jyl54nc.swift:110:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp5jyl54nc.swift:31:22:\
    \ note: to match this opening '{'\n    while grade != 0 {\n                  \
    \   ^\n/tmp/tmp5jyl54nc.swift:110:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp5jyl54nc.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp5jyl54nc.swift:93:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmp5jyl54nc.swift:25:9: warning: initialization of variable\
    \ 'gradesArray' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var gradesArray = grades.sorted()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp5jyl54nc.swift:26:9:\
    \ warning: initialization of variable 'gradesArrayCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCount =\
    \ grades.count\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4rplc2ks.swift:89:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4rplc2ks.swift:25:9: warning: variable 'gradesArray' was never used;\
    \ consider replacing with '_' or removing it\n    var gradesArray: [String] =\
    \ []\n        ^~~~~~~~~~~\n        _\n/tmp/tmp4rplc2ks.swift:26:9: warning: initialization\
    \ of variable 'gradesArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:27:9: warning: initialization of variable 'gradesArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:28:9:\
    \ warning: initialization of variable 'gradesArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:30:9: warning: initialization of variable 'gradesArrayIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex6 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:32:9: warning: initialization\
    \ of variable 'gradesArrayIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex7 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:33:9: warning: initialization of variable 'gradesArrayIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:34:9:\
    \ warnin"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n \
    \       gpa = grade * 4\n        letterGrade = letterGrade + String(gpa)\n   \
    \ }\n    \n    gradesArray = gradesArray.sorted()\n    \n    for grade in gradesArray\
    \ {\n        if gpa > 3.0 {\n            letterGrade = letterGrade + \"+\"\n \
    \       } else if gpa > 2.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 2.3 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 1.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 1.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 0.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else {\n            letterGrade = letterGrade + \"-\"\n        }\n\
    \    }\n    \n    return letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnrolefkg.swift:56:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return letterGrade\n          \
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        let letterGrade = letterGrade(for: grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59ymy0g_.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(for: grade)\n\
    \                          ^\n/tmp/tmp59ymy0g_.swift:27:13: note: 'letterGrade'\
    \ declared here\n        let letterGrade = letterGrade(for: grade)\n         \
    \   ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0, +)\n \
    \   var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var gradesArrayMin\
    \ = gradesArray[0]\n    var gradesArrayMax = gradesArray[gradesArrayCount - 1]\n\
    \    var gradesArrayMinIndex = gradesArray.index(gradesArrayMin)\n    var gradesArrayMaxIndex\
    \ = gradesArray.index(gradesArrayMax)\n    var gradesArrayAverageIndex = gradesArray.index(gradesArrayAverage)\n\
    \    var gradesArraySumIndex = 0\n    var gradesArraySumIndex2 = 0\n    var gradesArraySumIndex3\
    \ = 0\n    var gradesArraySumIndex4 = 0\n    var gradesArraySumIndex5 = 0\n  \
    \  var gradesArraySumIndex6 = 0\n    var gradesArraySumIndex7 = 0\n    var gradesArraySumIndex8\
    \ = 0\n    var gradesArraySumIndex9 = 0\n    var gradesArraySumIndex10 = 0\n \
    \   var gradesArraySumIndex11 = 0\n    var gradesArraySumIndex12 = 0\n    var\
    \ gradesArraySumIndex13 = 0\n    var gradesArraySumIndex14 = 0\n    var gradesArraySumIndex15\
    \ = 0\n    var gradesArraySumIndex16 = 0\n    var gradesArraySumIndex17 = 0\n\
    \    var gradesArraySumIndex18 = 0\n    var gradesArraySumIndex19 = 0\n    var\
    \ gradesArraySumIndex20 = 0\n    var gradesArraySumIndex21 = 0\n    var gradesArraySumIndex22\
    \ = 0\n    var gradesArraySumIndex23 = 0\n    var gradesArraySumIndex24 = 0\n\
    \    var gradesArraySumIndex25 = 0\n    var gradesArraySumIndex26 = 0\n    var\
    \ gradesArraySumIndex27 = 0\n    var gradesArraySumIndex28 = 0\n    var gradesArraySumIndex29\
    \ = 0\n    var gradesArraySumIndex30 = 0\n    var gradesArraySumIndex31 = 0\n\
    \    var gradesArraySumIndex32 = 0\n    var gradesArraySumIndex33 = 0\n    var\
    \ gradesArraySumIndex34 = 0\n    var gradesArraySumIndex35 = 0\n    var gradesArraySumIndex36\
    \ = 0\n    var gradesArraySumIndex37 = 0\n    var gradesArraySumIndex38 = 0\n\
    \    var gradesArraySumIndex39 = 0\n    var gradesArraySumIndex40 = 0\n    var\
    \ gradesArraySumIndex41 = 0\n    var gradesArraySumIndex42 = 0\n    var gradesArraySumIndex43\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptlpec5uq.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmptlpec5uq.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmptlpec5uq.swift:31:49: error: missing argument label 'of:' in\
    \ call\n    var gradesArrayMinIndex = gradesArray.index(gradesArrayMin)\n    \
    \                                            ^\n                             \
    \                   of: \n/tmp/tmptlpec5uq.swift:32:49: error: missing argument\
    \ label 'of:' in call\n    var gradesArrayMaxIndex = gradesArray.index(gradesArrayMax)\n\
    \                                                ^\n                         \
    \                       of: \n/tmp/tmptlpec5uq.swift:33:47: error: no exact matches\
    \ in call to instance method 'index'\n    var gradesArrayAverageIndex = gradesArray.index(gradesArrayAverage)\n\
    \                                              ^\n/tmp/tmptlpec5uq.swift:33:47:\
    \ note: found candidate with type '(Int) -> Int'\n    var gradesArrayAverageIndex\
    \ = gradesArray.index(gradesArrayAverage)\n                                  \
    \            ^\n/tmp/tmptlpec5uq.swift:33:47: note: found candidate with type\
    \ '(Int) -> Int'\n    var gradesArrayAverageIndex = gradesArray.index(gradesArrayAverage)\n\
    \                                              ^\n/tmp/tmptlpec5uq.swift:33:47:\
    \ note: found candidate with type '(Double) -> Array<Double>.Index?' (aka '(Double)\
    \ -> Optional<Int>')\n    var gradesArrayAverageIndex = gradesArray.index(gradesArrayAverage)\n\
    \                                              ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = grades.count\n    var letterGradeIndex = 0\n\
    \    while gpa > 0 {\n        let gpaIndex = gpaIndex - 1\n        let gpa = grades[gpaIndex]\n\
    \        if gpa > 3.0 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 2.7 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 2.3 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 1.7 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 1.3 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 0.7 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 0.3 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 0.0 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 0.0 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 0.0 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n        }\n        if gpa > 0.0 {\n      \
    \      letterGrades.append(letterGrades[letterGradeIndex])\n            letterGradeIndex\
    \ += 1\n        }\n        if gpa > 0.0 {\n            letterGrades.append(letterGrades[\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgwxyw5p0.swift:90:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpgwxyw5p0.swift:110:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpgwxyw5p0.swift:29:19:\
    \ note: to match this opening '{'\n    while gpa > 0 {\n                  ^\n\
    /tmp/tmpgwxyw5p0.swift:110:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpgwxyw5p0.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpgwxyw5p0.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpgwxyw5p0.swift:89:45: error: missing\
    \ argument for parameter #1 in call\n            letterGrades.append(letterGrades[\n\
    \                                            ^\n                             \
    \               <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n\
    \    @inlinable public subscript(index: Int) -> Element { get set }\n        \
    \              ^\n/tmp/tmpgwxyw5p0.swift:93:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesString += \"\
    A+\"\n        case 3.7:\n            gradesString += \"A\"\n        case 3.3:\n\
    \            gradesString += \"A-\"\n        case 3.0:\n            gradesString\
    \ += \"B+\"\n        case 2.7:\n            gradesString += \"B\"\n        case\
    \ 2.3:\n            gradesString += \"B-\"\n        case 2.0:\n            gradesString\
    \ += \"C+\"\n        case 1.7:\n            gradesString += \"C\"\n        case\
    \ 1.3:\n            gradesString += \"C-\"\n        case 1.0:\n            gradesString\
    \ += \"D+\"\n        case 0.7:\n            gradesString += \"D\"\n        case\
    \ 0.0:\n            gradesString += \"D-\"\n        case 0.1:\n            gradesString\
    \ += \"E\"\n        default:\n            gradesString += \"E\"\n        }\n \
    \   }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_d_nuhv.swift:58:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return gradesString\n         \
    \  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalGradeDouble = totalGrade * Double(100)\n\
    \    var totalGradeDoubleString = String(totalGradeDouble)\n    var totalGradeDoubleDouble\
    \ = Double(totalGradeDoubleString)\n    var totalGradeDoubleDoubleDouble = Double(totalGradeDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \    var totalGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzdwdcixy.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpzdwdcixy.swift:30:47:\
    \ error: cannot find 'totalGradeDoubleDoubleString' in scope\n    var totalGradeDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleString)\n                                   \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzdwdcixy.swift:31:53: error:\
    \ cannot find 'totalGradeDoubleDoubleDoubleString' in scope\n    var totalGradeDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleString)\n                             \
    \                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzdwdcixy.swift:32:59:\
    \ error: cannot find 'totalGradeDoubleDoubleDoubleDoubleString' in scope\n   \
    \ var totalGradeDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleString)\n\
    \                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzdwdcixy.swift:33:65: error: cannot find 'totalGradeDoubleDoubleDoubleDoubleDoubleString'\
    \ in scope\n    var totalGradeDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleString)\n\
    \                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzdwdcixy.swift:34:71: error: cannot find 'totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleString'\
    \ in scope\n    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzdwdcixy.swift:35:77: error: cannot find 'totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString'\
    \ in scope\n    var totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double(totalGradeDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleString)\n\
    \                                            "
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 ..< gpa\n    for i in gpaRange {\n     \
    \   let gpa = Double(i)\n        let letterGrade = letterGradeForGPA(gpa)\n  \
    \      letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6itvdk3x.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp6itvdk3x.swift:30:27:\
    \ error: cannot find 'letterGradeForGPA' in scope\n        let letterGrade = letterGradeForGPA(gpa)\n\
    \                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    for grade in gradesArray {\n        if grade > currentGrade {\n\
    \            letterGrades.append(currentLetterGrade)\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"\"\n        }\n        currentLetterGrade\
    \ += String(grade - currentGrade)\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4rh3epzj/tmp4rh3epzj.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85d4efbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85d4bf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85d4bf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85d4bf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rh3epzj                        0x000055b3a262fa06 <unavailable> + 6662

    5    libc.so.6                          0x00002b85d50e7460 __libc_start_main +
    245

    6    tmp4rh3epzj                        0x000055b3a262f529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    \n    var letterGrades = [String]()\n    \n    if gradesArray.count\
    \ < 1 {\n        return letterGrades\n    }\n    \n    if gradesArray.count >\
    \ 1 {\n        gradesArray.removeFirst()\n    }\n    \n    if gradesArray.count\
    \ > 2 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 3 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 4 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 5 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 6 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 7 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 8 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 9 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 10 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 11 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 12 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 13 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 14 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 15 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 16 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 17 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 18 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 19 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 20 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 21 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > 22 {\n        gradesArray.removeLast()\n    }\n    \n    if gradesArray.count\
    \ > \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp2oa24tp0.swift:123:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            gradesString += \"A+\"\n        } else\
    \ if grade > 2.7 {\n            gradesString += \"B+\"\n        } else if grade\
    \ > 2.3 {\n            gradesString += \"B\"\n        } else if grade > 1.3 {\n\
    \            gradesString += \"C+\"\n        } else if grade > 0.7 {\n       \
    \     gradesString += \"C\"\n        } else if grade > 0.3 {\n            gradesString\
    \ += \"D+\"\n        } else if grade > 0.0 {\n            gradesString += \"D\"\
    \n        } else {\n            gradesString += \"E\"\n        }\n    }\n    return\
    \ gradesString.characters.split{$0 == \" \"}.map(String.init)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphsqjwo61.swift:45:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    return gradesString.characters.split{$0 == \" \"}.map(String.init)\n\
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \        \n        if gpa > 3.0 {\n            letterGrade = letterGrade + \"\
    +\"\n            gpa = gpa - 3.0\n        }\n        \n        if gpa > 2.7 {\n\
    \            letterGrade = letterGrade + \"+\"\n            gpa = gpa - 2.7\n\
    \        }\n        \n        if gpa > 2.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n            gpa = gpa - 2.3\n        }\n        \n        if gpa >\
    \ 1.7 {\n            letterGrade = letterGrade + \"-\"\n            gpa = gpa\
    \ - 1.7\n        }\n        \n        if gpa > 1.0 {\n            letterGrade\
    \ = letterGrade + \"+\"\n            gpa = gpa - 1.0\n        }\n        \n  \
    \      if gpa > 0.7 {\n            letterGrade = letterGrade + \"+\"\n       \
    \     gpa = gpa - 0.7\n        }\n        \n        if gpa > 0.0 {\n         \
    \   letterGrade = letterGrade + \"-\"\n            gpa = gpa - 0.0\n        }\n\
    \        \n        if gpa < 0.0 {\n            letterGrade = letterGrade + \"\
    -\"\n            gpa = gpa + 0.0\n        }\n        \n        if gpa < 0.7 {\n\
    \            letterGrade = letterGrade + \"+\"\n            gpa = gpa + 0.7\n\
    \        }\n        \n        if gpa < 1.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n            gpa = gpa + 1.0\n        }\n        \n        if gpa <\
    \ 2.3 {\n            letterGrade = letterGrade + \"-\"\n            gpa = gpa\
    \ + 2.3\n        }\n        \n        if gpa < 2.7 {\n            letterGrade\
    \ = letterGrade + \"+\"\n            gpa = gpa + 2.7\n        }\n        \n  \
    \      if gpa < 3.0 {\n            letterGrade = letterGrade + \"+\"\n       \
    \     gpa = gpa + 3.0\n        }\n        \n        if gpa < 3.7 {\n         \
    \   letterGrade = letterGrade + \"-\"\n            gpa = gpa + 3.7\n        }\n\
    \        \n        if gpa < 4.0 {\n            letterGrade = letterGrade + \"\
    +\"\n            gpa = gpa + 4.0\n        }\n        \n        if gpa < 4.7 {\n\
    \            letterGrade = letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4j4xxlcs.swift:130:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp4j4xxlcs.swift:29:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp4j4xxlcs.swift:130:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp4j4xxlcs.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp4j4xxlcs.swift:109:27: error: cannot find 'letter' in scope\n        \
    \    letterGrade = letter\n                          ^~~~~~\n/tmp/tmp4j4xxlcs.swift:113:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = \"A+\" if (gpa > 3.7) || (gpa\
    \ > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa >\
    \ 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"A\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"B+\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"B\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"B-\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"C+\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"C\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4jf1tnj0.swift:31:27: error: consecutive statements on a line must\
    \ be separated by ';'\n        letterGrade = \"A+\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n                 \
    \         ^\n                          ;\n/tmp/tmp4jf1tnj0.swift:31:192: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"A+\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                     ^\n/tmp/tmp4jf1tnj0.swift:32:191: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"A\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                    ^\n/tmp/tmp4jf1tnj0.swift:33:192: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"B+\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                     ^\n/tmp/tmp4jf1tnj0.swift:34:191: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"B\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                       "
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopyCopy = gradesArrayCopy\n    var gradesArrayCopyCopyCopy\
    \ = gradesArrayCopyCopy\n    var gradesArrayCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopy\n \
    \   var gradesArrayCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy =\
    \ gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy =\
    \ gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp3wi9c9a.swift:43:90: error: expected initial value after '='\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = \n                                                                       \
    \                  ^\n/tmp/tmpp3wi9c9a.swift:29:39: error: use of local variable\
    \ 'gradesArrayCopyCopyCopyCopy' before its declaration\n    var gradesArrayCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopy\n                                      ^\n/tmp/tmpp3wi9c9a.swift:29:9:\
    \ note: 'gradesArrayCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopy\n        ^\n/tmp/tmpp3wi9c9a.swift:30:43: error:\
    \ use of local variable 'gradesArrayCopyCopyCopyCopyCopy' before its declaration\n\
    \    var gradesArrayCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopy\n \
    \                                         ^\n/tmp/tmpp3wi9c9a.swift:30:9: note:\
    \ 'gradesArrayCopyCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopy\n        ^\n/tmp/tmpp3wi9c9a.swift:31:47:\
    \ error: use of local variable 'gradesArrayCopyCopyCopyCopyCopyCopy' before its\
    \ declaration\n    var gradesArrayCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopy\n\
    \                                              ^\n/tmp/tmpp3wi9c9a.swift:31:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopy\n        ^\n/tmp/tmpp3wi9c9a.swift:32:51:\
    \ error: use of local variable 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy' before\
    \ its declaration\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \                                                  ^\n/tmp/tmpp3wi9c9a.swift:33:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy\n        ^\n/tmp/tmpp3wi9c9a.swift:33:55:\
    \ error: cannot find 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy' in scope\n\
    \    "
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.1:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"E\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptt1ua5ce/tmptt1ua5ce.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace9c52ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace9c221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace9c221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace9c2207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt1ua5ce                        0x000055c977d017f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ace9c716460 __libc_start_main +
    245

    6    tmptt1ua5ce                        0x000055c977d01319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        let gpa = Double(i)\n        let letterGrade: String\n\
    \        \n        if gpa < 3.0 {\n            letterGrade = \"A+\"\n        }\
    \ else if gpa < 3.7 {\n            letterGrade = \"A\"\n        } else if gpa\
    \ < 4.0 {\n            letterGrade = \"A-\"\n        } else if gpa < 4.3 {\n \
    \           letterGrade = \"B+\"\n        } else if gpa < 4.6 {\n            letterGrade\
    \ = \"B\"\n        } else if gpa < 4.9 {\n            letterGrade = \"B-\"\n \
    \       } else if gpa < 5.0 {\n            letterGrade = \"C+\"\n        } else\
    \ if gpa < 5.3 {\n            letterGrade = \"C\"\n        } else if gpa < 5.6\
    \ {\n            letterGrade = \"C-\"\n        } else if gpa < 5.9 {\n       \
    \     letterGrade = \"D+\"\n        } else if gpa < 6.0 {\n            letterGrade\
    \ = \"D\"\n        } else if gpa < 6.3 {\n            letterGrade = \"D-\"\n \
    \       } else if gpa < 6.6 {\n            letterGrade = \"E\"\n        } else\
    \ {\n            letterGrade = \"D-\"\n        }\n        \n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpixn83gg9/tmpixn83gg9.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb59116c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb58e0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb58e0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb58e0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixn83gg9                        0x000055a0ae3137f6 <unavailable> + 6134

    5    libc.so.6                          0x00002abb59302460 __libc_start_main +
    245

    6    tmpixn83gg9                        0x000055a0ae313319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var gpa = totalGrade / Double(grades.count)\n\
    \    var letterGrade = \"\"\n    if gpa >= 3.0 {\n        letterGrade = \"A+\"\
    \n    } else if gpa >= 2.0 {\n        letterGrade = \"A\"\n    } else if gpa >=\
    \ 1.0 {\n        letterGrade = \"A-\"\n    } else if gpa >= 0.7 && gpa < 1.0 {\n\
    \        letterGrade = \"B+\"\n    } else if gpa >= 0.3 && gpa < 0.7 {\n     \
    \   letterGrade = \"B\"\n    } else if gpa >= 0.0 && gpa < 0.3 {\n        letterGrade\
    \ = \"B-\"\n    } else if gpa >= 0.0 && gpa < 0.0 {\n        letterGrade = \"\
    C+\"\n    } else if gpa >= 0.0 && gpa < 0.0 {\n        letterGrade = \"C\"\n \
    \   } else if gpa >= 0.0 && gpa < 0.0 {\n        letterGrade = \"C-\"\n    } else\
    \ if gpa >= 0.0 && gpa < 0.0 {\n        letterGrade = \"D+\"\n    } else if gpa\
    \ >= 0.0 && gpa < 0.0 {\n        letterGrade = \"D\"\n    } else if gpa >= 0.0\
    \ && gpa < 0.0 {\n        letterGrade = \"D-\"\n    } else if gpa >= 0.0 && gpa\
    \ < 0.0 {\n        letterGrade = \"E\"\n    } else {\n        letterGrade = \"\
    D-\"\n    }\n    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiea_he00.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    for grade in grades {\n        if gpa >= 3.0 {\n          \
    \  letterGrades.append(\"A+\")\n        } else if gpa >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if gpa >= 2.3 {\n            letterGrades.append(\"B-\")\n\
    \        } else if gpa >= 1.3 {\n            letterGrades.append(\"C+\")\n   \
    \     } else if gpa >= 0.7 {\n            letterGrades.append(\"C\")\n       \
    \ } else if gpa >= 0.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if gpa >= 0.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ gpa >= 0.0 {\n            letterGrades.append(\"D\")\n        } else if gpa\
    \ < 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n       \
    \     letterGrades.append(\"E\")\n        }\n        gpa -= grade\n    }\n   \
    \ return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_4n49jau.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 / 3.0\n    let gpaRange2 = gpaRange * 2.0\n\
    \    let gpaRange3 = gpaRange2 * 2.0\n    let gpaRange4 = gpaRange3 * 2.0\n  \
    \  let gpaRange5 = gpaRange4 * 2.0\n    let gpaRange6 = gpaRange5 * 2.0\n    let\
    \ gpaRange7 = gpaRange6 * 2.0\n    let gpaRange8 = gpaRange7 * 2.0\n    let gpaRange9\
    \ = gpaRange8 * 2.0\n    let gpaRange10 = gpaRange9 * 2.0\n    let gpaRange11\
    \ = gpaRange10 * 2.0\n    let gpaRange12 = gpaRange11 * 2.0\n    let gpaRange13\
    \ = gpaRange12 * 2.0\n    let gpaRange14 = gpaRange13 * 2.0\n    let gpaRange15\
    \ = gpaRange14 * 2.0\n    let gpaRange16 = gpaRange15 * 2.0\n    let gpaRange17\
    \ = gpaRange16 * 2.0\n    let gpaRange18 = gpaRange17 * 2.0\n    let gpaRange19\
    \ = gpaRange18 * 2.0\n    let gpaRange20 = gpaRange19 * 2.0\n    let gpaRange21\
    \ = gpaRange20 * 2.0\n    let gpaRange22 = gpaRange21 * 2.0\n    let gpaRange23\
    \ = gpaRange22 * 2.0\n    let gpaRange24 = gpaRange23 * 2.0\n    let gpaRange25\
    \ = gpaRange24 * 2.0\n    let gpaRange26 = gpaRange25 * 2.0\n    let gpaRange27\
    \ = gpaRange26 * 2.0\n    let gpaRange28 = gpaRange27 * 2.0\n    let gpaRange29\
    \ = gpaRange28 * 2.0\n    let gpaRange30 = gpaRange29 * 2.0\n    let gpaRange31\
    \ = gpaRange30 * 2.0\n    let gpaRange32 = gpaRange31 * 2.0\n    let gpaRange33\
    \ = gpaRange32 * 2.0\n    let gpaRange34 = gpaRange33 * 2.0\n    let gpaRange35\
    \ = gpaRange34 * 2.0\n    let gpaRange36 = gpaRange35 * 2.0\n    let gpaRange37\
    \ = gpaRange36 * 2.0\n    let gpaRange38 = gpaRange37 * 2.0\n    let gpaRange39\
    \ = gpaRange38 * 2.0\n    let gpaRange40 = gpaRange39 * 2.0\n    let gpaRange41\
    \ = gpaRange40 * 2.0\n    let gpaRange42 = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbu_zuuvm.swift:68:21: error: expected initial value after '='\n\
    \    let gpaRange42 = \n                    ^\n/tmp/tmpbu_zuuvm.swift:26:28: error:\
    \ extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"A+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"A\"\n    } else if gpa < 1.3 {\n        letterGrade = \"A-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"C+\"\n    } else {\n        letterGrade = \"\
    D\"\n    }\n    \n    letterGrades.append(letterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5nox70of.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesSorted = grades.sorted()\n    var gradesIndex\
    \ = 0\n    var letterGrades = [String]()\n    while gradesIndex < grades.count\
    \ {\n        let grade = grades[gradesIndex]\n        let gradeIndex = gradesSorted.firstIndex(where:\
    \ { $0 > grade })!\n        letterGrades.append(grades[gradeIndex].description)\n\
    \        gradesSorted.remove(at: gradeIndex)\n        gradesIndex += 1\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpo8my_kw3/tmpo8my_kw3.swift:30: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c51230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c50f27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c50f27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c50f2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c50f26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo8my_kw3                        0x000056439445d3ff <unavailable> + 9215

    6    tmpo8my_kw3                        0x000056439445c83d <unavailable> + 6205

    7    libc.so.6                          0x00002b0c5141c460 __libc_start_main +
    245

    8    tmpo8my_kw3                        0x000056439445c4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"E\"\n    }\n   \
    \ letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp16593blf.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 ... gpa\n    for grade in gpaRange {\n \
    \       let letterGrade = letterGrade(for: grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9ulsbb6.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpq9ulsbb6.swift:29:27:\
    \ error: use of local variable 'letterGrade' before its declaration\n        let\
    \ letterGrade = letterGrade(for: grade)\n                          ^\n/tmp/tmpq9ulsbb6.swift:29:13:\
    \ note: 'letterGrade' declared here\n        let letterGrade = letterGrade(for:\
    \ grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"A-\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"A+\"\n    } else if gpa < 1.3 {\n        letterGrade = \"\
    A\"\n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if gpa\
    \ < 0.7 {\n        letterGrade = \"C+\"\n    } else if gpa < 0.3 {\n        letterGrade\
    \ = \"B-\"\n    } else if gpa < 0.0 {\n        letterGrade = \"D+\"\n    } else\
    \ {\n        letterGrade = \"D\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplxb5vzqs.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.map { $0 }\n    var gradesArrayLength\
    \ = gradesArray.count\n    var letterGrades = [String]()\n    var totalGrade =\
    \ gradesArray[0]\n    var totalGradeIndex = gradesArray.index(of: totalGrade)\n\
    \    var totalGradeIndex2 = gradesArray.index(of: totalGrade, offsetBy: 1)\n \
    \   var totalGradeIndex3 = gradesArray.index(of: totalGrade, offsetBy: 2)\n  \
    \  var totalGradeIndex4 = gradesArray.index(of: totalGrade, offsetBy: 3)\n   \
    \ var totalGradeIndex5 = gradesArray.index(of: totalGrade, offsetBy: 4)\n    var\
    \ totalGradeIndex6 = gradesArray.index(of: totalGrade, offsetBy: 5)\n    var totalGradeIndex7\
    \ = gradesArray.index(of: totalGrade, offsetBy: 6)\n    var totalGradeIndex8 =\
    \ gradesArray.index(of: totalGrade, offsetBy: 7)\n    var totalGradeIndex9 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 8)\n    var totalGradeIndex10 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 9)\n    var totalGradeIndex11 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 10)\n    var totalGradeIndex12 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 11)\n    var totalGradeIndex13 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 12)\n    var totalGradeIndex14 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 13)\n    var totalGradeIndex15 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 14)\n    var totalGradeIndex16 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 15)\n    var totalGradeIndex17 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 16)\n    var totalGradeIndex18 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 17)\n    var totalGradeIndex19 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 18)\n    var totalGradeIndex20 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 19)\n    var totalGradeIndex21 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 20)\n    var totalGradeIndex22 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 21)\n    var total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeyp5js30.swift:29:39: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    var totalGradeIndex = gradesArray.index(of: totalGrade)\n\
    \                                      ^\n/tmp/tmpeyp5js30.swift:29:39: note:\
    \ use 'firstIndex(of:)' instead\n    var totalGradeIndex = gradesArray.index(of:\
    \ totalGrade)\n                                      ^~~~~\n                 \
    \                     firstIndex\n/tmp/tmpeyp5js30.swift:30:40: error: no exact\
    \ matches in call to instance method 'index'\n    var totalGradeIndex2 = gradesArray.index(of:\
    \ totalGrade, offsetBy: 1)\n                                       ^\n/tmp/tmpeyp5js30.swift:30:40:\
    \ note: candidate has partially matching parameter list (Int, offsetBy: Int)\n\
    \    var totalGradeIndex2 = gradesArray.index(of: totalGrade, offsetBy: 1)\n \
    \                                      ^\n/tmp/tmpeyp5js30.swift:30:40: note:\
    \ candidate has partially matching parameter list (Array<Double>.Index, offsetBy:\
    \ Int)\n    var totalGradeIndex2 = gradesArray.index(of: totalGrade, offsetBy:\
    \ 1)\n                                       ^\nSwift.Collection:3:28: note: candidate\
    \ '(Double) -> Array<Double>.Index?' (aka '(Double) -> Optional<Int>') requires\
    \ 1 argument, but 2 were provided\n    @inlinable public func index(of element:\
    \ Self.Element) -> Self.Index?\n                           ^\n/tmp/tmpeyp5js30.swift:30:40:\
    \ note: candidate has partially matching parameter list (Array<Double>.Index,\
    \ offsetBy: Int)\n    var totalGradeIndex2 = gradesArray.index(of: totalGrade,\
    \ offsetBy: 1)\n                                       ^\n/tmp/tmpeyp5js30.swift:30:40:\
    \ note: candidate has partially matching parameter list (Array<Double>.Index,\
    \ offsetBy: Int)\n    var totalGradeIndex2 = gradesArray.index(of: totalGrade,\
    \ offsetBy: 1)\n                                       ^\n/tmp/tmpeyp5js30.swift:31:40:\
    \ error: no exact matches in call to instance method 'index'\n    var totalGradeIndex3\
    \ = gradesArray.index(of: totalGrade, offsetBy: 2)\n                         \
    \              ^\n/tmp/tmpeyp5js30.swift:31:40: note: candidate"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa_2yhudn/tmpa_2yhudn.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3888c12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3888909b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3888909988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38889087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_2yhudn                        0x00005603d2e617f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b3888dfe460 __libc_start_main +
    245

    6    tmpa_2yhudn                        0x00005603d2e61319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        letterGrade = \"A+\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"A\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"B+\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"B\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"B-\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n        letterGrade\
    \ = \"C+\" if (gpa > 3.7) || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa\
    \ > 2.3) || (gpa > 2.0) || (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa >\
    \ 0.7) || (gpa > 0.0)\n        letterGrade = \"C\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxic8tq91.swift:30:27: error: consecutive statements on a line must\
    \ be separated by ';'\n        letterGrade = \"A+\" if (gpa > 3.7) || (gpa > 3.3)\
    \ || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) || (gpa > 1.7) ||\
    \ (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n                 \
    \         ^\n                          ;\n/tmp/tmpxic8tq91.swift:30:192: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"A+\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                     ^\n/tmp/tmpxic8tq91.swift:31:191: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"A\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                    ^\n/tmp/tmpxic8tq91.swift:32:192: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"B+\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                            \
    \                                                                            \
    \                                     ^\n/tmp/tmpxic8tq91.swift:33:191: error:\
    \ expected '{' after 'if' condition\n        letterGrade = \"B\" if (gpa > 3.7)\
    \ || (gpa > 3.3) || (gpa > 3.0) || (gpa > 2.7) || (gpa > 2.3) || (gpa > 2.0) ||\
    \ (gpa > 1.7) || (gpa > 1.3) || (gpa > 1.0) || (gpa > 0.7) || (gpa > 0.0)\n  \
    \                                                                       "
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade\
    \ in grades {\n        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbaz3c6io.swift:28:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpbaz3c6io.swift:28:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            letterGrades.append(\"D+\")\n\
    \        } else if grade > 2.7 {\n            letterGrades.append(\"D\")\n   \
    \     } else if grade > 2.3 {\n            letterGrades.append(\"D-\")\n     \
    \   } else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n       \
    \ } else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 1.0 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 0.7 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 0.3 {\n            letterGrades.append(\"B\")\n        } else if grade > 0.0\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"A+\")\n        } else if grade > 0.0 {\n  \
    \          letterGrades.append(\"A\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpuwekxdhf/tmpuwekxdhf.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3677521c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3677218b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3677218988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36772177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwekxdhf                        0x00005595a71537f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b367770d460 __libc_start_main +
    245

    6    tmpuwekxdhf                        0x00005595a7153319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = grades.reduce(0,\
    \ combine: +)\n    var gpa = totalGrade / totalLetterGrade\n    var letterGrade\
    \ = totalLetterGrade == 0 ? \"E\" : \"\"\n    \n    if gpa > 3.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa > 2.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa > 2.3 {\n        letterGrade = \"A-\"\n    } else if gpa > 2.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa > 1.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa > 1.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa > 1.0 {\n        letterGrade = \"C+\"\n    } else if gpa > 0.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa > 0.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa > 0.0 {\n        letterGrade = \"D+\"\n    } else if gpa >\
    \ -0.7 {\n        letterGrade = \"D\"\n    } else if gpa > -0.3 {\n        letterGrade\
    \ = \"D-\"\n    } else if gpa > -0.0 {\n        letterGrade = \"E\"\n    }\n \
    \   \n    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxenb0pkl.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpxenb0pkl.swift:27:41:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGrade\
    \ = grades.reduce(0, combine: +)\n                                        ^  \
    \ ~~~~~~~~~\n                                            \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3\
    \ = gradesArray\n    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5\
    \ = gradesArray\n    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7\
    \ = gradesArray\n    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9\
    \ = gradesArray\n    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11\
    \ = gradesArray\n    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13\
    \ = gradesArray\n    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15\
    \ = gradesArray\n    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17\
    \ = gradesArray\n    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19\
    \ = gradesArray\n    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21\
    \ = gradesArray\n    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23\
    \ = gradesArray\n    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25\
    \ = gradesArray\n    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27\
    \ = gradesArray\n    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29\
    \ = gradesArray\n    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31\
    \ = gradesArray\n    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33\
    \ = gradesArray\n    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35\
    \ = gradesArray\n    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37\
    \ = gradesArray\n    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39\
    \ = gradesArray\n    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41\
    \ = gradesArray\n    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43\
    \ = gradesArray\n    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45\
    \ = gradesArray\n    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47\
    \ = gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rahwn9n.swift:25:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmp0rahwn9n.swift:26:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp0rahwn9n.swift:27:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:28:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:29:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:30:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp0rahwn9n.swift:31:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:32:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:33:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0rahwn9n.swift:34:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 3.0 {\n        letterGrade\
    \ = \"D-\"\n    } else if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else\
    \ if gpa < 3.7 {\n        letterGrade = \"B+\"\n    } else if gpa < 4.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 4.3 {\n        letterGrade =\
    \ \"A+\"\n    } else if gpa < 4.7 {\n        letterGrade = \"A-\"\n    } else\
    \ if gpa < 5.0 {\n        letterGrade = \"C\"\n    } else if gpa < 5.3 {\n   \
    \     letterGrade = \"B\"\n    } else if gpa < 5.7 {\n        letterGrade = \"\
    A\"\n    } else if gpa < 6.0 {\n        letterGrade = \"D\"\n    } else {\n  \
    \      letterGrade = \"E\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnwygzy2j.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade:\
    \ Double = 0.0\n    for grade in grades {\n        totalGrade += grade\n    }\n\
    \    var letterGrade: String = \"\"\n    if totalGrade > 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if totalGrade > 3.7 {\n        letterGrade = \"A\"\n  \
    \  } else if totalGrade > 3.3 {\n        letterGrade = \"A-\"\n    } else if totalGrade\
    \ > 3.0 {\n        letterGrade = \"B+\"\n    } else if totalGrade > 2.7 {\n  \
    \      letterGrade = \"B\"\n    } else if totalGrade > 2.3 {\n        letterGrade\
    \ = \"B-\"\n    } else if totalGrade > 2.0 {\n        letterGrade = \"C+\"\n \
    \   } else if totalGrade > 1.7 {\n        letterGrade = \"C\"\n    } else if totalGrade\
    \ > 1.3 {\n        letterGrade = \"C-\"\n    } else if totalGrade > 1.0 {\n  \
    \      letterGrade = \"D+\"\n    } else if totalGrade > 0.7 {\n        letterGrade\
    \ = \"D\"\n    } else if totalGrade > 0.0 {\n        letterGrade = \"D-\"\n  \
    \  } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppmukvjvu/tmppmukvjvu.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adac71cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adac6ec2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adac6ec2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adac6ec17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmukvjvu                        0x0000564b93be97a6 <unavailable> + 6054

    5    libc.so.6                          0x00002adac73b7460 __libc_start_main +
    245

    6    tmppmukvjvu                        0x0000564b93be92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpaRange = 4.0 / 3.0\n    let gpaRange2 = gpaRange * 2\n\
    \    let gpaRange3 = gpaRange * 3\n    let gpaRange4 = gpaRange * 4\n    let gpaRange5\
    \ = gpaRange * 5\n    let gpaRange6 = gpaRange * 6\n    let gpaRange7 = gpaRange\
    \ * 7\n    let gpaRange8 = gpaRange * 8\n    let gpaRange9 = gpaRange * 9\n  \
    \  let gpaRange10 = gpaRange * 10\n    let gpaRange11 = gpaRange * 11\n    let\
    \ gpaRange12 = gpaRange * 12\n    let gpaRange13 = gpaRange * 13\n    let gpaRange14\
    \ = gpaRange * 14\n    let gpaRange15 = gpaRange * 15\n    let gpaRange16 = gpaRange\
    \ * 16\n    let gpaRange17 = gpaRange * 17\n    let gpaRange18 = gpaRange * 18\n\
    \    let gpaRange19 = gpaRange * 19\n    let gpaRange20 = gpaRange * 20\n    let\
    \ gpaRange21 = gpaRange * 21\n    let gpaRange22 = gpaRange * 22\n    let gpaRange23\
    \ = gpaRange * 23\n    let gpaRange24 = gpaRange * 24\n    let gpaRange25 = gpaRange\
    \ * 25\n    let gpaRange26 = gpaRange * 26\n    let gpaRange27 = gpaRange * 27\n\
    \    let gpaRange28 = gpaRange * 28\n    let gpaRange29 = gpaRange * 29\n    let\
    \ gpaRange30 = gpaRange * 30\n    let gpaRange31 = gpaRange * 31\n    let gpaRange32\
    \ = gpaRange * 32\n    let gpaRange33 = gpaRange * 33\n    let gpaRange34 = gpaRange\
    \ * 34\n    let gpaRange35 = gpaRange * 35\n    let gpaRange36 = gpaRange * 36\n\
    \    let gpaRange37 = gpaRange * 37\n    let gpaRange38 = gpaRange * 38\n    let\
    \ gpaRange39 = gpaRange * 39\n    let gpaRange40 = gpaRange * 40\n    let gpaRange41\
    \ = gpaRange * 41\n    let gpaRange42 = gpaRange * 42\n    let gpaRange43 = gpaRange\
    \ * 43\n    let gpaRange44 = gpaRange * 44\n    let gpaRange\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7savaxt2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp7savaxt2.swift:71:9:\
    \ error: type annotation missing in pattern\n    let gpaRange\n        ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxon1ms0r.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        if gpa > 3.7 {\n            letterGrade =\
    \ \"A+\"\n        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n   \
    \     } else if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa > 2.3\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > 2.0 {\n       \
    \     letterGrade = \"C+\"\n        } else if gpa > 1.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 1.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 1.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.7 {\n            letterGrade = \"D\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D-\"\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmgqpq_dv/tmpmgqpq_dv.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00027c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00024bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00024bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00024bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgqpq_dv                        0x000055fb83ab87a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00029b1460 __libc_start_main +
    245

    6    tmpmgqpq_dv                        0x000055fb83ab82c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRoot = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfTwo = grades.reduce(0, combine: +)\n\
    \    var gpaSumSquareRootOfThree = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfFour\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfFive = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfSix = grades.reduce(0, combine: +)\n\
    \    var gpaSumSquareRootOfSeven = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfEight\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfNine = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfTen = grades.reduce(0, combine: +)\n\
    \    var gpaSumSquareRootOfEleven = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfTwelve\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfThirteen = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfFourteen = grades.reduce(0, combine:\
    \ +)\n    var gpaSumSquareRootOfFifteen = grades.reduce(0, combine: +)\n    var\
    \ gpaSumSquareRootOfSixteen = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfSeventeen\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfEighteen = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfNineteen = grades.reduce(0, combine:\
    \ +)\n    var gpaSumSquareRootOfTwenty = grades.reduce(0, combine: +)\n    var\
    \ gpaSumSquareRootOfTwentyOne = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfTwentyTwo\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOfTwentyThree = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOfTwentyFour = grades.reduce(0, combine:\
    \ +)\n    var gpaSumSquareRootOfTwentyFive = grades.reduce(0, combine: +)\n  \
    \  var gpaSumSquare\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvjbcy58l.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpvjbcy58l.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpvjbcy58l.swift:28:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: +)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmpvjbcy58l.swift:29:41: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquareRoot = grades.reduce(0, combine: +)\n\
    \                                        ^   ~~~~~~~~~\n                     \
    \                       \n/tmp/tmpvjbcy58l.swift:30:46: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumSquareRootOfTwo = grades.reduce(0, combine:\
    \ +)\n                                             ^   ~~~~~~~~~\n           \
    \                                      \n/tmp/tmpvjbcy58l.swift:31:48: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOfThree\
    \ = grades.reduce(0, combine: +)\n                                           \
    \    ^   ~~~~~~~~~\n                                                   \n/tmp/tmpvjbcy58l.swift:32:47:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOfFour\
    \ = grades.reduce(0, combine: +)\n                                           \
    \   ^   ~~~~~~~~~\n                                                  \n/tmp/tmpvjbcy58l.swift:33:47:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOfFive\
    \ = grades.reduce(0, combine: +)\n                                           \
    \   ^   ~~~~~~~~~\n                                                  \n/tmp/tmpvjbcy58l.swift:34:46:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOfSix\
    \ = grades.reduce(0, combine: +)\n                  "
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0, +)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n    var gradesArrayMin = grades.min()\n\
    \    var gradesArrayMax = grades.max()\n    var gradesArraySumOfSquares = grades.reduce(0,\
    \ { $0 + $1*$1 })\n    var gradesArraySumOfSquaresOfAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMin = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMax = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMax = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMaxOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverageOfAverage\
    \ = gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq7p7gdts.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq7p7gdts.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmpq7p7gdts.swift:32:68: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresOfAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \              ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmpq7p7gdts.swift:32:68:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresOfAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \            ^\n/tmp/tmpq7p7gdts.swift:33:73: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresOfAverageOfMin\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \                   ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmpq7p7gdts.swift:33:73:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresOfAverageOfMin\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \                                           ^\n/tmp/tmpq7p7gdts.swift:34:73: error:\
    \ binary operator '/' cannot be applied to operands of type 'Double' and 'Int'\n\
    \    var gradesArraySumOfSquaresOfAverageOfMax = gradesArraySumOfSquares / gradesArrayCount\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq7p7gdts.swift:34:73: note: overloads for '/' exist with these partially\
    \ matching par"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reverse()\n\
    \    var gradesArrayLength = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayLength\n    var\
    \ gradesArrayLetterGrades = [String]()\n    var gradesArrayLetterGradesLength\
    \ = gradesArrayLength\n    var gradesArrayLetterGradesSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayLetterGradesAverage = gradesArrayLetterGradesSum / gradesArrayLetterGradesLength\n\
    \    var gradesArrayLetterGradesIndex = 0\n    var gradesArrayLetterGradesIndexSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArrayLetterGradesIndexAverage =\
    \ gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n    var gradesArrayLetterGradesIndex\
    \ = 0\n    var gradesArrayLetterGradesIndexSum = gradesArray.reduce(0.0, +)\n\
    \    var gradesArrayLetterGradesIndexAverage = gradesArrayLetterGradesIndexSum\
    \ / gradesArrayLetterGradesLength\n    var gradesArrayLetterGradesIndex = 0\n\
    \    var gradesArrayLetterGradesIndexSum = gradesArray.reduce(0.0, +)\n    var\
    \ gradesArrayLetterGradesIndexAverage = gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n\
    \    var gradesArrayLetterGradesIndex = 0\n    var gradesArrayLetterGradesIndexSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArrayLetterGradesIndexAverage =\
    \ gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n    var gradesArrayLetterGradesIndex\
    \ = 0\n    var gradesArrayLetterGradesIndexSum = gradesArray.reduce(0.0, +)\n\
    \    var gradesArrayLetterGradesIndexAverage = gradesArrayLetterGradesIndexSum\
    \ / gradesArrayLetterGradesLength\n    var gradesArrayLetterGradesIndex = 0\n\
    \    var gradesArrayLetterGradesIndexSum = gradesArray.reduce(0.0, +)\n    var\
    \ gradesArrayLetterGradesIndexAverage = gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n\
    \    var gradesArrayLetterGradesIndex = 0\n    var gradesArrayLetterGradesIndexSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArrayLetterGradesIndexAverage =\
    \ gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n    var \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjv_ebigm.swift:55:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpjv_ebigm.swift:26:31: error: cannot assign value of type '()' to\
    \ type '[Double]'\n    gradesArray = gradesArray.reverse()\n                 \
    \ ~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpjv_ebigm.swift:29:45: error: binary operator\
    \ '/' cannot be applied to operands of type 'Double' and 'Int'\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayLength\n                             ~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~\n/tmp/tmpjv_ebigm.swift:29:45: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Int, Int)\n\
    \    var gradesArrayAverage = gradesArraySum / gradesArrayLength\n           \
    \                                 ^\n/tmp/tmpjv_ebigm.swift:33:69: error: binary\
    \ operator '/' cannot be applied to operands of type 'Double' and 'Int'\n    var\
    \ gradesArrayLetterGradesAverage = gradesArrayLetterGradesSum / gradesArrayLetterGradesLength\n\
    \                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjv_ebigm.swift:33:69: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayLetterGradesAverage\
    \ = gradesArrayLetterGradesSum / gradesArrayLetterGradesLength\n             \
    \                                                       ^\n/tmp/tmpjv_ebigm.swift:36:79:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    var gradesArrayLetterGradesIndexAverage = gradesArrayLetterGradesIndexSum\
    \ / gradesArrayLetterGradesLength\n                                          \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjv_ebigm.swift:36:79:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArrayLetterGradesIndexAverage =\
    \ gradesArrayLetterGradesIndexSum / gradesArrayLetterGradesLength\n          \
    \                                                                    ^\n/tmp/tmpjv_ebigm.swift:37:9:\
    \ error: inva"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = totalGrade / 4.0\n\
    \    \n    for grade in grades {\n        let letterGrade = letterGrade(grade:\
    \ grade)\n        letterGrades.append(letterGrade)\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptw403z88.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmptw403z88.swift:30:27:\
    \ error: use of local variable 'letterGrade' before its declaration\n        let\
    \ letterGrade = letterGrade(grade: grade)\n                          ^\n/tmp/tmptw403z88.swift:30:13:\
    \ note: 'letterGrade' declared here\n        let letterGrade = letterGrade(grade:\
    \ grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var letterGrades\
    \ = [String]()\n    \n    for i in 0..<grades.count {\n        let gpa = gradesArray[i]\n\
    \        let letterGrade = letterGradeForGPA(gpa)\n        letterGrades.append(letterGrade)\n\
    \        gradesArray.removeAtIndex(i)\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5euyn8fa.swift:30:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(gpa)\n                  \
    \        ^~~~~~~~~~~~~~~~~\n/tmp/tmp5euyn8fa.swift:32:21: error: value of type\
    \ '[Double]' has no member 'removeAtIndex'\n        gradesArray.removeAtIndex(i)\n\
    \        ~~~~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: -) \n    var gpaSumOfDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum = grades.reduce(0, combine: -) \n    var gpaSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiff = grades.reduce(0,\
    \ combine: -) \n    var gpaSumOfDiffSumOfDiff = grades.reduce(0, combine: +)\n\
    \    var gpaDiffSumOfDiffSumOfDiff = grades.reduce(0, combine: -) \n    var gpaSumOfDiffSumOfDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiffSumOfDiffSum = grades.reduce(0,\
    \ combine: -) \n    var gpaSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0, combine: -)\
    \ \n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0, combine:\
    \ -) \n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff =\
    \ grades.reduce(0, combine: -) \n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: -) \n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: -) \n    var gpaSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumOfDiff\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8wl9x93s.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp8wl9x93s.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp8wl9x93s.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: -) \n      \
    \                         ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp8wl9x93s.swift:29:37: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumOfDiff = grades.reduce(0, combine: +)\n                       \
    \             ^   ~~~~~~~~~\n                                        \n/tmp/tmp8wl9x93s.swift:30:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0,\
    \ combine: -) \n                                  ^   ~~~~~~~~~\n            \
    \                          \n/tmp/tmp8wl9x93s.swift:31:40: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumOfDiffSum = grades.reduce(0, combine:\
    \ +)\n                                       ^   ~~~~~~~~~\n                 \
    \                          \n/tmp/tmp8wl9x93s.swift:32:41: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSumOfDiff = grades.reduce(0, combine:\
    \ -) \n                                        ^   ~~~~~~~~~\n               \
    \                             \n/tmp/tmp8wl9x93s.swift:33:46: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfDiffSumOfDiff = grades.reduce(0,\
    \ combine: +)\n                                             ^   ~~~~~~~~~\n  \
    \                                               \n/tmp/tmp8wl9x93s.swift:34:50:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSumOfDiffSumOfDiff\
    \ = grades.reduce(0, combine: -) \n                                          \
    \       ^   ~~~~~~~~~\n                                                    "
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [Double] = grades\n    var letterGrades:\
    \ [String] = []\n    var grade: Double = 0.0\n    var gradeIndex: Int = 0\n  \
    \  var gradeIndex2: Int = 0\n    var gradeIndex3: Int = 0\n    var gradeIndex4:\
    \ Int = 0\n    var gradeIndex5: Int = 0\n    var gradeIndex6: Int = 0\n    var\
    \ gradeIndex7: Int = 0\n    var gradeIndex8: Int = 0\n    var gradeIndex9: Int\
    \ = 0\n    var gradeIndex10: Int = 0\n    var gradeIndex11: Int = 0\n    var gradeIndex12:\
    \ Int = 0\n    var gradeIndex13: Int = 0\n    var gradeIndex14: Int = 0\n    var\
    \ gradeIndex15: Int = 0\n    var gradeIndex16: Int = 0\n    var gradeIndex17:\
    \ Int = 0\n    var gradeIndex18: Int = 0\n    var gradeIndex19: Int = 0\n    var\
    \ gradeIndex20: Int = 0\n    var gradeIndex21: Int = 0\n    var gradeIndex22:\
    \ Int = 0\n    var gradeIndex23: Int = 0\n    var gradeIndex24: Int = 0\n    var\
    \ gradeIndex25: Int = 0\n    var gradeIndex26: Int = 0\n    var gradeIndex27:\
    \ Int = 0\n    var gradeIndex28: Int = 0\n    var gradeIndex29: Int = 0\n    var\
    \ gradeIndex30: Int = 0\n    var gradeIndex31: Int = 0\n    var gradeIndex32:\
    \ Int = 0\n    var gradeIndex33: Int = 0\n    var gradeIndex34: Int = 0\n    var\
    \ gradeIndex35: Int = 0\n    var gradeIndex36: Int = 0\n    var gradeIndex37:\
    \ Int = 0\n    var gradeIndex38: Int = 0\n    var gradeIndex39: Int = 0\n    var\
    \ gradeIndex40: Int = 0\n    var gradeIndex41: Int = 0\n    var gradeIndex42:\
    \ Int = 0\n    var gradeIndex43: Int = 0\n    var gradeIndex44: Int = 0\n    var\
    \ gradeIndex45: Int = 0\n    var gradeIndex46: Int = 0\n    var gradeIndex47:\
    \ Int = 0\n    var gradeIndex48: Int = 0\n    var gradeIndex49: Int = 0\n    var\
    \ gradeIndex50: Int = 0\n    var gradeIndex51: Int = 0\n    var gradeIndex52:\
    \ Int = 0\n    var gradeIndex53: Int = 0\n    var gradeIndex54: Int = 0\n    var\
    \ gradeIndex55: Int = 0\n    var gradeIndex56: Int = 0\n    var gradeIndex57:\
    \ Int = 0\n    var gradeIndex58: Int = 0\n    var gradeIndex59: Int = 0\n    var\
    \ gradeIndex60: Int = 0\n    var gradeIndex61: Int = 0\n    var gradeIndex62:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz9nkf7ar.swift:89:22: error: expected type\n    var gradeIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"E\"\n    var currentLetterGradeIndex = 0\n    for\
    \ _ in gradesArray {\n        if currentGrade < currentLetterGrade {\n       \
    \     letterGrades.append(currentLetterGrade)\n            currentLetterGradeIndex\
    \ = letterGrades.count - 1\n        }\n        if currentGrade > currentLetterGrade\
    \ {\n            letterGrades.append(currentLetterGrade)\n            currentLetterGradeIndex\
    \ = letterGrades.count - 1\n        }\n        if currentGrade == currentLetterGrade\
    \ {\n            letterGrades.append(currentLetterGrade)\n            currentLetterGradeIndex\
    \ = letterGrades.count - 1\n        }\n        currentGrade = gradesArray[currentLetterGradeIndex]\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb2us4ted.swift:32:25: error: binary operator '<' cannot be applied\
    \ to operands of type 'Double' and 'String'\n        if currentGrade < currentLetterGrade\
    \ {\n           ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\n/tmp/tmpb2us4ted.swift:32:25:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (String, String)\n        if currentGrade < currentLetterGrade {\n         \
    \               ^\n/tmp/tmpb2us4ted.swift:36:25: error: binary operator '>' cannot\
    \ be applied to operands of type 'Double' and 'String'\n        if currentGrade\
    \ > currentLetterGrade {\n           ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\n/tmp/tmpb2us4ted.swift:40:25:\
    \ error: binary operator '==' cannot be applied to operands of type 'Double' and\
    \ 'String'\n        if currentGrade == currentLetterGrade {\n           ~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpb2us4ted.swift:40:25: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (String, String)\n    \
    \    if currentGrade == currentLetterGrade {\n                        ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.map { $0 }\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0, +)\n    var gradesArraySum2\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum3 = grades.reduce(0.0, +)\n \
    \   var gradesArraySum4 = grades.reduce(0.0, +)\n    var gradesArraySum5 = grades.reduce(0.0,\
    \ +)\n    var gradesArraySum6 = grades.reduce(0.0, +)\n    var gradesArraySum7\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum8 = grades.reduce(0.0, +)\n \
    \   var gradesArraySum9 = grades.reduce(0.0, +)\n    var gradesArraySum10 = grades.reduce(0.0,\
    \ +)\n    var gradesArraySum11 = grades.reduce(0.0, +)\n    var gradesArraySum12\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum13 = grades.reduce(0.0, +)\n\
    \    var gradesArraySum14 = grades.reduce(0.0, +)\n    var gradesArraySum15 =\
    \ grades.reduce(0.0, +)\n    var gradesArraySum16 = grades.reduce(0.0, +)\n  \
    \  var gradesArraySum17 = grades.reduce(0.0, +)\n    var gradesArraySum18 = grades.reduce(0.0,\
    \ +)\n    var gradesArraySum19 = grades.reduce(0.0, +)\n    var gradesArraySum20\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum21 = grades.reduce(0.0, +)\n\
    \    var gradesArraySum22 = grades.reduce(0.0, +)\n    var gradesArraySum23 =\
    \ grades.reduce(0.0, +)\n    var gradesArraySum24 = grades.reduce(0.0, +)\n  \
    \  var gradesArraySum25 = grades.reduce(0.0, +)\n    var gradesArraySum26 = grades.reduce(0.0,\
    \ +)\n    var gradesArraySum27 = grades.reduce(0.0, +)\n    var gradesArraySum28\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum29 = grades.reduce(0.0, +)\n\
    \    var gradesArraySum30 = grades.reduce(0.0, +)\n    var gradesArraySum31 =\
    \ grades.reduce(0.0, +)\n    var gradesArraySum32 = grades.reduce(0.0, +)\n  \
    \  var gradesArraySum33 = grades.reduce(0.0, +)\n    var gradesArraySum34 = grades.reduce(0.0,\
    \ +)\n    var gradesArraySum35 = grades.reduce(0.0, +)\n    var gradesArraySum36\
    \ = grades.reduce(0.0, +)\n    var gradesArraySum37 = grades.reduce(0.0, +)\n\
    \    var gradesArraySum38 = grades.reduce(0.0, +)\n    var gradesArraySum39 =\
    \ grade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6mcjy0au.swift:65:28: error: cannot find 'grade' in scope\n   \
    \ var gradesArraySum39 = grade\n                           ^~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            gradesString += \"A+\"\n        } else\
    \ if grade < 3.7 {\n            gradesString += \"A\"\n        } else if grade\
    \ < 4.0 {\n            gradesString += \"B+\"\n        } else if grade < 4.7 {\n\
    \            gradesString += \"B\"\n        } else if grade < 5.0 {\n        \
    \    gradesString += \"B-\"\n        } else if grade < 5.7 {\n            gradesString\
    \ += \"B\"\n        } else if grade < 6.0 {\n            gradesString += \"C+\"\
    \n        } else if grade < 6.7 {\n            gradesString += \"C\"\n       \
    \ } else if grade < 7.0 {\n            gradesString += \"C-\"\n        } else\
    \ if grade < 7.7 {\n            gradesString += \"C\"\n        } else if grade\
    \ < 8.0 {\n            gradesString += \"D+\"\n        } else if grade < 8.7 {\n\
    \            gradesString += \"D\"\n        } else if grade < 9.0 {\n        \
    \    gradesString += \"D-\"\n        } else if grade < 9.7 {\n            gradesString\
    \ += \"D\"\n        } else if grade < 10.0 {\n            gradesString += \"E\"\
    \n        } else {\n            gradesString += \"F\"\n        }\n    }\n    return\
    \ gradesString.characters.dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpou3gvju2.swift:61:36: error: no 'dropLast' candidates produce the\
    \ expected contextual result type '[String]'\n    return gradesString.characters.dropLast()\n\
    \                                   ^\nSwift.Sequence:5:40: note: 'dropLast' produces\
    \ '[String.Element]' (aka 'Array<Character>'), not the expected contextual result\
    \ type '[String]'\n    @inlinable public __consuming func dropLast(_ k: Int =\
    \ 1) -> [Self.Element]\n                                       ^\nSwift.Collection:4:40:\
    \ note: 'dropLast' produces 'String.SubSequence' (aka 'Substring'), not the expected\
    \ contextual result type '[String]'\n    @inlinable public __consuming func dropLast(_\
    \ k: Int = 1) -> Self.SubSequence\n                                       ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesSorted = grades.sorted()\n    var gradesSum\
    \ = grades.reduce(0, +)\n    var gradesAverage = gradesSum / Double(grades.count)\n\
    \    var gradesIndex = 0\n    var gradesIndexSum = 0\n    var gradesIndexAverage\
    \ = 0\n    var gradesIndexCount = 0\n    var gradesIndexAverageCount = 0\n   \
    \ var gradesIndexSumCount = 0\n    var gradesIndexAverageSumCount = 0\n    var\
    \ gradesIndexAverageSum = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageCount\
    \ = 0\n    var gradesIndexAverageSumCount = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var gradesIndexAverageCountSum = 0\n    var gradesIndexAverageSumCount\
    \ = 0\n    var grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxb5sbwc3.swift:37:9: error: invalid redeclaration of 'gradesIndexAverageCount'\n\
    \    var gradesIndexAverageCount = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:32:9:\
    \ note: 'gradesIndexAverageCount' previously declared here\n    var gradesIndexAverageCount\
    \ = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:38:9: error: invalid redeclaration of\
    \ 'gradesIndexAverageSumCount'\n    var gradesIndexAverageSumCount = 0\n     \
    \   ^\n/tmp/tmpxb5sbwc3.swift:34:9: note: 'gradesIndexAverageSumCount' previously\
    \ declared here\n    var gradesIndexAverageSumCount = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:39:9:\
    \ error: invalid redeclaration of 'gradesIndexAverageSumCount'\n    var gradesIndexAverageSumCount\
    \ = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:34:9: note: 'gradesIndexAverageSumCount'\
    \ previously declared here\n    var gradesIndexAverageSumCount = 0\n        ^\n\
    /tmp/tmpxb5sbwc3.swift:40:9: error: invalid redeclaration of 'gradesIndexAverageCountSum'\n\
    \    var gradesIndexAverageCountSum = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:36:9:\
    \ note: 'gradesIndexAverageCountSum' previously declared here\n    var gradesIndexAverageCountSum\
    \ = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:41:9: error: invalid redeclaration of\
    \ 'gradesIndexAverageSumCount'\n    var gradesIndexAverageSumCount = 0\n     \
    \   ^\n/tmp/tmpxb5sbwc3.swift:34:9: note: 'gradesIndexAverageSumCount' previously\
    \ declared here\n    var gradesIndexAverageSumCount = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:42:9:\
    \ error: invalid redeclaration of 'gradesIndexAverageCountSum'\n    var gradesIndexAverageCountSum\
    \ = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:36:9: note: 'gradesIndexAverageCountSum'\
    \ previously declared here\n    var gradesIndexAverageCountSum = 0\n        ^\n\
    /tmp/tmpxb5sbwc3.swift:43:9: error: invalid redeclaration of 'gradesIndexAverageSumCount'\n\
    \    var gradesIndexAverageSumCount = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:34:9:\
    \ note: 'gradesIndexAverageSumCount' previously declared here\n    var gradesIndexAverageSumCount\
    \ = 0\n        ^\n/tmp/tmpxb5sbwc3.swift:44:9: error: invalid redeclaration of\
    \ 'gradesIndexAverageCountSum'\n    var gradesIndexAverageCount"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaString = String(format: \"%.2f\", gpa)\n    var letterGrade\
    \ = gpaString.hasSuffix(\".0\") ? gpaString.substring(0,gpaString.length-2) :\
    \ \"0.0\"\n    letterGrades.append(letterGrade)\n    for grade in grades {\n \
    \       if grade < gpa {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade < gpa + 0.3 {\n            letterGrades.append(\"A-\")\n        } else\
    \ if grade < gpa + 0.4 {\n            letterGrades.append(\"B+\")\n        } else\
    \ if grade < gpa + 0.6 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade < gpa + 0.8 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade < gpa + 0.9 {\n            letterGrades.append(\"C+\")\n        } else\
    \ if grade < gpa + 1.1 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade < gpa + 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade < gpa + 1.4 {\n            letterGrades.append(\"D+\")\n        } else\
    \ if grade < gpa + 1.6 {\n            letterGrades.append(\"D\")\n        } else\
    \ if grade < gpa + 1.8 {\n            letterGrades.append(\"D-\")\n        } else\
    \ {\n            letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpivsackpm.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpivsackpm.swift:27:27:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    var gpaString = String(format: \"%.2f\", gpa)\n                         \
    \ ^~~~~~~\n                           repeating       count: \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        let gpa = grade * 4.0\n        let letterGrade = letterGradeForGPA(gpa)\n\
    \        letterGrades.append(letterGrade)\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1shi3men.swift:29:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(gpa)\n                  \
    \        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumSquare\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRoot = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf2 = grades.reduce(0, combine: +)\n  \
    \  var gpaSumSquareRootOf3 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf4\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf6 = grades.reduce(0, combine: +)\n  \
    \  var gpaSumSquareRootOf7 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf8\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf9 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf10 = grades.reduce(0, combine: +)\n \
    \   var gpaSumSquareRootOf11 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf12\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf13 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf14 = grades.reduce(0, combine: +)\n \
    \   var gpaSumSquareRootOf15 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf16\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf17 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf18 = grades.reduce(0, combine: +)\n \
    \   var gpaSumSquareRootOf19 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf20\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf21 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf22 = grades.reduce(0, combine: +)\n \
    \   var gpaSumSquareRootOf23 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf24\
    \ = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSumSquareRootOf26 = grades.reduce(0, combine: +)\n \
    \   var gpaSumSquareRootOf27 = grades.reduce(0, combine: +)\n    var gpaSumSquareRootOf28\
    \ = grades.reduce(0, combine: +)\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5959py41.swift:57:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp5959py41.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp5959py41.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp5959py41.swift:28:37: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquare = grades.reduce(0, combine: +)\n  \
    \                                  ^   ~~~~~~~~~\n                           \
    \             \n/tmp/tmp5959py41.swift:29:41: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumSquareRoot = grades.reduce(0, combine: +)\n\
    \                                        ^   ~~~~~~~~~\n                     \
    \                       \n/tmp/tmp5959py41.swift:30:44: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumSquareRootOf2 = grades.reduce(0, combine:\
    \ +)\n                                           ^   ~~~~~~~~~\n             \
    \                                  \n/tmp/tmp5959py41.swift:31:44: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumSquareRootOf3 = grades.reduce(0,\
    \ combine: +)\n                                           ^   ~~~~~~~~~\n    \
    \                                           \n/tmp/tmp5959py41.swift:32:44: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOf4 =\
    \ grades.reduce(0, combine: +)\n                                           ^ \
    \  ~~~~~~~~~\n                                               \n/tmp/tmp5959py41.swift:33:44:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOf5\
    \ = grades.reduce(0, combine: +)\n                                           ^\
    \   ~~~~~~~~~\n                                               \n/tmp/tmp5959py41.swift:34:44:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumSquareRootOf6\
    \ = grades.reduce("
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGrade = totalGrade / 4.0\n\
    \    var totalLetterGradeIndex = totalGrade % 4\n    \n    for grade in grades\
    \ {\n        if totalLetterGrade < grade {\n            letterGrades.append(\"\
    E\")\n            break\n        }\n        \n        if totalLetterGrade == grade\
    \ {\n            letterGrades.append(totalLetterGradeIndex == 0 ? \"A+\" : totalLetterGradeIndex\
    \ == 1 ? \"A\" : totalLetterGradeIndex == 2 ? \"A-\" : totalLetterGradeIndex ==\
    \ 3 ? \"B+\" : totalLetterGradeIndex == 4 ? \"B\" : totalLetterGradeIndex == 5\
    \ ? \"B-\" : totalLetterGradeIndex == 6 ? \"C+\" : totalLetterGradeIndex == 7\
    \ ? \"C\" : totalLetterGradeIndex == 8 ? \"C-\" : totalLetterGradeIndex == 9 ?\
    \ \"D+\" : totalLetterGradeIndex == 10 ? \"D\" : totalLetterGradeIndex == 11 ?\
    \ \"D-\" : nil)\n            break\n        }\n        \n        totalLetterGradeIndex\
    \ -= 1\n        totalLetterGrade = totalLetterGrade - grade\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9g2rvtsv.swift:26:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmp9g2rvtsv.swift:37:463:\
    \ error: 'nil' cannot be used in context expecting type 'String'\n           \
    \ letterGrades.append(totalLetterGradeIndex == 0 ? \"A+\" : totalLetterGradeIndex\
    \ == 1 ? \"A\" : totalLetterGradeIndex == 2 ? \"A-\" : totalLetterGradeIndex ==\
    \ 3 ? \"B+\" : totalLetterGradeIndex == 4 ? \"B\" : totalLetterGradeIndex == 5\
    \ ? \"B-\" : totalLetterGradeIndex == 6 ? \"C+\" : totalLetterGradeIndex == 7\
    \ ? \"C\" : totalLetterGradeIndex == 8 ? \"C-\" : totalLetterGradeIndex == 9 ?\
    \ \"D+\" : totalLetterGradeIndex == 10 ? \"D\" : totalLetterGradeIndex == 11 ?\
    \ \"D-\" : nil)\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = -1\n    var gpaIndexMax = grades.count - 1\n\
    \    while gpaIndex < gpaIndexMax {\n        let gpaValue = grades[gpaIndex]\n\
    \        let letterGrade = letterGradeForGPA(gpaValue)\n        letterGrades.append(letterGrade)\n\
    \        gpaIndex += 1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv_rycqcy.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpv_rycqcy.swift:31:27:\
    \ error: cannot find 'letterGradeForGPA' in scope\n        let letterGrade = letterGradeForGPA(gpaValue)\n\
    \                          ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxon1ms0r.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        case 0.1:\n            gradesArray.append(\"D-\")\n        case\
    \ 0.2:\n            gradesArray.append(\"D\")\n        case 0.3:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.4:\n            gradesArray.append(\"\
    D\")\n        case 0.5:\n            gradesArray.append(\"C+\")\n        case\
    \ 0.6:\n            gradesArray.append(\"C\")\n        case 0.7:\n           \
    \ gradesArray.append(\"C\")\n        case 0.8:\n            gradesArray.append(\"\
    C\")\n        case 0.9:\n            gradesArray.append(\"C\")\n        case 1.0:\n\
    \            gradesArray.append(\"C\")\n        case 1.1:\n            gradesArray.append(\"\
    C\")\n        case 1.2:\n            gradesArray.append(\"C\")\n        case 1.3:\n\
    \            gradesArray.append(\"C\")\n        case 1.4:\n            gradesArray.append(\"\
    C\")\n        case 1.5:\n            gradesArray.append(\"C\")\n        case 1.6:\n\
    \            gradesArray.append(\"C\")\n        case 1.7:\n            gradesArray.append(\"\
    C\")\n        case 1.8:\n            gradesArray.append(\"C\")\n        case 1.9:\n\
    \            gradesArray.append(\"C\")\n        case 2.0:\n            gradesArray.append(\"\
    C\")\n        case 2.1:\n            gradesArray.append(\"C\")\n        case 2.2:\n\
    \            gradesArray.append(\"C\")\n        case 2.3:\n            gradesArray.append(\"\
    C\")\n        case 2.4:\n            gradesArray.append(\"C\")\n        case 2.5:\n\
    \            gradesArray.append(\"C\")\n        case 2.6:\n            gradesArray.append(\"\
    C\")\n        case 2.7:\n            gradesArray.append(\"C\")\n        case 2.8:\n\
    \            gradesArray.append(\"C\")\n        case 2.9:\n            gradesArray.append(\"\
    C\")\n        case 3.0:\n            gradesArray.append(\"C\")\n        case 3.1:\n\
    \            gradesArray.append(\"C\")\n        case 3.2:\n            gradesArray.append(\"\
    C\")\n        case 3.3:\n            gradesArray.append(\"C\")\n        case 3.4:\n\
    \            gradesArray.append(\"C\")\n        case 3.5:\n            gradesArray.append(\"\
    C\")\n        case 3.6:\n            gradesArray.append(\"C\")\n        case 3.7:\n\
    \            gradesArray.append(\"C\")\n        case 3.8:\n            gradesArray.append(\"\
    C\")\n        case 3.9:\n            gradesArray.append(\"C\")\n        case 4.0:\n\
    \            gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4bttwcbh.swift:130:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp4bttwcbh.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp4bttwcbh.swift:130:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp4bttwcbh.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp4bttwcbh.swift:109:13: warning: variable is unused\n            gradesArray\n\
    \            ^~~~~~~~~~~\n/tmp/tmp4bttwcbh.swift:27:9: error: switch must be exhaustive\n\
    \        switch grade {\n        ^\n/tmp/tmp4bttwcbh.swift:27:9: note: do you\
    \ want to add a default clause?\n        switch grade {\n        ^\n/tmp/tmp4bttwcbh.swift:113:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade > 3.0 {\n            letterGrades.append(\"D+\")\n\
    \        } else if grade > 2.7 {\n            letterGrades.append(\"D\")\n   \
    \     } else if grade > 2.3 {\n            letterGrades.append(\"D-\")\n     \
    \   } else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n       \
    \ } else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 1.0 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 0.7 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 0.3 {\n            letterGrades.append(\"B\")\n        } else if grade > 0.1\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 0.0 {\n\
    \            letterGrades.append(\"A+\")\n        } else if grade > -0.7 {\n \
    \           letterGrades.append(\"A\")\n        } else if grade > -0.3 {\n   \
    \         letterGrades.append(\"A-\")\n        } else if grade > -0.1 {\n    \
    \        letterGrades.append(\"B+\")\n        } else if grade > -0.0 {\n     \
    \       letterGrades.append(\"B\")\n        } else if grade > -1.0 {\n       \
    \     letterGrades.append(\"B-\")\n        } else if grade > -2.0 {\n        \
    \    letterGrades.append(\"A+\")\n        } else if grade > -3.0 {\n         \
    \   letterGrades.append(\"A\")\n        } else if grade > -3.7 {\n           \
    \ letterGrades.append(\"A-\")\n        } else if grade > -4.0 {\n            letterGrades.append(\"\
    B+\")\n        } else if grade > -4.7 {\n            letterGrades.append(\"B\"\
    )\n        } else if grade > -4.3 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade > -4.0 {\n            letterGrades.append(\"C+\")\n \
    \       } else if grade > -3.7 {\n            letterGrades.append(\"C\")\n   \
    \     } else if grade > -3.3 {\n            letterGrades.append(\"C-\")\n    \
    \    } else if grade > -3.0 {\n            letterGrades.append(\"D+\")\n     \
    \   } else if grade > -2.7 {\n            letterGrades.append(\"D\")\n       \
    \ } else if grade > -2.3 {\n            letterGrades.append(\"D-\")\n        }\
    \ else if grade > -1.7 {\n            letterGrades.append(\"C+\")\n        } else\
    \ if grade > -1.3 {\n            letterGrades.append(\"C\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmq16w1ow.swift:84:33: error: unterminated string literal\n    \
    \        letterGrades.append(\"C\n                                ^\n/tmp/tmpmq16w1ow.swift:105:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpmq16w1ow.swift:26:25: note: to match this opening\
    \ '{'\n    for grade in grades {\n                        ^\n/tmp/tmpmq16w1ow.swift:105:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpmq16w1ow.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpmq16w1ow.swift:84:33:\
    \ error: missing argument for parameter #1 in call\n            letterGrades.append(\"\
    C\n                                ^\n                                <#String#>\n\
    Swift.Array:6:37: note: 'append' declared here\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\n/tmp/tmpmq16w1ow.swift:88:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0.0, +)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n    var gradesArrayMin = grades.min()\n\
    \    var gradesArrayMax = grades.max()\n    var gradesArraySumOfSquares = grades.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares.max()\n    var gradesArraySumOfSquaresSum = gradesArraySumOfSquares.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum /\
    \ gradesArrayCount\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum.min()\n\
    \    var gradesArraySumOfSquaresSumMax = gradesArraySumOfSquaresSum.max()\n  \
    \  var gradesArraySumOfSquaresSumSum = gradesArraySumOfSquaresSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumAverage = gradesArraySumOfSquaresSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin = gradesArraySumOfSquaresSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumMax = gradesArraySumOfSquaresSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSum = gradesArraySumOfSquaresSumSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArraySumOfSquaresSumSumSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumSumMin = grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv5ixn2x8.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv5ixn2x8.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmpv5ixn2x8.swift:32:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmpv5ixn2x8.swift:32:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmpv5ixn2x8.swift:33:62: error: value of type 'Double' has\
    \ no member 'min'\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n\
    \                                     ~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpv5ixn2x8.swift:34:62:\
    \ error: value of type 'Double' has no member 'max'\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares.max()\n                                     ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpv5ixn2x8.swift:35:62: error: value of type 'Double' has no member\
    \ 'reduce'\n    var gradesArraySumOfSquaresSum = gradesArraySumOfSquares.reduce(0.0,\
    \ +)\n                                     ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexSum = 0\n    var gradesArraySum = 0\n    var gradesArraySumMax\
    \ = 0\n    var gradesArraySumMin = 0\n    var gradesArraySumSum = 0\n    var gradesArraySumSumMax\
    \ = 0\n    var gradesArraySumSumMin = 0\n    var gradesArraySumSumSum = 0\n  \
    \  var gradesArraySumSumSumMax = 0\n    var gradesArraySumSumSumMin = 0\n    var\
    \ gradesArraySumSumSumSum = 0\n    var gradesArraySumSumSumMax = 0\n    var gradesArraySumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin = 0\n    var gradesArraySumSumSumSumSum\
    \ = 0\n    var gradesArraySumSumSumSumMax = 0\n    var gradesArraySumSumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin = 0\n    var gradesArraySumSumSumSumSum\
    \ = 0\n    var gradesArraySumSumSumSumMax = 0\n    var gradesArraySumSumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin = 0\n    var gradesArraySumSumSumSumSum\
    \ = 0\n    var gradesArraySumSumSumSumMax = 0\n    var gradesArraySumSumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin = 0\n    var gradesArraySumSumSumSumSum\
    \ = 0\n    var gradesArraySumSumSumSumMax = 0\n    var gradesArraySumSumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin = 0\n    var gradesArraySumSumSumSumSum\
    \ = 0\n    var gradesArraySumSumSumSumMax = 0\n    var gradesArraySumSumSumSumMin\
    \ = 0\n    var gradesArraySumSumSumSumSum = 0\n    var gradesArraySumSumSumSumMax\
    \ = 0\n    var gradesArraySumSumSumSumMin\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo5di6k_e.swift:40:9: error: invalid redeclaration of 'gradesArraySumSumSumMax'\n\
    \    var gradesArraySumSumSumMax = 0\n        ^\n/tmp/tmpo5di6k_e.swift:37:9:\
    \ note: 'gradesArraySumSumSumMax' previously declared here\n    var gradesArraySumSumSumMax\
    \ = 0\n        ^\n/tmp/tmpo5di6k_e.swift:41:9: error: invalid redeclaration of\
    \ 'gradesArraySumSumSumMin'\n    var gradesArraySumSumSumMin = 0\n        ^\n\
    /tmp/tmpo5di6k_e.swift:38:9: note: 'gradesArraySumSumSumMin' previously declared\
    \ here\n    var gradesArraySumSumSumMin = 0\n        ^\n/tmp/tmpo5di6k_e.swift:42:9:\
    \ error: invalid redeclaration of 'gradesArraySumSumSumSum'\n    var gradesArraySumSumSumSum\
    \ = 0\n        ^\n/tmp/tmpo5di6k_e.swift:39:9: note: 'gradesArraySumSumSumSum'\
    \ previously declared here\n    var gradesArraySumSumSumSum = 0\n        ^\n/tmp/tmpo5di6k_e.swift:46:9:\
    \ error: invalid redeclaration of 'gradesArraySumSumSumSumMax'\n    var gradesArraySumSumSumSumMax\
    \ = 0\n        ^\n/tmp/tmpo5di6k_e.swift:43:9: note: 'gradesArraySumSumSumSumMax'\
    \ previously declared here\n    var gradesArraySumSumSumSumMax = 0\n        ^\n\
    /tmp/tmpo5di6k_e.swift:47:9: error: invalid redeclaration of 'gradesArraySumSumSumSumMin'\n\
    \    var gradesArraySumSumSumSumMin = 0\n        ^\n/tmp/tmpo5di6k_e.swift:44:9:\
    \ note: 'gradesArraySumSumSumSumMin' previously declared here\n    var gradesArraySumSumSumSumMin\
    \ = 0\n        ^\n/tmp/tmpo5di6k_e.swift:48:9: error: invalid redeclaration of\
    \ 'gradesArraySumSumSumSumSum'\n    var gradesArraySumSumSumSumSum = 0\n     \
    \   ^\n/tmp/tmpo5di6k_e.swift:45:9: note: 'gradesArraySumSumSumSumSum' previously\
    \ declared here\n    var gradesArraySumSumSumSumSum = 0\n        ^\n/tmp/tmpo5di6k_e.swift:49:9:\
    \ error: invalid redeclaration of 'gradesArraySumSumSumSumMax'\n    var gradesArraySumSumSumSumMax\
    \ = 0\n        ^\n/tmp/tmpo5di6k_e.swift:43:9: note: 'gradesArraySumSumSumSumMax'\
    \ previously declared here\n    var gradesArraySumSumSumSumMax = 0\n        ^\n\
    /tmp/tmpo5di6k_e.swift:50:9: error: invalid redeclaration of 'gradesArraySumSumSumSumMin'\n\
    \    var gradesArraySumSumSumSumMin = 0\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex\
    \ = (gpa - grades[gpaIndex])\n        letterGrades.append(letterGrade(gpaIndex))\n\
    \        gpa -= gpaIndex\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdwmvrqy.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpwdwmvrqy.swift:30:29:\
    \ error: cannot find 'letterGrade' in scope\n        letterGrades.append(letterGrade(gpaIndex))\n\
    \                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = grades.count - 1\n    while gpaIndex >= 0 {\n\
    \        let gpaValue = grades[gpaIndex]\n        let letterGrade = gpaValue >=\
    \ 3.0 ? \"A+\" :\n            gpaValue >= 2.7 ? \"B\" :\n            gpaValue\
    \ >= 2.3 ? \"B-\" :\n            gpaValue >= 2.0 ? \"C+\" :\n            gpaValue\
    \ >= 1.7 ? \"C\" :\n            gpaValue >= 1.3 ? \"C-\" :\n            gpaValue\
    \ >= 1.0 ? \"D+\" :\n            gpaValue >= 0.7 ? \"D\" :\n            gpaValue\
    \ >= 0.0 ? \"D-\" :\n            \"E\"\n        letterGrades.append(letterGrade)\n\
    \        gpaIndex -= 1\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4t7h7860.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letterGrade = \"D-\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"C+\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"A+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"A\"\n    } else if gpa < 1.3 {\n        letterGrade = \"A-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"C\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"C+\"\n    } else if gpa < 0.3 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa < 0.0 {\n        letterGrade = \"B+\"\n    } else\
    \ {\n        letterGrade = \"A\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ll3ijzy.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    switch gpa {\n    case\
    \ 4.0:\n        letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"\
    A\"\n    case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        break\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkwna_q_m.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        let letterGrade = letterGrade(grade)\n        gradesString += letterGrade\n\
    \    }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjjdvkeho.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpjjdvkeho.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n/tmp/tmpjjdvkeho.swift:30:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return gradesString\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmph3x91hoc.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayLength = grades.count\n    var gradesArraySum = grades.reduce(0,\
    \ combine: +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayLength\n\
    \    var gradesArraySumOfSquares = grades.map { $0 * $0 }.reduce(0, combine: +)\n\
    \    var gradesArrayAverageOfSquares = gradesArraySumOfSquares / gradesArrayLength\n\
    \    var gradesArraySumOfPowers = grades.map { pow(Double($0), 2) }.reduce(0,\
    \ combine: +)\n    var gradesArrayAverageOfPowers = gradesArraySumOfPowers / gradesArrayLength\n\
    \    var gradesArraySumOfRoots = grades.map { sqrt(Double($0)) }.reduce(0, combine:\
    \ +)\n    var gradesArrayAverageOfRoots = gradesArraySumOfRoots / gradesArrayLength\n\
    \    var gradesArraySumOfLogs = grades.map { log(Double($0)) }.reduce(0, combine:\
    \ +)\n    var gradesArrayAverageOfLogs = gradesArraySumOfLogs / gradesArrayLength\n\
    \    var gradesArraySumOfLog10s = grades.map { log10(Double($0)) }.reduce(0, combine:\
    \ +)\n    var gradesArrayAverageOfLog10s = gradesArraySumOfLog10s / gradesArrayLength\n\
    \    var gradesArraySumOfLog1s = grades.map { log1p(Double($0)) }.reduce(0, combine:\
    \ +)\n    var gradesArrayAverageOfLog1s = gradesArraySumOfLog1s / gradesArrayLength\n\
    \    var gradesArraySumOfLog2s = grades.map { log2(Double($0)) }.reduce(0, combine:\
    \ +)\n    var gradesArrayAverageOfLog2s = gradesArraySumOfLog2s / gradesArrayLength\n\
    \    var gradesArraySumOfLog10s2 = grades.map { log10(Double($0)) }.reduce(0,\
    \ combine: +)\n    var gradesArrayAverageOfLog10s2 = gradesArraySumOfLog10s2 /\
    \ gradesArrayLength\n    var gradesArraySumOfLog10s3 = grades.map { log10(Double($0))\
    \ }.reduce(0, combine: +)\n    var gradesArrayAverageOfLog10s3 = gradesArraySumOfLog10s3\
    \ / gradesArrayLength\n    var gradesArraySumOfLog10s4 = grades.map { log10(Double($0))\
    \ }.reduce(0, combine: +)\n    var gradesArrayAverageOf\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnn4ksuz0.swift:28:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySum = grades.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmpnn4ksuz0.swift:30:64: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySumOfSquares = grades.map { $0 * $0 }.reduce(0,\
    \ combine: +)\n                                                              \
    \ ^   ~~~~~~~~~\n                                                            \
    \       \n/tmp/tmpnn4ksuz0.swift:32:47: error: cannot find 'pow' in scope\n  \
    \  var gradesArraySumOfPowers = grades.map { pow(Double($0), 2) }.reduce(0, combine:\
    \ +)\n                                              ^~~\n/tmp/tmpnn4ksuz0.swift:34:46:\
    \ error: cannot find 'sqrt' in scope\n    var gradesArraySumOfRoots = grades.map\
    \ { sqrt(Double($0)) }.reduce(0, combine: +)\n                               \
    \              ^~~~\n/tmp/tmpnn4ksuz0.swift:36:45: error: cannot find 'log' in\
    \ scope\n    var gradesArraySumOfLogs = grades.map { log(Double($0)) }.reduce(0,\
    \ combine: +)\n                                            ^~~\n/tmp/tmpnn4ksuz0.swift:38:47:\
    \ error: cannot find 'log10' in scope\n    var gradesArraySumOfLog10s = grades.map\
    \ { log10(Double($0)) }.reduce(0, combine: +)\n                              \
    \                ^~~~~\n/tmp/tmpnn4ksuz0.swift:40:46: error: cannot find 'log1p'\
    \ in scope\n    var gradesArraySumOfLog1s = grades.map { log1p(Double($0)) }.reduce(0,\
    \ combine: +)\n                                             ^~~~~\n/tmp/tmpnn4ksuz0.swift:42:46:\
    \ error: cannot find 'log2' in scope\n    var gradesArraySumOfLog2s = grades.map\
    \ { log2(Double($0)) }.reduce(0, combine: +)\n                               \
    \              ^~~~\n/tmp/tmpnn4ksuz0.swift:44:48: error: cannot find 'log10'\
    \ in scope\n    var gradesArraySumOfLog10s2 = grades.map { log10(Double($0)) }.reduce(0,\
    \ combine: +)\n                                               ^~~~~\n/tmp/tmpnn4ksuz0.swift:46:48:\
    \ error: cannot find 'log10' in scope\n    var gradesArraySumOfLo"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 0...0.1:\n            letterGrades.append(\"\
    E\")\n        case 0.1:\n            letterGrades.append(\"D-\")\n        case\
    \ 0.2:\n            letterGrades.append(\"B-\")\n        case 0.3:\n         \
    \   letterGrades.append(\"B-\")\n        case 0.4:\n            letterGrades.append(\"\
    B-\")\n        case 0.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 0.6:\n            letterGrades.append(\"B-\")\n        case 0.7:\n         \
    \   letterGrades.append(\"B-\")\n        case 0.8:\n            letterGrades.append(\"\
    B-\")\n        case 0.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.0:\n            letterGrades.append(\"B-\")\n        case 1.1:\n         \
    \   letterGrades.append(\"B-\")\n        case 1.2:\n            letterGrades.append(\"\
    B-\")\n        case 1.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.4:\n            letterGrades.append(\"B-\")\n        case 1.5:\n         \
    \   letterGrades.append(\"B-\")\n        case 1.6:\n            letterGrades.append(\"\
    B-\")\n        case 1.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.8:\n            letterGrades.append(\"B-\")\n        case 1.9:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.1:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.2:\n            letterGrades.append(\"B-\")\n        case 2.3:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.4:\n            letterGrades.append(\"\
    B-\")\n        case 2.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.6:\n            letterGrades.append(\"B-\")\n        case 2.7:\n         \
    \   letterGrades.append(\"B-\")\n        case 2.8:\n            letterGrades.append(\"\
    B-\")\n        case 2.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.0:\n            letterGrades.append(\"B-\")\n        case 3.1:\n         \
    \   letterGrades.append(\"B-\")\n        case 3.2:\n            letterGrades.append(\"\
    B-\")\n        case 3.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.4:\n            letterGrades.append(\"B-\")\n        case 3.5:\n         \
    \   letterGrades.append(\"B-\")\n        case 3.6:\n            letterGrades.append(\"\
    B-\")\n        case 3.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.8:\n            letterGrades.append(\"B-\")\n        case 3.9:\n         \
    \   letterGrades.append(\"B-\")\n        case 4.0:\n            letterGrade\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf1tb6_op.swift:130:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpf1tb6_op.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpf1tb6_op.swift:130:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpf1tb6_op.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpf1tb6_op.swift:109:13: error: cannot find 'letterGrade' in scope\n   \
    \         letterGrade\n            ^~~~~~~~~~~\n/tmp/tmpf1tb6_op.swift:27:9: error:\
    \ switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmpf1tb6_op.swift:27:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmpf1tb6_op.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa = grade * 4.0\n        letterGrade = letterGrade + String(format: \"%.1f\"\
    , gpa)\n        if gpa > 3.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 2.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 2.3 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 1.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 1.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 0.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else {\n            letterGrade = letterGrade + \"-\"\n        }\n\
    \    }\n    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy_fdoza4.swift:30:37: error: no exact matches in call to initializer\
    \ \n        letterGrade = letterGrade + String(format: \"%.1f\", gpa)\n      \
    \                              ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpy_fdoza4.swift:30:37:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        letterGrade = letterGrade + String(format: \"%.1f\", gpa)\n  \
    \                                  ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    grades.forEach\
    \ {\n        if $0 > 3.0 {\n            gradesArray.append(\"B+\")\n        }\
    \ else if $0 > 2.7 {\n            gradesArray.append(\"B\")\n        } else if\
    \ $0 > 2.3 {\n            gradesArray.append(\"B-\")\n        } else if $0 > 1.3\
    \ {\n            gradesArray.append(\"C+\")\n        } else if $0 > 0.7 {\n  \
    \          gradesArray.append(\"C\")\n        } else if $0 > 0.3 {\n         \
    \   gradesArray.append(\"C-\")\n        } else if $0 > 0.0 {\n            gradesArray.append(\"\
    D+\")\n        } else if $0 > 0.0 {\n            gradesArray.append(\"D\")\n \
    \       } else if $0 > 0.0 {\n            gradesArray.append(\"D-\")\n       \
    \ } else {\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpob8ulipv/tmpob8ulipv.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047def1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047dbe8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047dbe8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047dbe77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob8ulipv                        0x0000556db55ad6f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b047e0dd460 __libc_start_main +
    245

    6    tmpob8ulipv                        0x0000556db55ad219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpa = grades[gpaIndex]\n\
    \        let letterGrade = letterGrades[gpaIndex]\n        if gpa > 3.0 {\n  \
    \          letterGrades.append(letterGrade + \"+\")\n            gpaIndex += 1\n\
    \        } else if gpa > 2.0 {\n            letterGrades.append(letterGrade +\
    \ \"-\")\n            gpaIndex += 1\n        } else if gpa > 1.0 {\n         \
    \   letterGrades.append(letterGrade + \"C\")\n            gpaIndex += 1\n    \
    \    } else if gpa > 0.7 {\n            letterGrades.append(letterGrade + \"D\"\
    )\n            gpaIndex += 1\n        } else if gpa > 0.3 {\n            letterGrades.append(letterGrade\
    \ + \"E\")\n            gpaIndex += 1\n        } else if gpa > 0.0 {\n       \
    \     letterGrades.append(letterGrade + \"F\")\n            gpaIndex += 1\n  \
    \      } else {\n            letterGrades.append(letterGrade + \"A\")\n      \
    \      gpaIndex += 1\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzj51i8ic.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var letterGrades\
    \ = [String]()\n    var gpa = gradesArray[0]\n    var gpaIndex = 0\n    var letterGrade\
    \ = \"\"\n    while gpa > 0 {\n        if gpa > 3.0 {\n            letterGrade\
    \ = \"A+\"\n            gpaIndex += 1\n        } else if gpa > 2.7 {\n       \
    \     letterGrade = \"A\"\n            gpaIndex += 1\n        } else if gpa >\
    \ 2.3 {\n            letterGrade = \"A-\"\n            gpaIndex += 1\n       \
    \ } else if gpa > 1.3 {\n            letterGrade = \"B+\"\n            gpaIndex\
    \ += 1\n        } else if gpa > 1.7 {\n            letterGrade = \"B\"\n     \
    \       gpaIndex += 1\n        } else if gpa > 1.0 {\n            letterGrade\
    \ = \"B-\"\n            gpaIndex += 1\n        } else if gpa > 0.7 {\n       \
    \     letterGrade = \"C+\"\n            gpaIndex += 1\n        } else if gpa >\
    \ 0.3 {\n            letterGrade = \"C\"\n            gpaIndex += 1\n        }\
    \ else if gpa > 0.0 {\n            letterGrade = \"C-\"\n            gpaIndex\
    \ += 1\n        } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n    \
    \        gpaIndex += 1\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D\"\n            gpaIndex += 1\n        } else if gpa > 0.0 {\n        \
    \    letterGrade = \"D-\"\n            gpaIndex += 1\n        } else {\n     \
    \       letterGrade = \"E\"\n            gpaIndex += 1\n        }\n        letterGrades.append(letterGrade)\n\
    \        gpa = gradesArray[gpaIndex]\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4219592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4219289561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4219289286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b421928913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4219288bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4219088f44 <unavailable> + 188228

    6    tmpr80ivkwy                        0x0000563653d2550f <unavailable> + 9487

    7    tmpr80ivkwy                        0x0000563653d2454d <unavailable> + 5453

    8    libc.so.6                          0x00002b421977e460 __libc_start_main +
    245

    9    tmpr80ivkwy                        0x0000563653d24209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaString = String(format: \"%.1f\", gpa)\n    var letterGrade\
    \ = grades.reduce(\"\") { $0 + String(format: \"%.1f\", $1) }\n    letterGrades.append(letterGrade)\n\
    \    if gpa < 4.0 {\n        letterGrades.append(letterGrade)\n    }\n    if gpa\
    \ < 3.7 {\n        letterGrades.append(letterGrade)\n    }\n    if gpa < 3.3 {\n\
    \        letterGrades.append(letterGrade)\n    }\n    if gpa < 3.0 {\n       \
    \ letterGrades.append(letterGrade)\n    }\n    if gpa < 2.7 {\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 2.3 {\n        letterGrades.append(letterGrade)\n    }\n\
    \    if gpa < 2.0 {\n        letterGrades.append(letterGrade)\n    }\n    if gpa\
    \ < 1.7 {\n        letterGrades.append(letterGrade)\n    }\n    if gpa < 1.3 {\n\
    \        letterGrades.append(letterGrade)\n    }\n    if gpa < 1.0 {\n       \
    \ letterGrades.append(letterGrade)\n    }\n    if gpa < 0.7 {\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa < 0.0 {\n        letterGrades.append(letterGrade)\n    }\n\
    \    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkyzs8lb_.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpkyzs8lb_.swift:27:27:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    var gpaString = String(format: \"%.1f\", gpa)\n                         \
    \ ^~~~~~~\n                           repeating       count: \n/tmp/tmpkyzs8lb_.swift:28:48:\
    \ error: no exact matches in call to initializer \n    var letterGrade = grades.reduce(\"\
    \") { $0 + String(format: \"%.1f\", $1) }\n                                  \
    \             ^\n/tmp/tmpkyzs8lb_.swift:28:48: note: candidate has partially matching\
    \ parameter list (repeating: String, count: Int)\n    var letterGrade = grades.reduce(\"\
    \") { $0 + String(format: \"%.1f\", $1) }\n                                  \
    \             ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\nSwift.String:3:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ characters:\
    \ S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var totalGrades\
    \ = grades.reduce(0, +)\n    var averageGrade = totalGrades / grades.count\n \
    \   var letterGrade = \"\"\n    for grade in grades {\n        if grade >= averageGrade\
    \ {\n            letterGrade = \"A+\"\n        } else if grade >= averageGrade\
    \ - 0.3 {\n            letterGrade = \"A-\"\n        } else if grade >= averageGrade\
    \ - 0.2 {\n            letterGrade = \"B+\"\n        } else if grade >= averageGrade\
    \ - 0.1 {\n            letterGrade = \"B\"\n        } else if grade >= averageGrade\
    \ - 0.05 {\n            letterGrade = \"B-\"\n        } else if grade >= averageGrade\
    \ - 0.01 {\n            letterGrade = \"C+\"\n        } else if grade >= averageGrade\
    \ - 0.005 {\n            letterGrade = \"C\"\n        } else if grade >= averageGrade\
    \ - 0.001 {\n            letterGrade = \"C-\"\n        } else if grade >= averageGrade\
    \ - 0.0005 {\n            letterGrade = \"D+\"\n        } else if grade >= averageGrade\
    \ - 0.0001 {\n            letterGrade = \"D\"\n        } else if grade >= averageGrade\
    \ - 0.00005 {\n            letterGrade = \"D-\"\n        } else if grade >= averageGrade\
    \ - 0.00001 {\n            letterGrade = \"E\"\n        } else {\n           \
    \ letterGrade = \"F\"\n        }\n        gradesArray.append(letterGrade)\n  \
    \  }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvnxqncd_.swift:27:36: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var averageGrade = totalGrades /\
    \ grades.count\n                       ~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n/tmp/tmpvnxqncd_.swift:27:36:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var averageGrade = totalGrades / grades.count\n\
    \                                   ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = \"A+\"\n        if gpa > 3.7\
    \ {\n            letterGrade = \"A\"\n        }\n        if gpa > 3.3 {\n    \
    \        letterGrade = \"A-\"\n        }\n        if gpa > 3.0 {\n           \
    \ letterGrade = \"B+\"\n        }\n        if gpa > 2.7 {\n            letterGrade\
    \ = \"B\"\n        }\n        if gpa > 2.3 {\n            letterGrade = \"B-\"\
    \n        }\n        if gpa > 2.0 {\n            letterGrade = \"C+\"\n      \
    \  }\n        if gpa > 1.7 {\n            letterGrade = \"C\"\n        }\n   \
    \     if gpa > 1.3 {\n            letterGrade = \"C-\"\n        }\n        if\
    \ gpa > 1.0 {\n            letterGrade = \"D+\"\n        }\n        if gpa > 0.7\
    \ {\n            letterGrade = \"D\"\n        }\n        if gpa > 0.0 {\n    \
    \        letterGrade = \"D-\"\n        }\n        if gpa < 0.0 {\n           \
    \ letterGrade = \"E\"\n        }\n        gradesArray.append(letterGrade)\n  \
    \  }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz_47z0p1/tmpz_47z0p1.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6780cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af677dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af677dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af677dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_47z0p1                        0x00005634f57fa7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002af6782ba460 __libc_start_main +
    245

    6    tmpz_47z0p1                        0x00005634f57fa2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            gradeLetters.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            gradeLetters.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            gradeLetters.append(\"B-\")\n    \
    \    } else if gpa > 1.7 {\n            gradeLetters.append(\"C\")\n        }\
    \ else if gpa > 1.0 {\n            gradeLetters.append(\"C-\")\n        } else\
    \ if gpa > 0.7 {\n            gradeLetters.append(\"D\")\n        } else if gpa\
    \ > 0.3 {\n            gradeLetters.append(\"D-\")\n        } else if gpa > 0.0\
    \ {\n            gradeLetters.append(\"E\")\n        } else {\n            gradeLetters.append(\"\
    F\")\n        }\n        gpa -= grade\n    }\n    return gradeLetters\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi1lxhjhq/tmpi1lxhjhq.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4d857c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4d54eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4d54e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4d54d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1lxhjhq                        0x00005585d0409856 <unavailable> + 6230

    5    libc.so.6                          0x00002baa4da43460 __libc_start_main +
    245

    6    tmpi1lxhjhq                        0x00005585d0409379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0.0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum3 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0.0, combine: +)\n    var gpaSum5 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0.0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum8 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0.0, combine: +)\n    var gpaSum10 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0.0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum13 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0.0, combine: +)\n    var gpaSum15 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0.0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum18 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0.0, combine: +)\n    var gpaSum20 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0.0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum23 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0.0, combine: +)\n    var gpaSum25 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0.0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum28 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0.0, combine: +)\n    var gpaSum30 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0.0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0.0, combine: +)\n    var gpaSum33 = grades.reduce(0.0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0.0, combine: +)\n    var gpaSum35 = grades.reduce(0.0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0.0, combine: +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5q7vc69r.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp5q7vc69r.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0.0,\
    \ combine: +)\n                              ^     ~~~~~~~~~\n               \
    \                     \n/tmp/tmp5q7vc69r.swift:28:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum2 = grades.reduce(0.0, combine: +)\n\
    \                               ^     ~~~~~~~~~\n                            \
    \         \n/tmp/tmp5q7vc69r.swift:29:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum3 = grades.reduce(0.0, combine: +)\n                \
    \               ^     ~~~~~~~~~\n                                     \n/tmp/tmp5q7vc69r.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0.0,\
    \ combine: +)\n                               ^     ~~~~~~~~~\n              \
    \                       \n/tmp/tmp5q7vc69r.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0.0, combine: +)\n\
    \                               ^     ~~~~~~~~~\n                            \
    \         \n/tmp/tmp5q7vc69r.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0.0, combine: +)\n                \
    \               ^     ~~~~~~~~~\n                                     \n/tmp/tmp5q7vc69r.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0.0,\
    \ combine: +)\n                               ^     ~~~~~~~~~\n              \
    \                       \n/tmp/tmp5q7vc69r.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0.0, combine: +)\n\
    \                               ^     ~~~~~~~~~\n                            \
    \         \n/tmp/tmp5q7vc69r.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0.0, combin"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetterGradeIndex = 0\n    var currentLetterGradeIndexCount\
    \ = 0\n    var currentLetterGradeIndexCountMax = gradesArray.count - 1\n    for\
    \ _ in 0..<gradesArray.count {\n        if currentGrade < gradesArray[_] {\n \
    \           currentLetterGradeIndexCount++\n            if currentLetterGradeIndexCount\
    \ > currentLetterGradeIndexCountMax {\n                currentLetterGradeIndexCountMax\
    \ = currentLetterGradeIndexCount\n            }\n        } else {\n          \
    \  currentLetterGradeIndexCount = 0\n        }\n        if currentLetterGradeIndexCount\
    \ == currentLetterGradeIndexCountMax {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentLetterGrade = \"\"\n            currentLetterGradeIndexCount\
    \ = 0\n        }\n        currentGrade = gradesArray[_]\n        currentLetterGrade\
    \ += currentLetterGradeIndexCount == 0 ? \"E\" : String(currentLetterGradeIndexCount)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjyefn7h9.swift:33:39: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if currentGrade < gradesArray[_]\
    \ {\n                                      ^\n/tmp/tmpjyefn7h9.swift:34:41: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            currentLetterGradeIndexCount++\n\
    \                                        ^~\n/tmp/tmpjyefn7h9.swift:46:36: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \    currentGrade = gradesArray[_]\n                                   ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(format:\
    \ \"%+.1f\", gpa)\n    }\n    \n    gradesArray.append(letterGrade)\n    \n  \
    \  return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiz2z7619.swift:31:37: error: no exact matches in call to initializer\
    \ \n        letterGrade = letterGrade + String(format: \"%+.1f\", gpa)\n     \
    \                               ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpiz2z7619.swift:31:37:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        letterGrade = letterGrade + String(format: \"%+.1f\", gpa)\n \
    \                                   ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesString += \"\
    A+\"\n        case 3.7:\n            gradesString += \"A\"\n        case 3.3:\n\
    \            gradesString += \"A-\"\n        case 3.0:\n            gradesString\
    \ += \"B+\"\n        case 2.7:\n            gradesString += \"B\"\n        case\
    \ 2.3:\n            gradesString += \"B-\"\n        case 2.0:\n            gradesString\
    \ += \"C+\"\n        case 1.7:\n            gradesString += \"C\"\n        case\
    \ 1.3:\n            gradesString += \"C-\"\n        case 1.0:\n            gradesString\
    \ += \"D+\"\n        case 0.7:\n            gradesString += \"D\"\n        case\
    \ 0.0:\n            gradesString += \"D-\"\n        case 0.0:\n            gradesString\
    \ += \"E\"\n        default:\n            gradesString += \"E\"\n        }\n \
    \   }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprxtjxq4d.swift:52:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case 0.0:\n             ^~~\n\
    /tmp/tmprxtjxq4d.swift:50:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 0.0:\n             ^~~\n/tmp/tmprxtjxq4d.swift:58:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return gradesString\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradeLetters = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    for grade in grades {\n        let letter\
    \ = grade >= totalGrade ? \"D-\" : grade >= 3.0 ? \"C-\" : grade >= 2.0 ? \"B-\"\
    \ : grade >= 1.0 ? \"B-\" : grade >= 0.7 ? \"A-\" : grade >= 0.3 ? \"A-\" : grade\
    \ >= 0.0 ? \"A-\" : grade >= 0.3 ? \"A-\" : grade >= 0.7 ? \"A-\" : grade >= 1.0\
    \ ? \"A-\" : grade >= 2.0 ? \"A-\" : grade >= 3.0 ? \"A-\" : grade >= 3.3 ? \"\
    A-\" : grade >= 3.7 ? \"A-\" : grade >= 4.0 ? \"A-\" : grade >= 4.3 ? \"A-\" :\
    \ grade >= 4.7 ? \"A-\" : grade >= 5.0 ? \"A-\" : grade >= 5.3 ? \"A-\" : grade\
    \ >= 5.7 ? \"A-\" : grade >= 6.0 ? \"A-\" : grade >= 6.3 ? \"A-\" : grade >= 6.7\
    \ ? \"A-\" : grade >= 7.0 ? \"A-\" : grade >= 7.3 ? \"A-\" : grade >= 7.7 ? \"\
    A-\" : grade >= 8.0 ? \"A-\" : grade >= 8.3 ? \"A-\" : grade >= 8.7 ? \"A-\" :\
    \ grade >= 9.0 ? \"A-\" : grade >= 9.3 ? \"A-\" : grade >= 9.7 ? \"A-\" : grade\
    \ >= 10.0 ? \"A-\" : grade >= 10.3 ? \"A-\" : grade >= 10.7 ? \"A-\" : grade >=\
    \ 11.0 ? \"A-\" : grade >= 11.3 ? \"A-\" : grade >= 11.7 ? \"A-\" : grade >= 12.0\
    \ ? \"A-\" : grade >= 12.3 ? \"A-\" : grade >= 12.7 ? \"A-\" : grade >= 13.0 ?\
    \ \"A-\" : grade >= 13.3 ? \"A-\" : grade >= 13.7 ? \"A-\" : grade >= 14.0 ? \"\
    A-\" : grade >= 14.3 ? \"A-\" : grade >= 14.7 ? \"A-\" : grade >= 15.0 ? \"A-\"\
    \ : grade >= 15.3 ? \"A-\" : grade >= 15.7 ? \"A-\" : grade >= 16.0 ? \"A-\" :\
    \ grade >= 16.3 ? \"A-\" : grade >= 16.7 ? \"A-\" : grade >= 17.0 ? \"A-\" : grade\
    \ >= 17.3 ? \"A-\" : grade >= 17.7 ? \"A-\" : grade >= 18.0 ? \"A-\" : grade >=\
    \ 18.3 ? \"A-\" : grade >= 18.7 ? \"A-\" : grade >= 19.0 ? \"A-\" : grade >= \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5epazbkx.swift:29:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp5epazbkx.swift:49:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp5epazbkx.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp5epazbkx.swift:26:35: error: extraneous argument label 'combine:' in call\n\
    \    var totalGrade = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmp5epazbkx.swift:32:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var previousGrade = gradesArray[0]\n    var previousLetterGrade\
    \ = \"\"\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade =\
    \ \"\"\n    for grade in gradesArray {\n        if grade < previousGrade {\n \
    \           letterGrades.append(previousLetterGrade)\n            previousGrade\
    \ = grade\n            previousLetterGrade = \"\"\n        }\n        if grade\
    \ > currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentGrade = grade\n            currentLetterGrade = \"\"\n       \
    \ }\n        if grade == previousGrade {\n            previousLetterGrade = currentLetterGrade\n\
    \            currentLetterGrade = grade > currentGrade ? \"B+\" : \"B-\"\n   \
    \     } else {\n            previousLetterGrade = currentLetterGrade\n       \
    \     currentLetterGrade = grade > currentGrade ? \"C+\" : \"C-\"\n        }\n\
    \    }\n    letterGrades.append(currentLetterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6u_63ho8/tmp6u_63ho8.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9472a6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9472766b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9472766988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94727657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6u_63ho8                        0x000056491e5308e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b9472c5b460 __libc_start_main +
    245

    6    tmp6u_63ho8                        0x000056491e530409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    gradesArray = gradesArray.sorted()\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var grades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpth_u0xio.swift:28:9: error: invalid redeclaration of 'gradesArrayCopy'\n\
    \    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:29:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:30:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:31:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:32:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:33:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:34:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:35:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:26:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmpth_u0xio.swift:3"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa > 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa > 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa > 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa > 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa > 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa > 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa > 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa > 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa > 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa > 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa >\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa > 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv9_yj8ba.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesString += \"\
    A+\"\n        case 3.7:\n            gradesString += \"A\"\n        case 3.3:\n\
    \            gradesString += \"A-\"\n        case 3.0:\n            gradesString\
    \ += \"B+\"\n        case 2.7:\n            gradesString += \"B\"\n        case\
    \ 2.3:\n            gradesString += \"B-\"\n        case 2.0:\n            gradesString\
    \ += \"C+\"\n        case 1.7:\n            gradesString += \"C\"\n        case\
    \ 1.3:\n            gradesString += \"C-\"\n        case 1.0:\n            gradesString\
    \ += \"D+\"\n        case 0.7:\n            gradesString += \"D\"\n        case\
    \ 0.0:\n            gradesString += \"D-\"\n        case 0.1:\n            gradesString\
    \ += \"E\"\n        default:\n            gradesString += \"E\"\n        }\n \
    \   }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_d_nuhv.swift:58:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return gradesString\n         \
    \  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014736
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArrayCopy.removeFirst()\n    gradesArrayCopy.removeLast()\n    var\
    \ gradesArrayCopy2 = gradesArrayCopy\n    var gradesArrayCopy3 = gradesArrayCopy2\n\
    \    var gradesArrayCopy4 = gradesArrayCopy3\n    var gradesArrayCopy5 = gradesArrayCopy4\n\
    \    var gradesArrayCopy6 = gradesArrayCopy5\n    var gradesArrayCopy7 = gradesArrayCopy6\n\
    \    var gradesArrayCopy8 = gradesArrayCopy7\n    var gradesArrayCopy9 = gradesArrayCopy8\n\
    \    var gradesArrayCopy10 = gradesArrayCopy9\n    var gradesArrayCopy11 = gradesArrayCopy10\n\
    \    var gradesArrayCopy12 = gradesArrayCopy11\n    var gradesArrayCopy13 = gradesArrayCopy12\n\
    \    var gradesArrayCopy14 = gradesArrayCopy13\n    var gradesArrayCopy15 = gradesArrayCopy14\n\
    \    var gradesArrayCopy16 = gradesArrayCopy15\n    var gradesArrayCopy17 = gradesArrayCopy16\n\
    \    var gradesArrayCopy18 = gradesArrayCopy17\n    var gradesArrayCopy19 = gradesArrayCopy18\n\
    \    var gradesArrayCopy20 = gradesArrayCopy19\n    var gradesArrayCopy21 = gradesArrayCopy20\n\
    \    var gradesArrayCopy22 = gradesArrayCopy21\n    var gradesArrayCopy23 = gradesArrayCopy22\n\
    \    var gradesArrayCopy24 = gradesArrayCopy23\n    var gradesArrayCopy25 = gradesArrayCopy24\n\
    \    var gradesArrayCopy26 = gradesArrayCopy25\n    var gradesArrayCopy27 = gradesArrayCopy26\n\
    \    var gradesArrayCopy28 = gradesArrayCopy27\n    var gradesArrayCopy29 = gradesArrayCopy28\n\
    \    var gradesArrayCopy30 = gradesArrayCopy29\n    var gradesArrayCopy31 = gradesArrayCopy30\n\
    \    var gradesArrayCopy32 = gradesArrayCopy31\n    var gradesArrayCopy33 = gradesArrayCopy32\n\
    \    var gradesArrayCopy34 = gradesArrayCopy33\n    var gradesArrayCopy35 = gradesArrayCopy34\n\
    \    var gradesArrayCopy36 = gradesArrayCopy35\n    var gradesArrayCopy37 = gradesArrayCopy36\n\
    \    var gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf3jxr8_0.swift:67:9: error: type annotation missing in pattern\n\
    \    var gradesArray\n        ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 0...0.1:\n            letterGrades.append(\"\
    E\")\n        case 0.1:\n            letterGrades.append(\"D-\")\n        case\
    \ 0.2:\n            letterGrades.append(\"D\")\n        case 0.3:\n          \
    \  letterGrades.append(\"C-\")\n        case 0.4:\n            letterGrades.append(\"\
    C\")\n        case 0.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 0.6:\n            letterGrades.append(\"B\")\n        case 0.7:\n          \
    \  letterGrades.append(\"B-\")\n        case 0.8:\n            letterGrades.append(\"\
    B\")\n        case 0.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.0:\n            letterGrades.append(\"B\")\n        case 1.1:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.2:\n            letterGrades.append(\"\
    B\")\n        case 1.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.4:\n            letterGrades.append(\"B\")\n        case 1.5:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.6:\n            letterGrades.append(\"\
    B\")\n        case 1.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.8:\n            letterGrades.append(\"B\")\n        case 1.9:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.0:\n            letterGrades.append(\"\
    B\")\n        case 2.1:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.2:\n            letterGrades.append(\"B\")\n        case 2.3:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.4:\n            letterGrades.append(\"\
    B\")\n        case 2.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.6:\n            letterGrades.append(\"B\")\n        case 2.7:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.8:\n            letterGrades.append(\"\
    B\")\n        case 2.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.0:\n            letterGrades.append(\"B\")\n        case 3.1:\n          \
    \  letterGrades.append(\"B-\")\n        case 3.2:\n            letterGrades.append(\"\
    B\")\n        case 3.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.4:\n            letterGrades.append(\"B\")\n        case 3.5:\n          \
    \  letterGrades.append(\"B-\")\n        case 3.6:\n            letterGrades.append(\"\
    B\")\n        case 3.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.8:\n            letterGrades.append(\"B\")\n        case 3.9:\n          \
    \  letterGrades.append(\"B-\")\n        case 4.0:\n            letterGrade\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0fzdofv1.swift:130:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp0fzdofv1.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp0fzdofv1.swift:130:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp0fzdofv1.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp0fzdofv1.swift:109:13: error: cannot find 'letterGrade' in scope\n   \
    \         letterGrade\n            ^~~~~~~~~~~\n/tmp/tmp0fzdofv1.swift:27:9: error:\
    \ switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmp0fzdofv1.swift:27:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmp0fzdofv1.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    if grades.count\
    \ < 1 {\n        return letterGrades\n    }\n    \n    let gpa = grades.reduce(0,\
    \ combine: +)\n    \n    if gpa < 4.0 {\n        letterGrades.append(\"A+\")\n\
    \    } else if gpa < 3.7 {\n        letterGrades.append(\"A\")\n    } else if\
    \ gpa < 3.3 {\n        letterGrades.append(\"A-\")\n    } else if gpa < 3.0 {\n\
    \        letterGrades.append(\"B+\")\n    } else if gpa < 2.7 {\n        letterGrades.append(\"\
    B\")\n    } else if gpa < 2.3 {\n        letterGrades.append(\"B-\")\n    } else\
    \ if gpa < 2.0 {\n        letterGrades.append(\"C+\")\n    } else if gpa < 1.7\
    \ {\n        letterGrades.append(\"C\")\n    } else if gpa < 1.3 {\n        letterGrades.append(\"\
    C-\")\n    } else if gpa < 1.0 {\n        letterGrades.append(\"D+\")\n    } else\
    \ if gpa < 0.7 {\n        letterGrades.append(\"D\")\n    } else if gpa < 0.0\
    \ {\n        letterGrades.append(\"D-\")\n    } else {\n        letterGrades.append(\"\
    E\")\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_m3v_4p_.swift:31:28: error: extraneous argument label 'combine:'\
    \ in call\n    let gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    var gradesArrayIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnpbkj0bz.swift:29:9: error: invalid redeclaration of 'gradesArrayIndexMax'\n\
    \    var gradesArrayIndexMax = grades.count - 1\n        ^\n/tmp/tmpnpbkj0bz.swift:27:9:\
    \ note: 'gradesArrayIndexMax' previously declared here\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n        ^\n/tmp/tmpnpbkj0bz.swift:30:9: error: invalid redeclaration\
    \ of 'gradesArrayIndexMin'\n    var gradesArrayIndexMin = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:28:9:\
    \ note: 'gradesArrayIndexMin' previously declared here\n    var gradesArrayIndexMin\
    \ = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:31:9: error: invalid redeclaration of\
    \ 'gradesArrayIndexMax'\n    var gradesArrayIndexMax = grades.count - 1\n    \
    \    ^\n/tmp/tmpnpbkj0bz.swift:27:9: note: 'gradesArrayIndexMax' previously declared\
    \ here\n    var gradesArrayIndexMax = grades.count - 1\n        ^\n/tmp/tmpnpbkj0bz.swift:32:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexMin'\n    var gradesArrayIndexMin\
    \ = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:28:9: note: 'gradesArrayIndexMin' previously\
    \ declared here\n    var gradesArrayIndexMin = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:33:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexMax'\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n        ^\n/tmp/tmpnpbkj0bz.swift:27:9: note: 'gradesArrayIndexMax'\
    \ previously declared here\n    var gradesArrayIndexMax = grades.count - 1\n \
    \       ^\n/tmp/tmpnpbkj0bz.swift:34:9: error: invalid redeclaration of 'gradesArrayIndexMin'\n\
    \    var gradesArrayIndexMin = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:28:9: note:\
    \ 'gradesArrayIndexMin' previously declared here\n    var gradesArrayIndexMin\
    \ = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:35:9: error: invalid redeclaration of\
    \ 'gradesArrayIndexMax'\n    var gradesArrayIndexMax = grades.count - 1\n    \
    \    ^\n/tmp/tmpnpbkj0bz.swift:27:9: note: 'gradesArrayIndexMax' previously declared\
    \ here\n    var gradesArrayIndexMax = grades.count - 1\n        ^\n/tmp/tmpnpbkj0bz.swift:36:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexMin'\n    var gradesArrayIndexMin\
    \ = 0\n        ^\n/tmp/tmpnpbkj0bz.swift:28:9: note: 'gradesArrayIndexMin' pre"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppdvb95du/tmppdvb95du.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbce99bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbce692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbce692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbce6917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdvb95du                        0x000055879d1b57a6 <unavailable> + 6054

    5    libc.so.6                          0x00002afbceb87460 __libc_start_main +
    245

    6    tmppdvb95du                        0x000055879d1b52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaLetterGrade: String = \"\"\n    \n    if gpa < 4.0 {\n\
    \        gpaLetterGrade = \"A+\"\n    } else if gpa < 3.7 {\n        gpaLetterGrade\
    \ = \"A\"\n    } else if gpa < 3.3 {\n        gpaLetterGrade = \"A-\"\n    } else\
    \ if gpa < 3.0 {\n        gpaLetterGrade = \"B+\"\n    } else if gpa < 2.7 {\n\
    \        gpaLetterGrade = \"B\"\n    } else if gpa < 2.3 {\n        gpaLetterGrade\
    \ = \"B-\"\n    } else if gpa < 2.0 {\n        gpaLetterGrade = \"C+\"\n    }\
    \ else if gpa < 1.7 {\n        gpaLetterGrade = \"C\"\n    } else if gpa < 1.3\
    \ {\n        gpaLetterGrade = \"C-\"\n    } else if gpa < 1.0 {\n        gpaLetterGrade\
    \ = \"D+\"\n    } else if gpa < 0.7 {\n        gpaLetterGrade = \"D\"\n    } else\
    \ if gpa < 0.0 {\n        gpaLetterGrade = \"D-\"\n    } else {\n        gpaLetterGrade\
    \ = \"E\"\n    }\n    \n    letterGrades.append(gpaLetterGrade)\n    \n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjvh9bcgf.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var letterGrade = \"\"\
    \n    var gpa = gradesArray[0]\n    var gpaCount = 1\n    var letterGradeIndex\
    \ = 0\n    for index in 0..<gradesArrayCount {\n        if gpa > gradesArray[index]\
    \ {\n            letterGrade = letterGrades[letterGradeIndex]\n            gpa\
    \ = gradesArray[index]\n            gpaCount = gpaCount + 1\n            if gpaCount\
    \ == 4 {\n                letterGrades.append(letterGrade)\n                letterGrade\
    \ = \"\"\n                gpaCount = 1\n                letterGradeIndex = letterGradeIndex\
    \ + 1\n            }\n        } else {\n            if letterGradeIndex == 0 {\n\
    \                letterGrades.append(letterGrade)\n                letterGrade\
    \ = \"\"\n                gpaCount = 1\n                letterGradeIndex = letterGradeIndex\
    \ + 1\n            } else {\n                letterGrade = letterGrades[letterGradeIndex\
    \ - 1]\n                gpa = gradesArray[index]\n                gpaCount = gpaCount\
    \ + 1\n                if gpaCount == 4 {\n                    letterGrades.append(letterGrade)\n\
    \                    letterGrade = \"\"\n                    gpaCount = 1\n  \
    \                  letterGradeIndex = letterGradeIndex + 1\n                }\n\
    \            }\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfke4lb0g/tmpfke4lb0g.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f45ffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f45cf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f45cf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f45cf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfke4lb0g                        0x0000564d1791e9b6 <unavailable> + 6582

    5    libc.so.6                          0x00002b8f461e6460 __libc_start_main +
    245

    6    tmpfke4lb0g                        0x0000564d1791e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n \
    \       gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n \
    \   }\n    \n    gradesArray = gradesArray.sorted(by: <)\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzvtezpmt/tmpzvtezpmt.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ab00f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6aafdefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6aafdef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6aafdee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvtezpmt                        0x00005577017b6926 <unavailable> + 6438

    5    libc.so.6                          0x00002b6ab02e4460 __libc_start_main +
    245

    6    tmpzvtezpmt                        0x00005577017b6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa >= 4.0 {\n       \
    \ letterGrade = \"A+\"\n    }\n    else if gpa >= 3.7 {\n        letterGrade =\
    \ \"A\"\n    }\n    else if gpa >= 3.3 {\n        letterGrade = \"A-\"\n    }\n\
    \    else if gpa >= 3.0 {\n        letterGrade = \"B+\"\n    }\n    else if gpa\
    \ >= 2.7 {\n        letterGrade = \"B\"\n    }\n    else if gpa >= 2.3 {\n   \
    \     letterGrade = \"B-\"\n    }\n    else if gpa >= 2.0 {\n        letterGrade\
    \ = \"C+\"\n    }\n    else if gpa >= 1.7 {\n        letterGrade = \"C\"\n   \
    \ }\n    else if gpa >= 1.3 {\n        letterGrade = \"C-\"\n    }\n    else if\
    \ gpa >= 1.0 {\n        letterGrade = \"D+\"\n    }\n    else if gpa >= 0.7 {\n\
    \        letterGrade = \"D\"\n    }\n    else if gpa >= 0.0 {\n        letterGrade\
    \ = \"D-\"\n    }\n    else {\n        letterGrade = \"E\"\n    }\n    \n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp23l9o4i1.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    for grade in grades {\n     \
    \   gpa += grade\n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n \
    \       } else if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else\
    \ if gpa > 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.3\
    \ {\n            letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n       \
    \     letterGrade = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade\
    \ = \"C-\"\n        } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n\
    \        } else if gpa > -0.3 {\n            letterGrade = \"D\"\n        } else\
    \ if gpa > -0.7 {\n            letterGrade = \"D-\"\n        } else if gpa > -1.0\
    \ {\n            letterGrade = \"E\"\n        } else {\n            letterGrade\
    \ = \"F\"\n        }\n        gradesArray.append(letterGrade)\n        gpa = 0.0\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbe_eftti/tmpbe_eftti.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7afe62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7afb59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7afb59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7afb587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbe_eftti                        0x00005612ba22c7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac7b004e460 __libc_start_main +
    245

    6    tmpbe_eftti                        0x00005612ba22c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayIndex = 0\n    var gradesArrayIndexMax = gradesArrayCount - 1\n \
    \   var gradesArrayIndexMin = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n  \
    \  var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount = 0\n    var\
    \ gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount\
    \ = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n\
    \    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n  \
    \  var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount = 0\n    var\
    \ gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount\
    \ = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n\
    \    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n  \
    \  var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount = 0\n    var\
    \ gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount\
    \ = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n\
    \    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n  \
    \  var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount = 0\n    var\
    \ gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n    var gradesArrayIndexCount\
    \ = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage = 0\n\
    \    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n    var gradesArrayIndexAverage\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var gradesArrayIndexSum = 0\n  \
    \  var gradesArrayIndexAverage = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn1ua8ksu.swift:86:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpn1ua8ksu.swift:29:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpn1ua8ksu.swift:29:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmpn1ua8ksu.swift:36:9: error: invalid redeclaration of 'gradesArrayIndexSum'\n\
    \    var gradesArrayIndexSum = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:33:9: note:\
    \ 'gradesArrayIndexSum' previously declared here\n    var gradesArrayIndexSum\
    \ = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:37:9: error: invalid redeclaration of\
    \ 'gradesArrayIndexAverage'\n    var gradesArrayIndexAverage = 0\n        ^\n\
    /tmp/tmpn1ua8ksu.swift:34:9: note: 'gradesArrayIndexAverage' previously declared\
    \ here\n    var gradesArrayIndexAverage = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:38:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexCount'\n    var gradesArrayIndexCount\
    \ = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:35:9: note: 'gradesArrayIndexCount' previously\
    \ declared here\n    var gradesArrayIndexCount = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:39:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexSum'\n    var gradesArrayIndexSum\
    \ = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:33:9: note: 'gradesArrayIndexSum' previously\
    \ declared here\n    var gradesArrayIndexSum = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:40:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexAverage'\n    var gradesArrayIndexAverage\
    \ = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:34:9: note: 'gradesArrayIndexAverage'\
    \ previously declared here\n    var gradesArrayIndexAverage = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:41:9:\
    \ error: invalid redeclaration of 'gradesArrayIndexCount'\n    var gradesArrayIndexCount\
    \ = 0\n        ^\n/tmp/tmpn1ua8ksu.swift:35:9: note: 'gradesArrayIndexCount' previously\
    \ declared"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n \
    \       gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n \
    \   }\n    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqdrnlyeg/tmpqdrnlyeg.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe5da64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe5d75bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe5d75b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe5d75a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdrnlyeg                        0x0000564b5a2048b6 <unavailable> + 6326

    5    libc.so.6                          0x00002abe5dc50460 __libc_start_main +
    245

    6    tmpqdrnlyeg                        0x0000564b5a2043d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    var letterGrades = [String]()\n    var letterGradeArrayCopy\
    \ = letterGrades\n    \n    for i in 0..<gradesArray.count {\n        if gradesArray[i]\
    \ > 3.0 {\n            gradesArray.removeAtIndex(i - 1)\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n        }\n    }\n    \n    for i in 0..<gradesArray.count {\n       \
    \ let grade = gradesArray[i]\n        let letterGrade = letterGradeArrayCopy[i]\n\
    \        \n        if grade > 3.0 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"+\")\n       \
    \ }\n        \n        if grade > 2.7 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"-\")\n       \
    \ }\n        \n        if grade > 2.3 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"+\")\n       \
    \ }\n        \n        if grade > 1.7 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"-\")\n       \
    \ }\n        \n        if grade > 1.3 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"+\")\n       \
    \ }\n        \n        if grade > 1.0 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"-\")\n       \
    \ }\n        \n        if grade > 0.7 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"+\")\n       \
    \ }\n        \n        if grade > 0.0 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"-\")\n       \
    \ }\n        \n        if grade < 0.0 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"+\")\n       \
    \ }\n        \n        if grade == 0.0 {\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            letterGradeArrayCopy.append(letterGrade + \"-\")\n       \
    \ }\n    }\n    \n    return letterGradeArrayCopy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf1iy4_g9.swift:32:25: error: value of type '[Double]' has no member\
    \ 'removeAtIndex'\n            gradesArray.removeAtIndex(i - 1)\n            ~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:33:34: error: value of type '[String]'\
    \ has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:42:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:47:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:52:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:57:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:62:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:67:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:72:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:77:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtIndex(i\
    \ - 1)\n            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf1iy4_g9.swift:82:34:\
    \ error: value of type '[String]' has no member 'removeAtIndex'\n            letterGradeArrayCopy.removeAtInd"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = -1\n    var letterGrade = \"\"\n    \n    for\
    \ _ in 0..<grades.count {\n        if gpa >= grades[gpaIndex] {\n            letterGrades.append(letterGrade)\n\
    \            gpaIndex += 1\n            letterGrade = \"\"\n        } else {\n\
    \            letterGrade += \"-\"\n        }\n        gpa -= grades[gpaIndex]\n\
    \    }\n    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzvjyaeg6.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesString = \"\"\n    for grade in grades\
    \ {\n        let letterGrade = letterGrade(grade)\n        gradesString += letterGrade\n\
    \    }\n    return gradesString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjjdvkeho.swift:27:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmpjjdvkeho.swift:27:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n/tmp/tmpjjdvkeho.swift:30:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return gradesString\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var totalGrade\
    \ = grades.reduce(0, combine: +)\n    var grade = totalGrade / Double(grades.count)\n\
    \    var letterGrade = \"\"\n    switch grade {\n    case 0...0.2:\n        letterGrade\
    \ = \"E\"\n    case 0.2...0.4:\n        letterGrade = \"D-\"\n    case 0.4...0.6:\n\
    \        letterGrade = \"C-\"\n    case 0.6...0.8:\n        letterGrade = \"B-\"\
    \n    case 0.8...1.0:\n        letterGrade = \"B+\"\n    case 1.0...1.2:\n   \
    \     letterGrade = \"A+\"\n    case 1.2...1.4:\n        letterGrade = \"A\"\n\
    \    case 1.4...1.6:\n        letterGrade = \"A-\"\n    case 1.6...1.8:\n    \
    \    letterGrade = \"A+\"\n    case 1.8...2.0:\n        letterGrade = \"B+\"\n\
    \    case 2.0...2.2:\n        letterGrade = \"B\"\n    case 2.2...2.4:\n     \
    \   letterGrade = \"B-\"\n    case 2.4...2.6:\n        letterGrade = \"B+\"\n\
    \    case 2.6...2.8:\n        letterGrade = \"C+\"\n    case 2.8...3.0:\n    \
    \    letterGrade = \"C\"\n    case 3.0...3.2:\n        letterGrade = \"C-\"\n\
    \    case 3.2...3.4:\n        letterGrade = \"C+\"\n    case 3.4...3.6:\n    \
    \    letterGrade = \"D+\"\n    case 3.6...3.8:\n        letterGrade = \"D\"\n\
    \    case 3.8...4.0:\n        letterGrade = \"D-\"\n    case 4.0...4.2:\n    \
    \    letterGrade = \"D+\"\n    case 4.2...4.4:\n        letterGrade = \"D\"\n\
    \    case 4.4...4.6:\n        letterGrade = \"D-\"\n    case 4.6...4.8:\n    \
    \    letterGrade = \"D+\"\n    case 4.8...5.0:\n        letterGrade = \"D\"\n\
    \    case 5.0...5.2:\n        letterGrade = \"D-\"\n    case 5.2...5.4:\n    \
    \    letterGrade = \"D+\"\n    case 5.4...5.6:\n        letterGrade = \"D\"\n\
    \    case 5.6...5.8:\n        letterGrade = \"D-\"\n    case 5.8...6.0:\n    \
    \    letterGrade = \"D+\"\n    case 6.0...6.2:\n        letterGrade = \"D\"\n\
    \    case 6.2...6.4:\n        letterGrade = \"D-\"\n    case \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmk6z6590.swift:94:9: error: expected pattern\n    case \n     \
    \   ^\n/tmp/tmpmk6z6590.swift:94:9: error: expected ':' after 'case'\n    case\
    \ \n        ^\n/tmp/tmpmk6z6590.swift:115:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpmk6z6590.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpmk6z6590.swift:26:35: error: extraneous argument label 'combine:' in call\n\
    \    var totalGrade = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmpmk6z6590.swift:98:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = 0\n    while gpa > 0 {\n        let gpaIndex2\
    \ = gpaIndex % 4\n        let gpaIndex3 = gpaIndex % 5\n        let gpaIndex4\
    \ = gpaIndex % 6\n        let gpaIndex5 = gpaIndex % 7\n        let gpaIndex6\
    \ = gpaIndex % 8\n        let gpaIndex7 = gpaIndex % 9\n        let gpaIndex8\
    \ = gpaIndex % 10\n        let gpaIndex9 = gpaIndex % 11\n        let gpaIndex10\
    \ = gpaIndex % 12\n        let gpaIndex11 = gpaIndex % 13\n        let gpaIndex12\
    \ = gpaIndex % 14\n        let gpaIndex13 = gpaIndex % 15\n        let gpaIndex14\
    \ = gpaIndex % 16\n        let gpaIndex15 = gpaIndex % 17\n        let gpaIndex16\
    \ = gpaIndex % 18\n        let gpaIndex17 = gpaIndex % 19\n        let gpaIndex18\
    \ = gpaIndex % 20\n        let gpaIndex19 = gpaIndex % 21\n        let gpaIndex20\
    \ = gpaIndex % 22\n        let gpaIndex21 = gpaIndex % 23\n        let gpaIndex22\
    \ = gpaIndex % 24\n        let gpaIndex23 = gpaIndex % 25\n        let gpaIndex24\
    \ = gpaIndex % 26\n        let gpaIndex25 = gpaIndex % 27\n        let gpaIndex26\
    \ = gpaIndex % 28\n        let gpaIndex27 = gpaIndex % 29\n        let gpaIndex28\
    \ = gpaIndex % 30\n        let gpaIndex29 = gpaIndex % 31\n        let gpaIndex30\
    \ = gpaIndex % 32\n        let gpaIndex31 = gpaIndex % 33\n        let gpaIndex32\
    \ = gpaIndex % 34\n        let gpaIndex33 = gpaIndex % 35\n        let gpaIndex34\
    \ = gpaIndex % 36\n        let gpaIndex35 = gpaIndex % 37\n        let gpaIndex36\
    \ = gpaIndex % 38\n        let gpaIndex37 = gpaIndex % 39\n        let gpaIndex38\
    \ = gpaIndex % 40\n        let gpaIndex39 = gpaIndex % 41\n        let gpaIndex40\
    \ = gpaIndex % 42\n        let gpaIndex41 = gpaIndex % 43\n        let gpaIndex42\
    \ = gpaIndex % 44\n        let gpaIndex43 = gpaIndex % 45\n        let gpaIndex44\
    \ = gpaIndex % 46\n        let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaguh3wsm.swift:72:12: error: expected pattern\n        let \n \
    \          ^\n/tmp/tmpaguh3wsm.swift:93:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpaguh3wsm.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpaguh3wsm.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpaguh3wsm.swift:76:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if gpa > 1.3 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if gpa > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if gpa > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.0\
    \ {\n            letterGrades.append(\"D\")\n        } else if gpa < 0.0 {\n \
    \           letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"\
    E\")\n        }\n        gpa -= grade\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9mj3i69a/tmp9mj3i69a.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b031e454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b031e14bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b031e14b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b031e14a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mj3i69a                        0x00005559b9ffe856 <unavailable> + 6230

    5    libc.so.6                          0x00002b031e640460 __libc_start_main +
    245

    6    tmp9mj3i69a                        0x00005559b9ffe379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade\
    \ in grades {\n        if grade >= 3.0 {\n            gradesArray.append(\"A+\"\
    )\n        } else if grade >= 2.7 {\n            gradesArray.append(\"B\")\n \
    \       } else if grade >= 2.3 {\n            gradesArray.append(\"B-\")\n   \
    \     } else if grade >= 1.3 {\n            gradesArray.append(\"C+\")\n     \
    \   } else if grade >= 0.7 {\n            gradesArray.append(\"C\")\n        }\
    \ else if grade >= 0.3 {\n            gradesArray.append(\"C-\")\n        } else\
    \ if grade >= 0.0 {\n            gradesArray.append(\"D+\")\n        } else if\
    \ grade >= -0.3 {\n            gradesArray.append(\"D-\")\n        } else if grade\
    \ >= -0.7 {\n            gradesArray.append(\"D\")\n        } else if grade >=\
    \ -1.0 {\n            gradesArray.append(\"E\")\n        } else {\n          \
    \  gradesArray.append(\"F\")\n        }\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz977cl8c/tmpz977cl8c.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf2ff42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf2fc39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf2fc39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf2fc387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz977cl8c                        0x00005620fb6b47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002acf3012e460 __libc_start_main +
    245

    6    tmpz977cl8c                        0x00005620fb6b42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    if gpa < 4.0 {\n      \
    \  letterGrade = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\
    \n    } else if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa <\
    \ 3.0 {\n        letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"\
    C-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa\
    \ < 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3bhvfavj.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    grades.forEach\
    \ {\n        switch $0 {\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        case 0.1:\n            gradesArray.append(\"D-\")\n        case\
    \ 0.2:\n            gradesArray.append(\"D+\")\n        case 0.3...0.6:\n    \
    \        gradesArray.append(\"C\")\n        case 0.6...0.8:\n            gradesArray.append(\"\
    B-\")\n        case 0.8...1.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 1.0...1.2:\n            gradesArray.append(\"B-\")\n        case 1.2...1.4:\n\
    \            gradesArray.append(\"B-\")\n        case 1.4...1.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 1.6...1.8:\n            gradesArray.append(\"\
    B-\")\n        case 1.8...2.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 2.0...2.2:\n            gradesArray.append(\"B-\")\n        case 2.2...2.4:\n\
    \            gradesArray.append(\"B-\")\n        case 2.4...2.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 2.6...2.8:\n            gradesArray.append(\"\
    B-\")\n        case 2.8...3.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 3.0...3.2:\n            gradesArray.append(\"B-\")\n        case 3.2...3.4:\n\
    \            gradesArray.append(\"B-\")\n        case 3.4...3.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 3.6...3.8:\n            gradesArray.append(\"\
    B-\")\n        case 3.8...4.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 4.0...4.2:\n            gradesArray.append(\"B-\")\n        case 4.2...4.4:\n\
    \            gradesArray.append(\"B-\")\n        case 4.4...4.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 4.6...4.8:\n            gradesArray.append(\"\
    B-\")\n        case 4.8...5.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 5.0...5.2:\n            gradesArray.append(\"B-\")\n        case 5.2...5.4:\n\
    \            gradesArray.append(\"B-\")\n        case 5.4...5.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 5.6...5.8:\n            gradesArray.append(\"\
    B-\")\n        case 5.8...6.0:\n            gradesArray.append(\"B-\")\n     \
    \   case 6.0...6.2:\n            gradesArray.append(\"B-\")\n        case 6.2...6.4:\n\
    \            gradesArray.append(\"B-\")\n        case 6.4...6.6:\n           \
    \ gradesArray.append(\"B-\")\n        case 6.\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppl0luvjl.swift:96:15: error: expected member name following '.'\n\
    \        case 6.\n              ^\n/tmp/tmppl0luvjl.swift:96:16: error: expected\
    \ ':' after 'case'\n        case 6.\n               ^\n/tmp/tmppl0luvjl.swift:117:66:\
    \ error: expected '}' at end of closure\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmppl0luvjl.swift:26:20: note: to match this opening\
    \ '{'\n    grades.forEach {\n                   ^\n/tmp/tmppl0luvjl.swift:117:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmppl0luvjl.swift:24:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var totalGrades = gradesArray.reduce(0)\
    \ { $0 + $1 }\n    var average = totalGrades / gradesArray.count\n    var gradeIndex\
    \ = 0\n    var letterGrade = \"\"\n    while average > 0 {\n        if average\
    \ >= 4.0 {\n            letterGrade = \"A+\"\n            average = average -\
    \ 4.0\n            gradeIndex += 1\n        } else if average >= 3.7 {\n     \
    \       letterGrade = \"A\"\n            average = average - 3.7\n           \
    \ gradeIndex += 1\n        } else if average >= 3.3 {\n            letterGrade\
    \ = \"A-\"\n            average = average - 3.3\n            gradeIndex += 1\n\
    \        } else if average >= 3.0 {\n            letterGrade = \"B+\"\n      \
    \      average = average - 3.0\n            gradeIndex += 1\n        } else if\
    \ average >= 2.7 {\n            letterGrade = \"B\"\n            average = average\
    \ - 2.7\n            gradeIndex += 1\n        } else if average >= 2.3 {\n   \
    \         letterGrade = \"B-\"\n            average = average - 2.3\n        \
    \    gradeIndex += 1\n        } else if average >= 2.0 {\n            letterGrade\
    \ = \"C+\"\n            average = average - 2.0\n            gradeIndex += 1\n\
    \        } else if average >= 1.7 {\n            letterGrade = \"C\"\n       \
    \     average = average - 1.7\n            gradeIndex += 1\n        } else if\
    \ average >= 1.3 {\n            letterGrade = \"C-\"\n            average = average\
    \ - 1.3\n            gradeIndex += 1\n        } else if average >= 1.0 {\n   \
    \         letterGrade = \"D+\"\n            average = average - 1.0\n        \
    \    gradeIndex += 1\n        } else if average >= 0.7 {\n            letterGrade\
    \ = \"D\"\n            average = average - 0.7\n            gradeIndex += 1\n\
    \        } else if average >= 0.0 {\n            letterGrade = \"D-\"\n      \
    \      average = average - 0.0\n            gradeIndex += 1\n        } else {\n\
    \            letterGrade = \"E\"\n            average = average - 0.0\n      \
    \      gradeIndex += 1\n        }\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzjzagiqk.swift:29:31: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var average = totalGrades / gradesArray.count\n\
    \                  ~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~\n/tmp/tmpzjzagiqk.swift:29:31:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var average = totalGrades / gradesArray.count\n\
    \                              ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 3.7\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 3.3\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 3.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 2.7\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 2.3\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 2.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 1.7\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 1.3\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 1.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    for grade in grades\
    \ {\n        gpa = grade * 0.7\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp1c9ngw3p.swift:105:1: error: missing return in global function
    expected to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa >= 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa >= 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa >= 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa >= 3.0 {\n\
    \        letterGrade = \"B+\"\n    } else if gpa >= 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa >= 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa >= 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa >= 1.7 {\n\
    \        letterGrade = \"C\"\n    } else if gpa >= 1.3 {\n        letterGrade\
    \ = \"C-\"\n    } else if gpa >= 1.0 {\n        letterGrade = \"D+\"\n    } else\
    \ if gpa >= 0.7 {\n        letterGrade = \"D\"\n    } else if gpa >= 0.0 {\n \
    \       letterGrade = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwr4bzk7a.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6q8p2o92/tmp6q8p2o92.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543b6aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543b3a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543b3a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543b3a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q8p2o92                        0x000055dd082cd7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b543b89a460 __libc_start_main +
    245

    6    tmp6q8p2o92                        0x000055dd082cd319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    gradesArray =\
    \ grades.map { String(format: \"%.2f\", $0) }\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesCount = gradesArray.count\n    var gradesSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesAverage = gradesSum / gradesCount\n    var gradesIndex = 0\n\
    \    var gradesIndexMax = gradesCount - 1\n    var gradesIndexMin = 0\n    var\
    \ gradesIndexMaxMin = gradesCount - 1\n    var gradesIndexMaxMin2 = gradesCount\
    \ - 1\n    var gradesIndexMaxMin3 = gradesCount - 1\n    var gradesIndexMaxMin4\
    \ = gradesCount - 1\n    var gradesIndexMaxMin5 = gradesCount - 1\n    var gradesIndexMaxMin6\
    \ = gradesCount - 1\n    var gradesIndexMaxMin7 = gradesCount - 1\n    var gradesIndexMaxMin8\
    \ = gradesCount - 1\n    var gradesIndexMaxMin9 = gradesCount - 1\n    var gradesIndexMaxMin10\
    \ = gradesCount - 1\n    var gradesIndexMaxMin11 = gradesCount - 1\n    var gradesIndexMaxMin12\
    \ = gradesCount - 1\n    var gradesIndexMaxMin13 = gradesCount - 1\n    var gradesIndexMaxMin14\
    \ = gradesCount - 1\n    var gradesIndexMaxMin15 = gradesCount - 1\n    var gradesIndexMaxMin16\
    \ = gradesCount - 1\n    var gradesIndexMaxMin17 = gradesCount - 1\n    var gradesIndexMaxMin18\
    \ = gradesCount - 1\n    var gradesIndexMaxMin19 = gradesCount - 1\n    var gradesIndexMaxMin20\
    \ = gradesCount - 1\n    var gradesIndexMaxMin21 = gradesCount - 1\n    var gradesIndexMaxMin22\
    \ = gradesCount - 1\n    var gradesIndexMaxMin23 = gradesCount - 1\n    var gradesIndexMaxMin24\
    \ = gradesCount - 1\n    var gradesIndexMaxMin25 = gradesCount - 1\n    var gradesIndexMaxMin26\
    \ = gradesCount - 1\n    var gradesIndexMaxMin27 = gradesCount - 1\n    var gradesIndexMaxMin28\
    \ = gradesCount - 1\n    var gradesIndexMaxMin29 = gradesCount - 1\n    var gradesIndexMaxMin30\
    \ = gradesCount - 1\n    var gradesIndexMaxMin31 = gradesCount - 1\n    var gradesIndexMaxMin32\
    \ = gradesCount - 1\n    var gradesIndexMaxMin33 = gradesCount \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvi8o0ago.swift:26:32: error: no exact matches in call to initializer\
    \ \n    gradesArray = grades.map { String(format: \"%.2f\", $0) }\n          \
    \                     ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpvi8o0ago.swift:26:32:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    gradesArray = grades.map { String(format: \"%.2f\", $0) }\n      \
    \                         ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpvi8o0ago.swift:29:45: error:\
    \ cannot convert value of type '(Double) -> Double' to expected argument type\
    \ '(Double, String) throws -> Double'\n    var gradesSum = gradesArray.reduce(0.0,\
    \ +)\n                                            ^\n"
  stdout: ''
  timestamp: 1660014737
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n \
    \       } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n   \
    \     } else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n     \
    \   } else if grade > 0.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade > 0.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade > 0.0 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n       \
    \     letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3mwtniam/tmp3mwtniam.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f65c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f65993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f65993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f659927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mwtniam                        0x0000562e0ee257f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b0f65e88460 __libc_start_main +
    245

    6    tmp3mwtniam                        0x0000562e0ee25319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4rplc2ks.swift:89:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4rplc2ks.swift:25:9: warning: variable 'gradesArray' was never used;\
    \ consider replacing with '_' or removing it\n    var gradesArray: [String] =\
    \ []\n        ^~~~~~~~~~~\n        _\n/tmp/tmp4rplc2ks.swift:26:9: warning: initialization\
    \ of variable 'gradesArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:27:9: warning: initialization of variable 'gradesArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:28:9:\
    \ warning: initialization of variable 'gradesArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:30:9: warning: initialization of variable 'gradesArrayIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex6 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:32:9: warning: initialization\
    \ of variable 'gradesArrayIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex7 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4rplc2ks.swift:33:9: warning: initialization of variable 'gradesArrayIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4rplc2ks.swift:34:9:\
    \ warnin"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayMin = gradesArray[0]\n    var gradesArrayMax = gradesArray[gradesArrayCount\
    \ - 1]\n    var gradesArraySumOfSquares = gradesArray.reduce(0.0, { $0 + $1*$1\
    \ })\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresSumOfSquares = gradesArray.reduce(0.0,\
    \ { $0 + $1*$1 })\n    var gradesArraySumOfSquaresSumOfSquaresAverage = gradesArraySumOfSquaresSumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumOfSquaresMin = gradesArraySumOfSquaresSumOfSquares\n\
    \    var gradesArraySumOfSquaresSumOfSquaresMax = gradesArraySumOfSquaresSumOfSquares\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSumOfSquares = gradesArray.reduce(0.0,\
    \ { $0 + $1*$1 })\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresAverage\
    \ = gradesArraySumOfSquaresSumOfSquaresSumOfSquares / gradesArrayCount\n    var\
    \ gradesArraySumOfSquaresSumOfSquaresSumOfSquaresMin = gradesArraySumOfSquaresSumOfSquaresSumOfSquares\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresMax = gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = gradesArray.reduce(0.0,\
    \ { $0 + $1*$1 })\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage\
    \ = gradesArraySumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresSumOfSquaresSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprvcdgkuy.swift:29:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmprvcdgkuy.swift:29:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmprvcdgkuy.swift:33:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmprvcdgkuy.swift:33:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmprvcdgkuy.swift:37:90: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumOfSquaresAverage\
    \ = gradesArraySumOfSquaresSumOfSquares / gradesArrayCount\n                 \
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmprvcdgkuy.swift:37:90: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresSumOfSquaresAverage\
    \ = gradesArraySumOfSquaresSumOfSquares / gradesArrayCount\n                 \
    \                                                                        ^\n/tmp/tmprvcdgkuy.swift:41:114:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    var gradesArraySumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesArraySumOfSquaresSumOfSquaresSumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660014737
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            gradesArray[gradesArrayIndex] = \"\
    B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.7 {\n   \
    \         gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 1.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.7 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.0 {\n            gradesArray[\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpygd86lp6.swift:79:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpygd86lp6.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpygd86lp6.swift:28:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpygd86lp6.swift:99:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpygd86lp6.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpygd86lp6.swift:78:24: error: missing argument for parameter #1 in call\n\
    \            gradesArray[\n                       ^\n                       <#Int#>\n\
    Swift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable public\
    \ subscript(index: Int) -> Element { get set }\n                      ^\n/tmp/tmpygd86lp6.swift:82:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades.append(\"B\")\n \
    \       } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n   \
    \     } else if grade > 2.0 {\n            letterGrades.append(\"C+\")\n     \
    \   } else if grade > 1.7 {\n            letterGrades.append(\"C\")\n        }\
    \ else if grade > 1.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if grade > 1.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ grade > 0.7 {\n            letterGrades.append(\"D\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n       \
    \     letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3sk4upv1/tmp3sk4upv1.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac07c7c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07c4b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07c4b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07c4b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3sk4upv1                        0x000055fe0d1317f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac07c9ae460 __libc_start_main +
    245

    6    tmp3sk4upv1                        0x000055fe0d131319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade in grades {\n\
    \        gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_3nzv668/tmp_3nzv668.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc28b16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc2880db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc2880d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc2880c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3nzv668                        0x000055ce668588b6 <unavailable> + 6326

    5    libc.so.6                          0x00002afc28d02460 __libc_start_main +
    245

    6    tmp_3nzv668                        0x000055ce668583d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        let letterGrade = letterGrade(for: grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpybx4hi3v.swift:28:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(for: grade)\n\
    \                          ^\n/tmp/tmpybx4hi3v.swift:28:13: note: 'letterGrade'\
    \ declared here\n        let letterGrade = letterGrade(for: grade)\n         \
    \   ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var letterGrades\
    \ = [String]()\n    var totalGrade = grades.reduce(0, combine: +)\n    var totalLetterGrade\
    \ = totalGrade / 4.0\n    \n    for i in 0..<grades.count {\n        let grade\
    \ = grades[i]\n        let letterGrade = letterGradeForGrade(grade)\n        \n\
    \        gradesArray.removeAtIndex(i)\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        let grade = gradesArray[i]\n\
    \        let letterGrade = letterGradeForGrade(grade)\n        \n        if letterGrade\
    \ != letterGradeForGrade(totalGrade) {\n            letterGrades.append(letterGrade)\n\
    \        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8xugufai.swift:27:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmp8xugufai.swift:32:27:\
    \ error: cannot find 'letterGradeForGrade' in scope\n        let letterGrade =\
    \ letterGradeForGrade(grade)\n                          ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8xugufai.swift:34:21: error: value of type '[Double]' has no member 'removeAtIndex'\n\
    \        gradesArray.removeAtIndex(i)\n        ~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp8xugufai.swift:40:27:\
    \ error: cannot find 'letterGradeForGrade' in scope\n        let letterGrade =\
    \ letterGradeForGrade(grade)\n                          ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8xugufai.swift:42:27: error: cannot find 'letterGradeForGrade' in scope\n\
    \        if letterGrade != letterGradeForGrade(totalGrade) {\n               \
    \           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesSorted = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var currentGrade = grades[0]\n    var currentLetterGrade =\
    \ \"\"\n    var currentLetterGradeIndex = 0\n    var currentLetterGradeIndexOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n   \
    \ var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps2payb2a.swift:34:9: error: invalid redeclaration of 'currentLetterGradeIndexOffsetOffsetOffsetOffset'\n\
    \    var currentLetterGradeIndexOffsetOffsetOffsetOffset = 0\n        ^\n/tmp/tmps2payb2a.swift:33:9:\
    \ note: 'currentLetterGradeIndexOffsetOffsetOffsetOffset' previously declared\
    \ here\n    var currentLetterGradeIndexOffsetOffsetOffsetOffset = 0\n        ^\n\
    /tmp/tmps2payb2a.swift:36:9: error: invalid redeclaration of 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\n\
    \    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset = 0\n        ^\n\
    /tmp/tmps2payb2a.swift:35:9: note: 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\
    \ previously declared here\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:37:9: error: invalid redeclaration of\
    \ 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:35:9: note: 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\
    \ previously declared here\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:38:9: error: invalid redeclaration of\
    \ 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:35:9: note: 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\
    \ previously declared here\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:39:9: error: invalid redeclaration of\
    \ 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:35:9: note: 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\
    \ previously declared here\n    var currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset\
    \ = 0\n        ^\n/tmp/tmps2payb2a.swift:40:9: error: invalid redeclaration of\
    \ 'currentLetterGradeIndexOffsetOffsetOffsetOffsetOffset'\n    var currentLetterGradeInde"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArrayIndex = 0\n    var gradesArrayIndexCount\
    \ = 0\n    var letterGrades = [String]()\n    var letterGrade = \"\"\n    var\
    \ letterGradeIndex = 0\n    var letterGradeIndexCount = 0\n    \n    while gradesArrayIndex\
    \ < gradesArrayCount {\n        letterGrade = \"\"\n        letterGradeIndex =\
    \ 0\n        letterGradeIndexCount = 0\n        \n        while letterGradeIndex\
    \ < letterGrades.count {\n            if gradesArray[gradesArrayIndex] == letterGrades[letterGradeIndex]\
    \ {\n                letterGradeIndexCount += 1\n            } else {\n      \
    \          if letterGradeIndexCount == letterGrades.count {\n                \
    \    letterGrades.append(letterGrade)\n                    letterGradeIndexCount\
    \ += 1\n                }\n            }\n            letterGradeIndex += 1\n\
    \        }\n        \n        gradesArrayIndex += 1\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4dbw6v4w.swift:40:46: error: binary operator '==' cannot be applied\
    \ to operands of type 'Double' and 'String'\n            if gradesArray[gradesArrayIndex]\
    \ == letterGrades[letterGradeIndex] {\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4dbw6v4w.swift:40:46: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (String, String)\n\
    \            if gradesArray[gradesArrayIndex] == letterGrades[letterGradeIndex]\
    \ {\n                                             ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfSquareOfSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfSquareOfSumOfSquareOfSum = grades.reduce(0, combine: +)\n\
    \    var gpaSumOfSquareOfSumOfSquareOfSumOfSquares = grades.reduce(0, combine:\
    \ +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquareOfSumOfSquares\
    \ = grades.reduce(0, \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe2x76v08.swift:44:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpe2x76v08.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpe2x76v08.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpe2x76v08.swift:28:40: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumOfSquares = grades.reduce(0, combine: +)\n\
    \                                       ^   ~~~~~~~~~\n                      \
    \                     \n/tmp/tmpe2x76v08.swift:29:44: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumOfSquareOfSum = grades.reduce(0, combine:\
    \ +)\n                                           ^   ~~~~~~~~~\n             \
    \                                  \n/tmp/tmpe2x76v08.swift:30:53: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquares = grades.reduce(0,\
    \ combine: +)\n                                                    ^   ~~~~~~~~~\n\
    \                                                        \n/tmp/tmpe2x76v08.swift:31:57:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquareOfSum\
    \ = grades.reduce(0, combine: +)\n                                           \
    \             ^   ~~~~~~~~~\n                                                \
    \            \n/tmp/tmpe2x76v08.swift:32:66: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquares = grades.reduce(0,\
    \ combine: +)\n                                                              \
    \   ^   ~~~~~~~~~\n                                                          \
    \           \n/tmp/tmpe2x76v08.swift:33:70: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSumOfSquareOfSumOfSquareOfSumOfSquareOfSum = grades.reduce(0,\
    \ combine: +)\n                                           "
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0\n    var letterGrade: String = \"\"\n    for grade in grades {\n       \
    \ gpa = grade * 4\n        if gpa > 3.7 {\n            letterGrade = \"A+\"\n\
    \        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 3 {\n            letterGrade = \"A-\"\n        } else if gpa > 2.7\
    \ {\n            letterGrade = \"B+\"\n        } else if gpa > 2.3 {\n       \
    \     letterGrade = \"B\"\n        } else if gpa > 2 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.7 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 1.3 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 1 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.7\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0 {\n         \
    \   letterGrade = \"D\"\n        } else {\n            letterGrade = \"D-\"\n\
    \        }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg438fl8v/tmpg438fl8v.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9d349ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9d3195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9d3195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9d31947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg438fl8v                        0x0000558f0f8237a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad9d368a460 __libc_start_main +
    245

    6    tmpg438fl8v                        0x0000558f0f8232c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0.0, +)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n    var gradesArrayMin = grades.min()\n\
    \    var gradesArrayMax = grades.max()\n    var gradesArraySumOfSquares = grades.reduce(0.0,\
    \ { $0 + $1*$1 })\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n\
    \    var gradesArraySumOfSquaresMax = gradesArraySumOfSquares.max()\n    var gradesArraySumOfSquaresSum\
    \ = gradesArraySumOfSquares.reduce(0.0, +)\n    var gradesArraySumOfSquaresSumAverage\
    \ = gradesArraySumOfSquaresSum / gradesArrayCount\n    var gradesArraySumOfSquaresSumMin\
    \ = gradesArraySumOfSquaresSum.min()\n    var gradesArraySumOfSquaresSumMax =\
    \ gradesArraySumOfSquaresSum.max()\n    var gradesArraySumOfSquaresSumSum = gradesArraySumOfSquaresSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumAverage = gradesArraySumOfSquaresSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin = gradesArraySumOfSquaresSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumMax = gradesArraySumOfSquaresSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSum = gradesArraySumOfSquaresSumSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArraySumOfSquaresSumSumSum.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe6phe05v.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe6phe05v.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmpe6phe05v.swift:32:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmpe6phe05v.swift:32:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmpe6phe05v.swift:33:62: error: value of type 'Double' has\
    \ no member 'min'\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n\
    \                                     ~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmpe6phe05v.swift:34:62:\
    \ error: value of type 'Double' has no member 'max'\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares.max()\n                                     ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpe6phe05v.swift:35:62: error: value of type 'Double' has no member\
    \ 'reduce'\n    var gradesArraySumOfSquaresSum = gradesArraySumOfSquares.reduce(0.0,\
    \ +)\n                                     ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmpe6phe05v.swift:49:9:\
    \ error: type annotation missing in pattern\n    var gradesArraySumOfSquaresSum\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ { $0 < $1 })\n    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n\
    \    var currentLetterGrade = \"\"\n    for grade in gradesArray {\n        if\
    \ grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        currentLetterGrade += \"+\"\n        if grade < currentGrade\
    \ {\n            currentLetterGrade += \"-\"\n        }\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpzmv3ab00/tmpzmv3ab00.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af24a888c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af24a57fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af24a57f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af24a57e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmv3ab00                        0x0000557688ba4916 <unavailable> + 6422

    5    libc.so.6                          0x00002af24aa74460 __libc_start_main +
    245

    6    tmpzmv3ab00                        0x0000557688ba4439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        if grade < 3.0 {\n            letterGrades.append(\"A+\")\n\
    \        } else if grade < 3.7 {\n            letterGrades.append(\"A\")\n   \
    \     } else if grade < 4.0 {\n            letterGrades.append(\"A-\")\n     \
    \   } else if grade < 4.7 {\n            letterGrades.append(\"B+\")\n       \
    \ } else if grade < 5.0 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade < 5.7 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade < 6.0 {\n            letterGrades.append(\"C+\")\n        } else if grade\
    \ < 6.7 {\n            letterGrades.append(\"C\")\n        } else if grade < 7.0\
    \ {\n            letterGrades.append(\"C-\")\n        } else if grade < 7.7 {\n\
    \            letterGrades.append(\"D+\")\n        } else if grade < 8.0 {\n  \
    \          letterGrades.append(\"D\")\n        } else if grade < 8.7 {\n     \
    \       letterGrades.append(\"D-\")\n        } else if grade < 9.0 {\n       \
    \     letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    D\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7d1bugfm/tmp7d1bugfm.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7dc2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7dbf97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7dbf97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7dbf967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1bugfm                        0x000055f514f2d7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac7dc48c460 __libc_start_main +
    245

    6    tmp7d1bugfm                        0x000055f514f2d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    \n    for grade\
    \ in grades {\n        let letterGrade = gradeToLetterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfiby00p8.swift:28:27: error: cannot find 'gradeToLetterGrade' in\
    \ scope\n        let letterGrade = gradeToLetterGrade(grade)\n               \
    \           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = gpa * 4\n    letterGrades.append(letterGrade)\n\
    \    if gpa > 3.0 {\n        letterGrade = gpa * 3.7\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 2.7 {\n        letterGrade = gpa * 3.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 2.3 {\n        letterGrade = gpa * 3.0\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 1.7 {\n        letterGrade = gpa * 2.7\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 1.3 {\n        letterGrade = gpa * 2.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 1.0 {\n        letterGrade = gpa * 2.0\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 0.7 {\n        letterGrade = gpa * 1.7\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 0.3 {\n        letterGrade = gpa * 1.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > 0.0 {\n        letterGrade = gpa * 1.0\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -0.3 {\n        letterGrade = gpa * 0.7\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -0.7 {\n        letterGrade = gpa * 0.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -1.0 {\n        letterGrade = gpa * 0.0\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -1.3 {\n        letterGrade = gpa * -0.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -1.7 {\n        letterGrade = gpa * -0.7\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -2.0 {\n        letterGrade = gpa * -1.0\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -2.3 {\n        letterGrade = gpa * -1.3\n        letterGrades.append(letterGrade)\n\
    \    }\n    if gpa > -2.7 {\n        letterGrade = gpa\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppvd93pqx.swift:115:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmppvd93pqx.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmppvd93pqx.swift:26:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmppvd93pqx.swift:98:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // Your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyv0j8ocx/tmpyv0j8ocx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8371cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae836ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae836ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae836ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv0j8ocx                        0x000055cecdab0636 <unavailable> + 5686

    5    libc.so.6                          0x00002ae8373ba460 __libc_start_main +
    245

    6    tmpyv0j8ocx                        0x000055cecdab0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var previousGrade = gradesArray[0]\n \
    \   var previousLetterGrade = \"\"\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    \n    for grade in gradesArray {\n     \
    \   if grade < previousGrade {\n            letterGrades.append(previousLetterGrade)\n\
    \            previousGrade = grade\n            previousLetterGrade = \"\"\n \
    \       }\n        \n        if grade > currentGrade {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentGrade = grade\n            currentLetterGrade = \"\"\n   \
    \     }\n        \n        if grade == previousGrade {\n            currentLetterGrade\
    \ = currentLetterGrade + \"+\"\n        } else {\n            currentLetterGrade\
    \ = currentLetterGrade + \"-\"\n        }\n        \n        previousGrade = grade\n\
    \        previousLetterGrade = currentLetterGrade\n    }\n    \n    letterGrades.append(currentLetterGrade)\n\
    \    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp006yc3pw/tmp006yc3pw.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16e6a6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16e6766b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16e6766988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16e67657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp006yc3pw                        0x000055e9c9191946 <unavailable> + 6470

    5    libc.so.6                          0x00002b16e6c5b460 __libc_start_main +
    245

    6    tmp006yc3pw                        0x000055e9c9191469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    for grade in grades {\n        if gpa >= 3.0 {\n          \
    \  letterGrades.append(\"A+\")\n        } else if gpa >= 2.7 {\n            letterGrades.append(\"\
    B\")\n        } else if gpa >= 2.3 {\n            letterGrades.append(\"B-\")\n\
    \        } else if gpa >= 1.3 {\n            letterGrades.append(\"C+\")\n   \
    \     } else if gpa >= 0.7 {\n            letterGrades.append(\"C\")\n       \
    \ } else if gpa >= 0.3 {\n            letterGrades.append(\"C-\")\n        } else\
    \ if gpa >= 0.0 {\n            letterGrades.append(\"D+\")\n        } else if\
    \ gpa >= 0.0 {\n            letterGrades.append(\"D\")\n        } else {\n   \
    \         letterGrades.append(\"E\")\n        }\n        gpa -= grade\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ola2ou2.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            gradesArray[gradesArrayIndex] = \"\
    B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.7 {\n   \
    \         gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 2.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 1.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.7 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > 0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > 0.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > -0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > -0.7\
    \ {\n            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > -1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > -1.7\
    \ {\n            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > -2.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grade > -3.0\
    \ {\n            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade > -3.7 {\n            grades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpchxkg7tp.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpchxkg7tp.swift:28:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpchxkg7tp.swift:99:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpchxkg7tp.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpchxkg7tp.swift:78:13: warning: expression of type '[Double]' is unused\n\
    \            grades\n            ^~~~~~\n/tmp/tmpchxkg7tp.swift:82:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpchxkg7tp.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndexMax' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    \n    for i\
    \ in grades {\n        if i > 3.0 {\n            gradesArray.append(\"A+\")\n\
    \        } else if i > 2.0 {\n            gradesArray.append(\"B\")\n        }\
    \ else if i > 1.0 {\n            gradesArray.append(\"C\")\n        } else if\
    \ i > 0.0 && i < 3.0 {\n            gradesArray.append(\"C-\")\n        } else\
    \ if i > 0.0 && i < 2.0 {\n            gradesArray.append(\"D\")\n        } else\
    \ if i > 0.0 && i < 1.0 {\n            gradesArray.append(\"D+\")\n        } else\
    \ if i > 0.0 && i < 0.0 && i != 0.0 {\n            gradesArray.append(\"E\")\n\
    \        } else {\n            gradesArray.append(\"F\")\n        }\n    }\n \
    \   \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnxq83max/tmpnxq83max.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b750dbfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b750d8f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b750d8f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b750d8f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxq83max                        0x00005614f96e77a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b750dde6460 __libc_start_main +
    245

    6    tmpnxq83max                        0x00005614f96e72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp644q2u45.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp644q2u45.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmp644q2u45.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmp644q2u45.swift:29:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:31:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:32:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmp644q2u45.swift:33:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp644q2u45.swift:34:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmp644q2u45.swift:35:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014735
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    var gpa = gradesArray[0]\n    for grade in gradesArray {\n\
    \        if grade > gpa {\n            letterGrades.append(letterGrade(grade,\
    \ gpa))\n            gpa = grade\n        } else {\n            letterGrades.append(letterGrade(grade,\
    \ gpa))\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmprv3n8xi0.swift:30:33: error: cannot find 'letterGrade' in scope\n\
    \            letterGrades.append(letterGrade(grade, gpa))\n                  \
    \              ^~~~~~~~~~~\n/tmp/tmprv3n8xi0.swift:33:33: error: cannot find 'letterGrade'\
    \ in scope\n            letterGrades.append(letterGrade(grade, gpa))\n       \
    \                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double\
    \ = 0.0\n    for grade in grades {\n        gpa = grade * 4.0\n        gradesArray.append(String(format:\
    \ \"%.1f\", gpa))\n    }\n    if gpa > 3.0 {\n        gradesArray.removeFirst()\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsf_f1j8h.swift:29:28: error: no exact matches in call to initializer\
    \ \n        gradesArray.append(String(format: \"%.1f\", gpa))\n              \
    \             ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmpsf_f1j8h.swift:29:28:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        gradesArray.append(String(format: \"%.1f\", gpa))\n          \
    \                 ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    \n    // The\
    \ first letter grade is always A+\n    letterGrades.append(\"A+\")\n    \n   \
    \ // The second letter grade is always B\n    if grades.contains(3.7) {\n    \
    \    letterGrades.append(\"B\")\n    }\n    \n    // The third letter grade is\
    \ always C\n    if grades.contains(3.3) {\n        letterGrades.append(\"C\")\n\
    \    }\n    \n    // The fourth letter grade is always D\n    if grades.contains(3.0)\
    \ {\n        letterGrades.append(\"D\")\n    }\n    \n    // The fifth letter\
    \ grade is always E\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    E\")\n    }\n    \n    // The sixth letter grade is always F\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"F\")\n    }\n    \n    // The seventh letter\
    \ grade is always G\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    G\")\n    }\n    \n    // The eighth letter grade is always A\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"A\")\n    }\n    \n    // The ninth letter\
    \ grade is always B\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    B\")\n    }\n    \n    // The tenth letter grade is always C\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"C\")\n    }\n    \n    // The eleventh letter\
    \ grade is always D\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    D\")\n    }\n    \n    // The twelfth letter grade is always E\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"E\")\n    }\n    \n    // The thirteenth letter\
    \ grade is always F\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    F\")\n    }\n    \n    // The fourteenth letter grade is always G\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"G\")\n    }\n    \n    // The fifteenth letter\
    \ grade is always A\n    if grades.contains(0.0) {\n        letterGrades.append(\"\
    A\")\n    }\n    \n    // The sixteenth letter grade is always B\n    if grades.contains(0.0)\
    \ {\n        letterGrades.append(\"B\")\n    }\n    \n    // The seventeenth letter\
    \ grade is always C\n    if grades.contains(0.0) {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp528bd10x.swift:128:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp528bd10x.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp528bd10x.swift:111:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaIndex = grades.count - 1\n    while gpa > 0 {\n    \
    \    let gpaIndex = gpaIndex - 1\n        let gpaValue = grades[gpaIndex]\n  \
    \      let letterGrade = gpaValue >= 3.0 ? \"A+\" : gpaValue >= 2.0 ? \"A\" :\
    \ gpaValue >= 1.0 ? \"B+\" : gpaValue >= 0.7 ? \"B\" : gpaValue >= 0.3 ? \"B-\"\
    \ : gpaValue >= 0.0 ? \"C+\" : gpaValue >= 0.2 ? \"C\" : gpaValue >= 0.1 ? \"\
    C-\" : gpaValue >= 0.0 ? \"D+\" : gpaValue >= 0.7 ? \"D\" : gpaValue >= 0.3 ?\
    \ \"D-\" : gpaValue >= 0.0 ? \"E\" : \"\"\n        letterGrades.append(letterGrade)\n\
    \        gpa -= gpaValue\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkt6pl27k.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    for grade in\
    \ grades {\n        switch grade {\n        case 0...0.2:\n            letterGrades.append(\"\
    E\")\n        case 0.2...0.4:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.4...0.6:\n            letterGrades.append(\"C-\")\n        case 0.6...0.8:\n\
    \            letterGrades.append(\"B-\")\n        case 0.8...1.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.0...1.2:\n            letterGrades.append(\"\
    B+\")\n        case 1.2...1.4:\n            letterGrades.append(\"B\")\n     \
    \   case 1.4...1.6:\n            letterGrades.append(\"A+\")\n        case 1.6...1.8:\n\
    \            letterGrades.append(\"A\")\n        case 1.8...2.0:\n           \
    \ letterGrades.append(\"A\")\n        case 2.0...2.2:\n            letterGrades.append(\"\
    A-\")\n        case 2.2...2.4:\n            letterGrades.append(\"A-\")\n    \
    \    case 2.4...2.6:\n            letterGrades.append(\"A-\")\n        case 2.6...2.8:\n\
    \            letterGrades.append(\"A-\")\n        case 2.8...3.0:\n          \
    \  letterGrades.append(\"A-\")\n        case 3.0...3.2:\n            letterGrades.append(\"\
    A-\")\n        case 3.2...3.4:\n            letterGrades.append(\"A-\")\n    \
    \    case 3.4...3.6:\n            letterGrades.append(\"A-\")\n        case 3.6...3.8:\n\
    \            letterGrades.append(\"A-\")\n        case 3.8...4.0:\n          \
    \  letterGrades.append(\"A-\")\n        case 4.0...4.2:\n            letterGrades.append(\"\
    A-\")\n        case 4.2...4.4:\n            letterGrades.append(\"A-\")\n    \
    \    case 4.4...4.6:\n            letterGrades.append(\"A-\")\n        case 4.6...4.8:\n\
    \            letterGrades.append(\"A-\")\n        case 4.8...5.0:\n          \
    \  letterGrades.append(\"A-\")\n        case 5.0...5.2:\n            letterGrades.append(\"\
    A-\")\n        case 5.2...5.4:\n            letterGrades.append(\"A-\")\n    \
    \    case 5.4...5.6:\n            letterGrades.append(\"A-\")\n        case 5.6...5.8:\n\
    \            letterGrades.append(\"A-\")\n        case 5.8...6.0:\n          \
    \  letterGrades.append(\"A-\")\n        case 6.0...6.2:\n            letterGrades.append(\"\
    A-\")\n        case 6.2...6.4:\n            letterGrades.append(\"A-\")\n    \
    \    case 6.4...6.6:\n            letterGrades.append(\"A-\")\n        case 6.6...6.8:\n\
    \            letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0sb1cj9l.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp0sb1cj9l.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp0sb1cj9l.swift:116:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp0sb1cj9l.swift:24:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp0sb1cj9l.swift:95:13: error: cannot find 'letterGrade' in scope\n    \
    \        letterGrade\n            ^~~~~~~~~~~\n/tmp/tmp0sb1cj9l.swift:27:9: error:\
    \ switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmp0sb1cj9l.swift:27:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmp0sb1cj9l.swift:99:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum = grades.reduce(0, combine: +)\n    var gpaSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiff = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiff = grades.reduce(0, combine: +)\n\
    \    var gpaSumDiffSumDiffSumDiffSum = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff = grades.reduce(0,\
    \ combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff =\
    \ grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSumDiffSum\
    \ = grades.reduce(0, combine: +)\n    var gpaSumDiffSumDiffSumDiffSumDiffSumDiffSumDiff\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmvittvdj.swift:26:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpmvittvdj.swift:27:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpmvittvdj.swift:28:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaDiff = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpmvittvdj.swift:29:35: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSumDiff = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmpmvittvdj.swift:30:35:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmpmvittvdj.swift:31:38: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSum = grades.reduce(0, combine:\
    \ +)\n                                     ^   ~~~~~~~~~\n                   \
    \                      \n/tmp/tmpmvittvdj.swift:32:39: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                      ^   ~~~~~~~~~\n                  \
    \                        \n/tmp/tmpmvittvdj.swift:33:42: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSumDiffSumDiff = grades.reduce(0, combine:\
    \ +)\n                                         ^   ~~~~~~~~~\n               \
    \                              \n/tmp/tmpmvittvdj.swift:34:45: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaSumDiffSumDiffSum = grades.reduce(0,\
    \ combine: +)\n                                            ^   ~~~~~~~~~\n   \
    \                                             \n/tmp/tmpmvittvdj.swift:35:46:\
    \ error: extraneous"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy\
    \ = gradesArray\n    gradesArrayCopy.removeFirst()\n    var gradesArrayCopy2 =\
    \ gradesArrayCopy\n    gradesArrayCopy2.removeLast()\n    var gradesArrayCopy3\
    \ = gradesArrayCopy2\n    gradesArrayCopy3.removeLast()\n    var gradesArrayCopy4\
    \ = gradesArrayCopy3\n    gradesArrayCopy4.removeLast()\n    var gradesArrayCopy5\
    \ = gradesArrayCopy4\n    gradesArrayCopy5.removeLast()\n    var gradesArrayCopy6\
    \ = gradesArrayCopy5\n    gradesArrayCopy6.removeLast()\n    var gradesArrayCopy7\
    \ = gradesArrayCopy6\n    gradesArrayCopy7.removeLast()\n    var gradesArrayCopy8\
    \ = gradesArrayCopy7\n    gradesArrayCopy8.removeLast()\n    var gradesArrayCopy9\
    \ = gradesArrayCopy8\n    gradesArrayCopy9.removeLast()\n    var gradesArrayCopy10\
    \ = gradesArrayCopy9\n    gradesArrayCopy10.removeLast()\n    var gradesArrayCopy11\
    \ = gradesArrayCopy10\n    gradesArrayCopy11.removeLast()\n    var gradesArrayCopy12\
    \ = gradesArrayCopy11\n    gradesArrayCopy12.removeLast()\n    var gradesArrayCopy13\
    \ = gradesArrayCopy12\n    gradesArrayCopy13.removeLast()\n    var gradesArrayCopy14\
    \ = gradesArrayCopy13\n    gradesArrayCopy14.removeLast()\n    var gradesArrayCopy15\
    \ = gradesArrayCopy14\n    gradesArrayCopy15.removeLast()\n    var gradesArrayCopy16\
    \ = gradesArrayCopy15\n    gradesArrayCopy16.removeLast()\n    var gradesArrayCopy17\
    \ = gradesArrayCopy16\n    gradesArrayCopy17.removeLast()\n    var gradesArrayCopy18\
    \ = gradesArrayCopy17\n    gradesArrayCopy18.removeLast()\n    var gradesArrayCopy19\
    \ = gradesArrayCopy18\n    gradesArrayCopy19.removeLast()\n    var gradesArrayCopy20\
    \ = gradesArrayCopy19\n    gradesArrayCopy20.removeLast()\n    var gradesArrayCopy21\
    \ = gradesArrayCopy20\n    gradesArrayCopy21.removeLast()\n    var gradesArrayCopy22\
    \ = gradesArrayCopy21\n    gradesArrayCopy22.removeLast()\n    var gradesArrayCopy23\
    \ = gradesArrayCopy22\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoyd4d2qt.swift:25:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmpoyd4d2qt.swift:70:9: warning: initialization of variable\
    \ 'gradesArrayCopy23' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy23 = gradesArrayCopy22\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpoyd4d2qt.swift:72:1: error: missing return in global function\
    \ expected to return '[String]'\n}\n^\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var letterGrades = [String]()\n    var totalGrade\
    \ = grades.reduce(0, +)\n    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat\
    \ = totalGrade * 100\n    var totalGradeIntFloat = totalGradeInt * 100\n    var\
    \ totalGradeFloatInt = totalGradeFloat * 100\n    var totalGradeIntFloatInt =\
    \ totalGradeIntFloat * 100\n    var totalGradeIntFloatIntInt = totalGradeIntFloatInt\
    \ * 100\n    var totalGradeIntFloatIntIntInt = totalGradeIntFloatIntInt * 100\n\
    \    var totalGradeIntFloatIntIntIntInt = totalGradeIntFloatIntIntInt * 100\n\
    \    var totalGradeIntFloatIntIntIntIntInt = totalGradeIntFloatIntIntIntInt *\
    \ 100\n    var totalGradeIntFloatIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntInt\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzt5w8jnq.swift:38:54: error: use of local variable 'totalGradeIntFloatIntIntIntIntIntIntIntInt'\
    \ before its declaration\n    var totalGradeIntFloatIntIntIntIntIntIntIntInt =\
    \ totalGradeIntFloatIntIntIntIntIntIntIntInt * 100\n                         \
    \                            ^\n/tmp/tmpzt5w8jnq.swift:38:9: note: 'totalGradeIntFloatIntIntIntIntIntIntIntInt'\
    \ declared here\n    var totalGradeIntFloatIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntInt\
    \ * 100\n        ^\n/tmp/tmpzt5w8jnq.swift:39:57: error: use of local variable\
    \ 'totalGradeIntFloatIntIntIntIntIntIntIntIntInt' before its declaration\n   \
    \ var totalGradeIntFloatIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntInt\
    \ * 100\n                                                        ^\n/tmp/tmpzt5w8jnq.swift:39:9:\
    \ note: 'totalGradeIntFloatIntIntIntIntIntIntIntIntInt' declared here\n    var\
    \ totalGradeIntFloatIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntInt\
    \ * 100\n        ^\n/tmp/tmpzt5w8jnq.swift:40:60: error: use of local variable\
    \ 'totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt' before its declaration\n\
    \    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n                                                           ^\n/tmp/tmpzt5w8jnq.swift:40:9:\
    \ note: 'totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt' declared here\n   \
    \ var totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n        ^\n/tmp/tmpzt5w8jnq.swift:41:60: error: use of local variable\
    \ 'totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt' before its declaration\n\
    \    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt\
    \ * 100\n                                                           ^\n/tmp/tmpzt5w8jnq.swift:42:9:\
    \ note: 'totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt' declared here\n\
    \    var totalGradeIntFloatIntIntIntIntIntIntIntIntIntIntInt = totalGradeIntFloatIntIntIntIntIntInt"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    var currentLetterGradeIndex = 0\n    var\
    \ currentLetterGradeIndexCount = 0\n    var currentLetterGradeIndexCountMax =\
    \ gradesArray.count - 1\n    for index in 0..<gradesArray.count {\n        if\
    \ index == gradesArray.count - 1 {\n            letterGrades.append(currentLetterGrade)\n\
    \        } else {\n            if currentGrade == gradesArray[index] {\n     \
    \           currentLetterGradeIndexCount++\n                if currentLetterGradeIndexCount\
    \ > currentLetterGradeIndexCountMax {\n                    currentLetterGradeIndexCountMax\
    \ = currentLetterGradeIndexCount\n                }\n            } else {\n  \
    \              currentLetterGradeIndexCount = 0\n                currentLetterGradeIndexCountMax\
    \ = gradesArray.count - 1\n                currentLetterGrade = String(currentGrade)\n\
    \                currentGrade = gradesArray[index]\n            }\n        }\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_g2m6uv5.swift:38:45: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                currentLetterGradeIndexCount++\n     \
    \                                       ^~\n"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayCount = grades.count\n    var gradesArraySum = grades.reduce(0,\
    \ combine: +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n\
    \    var gradesArrayMin = grades.reduce(0, combine: min)\n    var gradesArrayMax\
    \ = grades.reduce(0, combine: max)\n    var gradesArraySumOfSquares = grades.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.reduce(0,\
    \ combine: min)\n    var gradesArraySumOfSquaresMax = gradesArraySumOfSquares.reduce(0,\
    \ combine: max)\n    var gradesArraySumOfSquaresSum = gradesArraySumOfSquares.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum.reduce(0,\
    \ combine: min)\n    var gradesArraySumOfSquaresSumMax = gradesArraySumOfSquaresSum.reduce(0,\
    \ combine: max)\n    var gradesArraySumOfSquaresSumSum = gradesArraySumOfSquaresSum.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumSumAverage = gradesArraySumOfSquaresSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin = gradesArraySumOfSquaresSumSum.reduce(0,\
    \ combine: min)\n    var gradesArraySumOfSquaresSumSumMax = gradesArraySumOfSquaresSumSum.reduce(0,\
    \ combine: max)\n    var gradesArraySumOfSquaresSumSumSum = gradesArraySumOfSquaresSumSum.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum.reduce(0,\
    \ combine: min)\n    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum.reduce(0,\
    \ combine: max)\n    var gradesArraySumOfSquaresSumSumSumSum = gradesArraySumOfSqu\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg4seb3q1.swift:28:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySum = grades.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmpg4seb3q1.swift:30:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArrayMin = grades.reduce(0, combine: min)\n         \
    \                             ^   ~~~~~~~~~\n                                \
    \          \n/tmp/tmpg4seb3q1.swift:31:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArrayMax = grades.reduce(0, combine: max)\n         \
    \                             ^   ~~~~~~~~~\n                                \
    \          \n/tmp/tmpg4seb3q1.swift:32:48: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySumOfSquares = grades.reduce(0, combine: +)\n  \
    \                                             ^   ~~~~~~~~~\n                \
    \                                   \n/tmp/tmpg4seb3q1.swift:34:81: error: generic\
    \ parameter 'T' could not be inferred\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.reduce(0,\
    \ combine: min)\n                                                            \
    \                    ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpg4seb3q1.swift:35:81: error: generic parameter 'T' could\
    \ not be inferred\n    var gradesArraySumOfSquaresMax = gradesArraySumOfSquares.reduce(0,\
    \ combine: max)\n                                                            \
    \                    ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpg4seb3q1.swift:38:87: error: generic parameter 'T' could\
    \ not be inferred\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum.reduce(0,\
    \ combine: min)\n                                                            \
    \                          ^\nSwift.min:1:24: note: in call to function 'min'"
  stdout: ''
  timestamp: 1660014738
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0,\
    \ 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n    var gradesArray = [String]()\n    gradesArray =\
    \ grades.map { String(format: \"%.1f\", $0) }\n    gradesArray = gradesArray.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n    var gradesArrayCopy = gradesArray\n\
    \    gradesArray.removeFirst()\n    var gradesArrayCopy2 = gradesArray\n    gradesArray.removeLast()\n\
    \    var gradesArrayCopy3 = gradesArray\n    gradesArray.removeLast()\n    var\
    \ gradesArrayCopy4 = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy5\
    \ = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy6 = gradesArray\n\
    \    gradesArray.removeLast()\n    var gradesArrayCopy7 = gradesArray\n    gradesArray.removeLast()\n\
    \    var gradesArrayCopy8 = gradesArray\n    gradesArray.removeLast()\n    var\
    \ gradesArrayCopy9 = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy10\
    \ = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy11 = gradesArray\n\
    \    gradesArray.removeLast()\n    var gradesArrayCopy12 = gradesArray\n    gradesArray.removeLast()\n\
    \    var gradesArrayCopy13 = gradesArray\n    gradesArray.removeLast()\n    var\
    \ gradesArrayCopy14 = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy15\
    \ = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy16 = gradesArray\n\
    \    gradesArray.removeLast()\n    var gradesArrayCopy17 = gradesArray\n    gradesArray.removeLast()\n\
    \    var gradesArrayCopy18 = gradesArray\n    gradesArray.removeLast()\n    var\
    \ gradesArrayCopy19 = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy20\
    \ = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy21 = gradesArray\n\
    \    gradesArray.removeLast()\n    var gradesArrayCopy22 = gradesArray\n    gradesArray.removeLast()\n\
    \    var gradesArrayCopy23 = gradesArray\n    gradesArray.removeLast()\n    var\
    \ gradesArrayCopy24 = gradesArray\n    gradesArray.removeLast()\n    var gradesArrayCopy25\
    \ = gradesArray\n    gradesArray.removeLast\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1w9y5qhx.swift:26:32: error: no exact matches in call to initializer\
    \ \n    gradesArray = grades.map { String(format: \"%.1f\", $0) }\n          \
    \                     ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmp1w9y5qhx.swift:26:32:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    gradesArray = grades.map { String(format: \"%.1f\", $0) }\n      \
    \                         ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmp1w9y5qhx.swift:27:47: error:\
    \ value of type 'String' has no member 'compare'\n    gradesArray = gradesArray.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \          ~~ ^~~~~~~\n/tmp/tmp1w9y5qhx.swift:77:17: error: type of expression\
    \ is ambiguous without more context\n    gradesArray.removeLast\n    ~~~~~~~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014738
