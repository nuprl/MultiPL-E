language: swift
name: HumanEval_59_largest_prime_factor
results:
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var i = 2\n    var j = 2\n    var factor = 2\n\n    while i < n &&\
    \ !maxFactorFound {\n        if n % i == 0 {\n            j += 1\n           \
    \ if j > maxFactor {\n                maxFactor = j\n                maxFactorFound\
    \ = true\n            }\n            factor *= i\n        }\n        i += 1\n\
    \    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpz8zs0tg5/tmpz8zs0tg5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d26e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d26afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d26afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d26afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8zs0tg5                        0x000055be1aa7e245 <unavailable> + 4677

    5    libc.so.6                          0x00002b4d26ff2460 __libc_start_main +
    245

    6    tmpz8zs0tg5                        0x000055be1aa7def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for prime in 2...n {\n        if n %\
    \ prime == 0 {\n            if largest < prime {\n                largest = prime\n\
    \                largestPrimeFactor = prime\n            }\n        } else {\n\
    \            if largest == prime {\n                largestPrimeFactor = prime\n\
    \            }\n        }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3fdys7cd/tmp3fdys7cd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd6a1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd6712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd6712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd67117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fdys7cd                        0x000055735a301335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1dd6c07460 __libc_start_main +
    245

    6    tmp3fdys7cd                        0x000055735a300fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 2\n    var i = 2\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor++\n            n /= i\n        } else {\n          \
    \  i += 1\n        }\n    }\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpl74lwux3.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n/tmp/tmpl74lwux3.swift:13:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  factor++\n                  ^~\n/tmp/tmpl74lwux3.swift:14:15: error: left side\
    \ of mutating operator isn't mutable: 'n' is a 'let' constant\n            n /=\
    \ i\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 2\n    var factor = 2\n    for factor <= n / 2 {\n      \
    \  if n % factor == 0 {\n            largest = factor\n        }\n        if largest\
    \ == 1 {\n            largest = factor\n            prime = 2\n        }\n   \
    \     if largest % prime == 0 {\n            largest = prime\n        }\n    \
    \    prime += 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3pibdsub.swift:11:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n / 2 {\n               ^\n/tmp/tmp3pibdsub.swift:11:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n / 2\
    \ {\n               ^ ~\n                 \n/tmp/tmp3pibdsub.swift:11:16: error:\
    \ '<=' is not a prefix unary operator\n    for factor <= n / 2 {\n           \
    \    ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int = 0\n\n    for i = 2; i <= n / 2; i += 1 {\n       \
    \ if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpyea55few.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrimeFactor\
    \ = Int(ceil(log2(n)))\n    var factor = 1\n    for _ in 0..<maxPrimeFactor {\n\
    \        if n % factor == 0 {\n            factor++\n        } else {\n      \
    \      break\n        }\n    }\n    return factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp4zffis0e.swift:8:30: error: cannot find 'ceil' in scope\n    let\
    \ maxPrimeFactor = Int(ceil(log2(n)))\n                             ^~~~\n/tmp/tmp4zffis0e.swift:8:35:\
    \ error: cannot find 'log2' in scope\n    let maxPrimeFactor = Int(ceil(log2(n)))\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 2\n    var prime = 1\n    for _ in 0..<limit {\n        if n\
    \ % factor == 0 {\n            prime = factor\n        }\n        factor++\n \
    \   }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsyxcbnif.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n / 2; i += 1 {\n  \
    \      if n % i == 0 {\n            if largest < i {\n                largest\
    \ = i\n                largestPrimeFactor = 1\n            } else {\n        \
    \        largestPrimeFactor = largestPrimeFactor * i\n            }\n        }\n\
    \    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpa890wk34.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpa890wk34.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmpa890wk34.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    // Sieve of Eratosthenes\n    var primes = make(map[Int]bool)\n\
    \    var prime_factors = make([]int, n)\n\n    for i := 2; i < n; i++ {\n    \
    \    if primes[i] {\n            continue\n        }\n\n        for j := i * i;\
    \ j < n; j += i {\n            primes[j] = true\n        }\n    }\n\n    for i\
    \ := 2; i < n; i++ {\n        if !primes[i] {\n            continue\n        }\n\
    \n        prime_factors = append(prime_factors, i)\n    }\n\n    return prime_factors[len(prime_factors)-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1zaij5wi.swift:13:31: error: expected ',' separator\n    var primes\
    \ = make(map[Int]bool)\n                              ^\n                    \
    \          ,\n/tmp/tmp1zaij5wi.swift:14:32: error: expected ',' separator\n  \
    \  var prime_factors = make([]int, n)\n                               ^\n    \
    \                           ,\n/tmp/tmp1zaij5wi.swift:16:12: error: expected type\n\
    \    for i := 2; i < n; i++ {\n           ^\n            <#type#>\n/tmp/tmp1zaij5wi.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmp1zaij5wi.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmp1zaij5wi.swift:21:16:\
    \ error: expected type\n        for j := i * i; j < n; j += i {\n            \
    \   ^\n                <#type#>\n/tmp/tmp1zaij5wi.swift:21:16: error: expected\
    \ 'in' after for-each pattern\n        for j := i * i; j < n; j += i {\n     \
    \          ^\n/tmp/tmp1zaij5wi.swift:21:16: error: expected Sequence expression\
    \ for for-each loop\n        for j := i * i; j < n; j += i {\n               ^\n\
    /tmp/tmp1zaij5wi.swift:26:12: error: expected type\n    for i := 2; i < n; i++\
    \ {\n           ^\n            <#type#>\n/tmp/tmp1zaij5wi.swift:26:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n       \
    \    ^\n/tmp/tmp1zaij5wi.swift:26:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmp1zaij5wi.swift:13:18:\
    \ error: cannot find 'make' in scope\n    var primes = make(map[Int]bool)\n  \
    \               ^~~~\n/tmp/tmp1zaij5wi.swift:13:23: error: cannot find 'map' in\
    \ scope\n    var primes = make(map[Int]bool)\n                      ^~~\n/tmp/tmp1zaij5wi.swift:13:31:\
    \ error: cannot find 'bool' in scope\n    var primes = make(map[Int]bool)\n  \
    \                            ^~~~\n/tmp/tmp1zaij5wi.swift:14:25: error: cannot\
    \ find 'make' in scope\n    var prime_factors = make([]int, n)\n             \
    \           ^~~~\n/tmp/tmp1zaij5wi.swift:14:32: error: cannot find 'int' in scope\n\
    \    var prime_factors = "
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if maxFactor < factor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpk8v_kk5i/tmpk8v_kk5i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad8ffec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad8cf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad8cf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad8cf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8v_kk5i                        0x000055f435f75335 <unavailable> + 4917

    5    libc.so.6                          0x00002acad91ea460 __libc_start_main +
    245

    6    tmpk8v_kk5i                        0x000055f435f74fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 2\n    for number in 2...n {\n        if number % prime ==\
    \ 0 {\n            largest = number\n        }\n        if number > largest {\n\
    \            largest = number\n            prime = number\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp5sdfogoo/tmp5sdfogoo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b090d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b08dc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b08dc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b08dc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sdfogoo                        0x000055afd59b7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0b092be460 __libc_start_main +
    245

    6    tmp5sdfogoo                        0x000055afd59b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var prime = 1\n    while factor <= limit {\n        if\
    \ n % factor == 0 {\n            prime = factor\n            break\n        }\n\
    \        factor += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpj9bipcbp.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n\
    \    var maxFactorFoundInt2 = Int()\n    for var i = 2; i <= n / 2; i += 1 {\n\
    \        if n % i == 0 {\n            if maxFactorFoundInt == 0 {\n          \
    \      maxFactorFoundInt = i\n            } else {\n                if maxFactorFoundInt\
    \ != i {\n                    maxFactorFoundInt = i\n                }\n     \
    \       }\n        }\n    }\n    if maxFactorFoundInt == 0 {\n        maxFactorFoundInt\
    \ = 1\n    }\n    for var i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n\
    \            if maxFactorFoundInt2 == 0 {\n                maxFactorFoundInt2\
    \ = i\n            } else {\n                if maxFactorFoundInt2 != i {\n  \
    \                  maxFactorFoundInt2 = i\n                }\n            }\n\
    \        }\n    }\n    if maxFactorFoundInt2 == 0 {\n        maxFactorFoundInt2\
    \ = 1\n    }\n    if maxFactorFoundInt > maxFactorFoundInt2 {\n        maxFactor\
    \ = maxFactorFoundInt\n    } else {\n        maxFactor = maxFactorFoundInt2\n\
    \    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmphest9jpf.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphest9jpf.swift:26:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0_0q0v8a.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp0_0q0v8a.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n \
    \       return maxFactor\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp54fp_c9v/tmp54fp_c9v.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6335bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63052b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63052988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f630517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54fp_c9v                        0x00005592db2ed335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f63547460 __libc_start_main +
    245

    6    tmp54fp_c9v                        0x00005592db2ecfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxFactor\
    \ = primeFactors(n)\n    return maxFactor.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpougkqote.swift:8:21: error: cannot find 'primeFactors' in scope\n\
    \    let maxFactor = primeFactors(n)\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var factor = 2\n    while !maxFactorFound\
    \ {\n        if n % factor == 0 {\n            maxFactorFound = true\n       \
    \     maxFactor = factor\n        }\n        factor++\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmrgnbi6z.swift:16:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max: Int =\
    \ 0\n    var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int =\
    \ 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int =\
    \ 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var\
    \ s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmple790g9x.swift:32:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmple790g9x.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmple790g9x.swift:33:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmple790g9x.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmple790g9x.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmple790g9x.swift:11:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmple790g9x.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmple790g9x.swift:12:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmple790g9x.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmple790g9x.swift:13:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmple790g9x.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmple790g9x.swift:14:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmple790g9x.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmple790g9x.swift:15:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmple790g9x.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmple790g9x.swift:16:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmple790g9x.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmple790g9x.swift:17:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmple790g9x.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmple790g9x.swift:18:9:\
    \ note: 'u' previously declared here\n    var u: Int = 0\n        ^\n/tmp/tmple790g9x.swift:44:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int = 0\n        ^\n/tmp/tmple790g9x.swift:19:9:\
    \ note: 'v' previously declared here\n    var v: Int = 0\n  "
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxFactor\
    \ = prime_factors(n)\n    return maxFactor.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpo1qz8gqt.swift:8:21: error: cannot find 'prime_factors' in scope\n\
    \    let maxFactor = prime_factors(n)\n                    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 2\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largest\
    \ < i {\n                largest = i\n            }\n            if largestPrimeFactor\
    \ < i {\n                largestPrimeFactor = i\n            }\n        }\n  \
    \  }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmplvtrtpd2.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmplvtrtpd2.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmplvtrtpd2.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor\
    \ = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3rd5sqj_.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3rd5sqj_.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp3rd5sqj_.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \n    for prime in 2...n {\n        if n % prime == 0 {\n            largestPrimeFactor\
    \ = prime\n            largest = prime\n        }\n    }\n\n    if largest ==\
    \ 1 {\n        return largestPrimeFactor\n    }\n\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpogmxwhod/tmpogmxwhod.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec18ec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec18bbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec18bbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec18bbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogmxwhod                        0x000055edd0392335 <unavailable> + 4917

    5    libc.so.6                          0x00002aec190b2460 __libc_start_main +
    245

    6    tmpogmxwhod                        0x000055edd0391fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n        if number\
    \ % 2 == 0 {\n            largestPrimeFactor *= number\n        }\n        if\
    \ number % 3 == 0 {\n            largestPrimeFactor *= number\n        }\n   \
    \     if number % 5 == 0 {\n            largestPrimeFactor *= number\n       \
    \ }\n        if number % 7 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 11 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 13 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 17 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 19 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 23 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 29 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 31 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 37 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 41 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 43 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 47 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 53 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 59 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 61 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 67 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 71 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 73 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 79 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 83 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 89 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 97 == 0 {\n            largestPrimeFactor *= number\n\
    \        }\n        if number % 103 == 0 {\n            largestPrimeFactor *=\
    \ number\n        }\n        if number % 107 == 0 {\n            largestPrimeFactor\
    \ *= number\n        }\n        if number % 111 == 0 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3n39oe8a.swift:113:45: error: expected '}' at end of brace statement\n\
    assert(largest_prime_factor(n: 13195) == 29)\n                               \
    \             ^\n/tmp/tmp3n39oe8a.swift:10:25: note: to match this opening '{'\n\
    \    for number in 2...n {\n                        ^\n/tmp/tmp3n39oe8a.swift:113:45:\
    \ error: expected '}' at end of brace statement\nassert(largest_prime_factor(n:\
    \ 13195) == 29)\n                                            ^\n/tmp/tmp3n39oe8a.swift:7:42:\
    \ note: to match this opening '{'\nfunc largest_prime_factor(n: Int) -> Int {\n\
    \                                         ^\n/tmp/tmp3n39oe8a.swift:97:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp3n39oe8a.swift:8:9:\
    \ warning: initialization of variable 'largest' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var largest = 1\n    ~~~~^~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 1\n    var i = 2\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor *= i\n            n /= i\n        }\n        i += 1\n\
    \    }\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmphqp__9j2.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n/tmp/tmphqp__9j2.swift:14:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= i\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxFactor\
    \ = sqrt(Double(n))\n    var factor: Int = 0\n    for factor in 2..<maxFactor\
    \ {\n        if n % factor == 0 {\n            break\n        }\n    }\n    return\
    \ factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvm52b_zf.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ maxFactor = sqrt(Double(n))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzpe3yme0.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpzpe3yme0.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpzpe3yme0.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int(1)\n    var maxFactorFound = false\n    for factor in 2...Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if !maxFactorFound {\n    \
    \            maxFactorFound = true\n                maxFactor = factor\n     \
    \       }\n        } else {\n            if maxFactorFound {\n               \
    \ break\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpekwefe0z.swift:10:27: error: cannot find 'sqrt' in scope\n    for\
    \ factor in 2...Int(sqrt(Double(n))) + 1 {\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if largestPrimeFactorIsPrime {\n\
    \                largestPrimeFactor = factor\n            } else {\n         \
    \       largestPrimeFactorIsPrime = false\n            }\n        }\n    }\n \
    \   return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp26iqbu1p/tmp26iqbu1p.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9eb74cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9eb443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9eb443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9eb4427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26iqbu1p                        0x0000563451862335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae9eb938460 __libc_start_main +
    245

    6    tmp26iqbu1p                        0x0000563451861fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n        if n % i == 0 {\n            if max_factor < i {\n            \
    \    max_factor = i\n                max_factor_index = i\n            }\n   \
    \     }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_zr2mips.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n / 2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp_zr2mips.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / 2; i +=\
    \ 1 {\n           ^\n/tmp/tmp_zr2mips.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n / 2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    for factor <= n / 2 {\n        if n % factor == 0\
    \ {\n            largest = factor\n        }\n        factor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpycuos48b.swift:10:16: error: expected 'in' after for-each pattern\n\
    \    for factor <= n / 2 {\n               ^\n/tmp/tmpycuos48b.swift:10:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor <= n / 2\
    \ {\n               ^ ~\n                 \n/tmp/tmpycuos48b.swift:10:16: error:\
    \ '<=' is not a prefix unary operator\n    for factor <= n / 2 {\n           \
    \    ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n %\
    \ i == 0 {\n            if max_factor < i {\n                max_factor = i\n\
    \                max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpj1397fqd.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return maxFactor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp3y5g8u39/tmp3y5g8u39.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81233b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81230b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81230b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81230af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y5g8u39                        0x00005592a4c37335 <unavailable> + 4917

    5    libc.so.6                          0x00002b81235a5460 __libc_start_main +
    245

    6    tmp3y5g8u39                        0x00005592a4c36fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    var currentPrimeFactor = 1\n    var currentPrimeFactorIsPrime = true\n\n\
    \    for currentPrimeFactor = 2; currentPrimeFactor <= n; currentPrimeFactor++\
    \ {\n        if n % currentPrimeFactor == 0 {\n            largestPrimeFactor\
    \ = currentPrimeFactor\n            largest = currentPrimeFactor\n        }\n\n\
    \        if currentPrimeFactor % 2 == 0 {\n            if currentPrimeFactorIsPrime\
    \ {\n                largestPrimeFactor = largest\n                largest = currentPrimeFactor\n\
    \            }\n            currentPrimeFactorIsPrime = false\n        } else\
    \ {\n            if currentPrimeFactorIsPrime {\n                largestPrimeFactor\
    \ = largest\n                largest = currentPrimeFactor\n            }\n   \
    \         currentPrimeFactorIsPrime = true\n        }\n    }\n\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpslwfbqss.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for currentPrimeFactor = 2; currentPrimeFactor <= n; currentPrimeFactor++\
    \ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp1xma70o/tmpp1xma70o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2e225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2df1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2df1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2df1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1xma70o                        0x00005564c270e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abd2e411460 __libc_start_main +
    245

    6    tmpp1xma70o                        0x00005564c270dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 2\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest =\
    \ i\n            largestPrimeFactor = i\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3ja264sf.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3ja264sf.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp3ja264sf.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmph6escsib.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmph6escsib.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmph6escsib.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var largest = 2\n    var largestPrimeFactor = 2\n\
    \n    for i := 2; i <= n / largestPrimeFactor; i++ {\n        if n % i == 0 {\n\
    \            largest = i\n            largestPrimeFactor = largest\n        }\n\
    \    }\n\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmplrz2vlq1.swift:15:12: error: expected type\n    for i := 2; i <=\
    \ n / largestPrimeFactor; i++ {\n           ^\n            <#type#>\n/tmp/tmplrz2vlq1.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n / largestPrimeFactor;\
    \ i++ {\n           ^\n/tmp/tmplrz2vlq1.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i <= n / largestPrimeFactor; i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor:\
    \ Int = 0\n    var largestPrimeFactorFound = false\n    var largestPrimeFactorFoundInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivision = 0\n  \
    \  var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactors = false\n\
    \    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = false\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivision\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactors\
    \ = 0\n    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp180g20sh.swift:23:9: error: type annotation missing in pattern\n\
    \    var largestPrimeFactorFoundInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfterDivisionInPrimeFactorsAfter\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor\
    \ = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_factor < i {\n                max_factor =\
    \ i\n                max_factor_index = i\n            }\n        }\n    }\n \
    \   return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3rd5sqj_.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3rd5sqj_.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp3rd5sqj_.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    for factor < n {\n        if n % factor == 0 {\n    \
    \        if maxFactorFound {\n                return factor\n            }\n \
    \           maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpi1s0cdo9.swift:14:16: error: expected 'in' after for-each pattern\n\
    \    for factor < n {\n               ^\n/tmp/tmpi1s0cdo9.swift:14:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor < n {\n\
    \               ^~\n                \n/tmp/tmpi1s0cdo9.swift:14:16: error: '<'\
    \ is not a prefix unary operator\n    for factor < n {\n               ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpd3vur5if.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpd3vur5if.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpd3vur5if.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpd3vur5if.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpd3vur5if.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpd3vur5if.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpd3vur5if.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpd3vur5if.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpd3vur5if.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpd3vur5if.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpd3vur5if.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpd3vur5if.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpd3vur5if.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpd3vur5if.swift:16:5:\
    \ error: cannot find 'largest' in scope\n    largest\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2\n    var maxFactorIsPrime\
    \ = true // start at true\n    for factor in 2...n {\n        if n % factor ==\
    \ 0 {\n            if !maxFactorIsPrime {\n                maxFactor = factor\n\
    \                maxFactorIsPrime = true\n            } else {\n             \
    \   // factor is prime\n                if factor > maxFactor {\n            \
    \        maxFactor = factor\n                }\n            }\n        } else\
    \ {\n            if maxFactorIsPrime {\n                maxFactorIsPrime = false\n\
    \            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp7vyiqltm/tmp7vyiqltm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70f1811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70f1508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70f1508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70f15077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7vyiqltm                        0x000055ebc2cd4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b70f19fd460 __libc_start_main +
    245

    6    tmp7vyiqltm                        0x000055ebc2cd3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpo7l72euv/tmpo7l72euv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6dff3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6dceab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6dcea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6dce97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7l72euv                        0x0000560c9ab223b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8c6e1df460 __libc_start_main +
    245

    6    tmpo7l72euv                        0x0000560c9ab21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var i = 2\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor++\n            if factor > limit {\n               \
    \ factor = 1\n            }\n        }\n        i += 1\n    }\n    return factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp8jb1715y.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n/tmp/tmp8jb1715y.swift:13:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max = (n /\
    \ 2) + 1\n    var factor: Int = 0\n    for prime in 2...max {\n        if n %\
    \ prime == 0 {\n            factor++\n        }\n    }\n    return factor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3r814y0x.swift:12:19: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorFoundIndex = -1\n\n    for i := 2; i <= n; i++ {\n \
    \       if n % i == 0 {\n            if maxFactorFound == false {\n          \
    \      maxFactorFound = true\n                maxFactor = i\n                maxFactorFoundIndex\
    \ = i\n            } else {\n                if maxFactorFoundIndex < i {\n  \
    \                  maxFactorFoundIndex = i\n                }\n            }\n\
    \        }\n    }\n\n    if maxFactorFound == false {\n        return n\n    }\n\
    \n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpl2sn4u83.swift:16:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpl2sn4u83.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpl2sn4u83.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp474rjfve/tmp474rjfve.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535534bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5355042b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5355042988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53550417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp474rjfve                        0x000055aff1fce3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5355537460 __libc_start_main +
    245

    6    tmp474rjfve                        0x000055aff1fcdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound\
    \ = false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n       \
    \     if maxFactorFound {\n                return factor\n            }\n\n  \
    \          maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpm5r71fja/tmpm5r71fja.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65de4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65de1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65de1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65de1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5r71fja                        0x000055ee422703b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b65de6b0460 __libc_start_main +
    245

    6    tmpm5r71fja                        0x000055ee4226ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2 since 2 > 1\n   \
    \ for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactor\
    \ < factor {\n                maxFactor = factor\n            }\n        }\n \
    \   }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpwxl7dccm/tmpwxl7dccm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34912fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3490ff5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3490ff5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3490ff47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxl7dccm                        0x000055fa268f0335 <unavailable> + 4917

    5    libc.so.6                          0x00002b34914ea460 __libc_start_main +
    245

    6    tmpwxl7dccm                        0x000055fa268effe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var primeFactors = [1]\n    var primeFactorFound = false\n\n    for\
    \ factor in 2...n {\n        if primeFactorFound {\n            if factor == 1\
    \ {\n                maxFactorFound = true\n            } else {\n           \
    \     if factor > maxFactor {\n                    maxFactor = factor\n      \
    \          }\n            }\n        } else {\n            if factor > maxFactor\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            }\n        }\n\n        if factor > 1 {\n            primeFactorFound\
    \ = false\n            for prime in 2...factor {\n                if prime > 1\
    \ {\n                    if primeFactors.contains(prime) {\n                 \
    \       primeFactorFound = true\n                        break\n             \
    \       }\n                }\n            }\n\n            if primeFactorFound\
    \ {\n                primeFactors.append(factor)\n            }\n        }\n \
    \   }\n\n    if maxFactorFound {\n        return maxFactor\n    }\n\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) ==\
    \ 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpf31zmkzt/tmpf31zmkzt.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b358a017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3589d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3589d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3589d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf31zmkzt                        0x00005562e19eb505 <unavailable> + 5381

    5    libc.so.6                          0x00002b358a203460 __libc_start_main +
    245

    6    tmpf31zmkzt                        0x00005562e19eb1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return n\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp8il15x8/tmpp8il15x8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0a3e77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0a3b6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0a3b6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0a3b6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8il15x8                        0x00005650038853b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae0a4063460 __libc_start_main +
    245

    6    tmpp8il15x8                        0x0000565003884fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound\
    \ = false\n    var i: Int = 0\n    var j: Int = 0\n    var factor: Int = 0\n\n\
    \    for i = 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            j =\
    \ i\n            factor = 1\n            while j > 1 {\n                if n %\
    \ j == 0 {\n                    factor *= j\n                    n /= j\n    \
    \            } else {\n                    j -= 1\n                }\n       \
    \     }\n            if maxFactorFound == false {\n                maxFactor =\
    \ factor\n                maxFactorFound = true\n            } else {\n      \
    \          if factor > maxFactor {\n                    maxFactor = factor\n \
    \               }\n            }\n        }\n    }\n\n    if maxFactorFound ==\
    \ false {\n        maxFactor = 1\n    }\n\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_p5uilj6.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            largestPrimeFactor = i\n            if largest < largestPrimeFactor\
    \ {\n                largest = largestPrimeFactor\n            }\n        }\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpk_qiq03q.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpk_qiq03q.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpk_qiq03q.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    return maxFactor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpzcsky4g7/tmpzcsky4g7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b85ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b82d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b82d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b82d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcsky4g7                        0x0000559d74504335 <unavailable> + 4917

    5    libc.so.6                          0x00002b68b87c9460 __libc_start_main +
    245

    6    tmpzcsky4g7                        0x0000559d74503fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    var i = 2\n    while i <= n && !maxFactorFound {\n        if n %\
    \ i == 0 {\n            maxFactorFound = true\n            maxFactor = i\n   \
    \     }\n        i += 1\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpo3_e0ux8/tmpo3_e0ux8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f781cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f7513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f7513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f75127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3_e0ux8                        0x0000562541d1c245 <unavailable> + 4677

    5    libc.so.6                          0x00002b27f7a08460 __libc_start_main +
    245

    6    tmpo3_e0ux8                        0x0000562541d1bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max_divisor\
    \ = sqrt(Double(n))\n    var max_divisor_index = 0\n    var max_divisor_value\
    \ = n\n    for divisor in stride(from: 1, through: max_divisor, by: 2) {\n   \
    \     if n % divisor == 0 {\n            max_divisor_value = divisor\n       \
    \     max_divisor_index = divisor\n        }\n    }\n    return max_divisor_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpafqnf9n7.swift:8:23: error: cannot find 'sqrt' in scope\n    let\
    \ max_divisor = sqrt(Double(n))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsdd4y2fp.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpsdd4y2fp.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpsdd4y2fp.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor: Int = 0\n    var maxFactorFound\
    \ = false\n    var factor: Int = 0\n    var factorFound = false\n\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if !factorFound {\n  \
    \              factorFound = true\n                maxFactorFound = true\n   \
    \             maxFactor = factor\n            }\n        } else {\n          \
    \  if factorFound {\n                factorFound = false\n            }\n    \
    \    }\n    }\n\n    if !maxFactorFound {\n        return n\n    }\n\n    return\
    \ maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpzjgolt8e/tmpzjgolt8e.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f4fcd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f4f9ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f4f9cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f4f9cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjgolt8e                        0x000055d36d24a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3f4fec1460 __libc_start_main +
    245

    6    tmpzjgolt8e                        0x000055d36d249fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max_prime\
    \ = sqrt(Double(n))\n    var max_factor = 1\n    var max_factor_index = 0\n  \
    \  for factor in 2...max_prime {\n        if n % factor == 0 {\n            if\
    \ factor > max_factor {\n                max_factor = factor\n               \
    \ max_factor_index = factor\n            }\n        }\n    }\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpvtbayf_f.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ max_prime = sqrt(Double(n))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp1xma70o/tmpp1xma70o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd2e225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd2df1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd2df1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd2df1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1xma70o                        0x00005564c270e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abd2e411460 __libc_start_main +
    245

    6    tmpp1xma70o                        0x00005564c270dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = i\n    while i < n {\n        if n % i == 0 {\n       \
    \     largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp7f7xaaq5.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmp7f7xaaq5.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmp7f7xaaq5.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmp7f7xaaq5.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = i\n            ^\n/tmp/tmp7f7xaaq5.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = i\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmp7f7xaaq5.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = i\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmp7f7xaaq5.swift:9:23: error: cannot find 'i' in scope\n    let mut largest\
    \ = i\n                      ^\n/tmp/tmp7f7xaaq5.swift:10:11: error: cannot find\
    \ 'i' in scope\n    while i < n {\n          ^\n/tmp/tmp7f7xaaq5.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmp7f7xaaq5.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmp7f7xaaq5.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmp7f7xaaq5.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmp7f7xaaq5.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound =\
    \ false\n    var i: Int\n    for i = 2; i <= n / 2; i += 1 {\n        if n % i\
    \ == 0 {\n            if maxFactorFound {\n                return i\n        \
    \    }\n            maxFactor = i\n            maxFactorFound = true\n       \
    \ }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) ==\
    \ 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_ivi4q93.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max: Int =\
    \ 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var d: Int = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int\
    \ = 0\n    var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n   \
    \ var t: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var t: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp3jiai7no.swift:20:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:21:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:22:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:11:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:23:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:12:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:24:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:13:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:25:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:14:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:26:9:\
    \ error: invalid redeclaration of 'd'\n    var d: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:15:9:\
    \ note: 'd' previously declared here\n    var d: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:27:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:16:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:28:9:\
    \ error: invalid redeclaration of 'f'\n    var f: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:17:9:\
    \ note: 'f' previously declared here\n    var f: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:29:9:\
    \ error: invalid redeclaration of 'g'\n    var g: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:18:9:\
    \ note: 'g' previously declared here\n    var g: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:30:9:\
    \ error: invalid redeclaration of 'h'\n    var h: Int = 0\n        ^\n/tmp/tmp3jiai7no.swift:19:9:\
    \ note: 'h' previously declared here\n    var h: Int = 0\n  "
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n\
    \    var factor = 2\n    var prime = 1\n    while factor <= limit {\n        if\
    \ n % factor == 0 {\n            prime *= factor\n            n /= factor\n  \
    \      } else {\n            factor++\n        }\n    }\n    return prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmppg0n1q4i.swift:8:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n/tmp/tmppg0n1q4i.swift:14:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= factor\n            ~ ^\n/tmp/tmppg0n1q4i.swift:16:19: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            factor++\n\
    \                  ^~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmph6escsib.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmph6escsib.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmph6escsib.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrime:\
    \ Int = Int(sqrt(Double(n)))\n    var factor: Int = 0\n    var i: Int = 0\n  \
    \  while i < maxPrime {\n        if n % i == 0 {\n            factor++\n     \
    \   }\n        i += 1\n    }\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpuyxct2ua.swift:8:29: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrime: Int = Int(sqrt(Double(n)))\n                            ^~~~\n/tmp/tmpuyxct2ua.swift:13:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n        if number\
    \ % 2 == 0 {\n            if number > largestPrimeFactor {\n                largestPrimeFactor\
    \ = number\n                largest = number\n            }\n        } else {\n\
    \            if number > largestPrimeFactor {\n                largestPrimeFactor\
    \ = number\n                largest = number\n            }\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpz7tam71p/tmpz7tam71p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb1d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb1a50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb1a50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb1a4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7tam71p                        0x0000556edfe72335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2cb1f45460 __libc_start_main +
    245

    6    tmpz7tam71p                        0x0000556edfe71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n\n    \
    \        maxFactorFound = true\n            maxFactor = factor\n        }\n  \
    \  }\n\n    if maxFactorFound {\n        return maxFactor\n    }\n\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) ==\
    \ 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpubgq2ssu/tmpubgq2ssu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc89d50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc89a47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc89a47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc89a467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpubgq2ssu                        0x0000564b809f73b0 <unavailable> + 5040

    5    libc.so.6                          0x00002abc89f3c460 __libc_start_main +
    245

    6    tmpubgq2ssu                        0x0000564b809f6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for prime in 2...n {\n        if n %\
    \ prime == 0 {\n            if largest < prime {\n                largest = prime\n\
    \                largestPrimeFactor = prime\n            }\n        }\n    }\n\
    \    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpqdawuhiu/tmpqdawuhiu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101b168c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b101ae5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b101ae5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b101ae5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdawuhiu                        0x000055bdf563e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b101b354460 __libc_start_main +
    245

    6    tmpqdawuhiu                        0x000055bdf563dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut prime_factors\
    \ = vec![Int::new(); n]\n    let mut prime_factors_size = prime_factors.len();\n\
    \    let mut prime_factors_index = 0;\n    let mut prime_factors_index_max = 0;\n\
    \    let mut prime_factors_index_min = 0;\n    let mut prime_factors_index_current\
    \ = 0;\n    let mut prime_factors_index_current_max = 0;\n    let mut prime_factors_index_current_min\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_max_index\
    \ = 0;\n    let mut prime_factors_index_current_max_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime_factors_index_current_min_index\
    \ = 0;\n    let mut prime_factors_index_current_min_index = 0;\n    let mut prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmppojaak7s.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut prime_factors\
    \ = vec![Int::new(); n]\n            ^\n/tmp/tmppojaak7s.swift:8:13: note: join\
    \ the identifiers together\n    let mut prime_factors = vec![Int::new(); n]\n\
    \        ~~~~^~~~~~~~~~~~~\n        mutprime_factors\n/tmp/tmppojaak7s.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut prime_factors\
    \ = vec![Int::new(); n]\n        ~~~~^~~~~~~~~~~~~\n        mutPrime_factors\n\
    /tmp/tmppojaak7s.swift:8:38: error: expected expression in list of expressions\n\
    \    let mut prime_factors = vec![Int::new(); n]\n                           \
    \          ^\n/tmp/tmppojaak7s.swift:9:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut prime_factors_size\
    \ = prime_factors.len();\n            ^\n/tmp/tmppojaak7s.swift:9:13: note: join\
    \ the identifiers together\n    let mut prime_factors_size = prime_factors.len();\n\
    \        ~~~~^~~~~~~~~~~~~~~~~~\n        mutprime_factors_size\n/tmp/tmppojaak7s.swift:9:13:\
    \ note: join the identifiers together with camel-case\n    let mut prime_factors_size\
    \ = prime_factors.len();\n        ~~~~^~~~~~~~~~~~~~~~~~\n        mutPrime_factors_size\n\
    /tmp/tmppojaak7s.swift:10:13: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n    let mut prime_factors_index\
    \ = 0;\n            ^\n/tmp/tmppojaak7s.swift:10:13: note: join the identifiers\
    \ together\n    let mut prime_factors_index = 0;\n        ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \        mutprime_factors_index\n/tmp/tmppojaak7s.swift:10:13: note: join the\
    \ identifiers together with camel-case\n    let mut prime_factors_index = 0;\n\
    \        ~~~~^~~~~~~~~~~~~~~~~~~\n        mutPrime_factors_index\n/tmp/tmppojaak7s.swift:11:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut prime_factors_index_max = 0;\n           \
    \ ^\n/tmp/tmppojaak7s.swift:11:13: note: join the identifiers tog"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 1\n    for factor in 2..<n {\n        if n % factor == 0\
    \ {\n            largest = factor\n            prime *= factor\n        }\n  \
    \  }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp914eoqu4/tmp914eoqu4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41f00bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41ed02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba41ed02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba41ed017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp914eoqu4                        0x0000563585ae23b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba41f1f7460 __libc_start_main +
    245

    6    tmp914eoqu4                        0x0000563585ae1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpo7l72euv/tmpo7l72euv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6dff3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6dceab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6dcea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6dce97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7l72euv                        0x0000560c9ab223b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8c6e1df460 __libc_start_main +
    245

    6    tmpo7l72euv                        0x0000560c9ab21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i : Int in 1...n {\n   \
    \     if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpjiwn5a32/tmpjiwn5a32.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c264dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c2344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c2344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c23437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiwn5a32                        0x000055fd5583c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8c2839460 __libc_start_main +
    245

    6    tmpjiwn5a32                        0x000055fd5583bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 1\n    for _ in 0..<n {\n        if n % prime == 0 {\n  \
    \          largest = prime\n        }\n        prime += 2\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpv672jhnh/tmpv672jhnh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42fcddac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42fcad1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42fcad1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42fcad07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv672jhnh                        0x000055b739b4c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b42fcfc6460 __libc_start_main +
    245

    6    tmpv672jhnh                        0x000055b739b4bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpnl_phaxk/tmpnl_phaxk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769d776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769d46db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769d46d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769d46c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl_phaxk                        0x0000561bf91e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b769d962460 __libc_start_main +
    245

    6    tmpnl_phaxk                        0x0000561bf91e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let maxPrime =\
    \ Int(sqrt(Double(n)))\n    var primeFactors = [1]\n    for i in 2...maxPrime\
    \ {\n        if n % i == 0 {\n            primeFactors.append(i)\n        }\n\
    \    }\n    return primeFactors.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcz85oopj.swift:8:24: error: cannot find 'sqrt' in scope\n    let\
    \ maxPrime = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for number in 2...n {\n        if number\
    \ % 2 == 0 {\n            for divisor in 3...number {\n                if number\
    \ % divisor == 0 {\n                    largestPrimeFactor = divisor\n       \
    \             break\n                }\n            }\n        }\n        if number\
    \ % largestPrimeFactor == 0 {\n            largest = number\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c537cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c5073561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26c5073286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26c507313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26c5072bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi6cub9xs                        0x000056231f24c827 <unavailable> + 6183

    6    tmpi6cub9xs                        0x000056231f24c2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b26c5568460 __libc_start_main +
    245

    8    tmpi6cub9xs                        0x000056231f24bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max = (2..<n).reduce(1)\
    \ { $0 % $1 }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp7hve3h71/tmp7hve3h71.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb25162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb24e59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb24e59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb24e587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hve3h71                        0x0000563bdebd2385 <unavailable> + 4997

    5    libc.so.6                          0x00002afb2534e460 __libc_start_main +
    245

    6    tmp7hve3h71                        0x0000563bdebd2039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          largest = i\n            n /= i\n        } else {\n            i +=\
    \ 2\n        }\n    }\n    largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpr01vmzsd.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpr01vmzsd.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpr01vmzsd.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpr01vmzsd.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpr01vmzsd.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpr01vmzsd.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpr01vmzsd.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpr01vmzsd.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpr01vmzsd.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpr01vmzsd.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpr01vmzsd.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpr01vmzsd.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpr01vmzsd.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpr01vmzsd.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpr01vmzsd.swift:13:18:\
    \ error: cannot find 'i' in scope\n            n /= i\n                 ^\n/tmp/tmpr01vmzsd.swift:15:13:\
    \ error: cannot find 'i' in scope\n            i += 2\n            ^\n/tmp/tmpr01vmzsd.swift:18:5:\
    \ error: cannot find 'largest' in scope\n    largest\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_ta67bhz.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp_ta67bhz.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var factor = 2\n    var factorFound = false\n    var i = 2\n\n  \
    \  while i <= n {\n        if n % i == 0 {\n            factorFound = true\n \
    \           if maxFactorFound == false {\n                maxFactorFound = true\n\
    \                maxFactor = i\n            }\n            factor = i\n      \
    \  }\n        i += 1\n    }\n\n    if maxFactorFound == false {\n        return\
    \ n\n    }\n\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp39lz2cp1/tmp39lz2cp1.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b4eaffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b4e7f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b4e7f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b4e7f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39lz2cp1                        0x000055e9ae178245 <unavailable> + 4677

    5    libc.so.6                          0x00002b5b4eceb460 __libc_start_main +
    245

    6    tmp39lz2cp1                        0x000055e9ae177ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for prime in 2..<n {\n        if n % prime == 0 {\n            largest\
    \ = prime\n            break\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpp3k01sre/tmpp3k01sre.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd0d46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd0a3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd0a3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd0a3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3k01sre                        0x000056501e3a3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4cd0f32460 __libc_start_main +
    245

    6    tmpp3k01sre                        0x000056501e3a2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 2\n    for factor in 2...n {\n        if n % factor == 0\
    \ {\n            largest = factor\n            prime *= factor\n        }\n  \
    \  }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd2t53hqk/tmpd2t53hqk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae73664c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae7335bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae7335b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae7335a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2t53hqk                        0x000055b831523335 <unavailable> + 4917

    5    libc.so.6                          0x00002aae73850460 __libc_start_main +
    245

    6    tmpd2t53hqk                        0x000055b831522fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int(1)\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmprup_kcif.swift:9:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \              ^~\n                   ...\n/tmp/tmprup_kcif.swift:9:26: error:\
    \ cannot find 'sqrt' in scope\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n\
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    // The largest prime factor is n-1 (mod 2)\n  \
    \  var largestPrimeFactor = n-1\n\n    // The smallest prime factor is 2\n   \
    \ var smallestPrimeFactor = 2\n\n    // The largest factor is 2\n    var largestFactor\
    \ = 2\n\n    // The smallest factor is 2\n    var smallestFactor = 2\n\n    //\
    \ The largest factor is 2\n    var largestPrimeFactor2 = 2\n\n    // The smallest\
    \ factor is 2\n    var smallestPrimeFactor2 = 2\n\n    // The largest factor is\
    \ 2\n    var largestFactor2 = 2\n\n    // The smallest factor is 2\n    var smallestFactor2\
    \ = 2\n\n    // The largest factor is 2\n    var largestPrimeFactor3 = 2\n\n \
    \   // The smallest factor is 2\n    var smallestPrimeFactor3 = 2\n\n    // The\
    \ largest factor is 2\n    var largestFactor3 = 2\n\n    // The smallest factor\
    \ is 2\n    var smallestFactor3 = 2\n\n    // The largest factor is 2\n    var\
    \ largestPrimeFactor4 = 2\n\n    // The smallest factor is 2\n    var smallestPrimeFactor4\
    \ = 2\n\n    // The largest factor is 2\n    var largestFactor4 = 2\n\n    //\
    \ The smallest factor is 2\n    var smallestFactor4 = 2\n\n    // The largest\
    \ factor is 2\n    var largestPrimeFactor5 = 2\n\n    // The smallest factor is\
    \ 2\n    var smallestPrimeFactor5 = 2\n\n    // The largest factor is 2\n    var\
    \ largestFactor5 = 2\n\n    // The smallest factor is 2\n    var smallestFactor5\
    \ = 2\n\n    // The largest factor is 2\n    var largestPrimeFactor6 = 2\n\n \
    \   // The smallest factor is 2\n    var smallestPrimeFactor6 = 2\n\n    // The\
    \ largest factor is 2\n    var largestFactor6 = 2\n\n    // The smallest factor\
    \ is 2\n    var smallestFactor6 = 2\n\n    // The largest factor is 2\n    var\
    \ largestPrimeFactor7 = 2\n\n    // The smallest factor is 2\n    var smallestPrimeFactor7\
    \ = 2\n\n    // The largest factor is 2\n    var largestFactor7 = 2\n\n    //\
    \ The smallest factor is 2\n    var smallestFactor7 = 2\n\n    // The largest\
    \ factor is 2\n    var largestPrimeFactor8 = 2\n\n    // The smallest factor is\
    \ 2\n    var smallestPrimeFactor8 = 2\n\n    // The largest factor is 2\n    var\
    \ largestFactor8 = 2\n\n    // The smallest factor is 2\n    var smallestFactor8\
    \ = 2\n\n    // The largest factor is 2\n    var largestPrimeFactor9 = 2\n\n \
    \   // The smallest factor \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpjq__v4c6.swift:13:9: warning: initialization of variable 'largestPrimeFactor'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var largestPrimeFactor = n-1\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:16:9:\
    \ warning: initialization of variable 'smallestPrimeFactor' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var smallestPrimeFactor\
    \ = 2\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:19:9: warning:\
    \ initialization of variable 'largestFactor' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var largestFactor = 2\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpjq__v4c6.swift:22:9: warning: initialization of variable 'smallestFactor'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var smallestFactor = 2\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:25:9:\
    \ warning: initialization of variable 'largestPrimeFactor2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestPrimeFactor2\
    \ = 2\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:28:9: warning:\
    \ initialization of variable 'smallestPrimeFactor2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var smallestPrimeFactor2 = 2\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:31:9: warning: initialization\
    \ of variable 'largestFactor2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var largestFactor2 = 2\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpjq__v4c6.swift:34:9: warning: initialization of variable 'smallestFactor2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var smallestFactor2 = 2\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:37:9:\
    \ warning: initialization of variable 'largestPrimeFactor3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestPrimeFactor3\
    \ = 2\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjq__v4c6.swift:40:9: warning:\
    \ initialization of variable 'smalle"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    for _ in 0..<n {\n        if n % factor == 0 {\n\
    \            largest = factor\n        }\n        factor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1akvws5z.swift:14:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var maxFactor = 2 // start at 2\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpn6q8181e/tmpn6q8181e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac99d49bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac99d192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac99d192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac99d1917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6q8181e                        0x0000560d7cd2d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac99d687460 __libc_start_main +
    245

    6    tmpn6q8181e                        0x0000560d7cd2cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            largest\
    \ = factor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpvzlqvnzz/tmpvzlqvnzz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ba800c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ba4f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ba4f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ba4f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzlqvnzz                        0x00005603b98f6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b84ba9ec460 __libc_start_main +
    245

    6    tmpvzlqvnzz                        0x00005603b98f5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return factor\n            }\n        \
    \    maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpnl_phaxk/tmpnl_phaxk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769d776c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769d46db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769d46d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769d46c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl_phaxk                        0x0000561bf91e83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b769d962460 __libc_start_main +
    245

    6    tmpnl_phaxk                        0x0000561bf91e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmph6escsib.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmph6escsib.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmph6escsib.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ factors(n)\n    return factors.count > 0 ? factors.last : 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmplnyj0t44.swift:8:19: error: use of local variable 'factors' before\
    \ its declaration\n    let factors = factors(n)\n                  ^\n/tmp/tmplnyj0t44.swift:8:9:\
    \ note: 'factors' declared here\n    let factors = factors(n)\n        ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for factor in 2...n {\n    \
    \    if n % factor == 0 {\n            if factor > max_factor {\n            \
    \    max_factor = factor\n                max_factor_index = factor\n        \
    \    }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpf4kxgm3l/tmpf4kxgm3l.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2c2b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2c27f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2c27f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2c27f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4kxgm3l                        0x000055958fe35335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac2c2cee460 __libc_start_main +
    245

    6    tmpf4kxgm3l                        0x000055958fe34fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    while !maxFactorFound {\n        if n % factor == 0 {\n\
    \            maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \        factor++\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpwss0b7ai.swift:19:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        factor++\n              ^~\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorIsPrime\
    \ = true\n    for factor in 2...n {\n        if n % factor == 0 {\n          \
    \  if factor > maxFactor {\n                maxFactor = factor\n            }\n\
    \            if factor > 1 && factor * factor < n {\n                maxFactorIsPrime\
    \ = false\n            }\n        }\n    }\n    if maxFactorIsPrime {\n      \
    \  return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpt_vnid14/tmpt_vnid14.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac873ed0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac873bc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac873bc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac873bc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_vnid14                        0x000055b5986e3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8740bc460 __libc_start_main +
    245

    6    tmpt_vnid14                        0x000055b5986e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0_0q0v8a.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp0_0q0v8a.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0_0q0v8a.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp0_0q0v8a.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpe1vd6v2d/tmpe1vd6v2d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0cdcd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0cd9ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0cd9ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0cd9cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe1vd6v2d                        0x000055d1e2ebc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ab0cdec3460 __libc_start_main +
    245

    6    tmpe1vd6v2d                        0x000055d1e2ebbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for prime in 2...n {\n        if n %\
    \ prime == 0 {\n            if largest < prime {\n                largest = prime\n\
    \                largestPrimeFactor = prime\n            }\n        }\n    }\n\
    \    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpqdawuhiu/tmpqdawuhiu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101b168c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b101ae5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b101ae5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b101ae5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdawuhiu                        0x000055bdf563e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b101b354460 __libc_start_main +
    245

    6    tmpqdawuhiu                        0x000055bdf563dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n\
    \    var max_factor_value = n\n    for factor_index in 2..<n {\n        if n %\
    \ factor_index == 0 {\n            if max_factor_value < n / factor_index {\n\
    \                max_factor_value = n / factor_index\n                max_factor_index\
    \ = factor_index\n            }\n        }\n    }\n    return max_factor_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpf7h1klpy/tmpf7h1klpy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b397abb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b397a8a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b397a8a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b397a8a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7h1klpy                        0x000055ef20366335 <unavailable> + 4917

    5    libc.so.6                          0x00002b397ad9c460 __libc_start_main +
    245

    6    tmpf7h1klpy                        0x000055ef20365fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(1)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if !maxFactorFound {\n                maxFactorFound = true\n              \
    \  maxFactor = factor\n            } else {\n                if maxFactor != factor\
    \ {\n                    return maxFactor\n                }\n            }\n\
    \        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpn7drlvw6/tmpn7drlvw6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb02443c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb0213ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb0213a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb021397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7drlvw6                        0x0000557382bbf335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb0262f460 __libc_start_main +
    245

    6    tmpn7drlvw6                        0x0000557382bbefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         largest = factor\n        }\n        n /= factor\n        factor +=\
    \ 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1s752fzp.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpp2182rnd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpp2182rnd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpp2182rnd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = 2 // start at 2, since 2 is the\
    \ largest factor\n    var maxFactorIsPrime = true // start at true, since 2 is\
    \ the largest factor\n    for factor in 2..<n {\n        if n % factor == 0 {\n\
    \            if factor > maxFactor {\n                maxFactor = factor\n   \
    \         }\n            if factor > maxFactorIsPrime {\n                maxFactorIsPrime\
    \ = true\n            }\n        } else {\n            if factor > maxFactor {\n\
    \                maxFactor = factor\n            }\n            if factor > maxFactorIsPrime\
    \ {\n                maxFactorIsPrime = false\n            }\n        }\n    }\n\
    \n    if maxFactorIsPrime {\n        return maxFactor\n    } else {\n        return\
    \ n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpk6j6zys9.swift:19:25: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            if factor > maxFactorIsPrime {\n\
    \                        ^\n/tmp/tmpk6j6zys9.swift:26:25: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n            if factor\
    \ > maxFactorIsPrime {\n                        ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largestPrimeFactor\
    \ = Int(1)\n    var largestPrimeFactorIsPrime = true\n    for factor in 2...Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor * factor > n {\n\
    \                largestPrimeFactorIsPrime = false\n            } else {\n   \
    \             largestPrimeFactor = factor\n            }\n        }\n    }\n \
    \   if largestPrimeFactorIsPrime {\n        return largestPrimeFactor\n    } else\
    \ {\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpy_y_rt5k.swift:10:27: error: cannot find 'sqrt' in scope\n    for\
    \ factor in 2...Int(sqrt(Double(n))) + 1 {\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n/2; i += 1 {\n    \
    \    if n % i == 0 {\n            if largest == 1 {\n                largest =\
    \ i\n                largestPrimeFactor = i\n            } else {\n          \
    \      if largestPrimeFactor != i {\n                    largest = largestPrimeFactor\n\
    \                    largestPrimeFactor = i\n                }\n            }\n\
    \        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxyzm7pj0.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmpxyzm7pj0.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmpxyzm7pj0.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ == false {\n                maxFactorFound = true\n                maxFactorFoundInt\
    \ = factor\n            } else {\n                if maxFactorFoundInt > factor\
    \ {\n                    maxFactorFoundInt = factor\n                }\n     \
    \       }\n        }\n    }\n    if maxFactorFound == false {\n        return\
    \ 0\n    } else {\n        return maxFactorFoundInt\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp6jetvo17/tmp6jetvo17.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2251cadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22519a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22519a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22519a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jetvo17                        0x000055fa22288335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2251e99460 __libc_start_main +
    245

    6    tmp6jetvo17                        0x000055fa22287fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    var i = 2\n    while i < n {\n        if n % i ==\
    \ 0 {\n            largest = factor\n            factor = 1\n        } else {\n\
    \            factor *= i\n        }\n        i += 1\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp89izsldi/tmp89izsldi.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad606cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6069e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6069e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6069e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89izsldi                        0x00005567644a8245 <unavailable> + 4677

    5    libc.so.6                          0x00002ad606edc460 __libc_start_main +
    245

    6    tmp89izsldi                        0x00005567644a7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var factor = 2\n    var factorFound = false\n\n    while !factorFound\
    \ {\n        if n % factor == 0 {\n            factorFound = true\n        } else\
    \ {\n            factor += 1\n        }\n\n        if factor > maxFactor {\n \
    \           maxFactor = factor\n            maxFactorFound = true\n        }\n\
    \    }\n\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp74znkx55/tmp74znkx55.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff3356cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff33263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff33263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff332627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74znkx55                        0x0000561367cef245 <unavailable> + 4677

    5    libc.so.6                          0x00002aff33758460 __libc_start_main +
    245

    6    tmp74znkx55                        0x0000561367ceeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n / 3)\n\
    \    }\n    var max_factor: Int\n    var max_factor_index: Int\n    for max_factor_index\
    \ in 2...n {\n        if n % max_factor_index == 0 {\n            continue\n \
    \       }\n        var factor: Int\n        if max_factor_index > 2 {\n      \
    \      factor = max_factor_index\n        } else {\n            factor = 2\n \
    \       }\n        for factor_index in 3...factor {\n            if n % factor_index\
    \ == 0 {\n                break\n            }\n        }\n        if factor >\
    \ max_factor {\n            max_factor = factor\n        }\n    }\n    return\
    \ max_factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmphbjsh5gw.swift:18:37: error: missing argument label 'n:' in call\n\
    \        return largest_prime_factor(n / 2)\n                                \
    \    ^\n                                    n: \n/tmp/tmphbjsh5gw.swift:21:37:\
    \ error: missing argument label 'n:' in call\n        return largest_prime_factor(n\
    \ / 3)\n                                    ^\n                              \
    \      n: \n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int(2)\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if !maxFactorFound {\n                maxFactorFound = true\n              \
    \  maxFactor = factor\n            }\n        } else {\n            if maxFactorFound\
    \ {\n                break\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpdvkpdbsz/tmpdvkpdbsz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b969d68ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b969d381b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b969d381988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b969d3807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvkpdbsz                        0x0000561862ba6335 <unavailable> + 4917

    5    libc.so.6                          0x00002b969d876460 __libc_start_main +
    245

    6    tmpdvkpdbsz                        0x0000561862ba5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = i\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          largest = i\n        }\n        i += 2\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpoljf0f1t.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpoljf0f1t.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpoljf0f1t.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpoljf0f1t.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = i\n            ^\n/tmp/tmpoljf0f1t.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = i\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpoljf0f1t.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = i\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpoljf0f1t.swift:9:23: error: cannot find 'i' in scope\n    let mut largest\
    \ = i\n                      ^\n/tmp/tmpoljf0f1t.swift:10:11: error: cannot find\
    \ 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpoljf0f1t.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpoljf0f1t.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpoljf0f1t.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpoljf0f1t.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpoljf0f1t.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpoljf0f1t.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpoljf0f1t.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var i = 1\n    while i <= limit {\n        if n % i ==\
    \ 0 {\n            factor++\n            if factor > limit {\n               \
    \ factor = 1\n            }\n        }\n        i += 1\n    }\n    return factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpmk4rrccc.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n/tmp/tmpmk4rrccc.swift:13:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  factor++\n                  ^~\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactorFound = true\n                maxFactor = factor\n            }\n\
    \        } else {\n            if maxFactorFound == true {\n                return\
    \ maxFactor\n            }\n        }\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp1xocbexq/tmp1xocbexq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac30c1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac30912b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac30912988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac309117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1xocbexq                        0x0000557008334335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac30e07460 __libc_start_main +
    245

    6    tmp1xocbexq                        0x0000557008333fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ == false {\n                maxFactorFound = true\n                maxFactorFoundInt\
    \ = factor\n            } else {\n                if factor > maxFactorFoundInt\
    \ {\n                    maxFactorFoundInt = factor\n                }\n     \
    \       }\n        }\n    }\n    if maxFactorFound == false {\n        return\
    \ 0\n    } else {\n        return maxFactorFoundInt\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpv0r05cp1/tmpv0r05cp1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6630645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b663033cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b663033c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b663033b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0r05cp1                        0x0000564c5f390335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6630831460 __libc_start_main +
    245

    6    tmpv0r05cp1                        0x0000564c5f38ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = 2 // start at 2, since 2 is the only\
    \ even prime\n    for factor in 2...n {\n        if n % factor == 0 {\n      \
    \      maxFactor = factor\n        }\n    }\n    return maxFactor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp_sdkbrn3/tmp_sdkbrn3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0b8117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0b7e0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0b7e0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0b7e0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sdkbrn3                        0x00005643f568d335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0b8303460 __libc_start_main +
    245

    6    tmp_sdkbrn3                        0x00005643f568cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n / 3)\n\
    \    }\n    var max: Int = 0\n    var i: Int = 0\n    for i = 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n        if n % i == 0 {\n            if max < i {\n                max\
    \ = i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpzpb_kod4.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= Int(sqrt(Double(n))); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzpb_kod4.swift:18:37: error: missing argument label 'n:' in call\n   \
    \     return largest_prime_factor(n / 2)\n                                   \
    \ ^\n                                    n: \n/tmp/tmpzpb_kod4.swift:21:37: error:\
    \ missing argument label 'n:' in call\n        return largest_prime_factor(n /\
    \ 3)\n                                    ^\n                                \
    \    n: \n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpe1vd6v2d/tmpe1vd6v2d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0cdcd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0cd9ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0cd9ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0cd9cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe1vd6v2d                        0x000055d1e2ebc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ab0cdec3460 __libc_start_main +
    245

    6    tmpe1vd6v2d                        0x000055d1e2ebbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    for factor in 2...n {\n        if n % factor == 0 {\n            largest\
    \ = factor\n            break\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpn52e_0d5/tmpn52e_0d5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaea7c53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaea794ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaea794a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaea79497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn52e_0d5                        0x00005638f5465335 <unavailable> + 4917

    5    libc.so.6                          0x00002aaea7e3f460 __libc_start_main +
    245

    6    tmpn52e_0d5                        0x00005638f5464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpqodiifmv/tmpqodiifmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375e84ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375e545b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375e545988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375e5447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodiifmv                        0x000056023d1cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b375ea3a460 __libc_start_main +
    245

    6    tmpqodiifmv                        0x000056023d1cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014180
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    var maxFactor: Int = 2\n    var maxFactorFound: Bool = false\n\
    \    var i: Int\n    for i = 4; i <= sqrt(n); i += 2 {\n        if n % i == 0\
    \ {\n            if maxFactorFound {\n                return maxFactor\n     \
    \       }\n            maxFactor = i\n            maxFactorFound = true\n    \
    \    }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) ==\
    \ 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpbj447yvg.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 4; i <= sqrt(n); i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbj447yvg.swift:18:37: error: missing argument label 'n:' in call\n   \
    \     return largest_prime_factor(n / 2)\n                                   \
    \ ^\n                                    n: \n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor: Int = 0\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if !maxFactorFound {\n                maxFactorFound = true\n              \
    \  maxFactor = factor\n            } else {\n                if maxFactor != factor\
    \ {\n                    return maxFactor\n                }\n            }\n\
    \        }\n    }\n    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmplfmu20xr/tmplfmu20xr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8fafb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8facacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8facac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8facab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfmu20xr                        0x0000563394dab335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac8fb1a1460 __libc_start_main +
    245

    6    tmplfmu20xr                        0x0000563394daafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorFoundInPrimeFactors = false\n\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if !maxFactorFound {\n        \
    \        maxFactor = factor\n                maxFactorFound = true\n         \
    \   }\n            if factor > maxFactorFoundInPrimeFactors {\n              \
    \  maxFactorFoundInPrimeFactors = factor\n            }\n        }\n    }\n\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpf5y2o6gi.swift:22:25: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            if factor > maxFactorFoundInPrimeFactors\
    \ {\n                        ^\n/tmp/tmpf5y2o6gi.swift:23:48: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n                maxFactorFoundInPrimeFactors\
    \ = factor\n                                               ^\n               \
    \                                (      != 0)\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for factor in 2...n {\n        if n %\
    \ factor == 0 {\n            if largest == 1 {\n                largest = factor\n\
    \                largestPrimeFactor = factor\n            } else {\n         \
    \       if largest % factor == 0 {\n                    largest = largest * factor\n\
    \                    largestPrimeFactor = largestPrimeFactor * factor\n      \
    \          } else {\n                    largest = largest * factor\n        \
    \        }\n            }\n        }\n    }\n    return largestPrimeFactor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpxkup248t/tmpxkup248t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f32bf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f328ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f328ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f328eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkup248t                        0x000055d3ad9df335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9f32de1460 __libc_start_main +
    245

    6    tmpxkup248t                        0x000055d3ad9defe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    if maxFactorFound\
    \ {\n        return maxFactor\n    } else {\n        return 0\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpre13f2r1/tmpre13f2r1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81c8ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81c899fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81c899f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81c899e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre13f2r1                        0x000056142660a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b81c8e94460 __libc_start_main +
    245

    6    tmpre13f2r1                        0x0000561426609fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $0 : $1 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpqugh8xrs.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpqugh8xrs.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $0 : $1 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          largest = i\n        }\n        i += 2\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz56xm31q.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpz56xm31q.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpz56xm31q.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpz56xm31q.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpz56xm31q.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpz56xm31q.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpz56xm31q.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpz56xm31q.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpz56xm31q.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpz56xm31q.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpz56xm31q.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpz56xm31q.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpz56xm31q.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpz56xm31q.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpz56xm31q.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpz56xm31q.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var currentFactor = Int()\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if currentFactor == 0 {\n                currentFactor =\
    \ factor\n            } else {\n                if currentFactor > maxFactor {\n\
    \                    maxFactor = currentFactor\n                    maxFactorFound\
    \ = true\n                }\n                currentFactor = 0\n            }\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    } else\
    \ {\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpwwb984cx/tmpwwb984cx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a11571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a11268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a11268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a112677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwb984cx                        0x000055809444e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9a1175d460 __libc_start_main +
    245

    6    tmpwwb984cx                        0x000055809444dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var prime = 2\n    var i = 2\n    while i <= n {\n        if n % i ==\
    \ 0 {\n            largest = prime\n            prime = i\n        }\n       \
    \ i += 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmp58izvrtr/tmp58izvrtr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a01f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a01c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a01c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a01c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58izvrtr                        0x0000562ddbf902c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b9a02154460 __libc_start_main +
    245

    6    tmp58izvrtr                        0x0000562ddbf8fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var prime = 1\n    var i = 2\n    while i <= limit {\n\
    \        if n % i == 0 {\n            prime = i\n            factor = 1\n    \
    \        while n % i == 0 {\n                n /= i\n                factor++\n\
    \            }\n            break\n        }\n        i += 1\n    }\n    return\
    \ factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpi5l0hrba.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n/tmp/tmpi5l0hrba.swift:17:19:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \                n /= i\n                ~ ^\n/tmp/tmpi5l0hrba.swift:18:23: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n                factor++\n\
    \                      ^~\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    var maxFactorFoundInt = Int()\n\
    \    var maxFactorFoundIntInt = Int()\n    var maxFactorFoundDouble = Double()\n\
    \    var maxFactorFoundDoubleInt = Double()\n    var maxFactorFoundDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleInt = Double()\n    var maxFactorFoundDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleInt = Double()\n    var\
    \ maxFactorFoundDoubleDoubleDoubleDouble = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDouble = Double()\n\
    \    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleInt = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleInt =\
    \ Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDouble =\
    \ Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n    var maxFactorFoundDoubleDoubleDouble\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp0lzfyebz.swift:27:9: error: invalid redeclaration of 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt'\n\
    \    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt = Double()\n\
    \        ^\n/tmp/tmp0lzfyebz.swift:25:9: note: 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt'\
    \ previously declared here\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n        ^\n/tmp/tmp0lzfyebz.swift:28:9: error: invalid redeclaration\
    \ of 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble'\n    var\
    \ maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble = Double()\n\
    \        ^\n/tmp/tmp0lzfyebz.swift:26:9: note: 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble'\
    \ previously declared here\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n        ^\n/tmp/tmp0lzfyebz.swift:31:9: error: invalid redeclaration\
    \ of 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt'\n   \
    \ var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt = Double()\n\
    \        ^\n/tmp/tmp0lzfyebz.swift:29:9: note: 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt'\
    \ previously declared here\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt\
    \ = Double()\n        ^\n/tmp/tmp0lzfyebz.swift:32:9: error: invalid redeclaration\
    \ of 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble'\n\
    \    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n        ^\n/tmp/tmp0lzfyebz.swift:30:9: note: 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble'\
    \ previously declared here\n    var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleDouble\
    \ = Double()\n        ^\n/tmp/tmp0lzfyebz.swift:33:9: error: invalid redeclaration\
    \ of 'maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt'\n   \
    \ var maxFactorFoundDoubleDoubleDoubleDoubleDoubleDoubleDoubleDoubleInt = Double()\n\
    \        ^\n/tmp/tmp0lzfyebz.swift:29:9: note: 'maxFactorFoundDoubleDoub"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    var i: Int = 0\n    for i =\
    \ 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpajwwn2wx.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         largest = factor\n        }\n        n /= factor\n        factor +=\
    \ 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp1s752fzp.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= factor\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    var i: Int\n    for i = 2; i\
    \ <= n / 2; i += 1 {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpglhfegnt.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    var factor = 2\n    for factor < n {\n        if n % factor == 0 {\n    \
    \        if maxFactorFound == false {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            } else {\n                if\
    \ factor > maxFactor {\n                    maxFactorFound = true\n          \
    \          maxFactor = factor\n                }\n            }\n        }\n \
    \       factor++\n    }\n    if maxFactorFound == false {\n        maxFactorFound\
    \ = true\n        maxFactor = n\n    }\n    return maxFactor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp2okkosyt.swift:14:16: error: expected 'in' after for-each pattern\n\
    \    for factor < n {\n               ^\n/tmp/tmp2okkosyt.swift:14:16: error:\
    \ unary operator cannot be separated from its operand\n    for factor < n {\n\
    \               ^~\n                \n/tmp/tmp2okkosyt.swift:14:16: error: '<'\
    \ is not a prefix unary operator\n    for factor < n {\n               ^\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var largest = 1\n    var largestPrimeFactor = 1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest =\
    \ i\n            largestPrimeFactor = i\n        }\n    }\n    return largestPrimeFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcj6mfbte.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpcj6mfbte.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpcj6mfbte.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactorFound = true\n                maxFactor = factor\n            }\
    \ else {\n                if maxFactor < factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpno91h4cq/tmpno91h4cq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226c244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b226bf3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b226bf3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b226bf3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpno91h4cq                        0x000055cb9ac16335 <unavailable> + 4917

    5    libc.so.6                          0x00002b226c430460 __libc_start_main +
    245

    6    tmpno91h4cq                        0x000055cb9ac15fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                break\n\
    \            } else {\n                maxFactorFound = true\n               \
    \ maxFactor = factor\n            }\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpx3_2ohyq/tmpx3_2ohyq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60218e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60215dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60215da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60215d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx3_2ohyq                        0x0000561df28b5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6021acf460 __libc_start_main +
    245

    6    tmpx3_2ohyq                        0x0000561df28b4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let limit = sqrt(Double(n))\n\
    \    var factor = 2\n    var prime = 1\n    while factor <= limit {\n        if\
    \ n % factor == 0 {\n            prime = factor\n            n /= factor\n   \
    \     } else {\n            factor += 1\n        }\n    }\n    return prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpxa21bx3b.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n/tmp/tmpxa21bx3b.swift:14:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= factor\n            ~ ^\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j:\
    \ Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n   \
    \ var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n: 27) ==\
    \ 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpcuvj490k.swift:106:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpcuvj490k.swift:33:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:9:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:34:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:10:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:35:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:11:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:36:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:12:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:37:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:13:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:38:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:14:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:39:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:15:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:40:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:16:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:41:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:17:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:42:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:18:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpcuvj490k.swift:43:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpcuvj4"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let max = (2..<n).reduce(1)\
    \ { $0 % $1 }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp7hve3h71/tmp7hve3h71.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb25162c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb24e59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb24e59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb24e587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hve3h71                        0x0000563bdebd2385 <unavailable> + 4997

    5    libc.so.6                          0x00002afb2534e460 __libc_start_main +
    245

    6    tmp7hve3h71                        0x0000563bdebd2039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014259
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpd1axbmib/tmpd1axbmib.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd3785c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd347cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd347c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd347b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1axbmib                        0x000055d937cff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6cd3971460 __libc_start_main +
    245

    6    tmpd1axbmib                        0x000055d937cfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i * i <= n {\n        if n % i == 0 {\n  \
    \          largest = i\n        }\n        i += 2\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpz56xm31q.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpz56xm31q.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpz56xm31q.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpz56xm31q.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpz56xm31q.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpz56xm31q.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpz56xm31q.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpz56xm31q.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpz56xm31q.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpz56xm31q.swift:10:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpz56xm31q.swift:10:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpz56xm31q.swift:11:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpz56xm31q.swift:12:13:\
    \ error: cannot find 'largest' in scope\n            largest = i\n           \
    \ ^~~~~~~\n/tmp/tmpz56xm31q.swift:12:23: error: cannot find 'i' in scope\n   \
    \         largest = i\n                      ^\n/tmp/tmpz56xm31q.swift:14:9: error:\
    \ cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpz56xm31q.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var largest =\
    \ 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n/2; i++ {\n       \
    \ if n%i == 0 {\n            if largestPrimeFactor == 1 {\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor > i {\n   \
    \                 largestPrimeFactor = i\n                }\n            }\n \
    \       }\n    }\n    return largestPrimeFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpq5qvajde.swift:10:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpq5qvajde.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpq5qvajde.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactorFound = true\n                maxFactor = factor\n\
    \            } else {\n                if maxFactor != factor {\n            \
    \        return maxFactor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_prime_factor(n:\
    \ 15) == 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmp25rhom0_/tmp25rhom0_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaab0f72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaab0c69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaab0c69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaab0c687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25rhom0_                        0x000055bbc075a335 <unavailable> + 4917

    5    libc.so.6                          0x00002aaab115e460 __libc_start_main +
    245

    6    tmp25rhom0_                        0x000055bbc0759fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let primes = prime_factors(n)\n\
    \    return primes.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmp_ta67bhz.swift:8:18: error: cannot find 'prime_factors' in scope\n\
    \    let primes = prime_factors(n)\n                 ^~~~~~~~~~~~~\n/tmp/tmp_ta67bhz.swift:9:26:\
    \ error: generic parameter 'T' could not be inferred\n    return primes.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                         ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014182
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpe1nmiydd.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpe1nmiydd.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpe1nmiydd.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014180
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let factors =\
    \ prime_factors(n)\n    return factors.reduce(max) { $0 > $1 ? $1 : $0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpsllmwb63.swift:8:19: error: cannot find 'prime_factors' in scope\n\
    \    let factors = prime_factors(n)\n                  ^~~~~~~~~~~~~\n/tmp/tmpsllmwb63.swift:9:27:\
    \ error: generic parameter 'T' could not be inferred\n    return factors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n                          ^\nSwift.max:1:24: note: in\
    \ call to function 'max'\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014181
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    var maxFactorIndex = 0\n    var i = 2\n\n    while i < n && !maxFactorFound\
    \ {\n        if n % i == 0 {\n            maxFactorFound = true\n            maxFactor\
    \ = i\n            maxFactorIndex = i\n        }\n\n        i += 1\n    }\n\n\
    \    if maxFactorFound {\n        return maxFactor\n    }\n\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmph349togl/tmph349togl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32ca7ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32ca4c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32ca4c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32ca4c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph349togl                        0x0000556a808b7245 <unavailable> + 4677

    5    libc.so.6                          0x00002b32ca9b8460 __libc_start_main +
    245

    6    tmph349togl                        0x0000556a808b6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: Exception
  stderr: 'tmpltli3tit/tmpltli3tit.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac41ba58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac41b74fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac41b74f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac41b74e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltli3tit                        0x000055c0b35053b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac41bc44460 __libc_start_main +
    245

    6    tmpltli3tit                        0x000055c0b3504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014181
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 3\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    if n % 3 == 0 {\n        return largest_prime_factor(n: n\
    \ / 3)\n    }\n    var max_factor: Int\n    var max_factor_index: Int\n    var\
    \ max_factor_count: Int\n    for max_factor_index in 2...n {\n        max_factor_count\
    \ = 0\n        for max_factor = 2...max_factor_index {\n            if max_factor\
    \ % max_factor_index == 0 {\n                max_factor_count++\n            }\n\
    \        }\n        if max_factor_count > max_factor {\n            max_factor\
    \ = max_factor_count\n        }\n    }\n    return max_factor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpa41gh353.swift:28:24: error: expected 'in' after for-each pattern\n\
    \        for max_factor = 2...max_factor_index {\n                       ^\n/tmp/tmpa41gh353.swift:28:24:\
    \ error: expected Sequence expression for for-each loop\n        for max_factor\
    \ = 2...max_factor_index {\n                       ^\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: -4
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    if n < 2 {\n \
    \       return n\n    }\n\n    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n\n    \
    \        maxFactor = factor\n            maxFactorFound = true\n        }\n  \
    \  }\n\n    if maxFactorFound {\n        return maxFactor\n    }\n\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_prime_factor(n: 15) ==\
    \ 5)\nassert(largest_prime_factor(n: 27) == 3)\nassert(largest_prime_factor(n:\
    \ 63) == 7)\nassert(largest_prime_factor(n: 330) == 11)\nassert(largest_prime_factor(n:\
    \ 13195) == 29)"
  status: Exception
  stderr: 'tmpst7cgya4/tmpst7cgya4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3466aeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34667e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34667e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34667e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst7cgya4                        0x000055f6532223b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b3466cda460 __libc_start_main +
    245

    6    tmpst7cgya4                        0x000055f653221fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014260
- exit_code: 1
  program: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
    \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    let mut i = 2\n\
    \    let mut largest = 1\n    while i <= n {\n        if n % i == 0 {\n      \
    \      largest = i\n        }\n        i += 2\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
    \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
    \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
  status: SyntaxError
  stderr: "/tmp/tmpw70hlezg.swift:8:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpw70hlezg.swift:8:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpw70hlezg.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpw70hlezg.swift:9:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut largest = 1\n            ^\n/tmp/tmpw70hlezg.swift:9:13: note: join\
    \ the identifiers together\n    let mut largest = 1\n        ~~~~^~~~~~~\n   \
    \     mutlargest\n/tmp/tmpw70hlezg.swift:9:13: note: join the identifiers together\
    \ with camel-case\n    let mut largest = 1\n        ~~~~^~~~~~~\n        mutLargest\n\
    /tmp/tmpw70hlezg.swift:9:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ largest = 1\n        ^\n/tmp/tmpw70hlezg.swift:8:9: note: 'mut' previously declared\
    \ here\n    let mut i = 2\n        ^\n/tmp/tmpw70hlezg.swift:10:11: error: cannot\
    \ find 'i' in scope\n    while i <= n {\n          ^\n/tmp/tmpw70hlezg.swift:11:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpw70hlezg.swift:12:13: error: cannot find 'largest' in scope\n        \
    \    largest = i\n            ^~~~~~~\n/tmp/tmpw70hlezg.swift:12:23: error: cannot\
    \ find 'i' in scope\n            largest = i\n                      ^\n/tmp/tmpw70hlezg.swift:14:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n/tmp/tmpw70hlezg.swift:16:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014180
