name: HumanEval_57_monotonic
language: swift
prompt: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
  /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n\
  /// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int])\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
  \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
  \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
  \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\n\
  assert(monotonic(l: [9, 9, 9, 9]) == true)"
completions: ['    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l, l.count())', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j =\
    \ l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n", "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n  \
    \  var m = l[i]\n    var n = l[j]\n    var o = l[k]\n    while i < j {\n     \
    \   if m > n {\n            return false\n        }\n        if o < n {\n    \
    \        return true\n        }\n        if m < o {\n            return false\n\
    \        }\n        if m == o {\n            i += 1\n            j = k\n     \
    \       k = j - 1\n            m = l[i]\n            n = l[j]\n            o =\
    \ l[k]\n        }\n    }\n    return true", "    var i = 0\n    for x in l {\n\
    \        if x < l[i] {\n            return false\n        }\n        if x > l[i]\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return true",
  "    if l.count < 2 {\n        return true\n    }\n    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var p = 0\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var\
    \ s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n", "    let sorted =\
    \ l.sorted()\n    return sorted.first == sorted.last", "    var i = 0\n    for\
    \ x in l {\n        if x < l[i] {\n            return false\n        }\n     \
    \   if x > l[i] {\n            return true\n        }\n        i += 1\n    }\n\
    \    return true", "    var i = 0\n    var j = 0\n    var k = 0\n    var n = l.count\n\
    \    var m = n - 1\n    var a = 0\n    var b = n - 1\n    var c = 1\n    var d\
    \ = 1\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i =\
    \ 1\n    var j = n - 1\n    var k = n - 1\n    var l = 0\n    var m = n - 1\n\
    \    var n = n - 1\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n   \
    \ var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var\
    \ M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R\
    \ = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W =\
    \ 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0", '    return monotonicWithContext(l, nil)', '    return isMonotonic(l)',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count -\
    \ 1\n    var k = j - 1\n    while i < j {\n        if l[i] < l[k] {\n        \
    \    i += 1\n        } else if l[i] > l[k] {\n            j -= 1\n        } else\
    \ {\n            return true\n        }\n        k += 1\n    }\n    return false",
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    for x in l {\n  \
    \      if x > l[i] {\n            return false\n        }\n        i += 1\n  \
    \  }\n    return true", '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)']
stop_tokens:
- "\n}"
