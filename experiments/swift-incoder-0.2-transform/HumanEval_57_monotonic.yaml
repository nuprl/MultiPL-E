name: HumanEval_57_monotonic
language: swift
prompt: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
  /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n\
  /// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int])\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
  \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
  \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
  \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\n\
  assert(monotonic(l: [9, 9, 9, 9]) == true)"
completions: ['    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l, l.count())', '    return monotonicWithContext(l,
    nil)', '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j =\
    \ l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n", "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n  \
    \  var m = l[i]\n    var n = l[j]\n    var o = l[k]\n    while i < j {\n     \
    \   if m > n {\n            return false\n        }\n        if o < n {\n    \
    \        return true\n        }\n        if m < o {\n            return false\n\
    \        }\n        if m == o {\n            i += 1\n            j = k\n     \
    \       k = j - 1\n            m = l[i]\n            n = l[j]\n            o =\
    \ l[k]\n        }\n    }\n    return true", "    var i = 0\n    for x in l {\n\
    \        if x < l[i] {\n            return false\n        }\n        if x > l[i]\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return true",
  "    if l.count < 2 {\n        return true\n    }\n    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var p = 0\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var\
    \ s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n", "    let sorted =\
    \ l.sorted()\n    return sorted.first == sorted.last", "    var i = 0\n    for\
    \ x in l {\n        if x < l[i] {\n            return false\n        }\n     \
    \   if x > l[i] {\n            return true\n        }\n        i += 1\n    }\n\
    \    return true", "    var i = 0\n    var j = 0\n    var k = 0\n    var n = l.count\n\
    \    var m = n - 1\n    var a = 0\n    var b = n - 1\n    var c = 1\n    var d\
    \ = 1\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i =\
    \ 1\n    var j = n - 1\n    var k = n - 1\n    var l = 0\n    var m = n - 1\n\
    \    var n = n - 1\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n   \
    \ var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var\
    \ M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R\
    \ = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W =\
    \ 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n\
    \    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n \
    \   var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n  \
    \  var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n   \
    \ var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var\
    \ _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _\
    \ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ = 0\n    var _ =\
    \ 0\n    var _ = 0", '    return monotonicWithContext(l, nil)', '    return isMonotonic(l)',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count -\
    \ 1\n    var k = j - 1\n    while i < j {\n        if l[i] < l[k] {\n        \
    \    i += 1\n        } else if l[i] > l[k] {\n            j -= 1\n        } else\
    \ {\n            return true\n        }\n        k += 1\n    }\n    return false",
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    for x in l {\n  \
    \      if x > l[i] {\n            return false\n        }\n        i += 1\n  \
    \  }\n    return true", '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count - 1\n    var\
    \ k = j - 1\n    var monotonic = true\n    while i < j {\n        if l[i] < l[j]\
    \ {\n            i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n\
    \        } else {\n            monotonic = false\n        }\n        if i == k\
    \ {\n            k = j\n        }\n    }\n    return monotonic", "    var i =\
    \ 0\n    for x in l {\n        if i == 0 {\n            i = x\n            continue\n\
    \        }\n        if x < i {\n            return false\n        }\n        i\
    \ = x\n    }\n    return true", '    return isMonotonic(l)', "    var i = 0\n\
    \    for v in l {\n        if v < l[i-1] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return true", "    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n      \
    \      i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            return false\n        }\n        if i == k {\n         \
    \   return true\n        }\n        if l[i] > l[k] {\n            k += 1\n   \
    \     }\n    }\n    return false", '    return monotonicImpl(l, l.count)', '    return
    isMonotonic(l)', "    var i = 0\n    var j = l.count\n    var k = j - 1\n    var\
    \ monotonic = true\n    while i < j {\n        if l[i] < l[k] {\n            i\
    \ += 1\n        } else if l[i] > l[k] {\n            monotonic = false\n     \
    \       k = j\n        } else {\n            i += 1\n            k -= 1\n    \
    \    }\n    }\n    return monotonic", '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count -\
    \ 1\n    var k = j - 1\n    var m = Int64(0)\n    var n = Int64(0)\n    var o\
    \ = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n",
  "    if l.isEmpty {\n        return true\n    }\n    let (min, max) = l.minMax()\n\
    \    return min <= max", '    return monotonicWithOptions([Int](l), nil)', " \
    \   let n = l.count\n    if n < 2 {\n        return true\n    }\n    if n == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n        return l[0] >\
    \ l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n == 6 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n  \
    \  }\n    if n == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
    \ && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if n == 8 {\n     \
    \   return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] >\
    \ l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] >\
    \ l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    if n == 11 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] >\
    \ l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1] && l[1] > l[2] &&\
    \ l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7]\
    \ > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n    }\n    if n == 13\
    \ {\n        return l[0] > l", "    var i = 0\n    var j = l.count - 1\n    var\
    \ k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n     \
    \       return false\n        }\n        if i < k {\n            k = j\n     \
    \   }\n    }\n    return true", '    return monotonicWithContext(l, nil)', '    return
    monotonicWithTolerance(l, 0)', '    return monotonicImpl(l)', "    var i = 0\n\
    \    for x in l {\n        if x > l[i] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return true", '    return monotonicImpl(l)', '    return
    isMonotonic(l)', '    return monotonicWithContext(l, nil)', "    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = l.count\n    var n =\
    \ m\n    var o = Int64(m)\n    var p = Int64(n)\n    var q = Int64(0)\n    var\
    \ r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var A = Int64(0)\n    var B = Int64(0)\n\
    \    var C = Int64(0)\n    var D = Int64(0)\n    var E = Int64(0)\n    var F =\
    \ Int64(0)\n    var G = Int64(0)\n    var H = Int64(0)\n    var I = Int64(0)\n\
    \    var J = Int64(0)\n    var K = Int64(0)\n    var L = Int64(0)\n    var M =\
    \ Int64(0)\n    var N = Int64(0)\n    var O = Int64(0)\n    var P = Int64(0)\n\
    \    var Q = Int64(0)\n    var R = Int64(0)\n    var S = Int64(0)\n    var T =\
    \ Int64(0)\n    var U = Int64(0)\n    var V = Int64(0)\n    var W = Int64(0)\n\
    \    var X = Int64(0)\n    var Y = Int64(0)\n    var Z = Int64(0)\n    var A =\
    \ Int64(0)\n    var B = Int64(0)\n    var C = Int64(0)\n    var D = Int64(0)\n\
    \    var E = Int64(0)\n    var F = Int64(0)\n    var G = Int64(0)\n    var H =\
    \ Int64(0)\n    var I = Int64(0)\n    var J = Int64(0)\n    var K = Int64(0)\n\
    \    var L = Int64(0)\n    var M = Int64(0)\n    var N = Int64(0)\n    var O =\
    \ Int64(0)\n    var P = Int64(0)\n    var Q = Int64(0)\n    var R = Int64(0)\n\
    \    var S = Int64(0)\n    var T = Int64(0)\n    var U = Int64(0)\n    var V =\
    \ Int64(0)\n    var W = Int64(0)\n    var X = Int64(0)\n    var Y = Int64(0)\n\
    \    var Z = Int64(0)\n    var A = Int64(0)\n    var B = Int64(0)\n    var C =\
    \ Int64(0)\n    var D = Int64(0)\n    var E = Int64(0)\n    var F = Int64(0)\n\
    \    var G = Int64(0)\n    var H = Int64(0)\n    var I = Int64(0)\n    var J =\
    \ Int64(0)\n    var K = Int64(0)\n    var L = Int64(0)\n    var M = Int64(0)\n\
    \    var N = ", "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n \
    \   var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r =\
    \ Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n\
    \    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y =\
    \ Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n\
    \    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f =\
    \ Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n\
    \    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n", '    return monotonicWithTolerance(l,
    0)', '    return monotonicWithContext(l, nil)', "    var i = 0\n    var j = l.count\
    \ - 1\n    var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n      \
    \      i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        }\
    \ else {\n            return true\n        }\n        if i < k {\n           \
    \ k = j\n        }\n    }\n    return false", '    return monotonicWithContext(l,
    &Context.defaultContext)', "    var i = 0\n    var j = l.count - 1\n    var k\
    \ = j - 1\n    var m = l[0]\n    for _ in 0 ..< l.count {\n        if l[i] > m\
    \ {\n            k = j\n            m = l[i]\n        }\n        if l[j] < m {\n\
    \            i = i + 1\n            m = l[j]\n        }\n        if l[k] > m {\n\
    \            j = k\n            m = l[k]\n        }\n    }\n    return i == j",
  '    return monotonicImpl(l, l.count)', "    var i = 0\n    var j = l.count - 1\n\
    \    var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i\
    \ += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n\
    \            return true\n        }\n        if i < k {\n            k = j\n \
    \       }\n    }\n    return false", '    return monotonicWithContext(l, nil)',
  '    return monotonic(l, true)', '    return monotonicImpl(l)', "    var i = 0\n\
    \    var j = 1\n    var k = l.count\n    while i < k {\n        if l[i] < l[j]\
    \ {\n            j = i\n        } else {\n            i = j\n        }\n     \
    \   i += 1\n    }\n    return i == k", "    var i = 0\n    var j = l.count - 1\n\
    \    var k = j - 1\n    var m = Int64(0)\n    while i < j {\n        if l[i] <\
    \ l[j] {\n            if l[i] < m {\n                m = l[i]\n            }\n\
    \            i += 1\n        } else {\n            if l[j] > m {\n           \
    \     m = l[j]\n            }\n            j -= 1\n        }\n        if i ==\
    \ k {\n            if l[i] < m {\n                m = l[i]\n            }\n  \
    \          i += 1\n        }\n        if j == k {\n            if l[j] > m {\n\
    \                m = l[j]\n            }\n            j -= 1\n        }\n    }\n\
    \    return m <= Int64(l.count)", '    return monotonicImpl(l, l.count)', '    return
    monotonicImpl(l, l, 0)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithOptions([Int](l), nil)', "    var i = 0\n    var j = 0\n    var k\
    \ = l.count\n    while i < k {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j += 1\n        } else {\n     \
    \       return false\n        }\n    }\n    return true", "    let len = l.count\n\
    \    if len == 0 {\n        return true\n    }\n    if len == 1 {\n        return\
    \ l[0] > l[1]\n    }\n    if len == 2 {\n        return l[0] > l[1] || l[0] ==\
    \ l[1]\n    }\n    if len == 3 {\n        return l[0] > l[1] || l[0] == l[1] ||\
    \ l[0] == l[2]\n    }\n    if len == 4 {\n        return l[0] > l[1] || l[0] ==\
    \ l[1] || l[0] == l[2] || l[0] == l[3]\n    }\n    if len == 5 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\n\
    \    }\n    if len == 6 {\n        return l[0] > l[1] || l[0] == l[1] || l[0]\
    \ == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5]\n    }\n    if len ==\
    \ 7 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3]\
    \ || l[0] == l[4] || l[0] == l[5] || l[0] == l[6]\n    }\n    if len == 8 {\n\
    \        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] ||\
    \ l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7]\n    }\n    if\
    \ len == 9 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0]\
    \ == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0]\
    \ == l[8]\n    }\n    if len == 10 {\n        return l[0] > l[1] || l[0] == l[1]\
    \ || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6]\
    \ || l[0] == l[7] || l[0] == l[8] || l[0] == l[9]\n    }\n    if len == 11 {\n\
    \        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] ||\
    \ l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8]\
    \ || l[0] == l[9] || l[0] == l[10]\n    }\n    if len == 12 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\
    \ || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8] || l[0] == l[9]\
    \ || l[0] == l[10] || l", '    return monotonicWithContext(l, nil)', "    if l.isEmpty()\
    \ {\n        return true\n    }\n    let sorted = l.sorted()\n    if sorted.first\
    \ > sorted.last {\n        return false\n    }\n    let first = sorted.first\n\
    \    let last = sorted.last\n    if first == last {\n        return true\n   \
    \ }\n    if first < last {\n        return false\n    }\n    return monotonic(sorted[1..<sorted.count])",
  "    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m = j\n    var n\
    \ = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s =\
    \ j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n\
    \    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n \
    \   var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n  \
    \  var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n   \
    \ var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var\
    \ s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x\
    \ = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c =\
    \ j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n\
    \    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n \
    \   var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n  \
    \  var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n   \
    \ var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var\
    \ c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h\
    \ = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m =\
    \ j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n\
    \    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n \
    \   var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n  \
    \  var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n   \
    \ var h = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var\
    \ m = j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r\
    \ = j\n    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w =\
    \ j\n    var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n\
    \    var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j", '    return
    monotonicWithContext(l, nil)', "    if l.isEmpty {\n        return true\n    }\n\
    \    if l.count == 1 {\n        return true\n    }\n    if l.count == 2 {\n  \
    \      return l[0] > l[1]\n    }\n    var left = 0\n    var right = l.count -\
    \ 1\n    var leftIsSmaller = true\n    var rightIsSmaller = true\n    var leftIsLarger\
    \ = true\n    var rightIsLarger = true\n    var leftIsEqual = true\n    var rightIsEqual\
    \ = true\n    while left < right {\n        if leftIsSmall && rightIsSmall {\n\
    \            leftIsSmaller = false\n            rightIsSmaller = false\n     \
    \   } else if leftIsSmall {\n            leftIsSmaller = l[left] < l[left + 1]\n\
    \        } else if rightIsSmall {\n            rightIsSmaller = l[right] < l[right\
    \ - 1]\n        } else {\n            if l[left] > l[right] {\n              \
    \  leftIsLarger = false\n                rightIsLarger = false\n            }\
    \ else {\n                leftIsLarger = l[left] > l[right - 1]\n            \
    \    rightIsLarger = l[right] > l[right - 1]\n            }\n        }\n     \
    \   if leftIsLarger {\n            left++\n        } else if rightIsLarger {\n\
    \            right--\n        } else {\n            if leftIsEqual && rightIsEqual\
    \ {\n                leftIsEqual = false\n                rightIsEqual = false\n\
    \            } else {\n                leftIsEqual = l[left] == l[left + 1]\n\
    \                rightIsEqual = l[right] == l[right - 1]\n            }\n    \
    \    }\n    }\n    return leftIsSmaller && rightIsSmaller", "    var i = 0\n \
    \   var j = l.count - 1\n    while i < j {\n        if l[i] < l[j] {\n       \
    \     i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        } else\
    \ {\n            return true\n        }\n    }\n    return false", '    return
    monotonicWithContext(l, nil)', "    let len = l.count\n    if len == 0 {\n   \
    \     return true\n    }\n    if len == 1 {\n        return l[0] > l[0]\n    }\n\
    \    var last = 0\n    for i in 0..<len - 1 {\n        if l[i] > l[i+1] {\n  \
    \          return false\n        }\n        if l[i] < l[i+1] {\n            last\
    \ = i\n        }\n    }\n    return l[last] > l[last-1]", "    var i = 0\n   \
    \ var j = 1\n    var k = 0\n    var l = l.count\n    while i < l {\n        if\
    \ l[j] < l[k] {\n            i += 1\n        } else {\n            j += 1\n  \
    \      }\n        k += 1\n    }\n    return i == l", '    return monotonicWithContext(l,
    ContextualLoad())', "    var i = 0\n    for x in l {\n        if x > l[i] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true",
  '    return monotonicWithContext(l, ContextualLoad())', "    var i = 0\n    var\
    \ j = l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n    while i < j {\n\
    \        if l[i] < l[j] {\n            if l[i] < m {\n                m = l[i]\n\
    \            }\n            i += 1\n        } else {\n            if l[j] < m\
    \ {\n                m = l[j]\n            }\n            j -= 1\n        }\n\
    \    }\n    return m >= l[k]", "    if l.isEmpty {\n        return true\n    }\n\
    \    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var m = Int64(0)\n\
    \    while i < j {\n        if l[i] < l[j] {\n            if k < i {\n       \
    \         m = m - l[k]\n            }\n            k = i\n            i = i +\
    \ 1\n        } else {\n            if k < j {\n                m = m + l[k]\n\
    \            }\n            k = j\n            j = j - 1\n        }\n    }\n \
    \   if k < i {\n        m = m - l[k]\n    }\n    return m <= 0", "    if l.isEmpty\
    \ {\n        return true\n    }\n    if l.count == 1 {\n        return true\n\
    \    }\n    if l.count == 2 {\n        return l[0] > l[1]\n    }\n    var left\
    \ = 0\n    var right = l.count - 1\n    var middle = l.count / 2\n    var leftIsSmaller\
    \ = true\n    var rightIsSmaller = true\n    var leftIsLarger = true\n    var\
    \ rightIsLarger = true\n    var leftIsEqual = true\n    var rightIsEqual = true\n\
    \    while left < middle && right >= middle {\n        if l[left] > l[right] {\n\
    \            leftIsSmaller = false\n            leftIsLarger = false\n       \
    \ } else {\n            leftIsSmaller = true\n            leftIsLarger = true\n\
    \        }\n        if l[right] > l[middle] {\n            rightIsSmaller = false\n\
    \            rightIsLarger = false\n        } else {\n            rightIsSmaller\
    \ = true\n            rightIsLarger = true\n        }\n        if leftIsSmaller\
    \ && rightIsSmaller {\n            left++\n            right--\n        } else\
    \ if leftIsSmaller {\n            left++\n        } else if rightIsSmaller {\n\
    \            right--\n        } else {\n            middle--\n        }\n    }\n\
    \    if left >= middle {\n        return true\n    }\n    if right <= middle {\n\
    \        return false\n    }\n    if leftIsLarger {\n        return true\n   \
    \ }\n    if rightIsLarger {\n        return false\n    }\n    if leftIsEqual {\n\
    \        return true\n    }\n    if rightIsEqual {\n        return false\n   \
    \ }\n    return false", "    var i = 0\n    var j = l.count\n    while i < j {\n\
    \        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            return true\n        }\n  \
    \  }\n    return false", "    if l.isEmpty() {\n        return true\n    }\n \
    \   var last = 0\n    for x in l {\n        if last < x {\n            return\
    \ false\n        }\n        last = x\n    }\n    return true", "    if l.count\
    \ < 2 {\n        return true\n    }\n    var last = 0\n    for idx in 0..<l.count\
    \ {\n        if l[idx] > l[last] {\n            last = idx\n        }\n    }\n\
    \    return last == l.count - 1", '    return monotonicWithContext(l, nil)', " \
    \   let n = l.count\n    if n < 2 {\n        return true\n    }\n    if n == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if n == 3 {\n        return l[0] >\
    \ l[1] && l[1] > l[2]\n    }\n    if n == 4 {\n        return l[0] > l[1] && l[1]\
    \ > l[2] && l[2] > l[3]\n    }\n    if n == 5 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n == 6 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n  \
    \  }\n    if n == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
    \ && l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if n == 8 {\n     \
    \   return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] >\
    \ l[5] && l[5] > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] >\
    \ l[6] && l[6] > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    if n == 11 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] >\
    \ l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1] && l[1] > l[2] &&\
    \ l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7]\
    \ > l[8] && l[8] > l[9] && l[9] > l[10] && l[10] > l[11]\n    }\n    if n == 13\
    \ {\n        return l[0] > l", '    return monotonicWithOptions([l], options:
    .MatchStrictly)', '    return monotonicImpl(l, l, 0)', "    var isIncreasing =\
    \ true\n    var isDecreasing = true\n    for x in l {\n        if x < l[0] {\n\
    \            isIncreasing = false\n        }\n        if x > l[l.count - 1] {\n\
    \            isDecreasing = false\n        }\n    }\n    return isIncreasing ||\
    \ isDecreasing", '    return monotonic(l, lessThanOrEqual: lessThanOrEqual)',
  "    var i = 0\n    var j = l.count - 1\n    while i < j {\n        if l[i] < l[j]\
    \ {\n            i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n\
    \        } else {\n            return true\n        }\n    }\n    return false",
  '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)',
  '    return isMonotonic(l)', '    return monotonicWithContext(l, nil)', "    var\
    \ i = 0\n    var j = l.count\n    var k = j - 1\n    var m = j\n    var n = j\n\
    \    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n \
    \   var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n  \
    \  var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n   \
    \ var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n    var\
    \ i = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n\
    \ = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s =\
    \ j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n\
    \    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n \
    \   var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n  \
    \  var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n   \
    \ var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var\
    \ s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x\
    \ = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c =\
    \ j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n\
    \    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n \
    \   var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n  \
    \  var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n   \
    \ var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n    var\
    \ c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j\n    var h\
    \ = j\n    var i = j\n    var j = j\n    var k = j\n    var l = j\n    var m =\
    \ j\n    var n = j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n\
    \    var s = j\n    var t = j\n    var u = j\n    var v = j\n    var w = j\n \
    \   var x = j\n    var y = j\n    var z = j\n    var a = j\n    var b = j\n  \
    \  var c = j\n    var d = j\n    var e = j\n    var f = j\n    var g = j", " \
    \   let n = l.count\n    if n < 2 {\n        return true\n    }\n    var prev\
    \ = 0\n    for idx in 0..<n {\n        if l[idx] > prev {\n            return\
    \ false\n        }\n        prev = l[idx]\n    }\n    return true", "    let n\
    \ = l.count\n    if n < 2 {\n        return true\n    }\n    if n == 2 {\n   \
    \     return l[0] > l[1]\n    }\n    if n == 3 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2]\n    }\n    if n == 4 {\n        return l[0] > l[1] && l[1] > l[2]\
    \ && l[2] > l[3]\n    }\n    if n == 5 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4]\n    }\n    if n == 6 {\n        return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n    }\n\
    \    if n == 7 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6]\n    }\n    if n == 8 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7]\n    }\n    if n == 9 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6]\
    \ > l[7] && l[7] > l[8]\n    }\n    if n == 10 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6]\
    \ > l[7] && l[7] > l[8] && l[8] > l[9]\n    }\n    if n == 11 {\n        return\
    \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5]\
    \ > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n\
    \    if n == 12 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] &&\
    \ l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8]\
    \ > l[9] && l[9] > l[10] && l[10] > l[11]\n    }\n    if n == 13 {\n        return\
    \ l[0] > l", "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var\
    \ m = Int64(Int.max)\n    while i < j {\n        if l[i] < m {\n            i\
    \ += 1\n        } else if l[i] > m {\n            m += Int64(Int64.max)\n    \
    \        k = j\n        } else {\n            m += l[i]\n            i += 1\n\
    \        }\n        if k > i {\n            k = j\n        }\n        if k < i\
    \ {\n            j = k\n        }\n    }\n    return i < j", '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var ", '    return monotonicImpl(l)', " \
    \   var i = 0\n    for x in l {\n        if x > l[i] {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true", "    var i = 0\n    var j\
    \ = l.count - 1\n    var k = 0\n    var l2 = l.count\n    var m = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var n = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var o = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var p = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var q = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var r = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var s = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var t = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var u = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var v = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var w = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var x = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var y = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var z = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var a = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var b = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var c = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var d = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var e = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var f = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var g = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var h = Int64(Int64(Int64(l2)))\
    \ * Int64(Int64(Int64(l2)))\n    var i = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n\
    \    var j = Int64(Int64(Int64(l2))) * Int64(Int64(Int64(l2)))\n    var k = Int64(Int64(Int64(l2)))\
    \ * Int64(", '    return monotonicWithOptions([Int](l), nil)', '    return monotonicImpl(l,
    l, 0)', '    return monotonicWithContext(l, nil)', "    let sorted = l.sorted()\n\
    \    if sorted.first > sorted.last {\n        return true\n    }\n    return false",
  '    return monotonicWithOptions([Int](l), nil)', '    return monotonicWithOption(l:
    l, options: [])', "    var i = 0\n    for x in l {\n        if x < l[i - 1] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true",
  '    return monotonicWithContext(l, nil)', '    return monotonicImpl(l)', '    return
    monotonicImpl(l)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            i += 1\n\
    \            j -= 1\n        }\n        if i < k {\n            if l[i] < l[k]\
    \ {\n                i += 1\n            } else {\n                j -= 1\n  \
    \          }\n        }\n        if j > k {\n            if l[j] < l[k] {\n  \
    \              j -= 1\n            } else {\n                i += 1\n        \
    \    }\n        }\n    }\n    return i == j", "    var i = 0\n    var j = l.count\n\
    \    var k = j - 1\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n\
    \    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n \
    \   var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n  \
    \  var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n   \
    \ var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var\
    \ k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p\
    \ = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u =\
    \ j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n\
    \    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n \
    \   var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n  \
    \  var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n   \
    \ var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var\
    \ u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z\
    \ = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e =\
    \ j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n\
    \    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n \
    \   var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n  \
    \  var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n   \
    \ var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var\
    \ e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j\
    \ = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o =\
    \ j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n\
    \    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n \
    \   var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n  \
    \  var e = j\n    var f = j\n    var g = j", '    return monotonic(l, l.count)',
  '    return monotonicWithOptions([Int](l), nil)', "    var i = 0\n    var j = l.count\
    \ - 1\n    var k = 0\n    var l1 = l\n    var l2 = l\n    var l3 = l\n    var\
    \ l4 = l\n    var l5 = l\n    var l6 = l\n    var l7 = l\n    var l8 = l\n   \
    \ var l9 = l\n    var l10 = l\n    var l11 = l\n    var l12 = l\n    var l13 =\
    \ l\n    var l14 = l\n    var l15 = l\n    var l16 = l\n    var l17 = l\n    var\
    \ l18 = l\n    var l19 = l\n    var l20 = l\n    var l21 = l\n    var l22 = l\n\
    \    var l23 = l\n    var l24 = l\n    var l25 = l\n    var l26 = l\n    var l27\
    \ = l\n    var l28 = l\n    var l29 = l\n    var l30 = l\n    var l31 = l\n  \
    \  var l32 = l\n    var l33 = l\n    var l34 = l\n    var l35 = l\n    var l36\
    \ = l\n    var l37 = l\n    var l38 = l\n    var l39 = l\n    var l40 = l\n  \
    \  var l41 = l\n    var l42 = l\n    var l43 = l\n    var l44 = l\n    var l45\
    \ = l\n    var l46 = l\n    var l47 = l\n    var l48 = l\n    var l49 = l\n  \
    \  var l50 = l\n    var l51 = l\n    var l52 = l\n    var l53 = l\n    var l54\
    \ = l\n    var l55 = l\n    var l56 = l\n    var l57 = l\n    var l58 = l\n  \
    \  var l59 = l\n    var l60 = l\n    var l61 = l\n    var l62 = l\n    var l63\
    \ = l\n    var l64 = l\n    var l65 = l\n    var l66 = l\n    var l67 = l\n  \
    \  var l68 = l\n    var l69 = l\n    var l70 = l\n    var l71 = l\n    var l72\
    \ = l\n    var l73 = l\n    var l74 = l\n    var l75 = l\n    var l76 = l\n  \
    \  var l77 = l\n    var l78 = l\n    var l79 = l\n    var l80 = l\n    var l81\
    \ = l\n    var l82 = l\n    var l83 = l\n    var l84 = l\n    var l85 = l\n  \
    \  var l", '    return monotonicImpl(l)', '    return monotonicImpl(l, l.count())',
  "    let sorted = l.sorted()\n    return sorted.first == sorted.last", "    if l.count\
    \ < 2 {\n        return true\n    }\n    var left = 0\n    var right = l.count\
    \ - 1\n    var leftIsSmaller = true\n    var rightIsSmaller = true\n    var leftIsLarger\
    \ = true\n    var rightIsLarger = true\n    var leftIsEqual = true\n    var rightIsEqual\
    \ = true\n    var leftIsGreater = true\n    var rightIsGreater = true\n    while\
    \ left < right {\n        if l[left] < l[right] {\n            leftIsSmaller =\
    \ false\n            leftIsLarger = false\n            leftIsEqual = false\n \
    \           leftIsGreater = true\n            rightIsSmaller = true\n        \
    \    rightIsLarger = true\n            rightIsEqual = true\n            rightIsGreater\
    \ = false\n        } else {\n            leftIsSmaller = true\n            leftIsLarger\
    \ = true\n            leftIsEqual = true\n            leftIsGreater = false\n\
    \            rightIsSmaller = false\n            rightIsLarger = false\n     \
    \       rightIsEqual = false\n            rightIsGreater = true\n        }\n \
    \       left++\n        right--\n    }\n    return leftIsSmaller && rightIsSmaller\
    \ && leftIsLarger && rightIsLarger && leftIsEqual && rightIsEqual && leftIsGreater\
    \ && rightIsGreater", '    return monotonicWithContext(l, nil)', "    let sorted\
    \ = l.sorted()\n    return sorted.first > sorted.last", "    let len = l.count\n\
    \    if len == 0 {\n        return true\n    }\n    if len == 1 {\n        return\
    \ l[0] >= l[1]\n    }\n    var left = 0\n    var right = len - 2\n    while left\
    \ < right {\n        let mid = left + (right - left) / 2\n        if l[mid] <\
    \ l[mid+1] {\n            left = mid + 1\n        } else {\n            right\
    \ = mid\n        }\n    }\n    return l[left] >= l[right]", "    var i = 0\n \
    \   for x in l {\n        if i > 0 {\n            if x < l[i-1] {\n          \
    \      return false\n            }\n        }\n        i += 1\n    }\n    return\
    \ true", '    return monotonic(l, isOrdered: true)', "    var i = 0\n    var j\
    \ = l.count - 1\n    var k = j - 1\n    var monotonic = true\n    while i < j\
    \ {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j]\
    \ {\n            j -= 1\n        } else {\n            monotonic = false\n   \
    \     }\n        if i < k {\n            if l[i] < l[k] {\n                i +=\
    \ 1\n            } else {\n                monotonic = false\n            }\n\
    \        }\n        if j < k {\n            if l[j] < l[k] {\n               \
    \ j -= 1\n            } else {\n                monotonic = false\n          \
    \  }\n        }\n        if i < j {\n            if l[i] > l[j] {\n          \
    \      i += 1\n            } else {\n                monotonic = false\n     \
    \       }\n        }\n        if j < i {\n            if l[j] > l[i] {\n     \
    \           j -= 1\n            } else {\n                monotonic = false\n\
    \            }\n        }\n        if i < k {\n            if l[i] > l[k] {\n\
    \                i += 1\n            } else {\n                monotonic = false\n\
    \            }\n        }\n        if j < k {\n            if l[j] > l[k] {\n\
    \                j -= 1\n            } else {\n                monotonic = false\n\
    \            }\n        }\n    }\n    return monotonic", "    var i = 0\n    var\
    \ j = l.count\n    var k = j - 1\n    var m = j\n    var n = j\n    var o = j\n\
    \    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n \
    \   var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n  \
    \  var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n   \
    \ var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var\
    \ j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o\
    \ = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t =\
    \ j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n\
    \    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n \
    \   var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n  \
    \  var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n   \
    \ var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var\
    \ t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y\
    \ = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d =\
    \ j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n\
    \    var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n \
    \   var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n  \
    \  var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n   \
    \ var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n    var\
    \ d = j\n    var e = j\n    var f = j\n    var g = j\n    var h = j\n    var i\
    \ = j\n    var j = j\n    var k = j\n    var l = j\n    var m = j\n    var n =\
    \ j\n    var o = j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n\
    \    var t = j\n    var u = j\n    var v = j\n    var w = j\n    var x = j\n \
    \   var y = j\n    var z = j\n    var a = j\n    var b = j\n    var c = j\n  \
    \  var d = j\n    var e = j\n    var f = j\n    var g = j", '    return monotonicWithTolerance(l,
    0)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n", "    let sorted = l.sorted()\n    if sorted.first\
    \ > sorted.last {\n        return true\n    }\n    return false", '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)', "    var i = 0\n    for x in l {\n        if i\
    \ == 0 {\n            i = x\n            continue\n        }\n        if x < i\
    \ {\n            return false\n        }\n        i = x\n    }\n    return true",
  "    var i = 0\n    for x in l {\n        if x > l[i] {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true", "    let n = l.count\n  \
    \  if n < 2 {\n        return true\n    }\n    if n == 2 {\n        return l[0]\
    \ > l[1]\n    }\n    if n == 3 {\n        return l[0] > l[1] && l[1] > l[2]\n\
    \    }\n    if n == 4 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\n\
    \    }\n    if n == 5 {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
    \ && l[3] > l[4]\n    }\n    if n == 6 {\n        return l[0] > l[1] && l[1] >\
    \ l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5]\n    }\n    if n == 7 {\n\
    \        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4]\
    \ > l[5] && l[5] > l[6]\n    }\n    if n == 8 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6]\
    \ > l[7]\n    }\n    if n == 9 {\n        return l[0] > l[1] && l[1] > l[2] &&\
    \ l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7]\
    \ > l[8]\n    }\n    if n == 10 {\n        return l[0] > l[1] && l[1] > l[2] &&\
    \ l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7]\
    \ > l[8] && l[8] > l[9]\n    }\n    if n == 11 {\n        return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[3] > l[4] && l[4] > l[5] && l[5] > l[6] && l[6]\
    \ > l[7] && l[7] > l[8] && l[8] > l[9] && l[9] > l[10]\n    }\n    if n == 12\
    \ {\n        return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] > l[4] &&\
    \ l[4] > l[5] && l[5] > l[6] && l[6] > l[7] && l[7] > l[8] && l[8] > l[9] && l[9]\
    \ > l[10] && l[10] > l[11]\n    }\n    if n == 13 {\n        return l[0] > l",
  '    return monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, &Context.defaultContext)', '    return monotonicWithOptions([Int](l),
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m =\
    \ Int64(Int.max)\n    for _ in 0..<l.count {\n        if l[i] < l[j] {\n     \
    \       m = l[i]\n            i = j\n            j = k\n            k = i\n  \
    \      }\n        if l[i] > l[j] {\n            m = l[j]\n            i = j\n\
    \            j = k\n            k = i\n        }\n    }\n    return m == Int64(Int.max)",
  '    return monotonicImpl(l, l, 0)', "    let sorted = l.sorted()\n    return sorted.first\
    \ == sorted.last", '    return monotonicWithOptions([Int](l), nil)', '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', '    return
    monotonicWithContext(l, nil)', '    return monotonicWithOptionList(l, nil)', '    return
    monotonicImpl(l, l.count)', '    return monotonicWithContext(l, nil)', '    return
    monotonic(l, l.count)', "    if l.isEmpty {\n        return true\n    }\n    var\
    \ prev = 0\n    var curr = l[0]\n    for curr = l[0], prev < curr {\n        prev\
    \ = curr\n    }\n    return curr < prev", "    var i = 0\n    for x in l {\n \
    \       if x < l[i] {\n            return false\n        }\n        if x > l[i]\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return true",
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n", '    return monotonicWithOptions([Int](l),
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m =\
    \ Int64(Int.max)\n    for _ in 0..<1000 {\n        if i == j {\n            return\
    \ true\n        }\n        if l[i] < l[j] {\n            if l[i] < m {\n     \
    \           m = l[i]\n            }\n            i += 1\n        } else {\n  \
    \          if l[j] < m {\n                m = l[j]\n            }\n          \
    \  j -= 1\n        }\n        if i == k {\n            return false\n        }\n\
    \        if l[i] > l[k] {\n            if l[i] < m {\n                m = l[i]\n\
    \            }\n            i -= 1\n        } else {\n            if l[k] < m\
    \ {\n                m = l[k]\n            }\n            k -= 1\n        }\n\
    \    }\n    return true", "    var i = 0\n    for x in l {\n        if i > 0 &&\
    \ x > l[i-1] {\n            return false\n        }\n        i += 1\n    }\n \
    \   return true", "    var i = 0\n    var j = 0\n    var k = 0\n    var m = Int64(0)\n\
    \    for k in l {\n        if i == j {\n            i = k\n            continue\n\
    \        }\n        if k > i {\n            if k > m {\n                m = k\n\
    \            }\n            j = k\n        }\n    }\n    return m <= i", "   \
    \ var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = l[i]\n  \
    \  var n = l[j]\n    while i < j {\n        if l[i] < m {\n            i += 1\n\
    \            m = l[i]\n        } else if l[j] > n {\n            j -= 1\n    \
    \        n = l[j]\n        } else {\n            return true\n        }\n    }\n\
    \    return false", "    var i = 0\n    var j = 0\n    var k = 0\n    var m =\
    \ Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n\
    \    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t =\
    \ Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n\
    \    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a =\
    \ Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n\
    \    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h =\
    \ Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n\
    \    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o =\
    \ Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n\
    \    var s = Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v =\
    \ Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n\
    \    var z = Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c =\
    \ Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n\
    \    var g = Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j =\
    \ Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n\
    \    var n = Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n\
    \    var b = Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e =\
    \ Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n\
    \    var i = Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l =\
    \ Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int", "    var i = 0\n\
    \    var j = l.count - 1\n    var k = j - 1\n    var monotonic = false\n    while\
    \ i < j {\n        if l[i] < l[k] {\n            i += 1\n        } else {\n  \
    \          k = j\n            if l[i] > l[k] {\n                monotonic = true\n\
    \            } else {\n                i += 1\n                j -= 1\n      \
    \      }\n        }\n    }\n    return monotonic", '    return monotonic(l, l.count)',
  "    var i = 0\n    for x in l {\n        if x > l[i] {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true", "    if l.isEmpty {\n   \
    \     return true\n    }\n    if l.first > l.last {\n        return false\n  \
    \  }\n    var prev Int = 0\n    var cur Int = l.first\n    var isIncreasing bool\
    \ = true\n    for cur < l.last {\n        if cur > prev {\n            isIncreasing\
    \ = false\n            break\n        }\n        prev = cur\n        cur++\n \
    \   }\n    return isIncreasing", "    var i = 0\n    var j = l.count - 1\n   \
    \ var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i +=\
    \ 1\n        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n \
    \           i += 1\n            j -= 1\n        }\n        if i < k {\n      \
    \      if l[i] < l[k] {\n                i += 1\n            } else {\n      \
    \          k -= 1\n            }\n        }\n    }\n    return i == j", '    return
    monotonicWithContext(l, nil)', "    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] > l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic", '    return monotonicWithContext(l,
    nil)', '    return monotonicImpl(l, l.count, 0)', "    var i = 0\n    for v in\
    \ l {\n        if v < l[i] {\n            return false\n        }\n        if\
    \ v > l[i] {\n            return true\n        }\n        i += 1\n    }\n    return\
    \ true", '    return monotonicWithTolerance(l, 0)', "    var i = 0\n    var j\
    \ = l.count\n    var k = j - 1\n    while i < k {\n        if l[i] < l[j] {\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            j -= 1\n   \
    \     } else {\n            return true\n        }\n    }\n    return false",
  "    let sorted = l.sorted()\n    return sorted.first >= sorted.last", "    let\
    \ sorted = l.sorted()\n    if sorted.isEmpty {\n        return true\n    }\n \
    \   if sorted[0] != sorted[1] {\n        return false\n    }\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] < sorted[i-1] {\n            return false\n        }\n\
    \    }\n    return true", "    var i = 0\n    for v in l {\n        if v < l[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true",
  "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var m = Int64(Int.max)\n\
    \    var n = Int64(Int.min)\n    while i < j {\n        if l[i] < m {\n      \
    \      m = l[i]\n        }\n        if l[j] > n {\n            n = l[j]\n    \
    \    }\n        i += 1\n        j -= 1\n    }\n    return m <= n", '    return
    monotonicWithContext(l, nil)', '    return monotonicWithContext(l, nil)', '    return
    monotonic(l, l, 0)', '    return monotonic(l, lessThanOrEqualTo: 0)', "    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return true\n        }\n    \
    \    if i == k {\n            return false\n        }\n        if l[i] < l[k]\
    \ {\n            k += 1\n        }\n    }\n    return false", '    return monotonicWithContext(l,
    nil)', '    return monotonicWithOption(l: l, options: [])', '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var monotonic\
    \ = false\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n \
    \       } else if l[i] > l[j] {\n            j -= 1\n        } else {\n      \
    \      k += 1\n            if k > 1 {\n                monotonic = true\n    \
    \        }\n        }\n    }\n    return monotonic", "    let sorted = l.sorted()\n\
    \    return sorted.first == sorted.last", '    return monotonicImpl(l)', "   \
    \ var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while i < j {\n \
    \       if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n\
    \            j -= 1\n        } else {\n            i += 1\n            j -= 1\n\
    \        }\n        if i < k {\n            if l[i] < l[k] {\n               \
    \ i += 1\n            } else {\n                k -= 1\n            }\n      \
    \  }\n    }\n    return i == j", '    return monotonicWithContext(l, nil)', '    return
    monotonicImpl(l, l, 0)', "    let l = l.sorted()\n    return l.first <= l.last",
  "    var i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var monotonic =\
    \ true\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n    \
    \    } else if l[i] > l[j] {\n            j -= 1\n        } else {\n         \
    \   if l[i] < l[k] {\n                monotonic = false\n            }\n     \
    \       k += 1\n        }\n    }\n    return monotonic", '    return monotonicWithContext(l,
    nil)', "    var i = 0\n    var j = l.count - 1\n    var k = 0\n    var m = 0\n\
    \    var n = l.count\n    var p = 0\n    var q = 0\n    var r = l.count\n    var\
    \ s = l.count\n    var t = l.count\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = l.count\n    var y = l.count\n    var z = 0\n    var aa = 0\n\
    \    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af =\
    \ 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak\
    \ = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var\
    \ ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n   \
    \ var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n\
    \    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd =\
    \ 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi\
    \ = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var\
    \ bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n   \
    \ var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n\
    \    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb =\
    \ 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg\
    \ = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var\
    \ cl = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n   \
    \ var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n\
    \    var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz =\
    \ 0\n    var da = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var de\
    \ = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var\
    \ dj = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n   \
    \ var do = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n\
    \    var dt = 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx =\
    \ 0\n    var dy = 0\n    var dz = 0\n    var ea = 0\n    var eb = 0\n    var ec\
    \ = 0\n    var ed = 0\n    var ee = 0\n    var ", "    var i = 0\n    var j =\
    \ l.count - 1\n    var k = 0\n    var monotonic = true\n    while i < j {\n  \
    \      if l[i] < l[j] {\n            k = i\n            i += 1\n        } else\
    \ {\n            k = j\n            j -= 1\n        }\n        if k != i {\n \
    \           monotonic = false\n        }\n    }\n    return monotonic", "    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = Int64(l.count)\n    var g = Int64(l.count)\n    var h = Int64(l.count)\n\
    \    var i = Int64(l.count)\n    var j = Int64(l.count)\n    var k = Int64(l.count)\n\
    \    var l = Int64(l.count)\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n\
    \    var o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var ", "    var i = 0\n    for x in l {\n   \
    \     if x > l[i] {\n            return false\n        }\n        i += 1\n   \
    \ }\n    return true", "    var i = 0\n    var j = l.count - 1\n    var k = j\
    \ - 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n     \
    \   } else if l[i] > l[j] {\n            j -= 1\n        } else {\n          \
    \  i += 1\n            j -= 1\n        }\n        if i < k {\n            if l[i]\
    \ < l[k] {\n                i += 1\n            } else {\n                k -=\
    \ 1\n            }\n        }\n    }\n    return i == j", "    let sorted = l.sorted()\n\
    \    return sorted.first > sorted.last", '    return monotonicWithContext(l, nil)',
  '    return monotonicWithContext(l, &Context{}.withValue(0))']
stop_tokens:
- "\n}"
