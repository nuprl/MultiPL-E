name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
  \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
  \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string:\
  \ String, substring: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += k\n  \
    \          k += k\n        }\n        i += 1\n    }\n    return count", '    return
    count_occurrences(string, substring)', "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) || string.hasSuffix(substring) {\n   \
    \     return how_many_times(string[string.startIndex..<string.endIndex], substring)\
    \ + how_many_times(string[string.endIndex..<string.startIndex], substring)\n \
    \   }\n    return 0", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.characters.count\n\
    \    while start < end {\n        let index = string.characters.index(of: substring,\
    \ options: .caseInsensitive)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        end = start\n        count += 1\n \
    \   }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.startIndex\n    while i < string.endIndex\
    \ && j < string.endIndex {\n        if string[i] == substring[0] {\n         \
    \   count += 1\n            i += substring.length - 1\n        } else {\n    \
    \        i += 1\n        }\n        j += 1\n    }\n    return count", "    if\
    \ string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    } else {\n        return string.countSubstrings(substring) + 1\n    }", '    return
    string.countSubstrings(substring)', '    return count_overlapping_cases(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ += 1\n        }\n        i += 1\n        k += 1\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += how_many_times(string: String(string[i..<k]), substring:\
    \ String(substring[1..<string.count]))\n            i += k\n            k += string.count\n\
    \        }\n        i += 1\n    }\n    return count", '    return count(string,
    substring)', '    return count_overlapping_cases(string, substring)', "    var\
    \ count = 0\n    for s in string.split(substring) {\n        if s == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = string.characters.count\n    var n = substring.characters.count\n\
    \    while i < m && j < n {\n        if string.characters[i] == substring.characters[j]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        }\
    \ else if string.characters[i] == substring.characters[j] {\n            count\
    \ += 1\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    if i < m {\n        while i < m {\n            if string.characters[i]\
    \ == substring.characters[j] {\n                count += 1\n                i\
    \ += 1\n            } else {\n                i += 1\n            }\n        }\n\
    \    }\n    if j < n {\n        while j < n {\n            if string.characters[i]\
    \ == substring.characters[j] {\n                count += 1\n                j\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex += 1\n     \
    \       continue\n        }\n        count += 1\n        startIndex = endIndex\
    \ + 1\n    }\n    return count", '    return count(string, substring)', "    if\
    \ string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return string.countSubstrings(substring) + 1", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            i++\n            count++\n            while i < j && string[i] ==\
    \ substring[1] {\n                i++\n                count++\n            }\n\
    \        } else {\n            i++\n        }\n    }\n    return count", "   \
    \ if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n \
    \       return count(string)\n    }\n    var count = 0\n    var start = 0\n  \
    \  var end = count(string)\n    while start < end {\n        start = string.startIndex.advanced(by:\
    \ 1)\n        end = string.endIndex.advanced(by: -1)\n        if string.substring(from:\
    \ start, to: end) == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return string.count\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.count\n    var k = substring.count\n    while i < j\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    i += k\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for s in string.split(substring) {\n       \
    \ if s == substring {\n            count += 1\n        } else {\n            count\
    \ = 0\n        }\n    }\n    return count", "    if string.hasSuffix(substring)\
    \ {\n        return string.count(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.count(substring)\n    }\n    return 0", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string.hasSuffix(substring) {\n        return string.count(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.count(substring)\n\
    \    }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ start = 0\n    var end = string.count\n    while start < end {\n        let\
    \ index = string.index(start, offsetBy: substring.count)\n        if index ==\
    \ nil {\n            break\n        }\n        start = index!.advanced(by: 1)\n\
    \        count += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  if string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string.dropLast(), substring)\n    }\n    return 0", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    return 0", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        k = k - 1\n    }\n    return\
    \ count", '    return count(string, substring)', '    return count_substring(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        count += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var start = 0\n    var end =\
    \ string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!.advanced(by: 1)\n        count += 1\n    }\n\
    \    return count", "    if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return 0", '    return string.countSubstrings(substring)', "    if\
    \ string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return string.count\n    }\n    var count =\
    \ 0\n    var i = 0\n    for c in string {\n        if c == substring {\n     \
    \       count += 1\n        } else {\n            count = 0\n        }\n     \
    \   if i == string.count {\n            break\n        }\n        i += 1\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return countOccurrences(string, \"\")\n   \
    \ }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while\
    \ startIndex < string.count {\n        endIndex = string.index(substring, startIndex)\n\
    \        if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ = string.index(substring, startIndex) + 1\n        } else {\n            count\
    \ += endIndex - startIndex\n            startIndex = endIndex + 1\n        }\n\
    \    }\n    return count", "    if string == \"\" || substring == \"\" {\n   \
    \     return 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.characters.count\n\
    \    while start < end {\n        let index = string.characters.index(of: substring,\
    \ from: start)\n        if index == nil {\n            break\n        }\n    \
    \    start = index! + 1\n        count += 1\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j && k < string.count {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += 1\n  \
    \          k += 1\n        } else if string[i] == substring[k] && k < string.count\
    \ {\n            i += 1\n            k += 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string.characters[i] == substring.characters[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        \
    \    if k == substring.characters.count {\n                k = 0\n           \
    \ }\n        } else {\n            i += 1\n        }\n    }\n    return count",
  '    return count(string, substring)', "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += k\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ += k\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    while i < string.count {\n    \
    \    if string[i] == substring[j] {\n            count += 1\n            i +=\
    \ 1\n            j += 1\n            if j == substring.count {\n             \
    \   j = 0\n            }\n        } else {\n            j = 0\n        }\n   \
    \ }\n    return count", '    return count(string, substring)', "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var start = 0\n    var end = count(string)\n\
    \    while start < end {\n        start = find(string, substring, start)\n   \
    \     end = find(string, substring, end)\n        if start == end {\n        \
    \    count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] == substring[k] {\n\
    \            count += 1\n            i += k\n            k += k\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return count", "    if string.hasSuffix(substring)\
    \ {\n        return string.count(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.count(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.count(substring)\n    }\n    return 0", "    var count\
    \ = 0\n    for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \      }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[1] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[2]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[3] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[4] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[5] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[6] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[7]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[8] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[9] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[10] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[11] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[12]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[13] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[14] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[15] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[16] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[17]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[18] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[19] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[20] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[21] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[22]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[23] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[24] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[25] {\n            count += 1\n            ", "    if\
    \ string == \"\" || substring == \"\" {\n        return 0\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = string.count\n    while start < end {\n\
    \        if string.substring(start, end) == substring {\n            count +=\
    \ 1\n            start = end + 1\n        } else {\n            start = string.index(string.startIndex,\
    \ offsetBy: start)\n            end = string.index(string.endIndex, offsetBy:\
    \ end)\n        }\n    }\n    return count", "    if string.hasSuffix(substring)\
    \ {\n        return string.count(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.count(substring)\n    }\n    return 0", '    return
    count_overlapping_cases(string, substring)', "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.count\n    while start <\
    \ end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        \
    \    if k == substring.count {\n                k = 0\n            }\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ += k\n        } else {\n            i += k\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.count\n    while start <\
    \ end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    for c in\
    \ string {\n        if c == substring {\n            count += 1\n        }\n \
    \   }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ = count + 1\n        }\n        i += 1\n        k += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    if string.hasPrefix(substring) {\n        return\
    \ 1 + how_many_times(string[string.startIndex.successor()..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex.predecessor()], substring)\n\
    \    }\n    return 0", "    let index = string.firstIndex(of: substring)\n   \
    \ return index != nil ? string.distance(from: string.startIndex, to: index!) :\
    \ string.distance(from: string.startIndex, to: string.endIndex)", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[1] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[2] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ += 1\n        }\n        i += 1\n        k += 1\n    }\n    return count", " \
    \   var count = 0\n    var i = 0\n    var j = string.characters.count\n    var\
    \ k = substring.characters.count\n    while i < j {\n        if string.characters[i]\
    \ == substring.characters[k] {\n            count += 1\n            i += k\n \
    \           k -= 1\n        }\n        i += 1\n    }\n    return count", "   \
    \ if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n \
    \       return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    var k = substring.characters.count\n    while\
    \ i < j {\n        if string[i] == substring[k] {\n            count += 1\n  \
    \          i += k\n            k += k\n        }\n        i += 1\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var last = 0\n    var last2 = 0\n    var last3 = 0\n\
    \    var last4 = 0\n    var last5 = 0\n    var last6 = 0\n    var last7 = 0\n\
    \    var last8 = 0\n    var last9 = 0\n    var last10 = 0\n    var last11 = 0\n\
    \    var last12 = 0\n    var last13 = 0\n    var last14 = 0\n    var last15 =\
    \ 0\n    var last16 = 0\n    var last17 = 0\n    var last18 = 0\n    var last19\
    \ = 0\n    var last20 = 0\n    var last21 = 0\n    var last22 = 0\n    var last23\
    \ = 0\n    var last24 = 0\n    var last25 = 0\n    var last26 = 0\n    var last27\
    \ = 0\n    var last28 = 0\n    var last29 = 0\n    var last30 = 0\n    var last31\
    \ = 0\n    var last32 = 0\n    var last33 = 0\n    var last34 = 0\n    var last35\
    \ = 0\n    var last36 = 0\n    var last37 = 0\n    var last38 = 0\n    var last39\
    \ = 0\n    var last40 = 0\n    var last41 = 0\n    var last42 = 0\n    var last43\
    \ = 0\n    var last44 = 0\n    var last45 = 0\n    var last46 = 0\n    var last47\
    \ = 0\n    var last48 = 0\n    var last49 = 0\n    var last50 = 0\n    var last51\
    \ = 0\n    var last52 = 0\n    var last53 = 0\n    var last54 = 0\n    var last55\
    \ = 0\n    var last56 = 0\n    var last57 = 0\n    var last58 = 0\n    var last59\
    \ = 0\n    var last60 = 0\n    var last61 = 0\n    var last62 = 0\n    var last63\
    \ = 0\n    var last64 = 0\n    var last65 = 0\n    var last66 = 0\n    var last67\
    \ = 0\n    var last68 = 0\n    var last69 = 0\n    var last70 = 0\n    var last71\
    \ = 0\n    var last72 = 0\n    var last73 = 0\n    var last74 = 0\n    var last75\
    \ = 0\n    var last76 = 0\n    var last77 = 0\n    var last78 = 0\n    var last79\
    \ = 0\n    var last80 = 0\n    var last81 = 0\n    var last82 = 0\n    var last83\
    \ = 0\n    var last84 = 0\n    var last85 = 0\n    var last86 = 0\n    var last87\
    \ = 0\n    var last88 = 0\n    var last89 = 0\n    var last90 = 0\n    var last91\
    \ = 0\n    var last92 = 0\n    var last93 = 0\n    var last94 = 0\n    var last95\
    \ = 0\n    var last96", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = string.startIndex\n    while i < string.endIndex {\n    \
    \    if string[i] == substring[0] {\n            count += 1\n            i +=\
    \ 1\n            while i < string.endIndex && string[i] == substring[1] {\n  \
    \              i += 1\n            }\n            j = i\n        } else {\n  \
    \          i = 0\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ += k\n        } else {\n            i += k\n            k += k\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return countOccurrences(string, \"\", true)\n\
    \    }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    var\
    \ found = false\n    for index in 0..<string.characters.count {\n        if found\
    \ {\n            if string.characters[index] == substring.characters[0] {\n  \
    \              count += 1\n                startIndex = index\n              \
    \  found = false\n            } else {\n                count = 0\n          \
    \      startIndex = index\n                found = false\n            }\n    \
    \    } else {\n            if string.characters[index] == substring.characters[0]\
    \ {\n                count += 1\n                startIndex = index\n        \
    \    } else {\n                count = 0\n                startIndex = index\n\
    \            }\n        }\n        if string.characters[index] == substring.characters[substring.characters.count\
    \ - 1] {\n            found = true\n            endIndex = index\n        }\n\
    \    }\n    if count > 0 {\n        return count\n    }\n    if endIndex == startIndex\
    \ {\n        return 0\n    }\n    return countOccurrences(string, substring, true)",
  "    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var stringLength\
    \ = string.characters.count\n    var substringLength = substring.characters.count\n\
    \    while i < stringLength && j < substringLength {\n        if string.characters[i]\
    \ == substring.characters[j] {\n            count += 1\n            i += 1\n \
    \           j += 1\n        } else {\n            if string.characters[i] != substring.characters[j]\
    \ {\n                count += 1\n                i += 1\n            }\n     \
    \       if string.characters[i] != substring.characters[j] {\n               \
    \ j += 1\n            }\n        }\n    }\n    return count", "    if string ==\
    \ \"\" || substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = string.startIndex\n\n    while i <\
    \ string.endIndex {\n        if k == string.endIndex {\n            break\n  \
    \      }\n\n        if string[k] == substring[j] {\n            count += 1\n \
    \           j += 1\n            if j == substring.count {\n                j =\
    \ 0\n                k += 1\n            }\n        } else {\n            j =\
    \ 0\n            k += 1\n        }\n\n        i += 1\n    }\n\n    return count",
  "    let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    return string.distance(from: start, to: end)", "    let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let count = string.distance(from: start, to: end)\n    return count", " \
    \   let count = string.characters.filter({ $0 == substring }).count\n    return\
    \ count > 0 ? count : 0", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index == nil {\n\
    \            break\n        }\n        start = index!\n        count += 1\n  \
    \  }\n    return count", "    if string == \"\" {\n        return 0\n    }\n \
    \   if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ start = 0\n    var end = string.characters.count\n    while start < end {\n\
    \        let index = string.index(start, offsetBy: substring.characters.count,\
    \ limitedBy: string.endIndex) ?? string.endIndex\n        if index == string.endIndex\
    \ {\n            count += 1\n            break\n        }\n        if string[index]\
    \ != substring[0] {\n            count += 1\n            start = index\n     \
    \   } else {\n            start = index + 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var lastCharIndex = 0\n    var lastSubstringIndex = 0\n    var\
    \ lastSubstringIndex2 = 0\n    var lastSubstringIndex3 = 0\n    var lastSubstringIndex4\
    \ = 0\n    var lastSubstringIndex5 = 0\n    var lastSubstringIndex6 = 0\n    var\
    \ lastSubstringIndex7 = 0\n    var lastSubstringIndex8 = 0\n    var lastSubstringIndex9\
    \ = 0\n    var lastSubstringIndex10 = 0\n    var lastSubstringIndex11 = 0\n  \
    \  var lastSubstringIndex12 = 0\n    var lastSubstringIndex13 = 0\n    var lastSubstringIndex14\
    \ = 0\n    var lastSubstringIndex15 = 0\n    var lastSubstringIndex16 = 0\n  \
    \  var lastSubstringIndex17 = 0\n    var lastSubstringIndex18 = 0\n    var lastSubstringIndex19\
    \ = 0\n    var lastSubstringIndex20 = 0\n    var lastSubstringIndex21 = 0\n  \
    \  var lastSubstringIndex22 = 0\n    var lastSubstringIndex23 = 0\n    var lastSubstringIndex24\
    \ = 0\n    var lastSubstringIndex25 = 0\n    var lastSubstringIndex26 = 0\n  \
    \  var lastSubstringIndex27 = 0\n    var lastSubstringIndex28 = 0\n    var lastSubstringIndex29\
    \ = 0\n    var lastSubstringIndex30 = 0\n    var lastSubstringIndex31 = 0\n  \
    \  var lastSubstringIndex32 = 0\n    var lastSubstringIndex33 = 0\n    var lastSubstringIndex34\
    \ = 0\n    var lastSubstringIndex35 = 0\n    var lastSubstringIndex36 = 0\n  \
    \  var lastSubstringIndex37 = 0\n    var lastSubstringIndex38 = 0\n    var lastSubstringIndex39\
    \ = 0\n    var lastSubstringIndex40 = 0\n    var lastSubstringIndex41 = 0\n  \
    \  var lastSubstringIndex42 = 0\n    var lastSubstringIndex43 = 0\n    var lastSubstringIndex44\
    \ = 0\n    var lastSubstringIndex45 = 0\n    var lastSubstringIndex46 = 0\n  \
    \  var lastSubstringIndex47 = 0\n    var lastSubstringIndex48 = 0\n    var lastSubstringIndex49\
    \ = 0\n    var lastSubstringIndex50 = 0\n    var lastSubstringIndex51 = 0\n  \
    \  var lastSubstringIndex52 = 0\n    var lastSubstringIndex53 = 0\n    var lastSubstringIndex54\
    \ = 0\n    var lastSubstringIndex55 = 0\n    var lastSubstringIndex56 = 0\n  \
    \  var lastSubstringIndex57 = 0\n    var lastSubstringIndex58 = 0\n    var lastSubstringIndex59\
    \ = 0\n", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.startIndex\n    while i < string.endIndex {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += 1\n            while\
    \ i < string.endIndex && string[i] == substring[1] {\n                i += 1\n\
    \            }\n            if i == string.endIndex {\n                count +=\
    \ 1\n            }\n        } else {\n            count = 0\n        }\n     \
    \   if j == string.endIndex {\n            break\n        }\n        j = string.index(i,\
    \ j)\n    }\n    return count", "    var count = 0\n    for char in string {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.startIndex\n    while i < string.endIndex {\n      \
    \  if string[i] == substring[0] {\n            count += 1\n            i = j\n\
    \        } else {\n            j += 1\n        }\n    }\n    return count", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var last = 0\n    for index in 0..<string.characters.count {\n\
    \        if string.characters[index] == substring.characters[index] {\n      \
    \      count += 1\n        } else {\n            if count > 0 {\n            \
    \    count -= 1\n            }\n            last = index\n        }\n    }\n \
    \   if count > 0 {\n        count -= 1\n    }\n    return count + last - string.characters.count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var start = 0\n    var end =\
    \ string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        count += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else {\n\
    \            count = 0\n            i += 1\n        }\n        if i == string.endIndex\
    \ {\n            i += 1\n        }\n    }\n    return count", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ != substring[j] {\n            count = count + 1\n        }\n        i += 1\n\
    \        j += 1\n    }\n    while k < substring.characters.count {\n        if\
    \ string[k] != substring[k] {\n            count = count + 1\n        }\n    \
    \    k += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string.dropFirst(substring.length), substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string,\
    \ substring.dropLast(substring.length))\n    }\n    return 0", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!.advanced(by:\
    \ substring.count)\n        count += 1\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var start = 0\n    var end = count(string)\n\
    \    while start < end {\n        start = find(string, substring, start)\n   \
    \     end = find(string, substring, end)\n        if start == end {\n        \
    \    count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ -= 1\n        }\n        i += 1\n    }\n    return count", "    if string.hasSuffix(substring)\
    \ {\n        return string.count(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.count(substring)\n    }\n    return 0", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i += substring.length - 1\n        } else {\n            i += 1\n \
    \       }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    return countOccurrences(string, substring)", '    return count_overlapping_cases(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.startIndex\n    while i < string.endIndex {\n      \
    \  if string[i] == substring[0] {\n            count += 1\n            i += 1\n\
    \            if i == string.endIndex {\n                i = string.startIndex\n\
    \                j += 1\n            }\n        } else {\n            i = 0\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += 1\n            k += 1\n            if k == substring.characters.count\
    \ {\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex = endIndex +\
    \ 1\n        } else {\n            count += 1\n            startIndex = endIndex\
    \ + 1\n        }\n    }\n    return count", "    if string == \"\" {\n       \
    \ return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if\
    \ string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string, substring.dropLast())\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string.dropFirst(), substring)\n    }\n\
    \    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string,\
    \ substring.dropLast())\n    }\n    return 0", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            i += 1\n\
    \            count += k\n            if i == j {\n                i += 1\n   \
    \             count += k\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    } else {\n        return string.countSubstrings(substring) + 1\n    }", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = count(string)\n    while start < end {\n        start = find(string,\
    \ substring, start)\n        end = find(string, substring, end+1)\n        count\
    \ += 1\n    }\n    return count", "    if string.hasSuffix(substring) {\n    \
    \    return string.countSubstrings(substring)\n    } else {\n        return string.countSubstrings(substring)\
    \ + 1\n    }", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var last = 0\n    var found = false\n    for i < string.count\
    \ {\n        if string[i] == substring[0] {\n            found = true\n      \
    \      for j < substring.count {\n                if string[i+j] == substring[j]\
    \ {\n                    found = true\n                    j++\n             \
    \   } else {\n                    found = false\n                    break\n \
    \               }\n            }\n            if found {\n                count++\n\
    \                last = i\n                i += j\n            } else {\n    \
    \            count++\n                last = i\n                i += j + 1\n \
    \           }\n        } else {\n            count++\n            last = i\n \
    \           i += 1\n        }\n    }\n    if last == string.count {\n        return\
    \ count\n    }\n    return count", "    if string == \"\" || substring == \"\"\
    \ {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string.characters[i] == substring.characters[0]\
    \ {\n            count += 1\n            i += 1\n            continue\n      \
    \  }\n        if string.characters[i] == substring.characters[1] {\n         \
    \   count += 1\n            i += 2\n            continue\n        }\n        if\
    \ string.characters[i] == substring.characters[2] {\n            count += 1\n\
    \            i += 3\n            continue\n        }\n        if string.characters[i]\
    \ == substring.characters[3] {\n            count += 1\n            i += 4\n \
    \           continue\n        }\n        if string.characters[i] == substring.characters[4]\
    \ {\n            count += 1\n            i += 5\n            continue\n      \
    \  }\n        if string.characters[i] == substring.characters[5] {\n         \
    \   count += 1\n            i += 6\n            continue\n        }\n        if\
    \ string.characters[i] == substring.characters[6] {\n            count += 1\n\
    \            i += 7\n            continue\n        }\n        if string.characters[i]\
    \ == substring.characters[7] {\n            count += 1\n            i += 8\n \
    \           continue\n        }\n        if string.characters[i] == substring.characters[8]\
    \ {\n            count += 1\n            i += 9\n            continue\n      \
    \  }\n        if string.characters[i] == substring.characters[9] {\n         \
    \   count += 1\n            i += 10\n            continue\n        }\n       \
    \ if string.characters[i] == substring.characters[10] {\n            count +=\
    \ 1\n            i += 11\n            continue\n        }\n        if string.characters[i]\
    \ == substring.characters[11] {\n            count += 1\n            i += 12\n\
    \            continue\n        }\n        if string.characters[i] == substring.characters[12]\
    \ {\n            count += 1\n            i += 13\n            continue\n     \
    \   }\n        if string.characters[i] == substring.characters[13] {\n       \
    \     count += 1\n            i += 14\n            continue\n        }\n     \
    \   if string.characters[i] == substring.characters[14] {\n            count +=\
    \ 1\n            i += 15\n            continue\n        }\n        if string.characters[i]\
    \ == substring.characters[15] {\n            count += 1\n            i += 16\n\
    \            continue\n        }\n        if string.characters[i] == substring.characters[16]\
    \ {\n            count += 1\n            i += 17\n            continue\n     \
    \   }\n        if string.characters[i] == substring.characters[17] {\n       \
    \     count += 1\n            i += 18\n            continue\n        }\n     \
    \   if string.characters[i] == substring.characters[18] {\n            count +=\
    \ 1\n            i += 19\n            continue\n        }\n        if string.characters[i]\
    \ == substring.characters[19] {\n            count += 1\n            i += 20\n\
    \            continue\n        }\n        if string.characters[i] == substring.characters[20]\
    \ {\n            count += 1\n            i += 21\n            continue\n     \
    \   }\n        if ", "    if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return string.countSubstrings(substring) + 1", "    var count = 0\n\
    \    var startIndex = string.startIndex\n    var endIndex = string.endIndex\n\
    \    while startIndex != endIndex {\n        let index = string.index(startIndex,\
    \ offsetBy: substring.count)\n        if index != endIndex {\n            count\
    \ += 1\n        }\n        startIndex = index\n    }\n    return count", "   \
    \ if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return 0", "    if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    } else {\n        return string.countSubstrings(substring) + 1\n    }", " \
    \   let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.endIndex.distanceTo(string.endIndex))\n\
    \    return string.distance(from: start, to: end) / substring.length", "    let\
    \ index = string.firstIndex(of: substring)\n    return index == nil ? 0 : index!.distance(string)",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var startIndex = 0\n    var endIndex\
    \ = string.count\n    while startIndex < endIndex {\n        let index = string.index(startIndex,\
    \ offsetBy: substring.count)\n        if index == startIndex {\n            startIndex\
    \ += substring.count\n            continue\n        }\n        if index == endIndex\
    \ {\n            endIndex -= substring.count\n            continue\n        }\n\
    \        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n            startIndex = index\n        }\n     \
    \   startIndex = index\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = string.startIndex\n    while i < string.endIndex {\n    \
    \    if string[k] == substring[j] {\n            count += 1\n            i +=\
    \ 1\n            j += 1\n            if j == substring.count {\n             \
    \   j = 0\n                k += 1\n            }\n        } else {\n         \
    \   j = 0\n            k += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n\
    \    var start = 0\n    var end = string.characters.count\n\n    while start <\
    \ end {\n        let index = string.characters.index(of: substring, options: .caseInsensitive)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\
    \ + 1\n        end = start\n        count += 1\n    }\n\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var startIndex = 0\n    var endIndex\
    \ = 0\n    while startIndex < string.count {\n        endIndex = string.index(substring,\
    \ startIndex)\n        if endIndex == startIndex {\n            count += 1\n \
    \           startIndex = string.index(substring, startIndex) + 1\n        } else\
    \ {\n            count += 1\n            startIndex = endIndex + 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = count(string)\n    while start < end {\n\
    \        let mid = start + (end - start) / 2\n        if string[mid] == substring[0]\
    \ {\n            start = mid + 1\n            count += 1\n        } else if string[mid]\
    \ == substring[1] {\n            end = mid - 1\n            count += 2\n     \
    \   } else {\n            start = mid + 1\n            end = mid - 1\n       \
    \ }\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = string.startIndex\n    while i < string.endIndex\
    \ {\n        if string[k] == substring[j] {\n            count += 1\n        \
    \    i += 1\n            j += 1\n            if j == substring.endIndex {\n  \
    \              j = 0\n                k += 1\n            }\n        } else {\n\
    \            i = 0\n            j += 1\n            if j == substring.endIndex\
    \ {\n                j = 0\n                k += 1\n            }\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = count(string)\n    while start < end {\n\
    \        start = find(string, substring, start)\n        end = find(string, substring,\
    \ end) + 1\n        count += 1\n    }\n    return count", "    var count = 0\n\
    \    for index in 0..<string.characters.count {\n        if string.characters.contains(substring,\
    \ range: NSMakeRange(index, substring.length)) {\n            count += 1\n   \
    \     }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) || string.hasSuffix(substring) {\n   \
    \     return how_many_times(string[string.startIndex..<string.endIndex], substring)\
    \ + how_many_times(string[string.endIndex..<string.startIndex], substring)\n \
    \   }\n    return 0", "    let index = string.index(of: substring)\n    return\
    \ index != nil ? string.distance(from: string.startIndex, to: index!) : string.characters.count\
    \ - string.characters.index(of: substring)", '    return count(string, substring)',
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += k\n  \
    \          k += k\n        }\n        i += 1\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += substring.length - 1\n        } else if string[i] ==\
    \ substring[1] {\n            count += 1\n            i += substring.length -\
    \ 1\n        } else if string[i] == substring[2] {\n            count += 1\n \
    \           i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {\n  \
    \          count += 1\n            ", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n\n    var count = 0\n    var i = 0\n    var j =\
    \ string.characters.count\n\n    while i < j {\n        if string.characters[i]\
    \ != substring.characters[i] {\n            count += 1\n        }\n        i +=\
    \ 1\n    }\n\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n        } else {\n            count\
    \ += endIndex - startIndex\n        }\n        startIndex = endIndex + 1\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.startIndex\n    var k = string.endIndex\n\
    \    while i < k {\n        if string[j] != substring[i] {\n            count\
    \ += 1\n            i = j\n        } else {\n            i += 1\n        }\n \
    \       if i == k {\n            break\n        }\n        j = i\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n        if\
    \ string[i] == substring[0] {\n            count = countOccurrences(string, substring)\n\
    \            i += substring.length - 1\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ ho", "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n\
    \    var count = 0\n    var start = 0\n    var end = string.characters.count\n\
    \    while start < end {\n        let index = string.characters.index(of: substring,\
    \ options: .caseInsensitive)\n        if index == nil {\n            break\n \
    \       }\n        let start = index!\n        let end = start+substring.length\n\
    \        if end > end {\n            break\n        }\n        count += 1\n  \
    \      start = end\n    }\n    return count", "    if string == \"\" {\n     \
    \   return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n   \
    \ var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = string.characters.count\n    var n = substring.characters.count\n\
    \    for (i; i < m; i++ {\n        if string[i] == substring[j] {\n          \
    \  count++\n            j++\n            if j == n {\n                j = 0\n\
    \                k++\n                if k == m {\n                    k = 0\n\
    \                    l++\n                    if l == n {\n                  \
    \      l = 0\n                        i++\n                        if i == m {\n\
    \                            i = 0\n                            count++\n    \
    \                        if count == 1 {\n                                return\
    \ count\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var start = 0\n    var end =\
    \ string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!.advanced(by: substring.count)\n        count\
    \ += 1\n    }\n    return count", "    let start = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let end = string.endIndex.advancedBy(substring.endIndex)\n    let range =\
    \ start..<end\n    return string.distance(from: range.lowerBound, to: range.upperBound)",
  "    if string.hasSuffix(substring) {\n        return string.count(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.count(substring)\n\
    \    }\n    return 0", "    if string == \"\" || substring == \"\" {\n       \
    \ return 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        start = string.index(substring, start) + 1\n\
    \        end = string.index(substring, end) + 1\n        count += 1\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.count\n    var k = substring.count\n    while i < j\
    \ {\n        if string[i] == substring[k] {\n            count += 1\n        \
    \    i += k\n            k += k\n        }\n        i += 1\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var startIndex =\
    \ 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex).offsetByOrThrow(string.distance(startIndex,\
    \ string.startIndex))\n        if endIndex == startIndex {\n            count\
    \ += 1\n        } else {\n            count += endIndex - startIndex + 1\n   \
    \     }\n        startIndex = endIndex + 1\n    }\n    return count", '    return
    string.countSubstrings(substring)', "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    for i < string.count {\n   \
    \     if string[i] == substring[0] {\n            count += 1\n            i =\
    \ i + 1\n            for j < substring.count {\n                if string[i+j]\
    \ == substring[j] {\n                    count = count + 1\n                 \
    \   i = i + j + 1\n                    j = j + j + 1\n                    k =\
    \ k + 1\n                }\n            }\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab =\
    \ 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag\
    \ = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var\
    \ al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n   \
    \ var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n\
    \    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az =\
    \ 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be\
    \ = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var\
    \ bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n   \
    \ var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n\
    \    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx =\
    \ 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n    var cc\
    \ = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n    var\
    \ ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var cl = 0\n   \
    \ var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n    var cq = 0\n\
    \    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n    var cv =\
    \ 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz = 0\n    var da\
    \ = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var de = 0\n    var\
    \ df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var dj = 0\n   \
    \ var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n    var do = 0\n\
    \    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n    var dt =\
    \ 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx = 0\n    var dy\
    \ = 0\n    var dz = 0\n    var ea = 0\n", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += substring.length - 1\n        } else\
    \ if string[i] == substring[1] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[2] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {\n  \
    \          count += 1\n            i += substring.length - 1\n        ", "   \
    \ if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n \
    \       return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ += 1\n        }\n        i += 1\n    }\n    return count", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        start = string.index(substring, start) + 1\n\
    \        end = string.index(substring, end) + 1\n        count += 1\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.startIndex\n    while i < string.endIndex && j < string.endIndex\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    i += substring.length - 1\n        } else {\n            i += 1\n       \
    \ }\n        if j == string.endIndex {\n            j += 1\n        }\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index != nil {\n\
    \            count += 1\n            start = index!\n        } else {\n      \
    \      start = end\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while\
    \ i < string.endIndex {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += 1\n            while i < string.endIndex && string[i]\
    \ == substring[1] {\n                i += 1\n            }\n        } else {\n\
    \            count = 0\n        }\n        if count == substring.length - 1 {\n\
    \            return count\n        }\n        if j == string.endIndex {\n    \
    \        return count\n        }\n        j = string.index(string.startIndex,\
    \ offsetBy: 1)\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var lastIndex = string.startIndex\n\
    \    while lastIndex != string.endIndex {\n        if string.substring(lastIndex)\
    \ == substring {\n            count += 1\n        }\n        lastIndex += 1\n\
    \    }\n    return count", "    if string == \"\" || substring == \"\" {\n   \
    \     return 0\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = string.startIndex\n    while i < string.endIndex {\n        if k == string.startIndex\
    \ {\n            j = string.startIndex\n        } else {\n            j = string.index(k,\
    \ offsetBy: 1)\n        }\n        if string.substring(from: i, length: substring.length)\
    \ == substring {\n            count += 1\n        }\n        k = j\n        i\
    \ += 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex.successor()..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex.predecessor()], substring)\n\
    \    }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = string.startIndex\n    var k = string.endIndex\n    while\
    \ i < k {\n        if string[j] != substring[i] {\n            count = count +\
    \ 1\n        }\n        if string[j] == substring[i] {\n            j = j + 1\n\
    \        }\n        i = i + 1\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] != substring[k] {\n\
    \            count += 1\n            i = j\n        } else {\n            i +=\
    \ 1\n            k += 1\n        }\n    }\n    return count", '    return count_overlapping_cases(string,
    substring)', "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var\
    \ k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            i += 1\n            count += how_many_times(string: String(string[i..<j]),\
    \ substring: String(substring[1..<k]))\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    var count = 0\n    var start = 0\n    var end\
    \ = string.characters.count\n    while start < end {\n        let index = string.characters.index(of:\
    \ substring, from: start)\n        if index == nil {\n            break\n    \
    \    }\n        start = index! + 1\n        count += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var start = 0\n    var end =\
    \ string.count\n    var substring_start = string.startIndex\n    var substring_end\
    \ = string.endIndex\n    while start < end {\n        if string.substring(start,\
    \ start+substring.length) == substring {\n            count += 1\n           \
    \ start += substring.length\n        } else if string.substring(start, start+substring.length)\
    \ == substring {\n            count += 1\n            start += substring.length\n\
    \        } else {\n            start = string.index(substring_start, start) +\
    \ 1\n            end = string.index(substring_end, start) - 1\n        }\n   \
    \ }\n    return count", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string.characters[i]\
    \ != substring.characters[k] {\n            count += 1\n        }\n        i +=\
    \ 1\n        k += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  if string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(substring.length),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string.dropLast(substring.length), substring)\n    }\n    return\
    \ 0", "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\
    \" {\n        return string.count\n    }\n    var count = 0\n    var start = 0\n\
    \    var end = string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        count += 1\n    }\n    return count",
  '    return count_substring(string, substring, true)', "    var count = 0\n    for\
    \ index in 0..<string.characters.count {\n        if string.characters.contains(substring,\
    \ range: NSRange(location: index, length: substring.length)) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += k\n            k += k\n        } else {\n           \
    \ i += 1\n        }\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += countOccurrences(string, string[i:])\n            i\
    \ += k\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            i += 1\n            count += how_many_times(string: String(string[i..<k]),\
    \ substring: String(substring[k..<k]))\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += how_many_times(string: String(string.dropFirst(1)), substring: String(substring.dropFirst(1)))\n\
    \            i += 1\n        }\n        if string[i] == substring[1] {\n     \
    \       count += how_many_times(string: String(string.dropFirst(1)), substring:\
    \ String(substring.dropFirst(2)))\n            i += 1\n        }\n        if string[i]\
    \ == substring[2] {\n            count += how_many_times(string: String(string.dropFirst(1)),\
    \ substring: String(substring.dropFirst(3)))\n            i += 1\n        }\n\
    \        if string[i] == substring[3] {\n            count += how_many_times(string:\
    \ String(string.dropFirst(1)), substring: String(substring.dropFirst(4)))\n  \
    \          i += 1\n        }\n        if string[i] == substring[4] {\n       \
    \     count += how_many_times(string: String(string.dropFirst(1)), substring:\
    \ String(substring.dropFirst(5)))\n            i += 1\n        }\n        if string[i]\
    \ == substring[5] {\n            count += how_many_times(string: String(string.dropFirst(1)),\
    \ substring: String(substring.dropFirst(6)))\n            i += 1\n        }\n\
    \        if string[i] == substring[6] {\n            count += how_many_times(string:\
    \ String(string.dropFirst(1)), substring: String(substring.dropFirst(7)))\n  \
    \          i += 1\n        }\n        if string[i] == substring[7] {\n       \
    \     count += how_many_times(string: String(string.dropFirst(1)), substring:\
    \ String(substring.dropFirst(8)))\n            i += 1\n        }\n        if string[i]\
    \ == substring[8] {\n            count += how_many_times(string: String(string.dropFirst(1)),\
    \ substring: String(substring.dropFirst(9)))\n            i += 1\n        }\n\
    \        if string[i] == substring[9] {\n            count += how_many_times(string:\
    \ String(string.dropFirst(1)), substring: String(substring.dropFirst(10)))\n \
    \           i += 1\n        }\n        if string[i] == substring[10] {\n     \
    \       count += how_many_times(string: String(string.dropFirst(1)), substring:\
    \ String(substring.dropFirst(11)))\n            i += 1\n        }\n        if\
    \ string[i] == substring[11] {\n            count += how_many_times(string: String(string.dropFirst(1)),\
    \ substring: String(substring.dropFirst(", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return string.count\n    }\n \
    \   var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[1] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[k] == substring[j] {\n   \
    \         count += 1\n            i += k\n            j++\n            if j ==\
    \ substring.count {\n                j = 0\n                k += k\n         \
    \   }\n        } else {\n            j = 0\n            k += k\n        }\n  \
    \  }\n    return count", "    if string == \"\" {\n        return 0\n    }\n \
    \   if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = count(string)\n    while start < end {\n\
    \        start = find(string, substring, start)\n        end = find(string, substring,\
    \ end)\n        if start < end {\n            count += 1\n        }\n    }\n \
    \   return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n\
    \    while startIndex < string.count {\n        endIndex = string.index(substring,\
    \ startIndex)\n        if endIndex == startIndex {\n            count += 1\n \
    \           startIndex = string.index(substring, startIndex) + 1\n        } else\
    \ {\n            count += endIndex - startIndex + 1\n            startIndex =\
    \ endIndex + 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ index in 0..<string.characters.count {\n        if string.substring(from: index).contains(substring)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n\
    \    while startIndex < string.count {\n        endIndex = string.index(substring,\
    \ startIndex)\n        if endIndex == startIndex {\n            count += 1\n \
    \           startIndex = string.index(substring, startIndex) + 1\n        } else\
    \ {\n            count += 1\n            startIndex = endIndex + 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count {\n\
    \        endIndex = string.index(substring, startIndex)\n        if endIndex ==\
    \ startIndex {\n            count += 1\n            startIndex = string.index(substring,\
    \ startIndex) + 1\n        } else {\n            count += 1\n            startIndex\
    \ = endIndex + 1\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n \
    \   }\n    if string[string.startIndex.successor()...] == substring {\n      \
    \  return 1 + how_many_times(string[string.startIndex.successor()...], substring)\n\
    \    }\n    if string[string.startIndex.successor()...] == substring.reversed()\
    \ {\n        return 1 + how_many_times(string[string.startIndex.successor()...],\
    \ substring.reversed())\n    }\n    return how_many_times(string[string.startIndex.successor()...],\
    \ substring) + how_many_times(string, substring)", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[k] == substring[j] {\n   \
    \         count += 1\n            i += 1\n            j += 1\n            if j\
    \ == substring.endIndex {\n                j = 0\n                k += 1\n   \
    \         }\n        } else {\n            i = 0\n            j += 1\n       \
    \     if j == substring.endIndex {\n                j = 0\n                k +=\
    \ 1\n            }\n        }\n    }\n    return count", "    if string == \"\"\
    \ || substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ += 1\n            i = j\n        } else {\n            i += 1\n            k\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var stringLength = string.characters.count\n    var\
    \ substringLength = substring.characters.count\n    while i < stringLength &&\
    \ j < substringLength {\n        if string.characters[i] == substring.characters[j]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        }\
    \ else if string.characters[i] == substring.characters[j] {\n            count\
    \ += 1\n            i += 1\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring {\n            count +=\
    \ 1\n            i += substring.length - 1\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    let index = string.firstIndex(of:\
    \ substring)\n    return index != nil ? string.distance(from: string.startIndex,\
    \ to: index!) : string.distance(from: string.startIndex, to: string.endIndex)",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return string.count\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += substring.length - 1\n        } else\
    \ {\n            i = 0\n        }\n    }\n    return count", '    return count_overlapping_cases(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return string.count\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return count", "    let start\
    \ = string.startIndex.advancedBy(substring.startIndex)\n    let end = string.endIndex.advancedBy(substring.endIndex)\n\
    \    let range = start..<end\n    let count = string.distance(from: range.lowerBound,\
    \ to: range.upperBound)\n    return count", "    if string == \"\" {\n       \
    \ return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var start = 0\n    var end = count(string)\n  \
    \  while start < end {\n        start = find(string, substring, start)\n     \
    \   if start == end {\n            return count\n        }\n        end = find(string,\
    \ substring, start + 1)\n        count += 1\n    }\n    return count", "    let\
    \ start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.startIndex.distanceTo(string.endIndex))\n\
    \    let range = start..<end\n    return range.count", "    if string == \"\"\
    \ || substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n    var\
    \ startIndex = 0\n    var endIndex = 0\n\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex = string.index(substring,\
    \ startIndex) + 1\n        } else {\n            count += endIndex - startIndex\n\
    \            startIndex = endIndex + 1\n        }\n    }\n\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += k\n  \
    \          k += k\n        }\n        i += 1\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return count(string)\n    }\n    var count = 0\n    var i = 0\n    var j\
    \ = string.startIndex\n    while i < string.endIndex {\n        if string[i] ==\
    \ substring[0] {\n            count += 1\n            i += substring.length -\
    \ 1\n        } else if string[i] == substring[1] {\n            count += 1\n \
    \           i += substring.length - 1\n        } else if string[i] == substring[2]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[3] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[4] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[5] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[6] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[7]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[8] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[9] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[10] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[11] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[12]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[13] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[14] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[15] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[16] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[17]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[18] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[19] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[20] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[21] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[22]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[23] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[24] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[25] {", "    let index = string.firstIndex(of: substring)\n\
    \    return index != nil ? string.distance(from: string.startIndex, to: index!)\
    \ : string.characters.count - string.characters.index(before: string.endIndex,\
    \ offsetBy: substring.characters.count)", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var\
    \ k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        \
    \    if k == substring.count {\n                k = 0\n            }\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for s in string.split(substring) {\n        if s == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    count_overlapping_cases(string, substring)', "    var count = 0\n    for c in\
    \ string.unicodeScalars {\n        if c == substring {\n            count += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.startIndex\n    while i < string.endIndex\
    \ && j < string.endIndex {\n        if string[j] != substring[i] {\n         \
    \   count = count + 1\n        }\n        i += 1\n        j += 1\n    }\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ -= 1\n        }\n        i += 1\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    var end = string.count\n\n    while start < end {\n\
    \        let index = string.index(start, offsetBy: substring.count)\n        if\
    \ index == nil {\n            break\n        }\n        start = index!\n     \
    \   count += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var i =\
    \ 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += 1\n            while i < j && string[i] == substring[1]\
    \ {\n                count += 1\n                i += 1\n            }\n     \
    \   } else {\n            i = 0\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for s in string.split(substring) {\n        if string.range(of:\
    \ s) != nil {\n            count += 1\n        }\n    }\n    return count", '    return
    string.countSubstrings(substring)']
stop_tokens:
- "\n}"
