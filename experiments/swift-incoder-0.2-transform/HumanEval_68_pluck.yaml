name: HumanEval_68_pluck
language: swift
prompt: "\n/// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
  \ The plucked node should be the node with the smallest even value.\n/// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n/// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n/// If there are no even values or the given array is empty, return\
  \ [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n\
  /// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as\
  \ [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n\
  /// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  /// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n\
  /// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
  \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
  \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
  assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) ==\
  \ [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
completions: ["    var result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex:\
    \ Int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < smallest {\n\
    \            smallest = arr[i]\n            smallestIndex = i\n        }\n   \
    \ }\n    if smallest != 0 {\n        result = append(result, smallest)\n     \
    \   result = append(result, smallestIndex)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result", "    var result = [Int]()\n\
    \    var minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result", "    var result: [Int] = []\n    var smallest: Int = 0\n\
    \    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index] < smallest\
    \ {\n                smallest = arr[index]\n                smallestIndex = index\n\
    \            }\n        }\n    }\n    if smallest != 0 {\n        result = [smallest,\
    \ smallestIndex]\n    }\n    return result", "    \n    var result = [Int]()\n\
    \    var minIndex = 0\n    \n    for node in arr {\n        if node.value % 2\
    \ == 0 {\n            if result.count > 0 {\n                if result[0] < node.value\
    \ {\n                    minIndex = result.count\n                } else {\n \
    \                   minIndex = 0\n                }\n            }\n         \
    \   result.append(node.value)\n        } else {\n            if result.count >\
    \ 0 {\n                if result[0] < node.value {\n                    minIndex\
    \ = result.count\n                } else {\n                    minIndex = 0\n\
    \                }\n            }\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return result\n    }\n    \n    if result.count > 0 {\n    \
    \    if result[0] < arr[minIndex].value {\n            minIndex = 0\n        }\n\
    \    }\n    \n    if minIndex == result.count {\n        return result\n    }\n\
    \    \n    if minIndex == 0 {\n        return [arr[minIndex].value]\n    }\n \
    \   \n    if minIndex == 1 {\n        return [arr[minIndex].value, arr[minIndex-1].value]\n\
    \    }\n    \n    return [arr[minIndex].value, arr[minIndex-1].value, arr[minIndex-2].value,\
    \ arr[minIndex-3].value, arr[minIndex-4].value]", "    var result = [Int]()\n\
    \    var minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result", "    if arr.isEmpty() {\n        return []\n    }\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n \
    \               minIndex = index\n            } else {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    return [minValue, minIndex]", "    var result = [Int]()\n    var smallestEven\
    \ = arr[0]\n    var smallestIndex = 0\n    for i := 1; i < arr.count; i++ {\n\
    \        if arr[i] < smallestEven {\n            smallestEven = arr[i]\n     \
    \       smallestIndex = i\n        }\n    }\n    result.append(smallestEven)\n\
    \    result.append(smallestIndex)\n    return result", "    \n    // write your\
    \ code here\n    \n    return arr", "    var result = [Int]()\n    var minIndex\
    \ = -1\n    var minValue = arr[0]\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    if minIndex == -1 {\n        return result\n    }\n\
    \    result.append(minValue)\n    result.append(minIndex)\n    return result",
  "    if arr.isEmpty {\n        return []\n    }\n    var minIndex = -1\n    var\
    \ minValue = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <\
    \ minValue {\n            minValue = arr[i]\n            minIndex = i\n      \
    \  }\n    }\n    return [minValue, minIndex]", "    var result = [Int]()\n   \
    \ var minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result", "    \n    var minIndex = 0\n    var minValue = arr[0]\n\
    \    \n    for index in 1..<arr.count {\n        if arr[index] < minValue {\n\
    \            minValue = arr[index]\n            minIndex = index\n        }\n\
    \    }\n    \n    return [minValue, minIndex]", "    var result = [Int]()\n  \
    \  var minValue = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n     \
    \       minIndex = i\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result", "    var result: [Int] = []\n    var minIndex = 0\n    var\
    \ minValue = arr[0]\n    for value in arr {\n        if value % 2 == 0 {\n   \
    \         if value < minValue {\n                minValue = value\n          \
    \      minIndex = result.count\n            }\n            result[minIndex] =\
    \ value\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var smallestEvenValue: Int = 0\n    var smallestIndex: Int = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if smallestEvenValue\
    \ == 0 || arr[index] < smallestEvenValue {\n                smallestEvenValue\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallestEvenValue == 0 {\n        return result\n    }\n  \
    \  result.append(smallestEvenValue)\n    result.append(smallestIndex)\n    return\
    \ result", "    var result = [Int]()\n    var index = 0\n    var minValue = arr[0]\n\
    \    for value in arr {\n        if value % 2 == 0 {\n            if value < minValue\
    \ {\n                minValue = value\n                index = index + 1\n   \
    \         }\n        } else {\n            if value == minValue {\n          \
    \      index = index + 1\n            }\n        }\n    }\n    if index == 0 {\n\
    \        return arr\n    }\n    result.append(minValue)\n    result.append(index)\n\
    \    return result", "    var result: [Int] = []\n    var smallest: Int = 0\n\
    \    var smallestIndex: Int = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] % 2 == 0 {\n            if smallest == 0 || arr[index] < smallest\
    \ {\n                smallest = arr[index]\n                smallestIndex = index\n\
    \            }\n        }\n    }\n    result = [smallest, smallestIndex]\n   \
    \ return result", "    var result = [Int]()\n    var minIndex = -1\n    var minValue\
    \ = arr[0]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < minValue\
    \ {\n            minValue = arr[i]\n            minIndex = i\n        }\n    }\n\
    \    if minIndex == -1 {\n        return result\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] == minValue {\n            result.insert(i, minIndex)\n\
    \        }\n    }\n    return result", "    \n    var minIndex = 0\n    var minValue\
    \ = arr[0]\n    \n    for index in 1..<arr.count {\n        if arr[index] < minValue\
    \ {\n            minValue = arr[index]\n            minIndex = index\n       \
    \ }\n    }\n    \n    return [minValue, minIndex]"]
stop_tokens:
- "\n}"
