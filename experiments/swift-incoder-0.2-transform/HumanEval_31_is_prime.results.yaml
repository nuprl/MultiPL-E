language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmppr4590fx/tmppr4590fx.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5064672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5064369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5064369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50643687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr4590fx                        0x000055c13cbac77d <unavailable> + 6013

    5    libc.so.6                          0x00002b506485e460 __libc_start_main +
    245

    6    tmppr4590fx                        0x000055c13cbabef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var m = n - 1\n\
    \    while i <= m {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if j > n / 2 {\n            return false\n        }\n        if\
    \ j == n / 2 {\n            if k <= n / 2 {\n                return false\n  \
    \          }\n        }\n        i += 2\n        j += 2\n        k++\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7oydzjdo.swift:45:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        k++\n         ^~\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if j > n / 2 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe3uxlvjf/tmpe3uxlvjf.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55660ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5565de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5565de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5565de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uxlvjf                        0x000056458cd8c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b55662d8460 __libc_start_main +
    245

    6    tmpe3uxlvjf                        0x000056458cd8bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let limit = (sqrt(Double(n)) / Double(2)).rounded(.up)\n\
    \    for i in 1..<limit {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33us4ty2.swift:33:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n)) / Double(2)).rounded(.up)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var prime: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int =\
    \ 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppmg5hikt.swift:38:9: error: invalid redeclaration of 't'\n    var\
    \ t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:33:9: note: 't' previously declared\
    \ here\n    var t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:53:9: error: invalid\
    \ redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:28:9:\
    \ note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:54:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:29:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:55:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:30:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:57:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:31:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:58:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:32:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:60:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:34:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:61:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:35:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:62:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:36:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:63:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:37:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:64:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:33:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n "
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: optimize this function\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if i == 3 {\n            if n %\
    \ i == 0 {\n                return false\n            }\n        }\n        i\
    \ += s\n        s *= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pxvz8o7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_pxvz8o7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_pxvz8o7.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp_pxvz8o7.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        s += 2\n        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpt7gbt8p_/tmpt7gbt8p_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c20301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c1fff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c1fff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c1fff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7gbt8p_                        0x000055eecba2d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1c204ed460 __libc_start_main +
    245

    6    tmpt7gbt8p_                        0x000055eecba2cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % 3 == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6re8sd1g/tmp6re8sd1g.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ae7afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ae4a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82ae4a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82ae4a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6re8sd1g                        0x000055d84b5d12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b82ae99b460 __libc_start_main +
    245

    6    tmp6re8sd1g                        0x000055d84b5d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let mut i = 5\n    let mut s = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        if i == 3 {\n            if n % i == 0 {\n                return\
    \ false\n            }\n        }\n        i += s\n        s += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnm72itt_.swift:33:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 5\n\
    \            ^\n/tmp/tmpnm72itt_.swift:33:13: note: join the identifiers together\n\
    \    let mut i = 5\n        ~~~~^\n        muti\n/tmp/tmpnm72itt_.swift:33:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 5\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpnm72itt_.swift:34:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut s = 2\n            ^\n/tmp/tmpnm72itt_.swift:34:13: note: join the\
    \ identifiers together\n    let mut s = 2\n        ~~~~^\n        muts\n/tmp/tmpnm72itt_.swift:34:13:\
    \ note: join the identifiers together with camel-case\n    let mut s = 2\n   \
    \     ~~~~^\n        mutS\n/tmp/tmpnm72itt_.swift:34:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut s = 2\n        ^\n/tmp/tmpnm72itt_.swift:33:9: note: 'mut'\
    \ previously declared here\n    let mut i = 5\n        ^\n/tmp/tmpnm72itt_.swift:35:11:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpnm72itt_.swift:35:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpnm72itt_.swift:35:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpnm72itt_.swift:36:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpnm72itt_.swift:39:12:\
    \ error: cannot find 'i' in scope\n        if i == 3 {\n           ^\n/tmp/tmpnm72itt_.swift:40:20:\
    \ error: cannot find 'i' in scope\n            if n % i == 0 {\n             \
    \      ^\n/tmp/tmpnm72itt_.swift:44:9: error: cannot find 'i' in scope\n     \
    \   i += s\n        ^\n/tmp/tmpnm72itt_.swift:44:14: error: cannot find 's' in\
    \ scope\n        i += s\n             ^\n/tmp/tmpnm72itt_.swift:45:9: error: cannot\
    \ find 's' in scope\n        s += 2\n        ^\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    for i := 5; i * i <= n; i += 6 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkon5hmzr.swift:33:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmpkon5hmzr.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmpkon5hmzr.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    var m = true\n    while m {\n     \
    \   if k % 2 == 0 {\n            if i == n {\n                return true\n  \
    \          }\n            i += 2\n        }\n        k /= 2\n        if k == 1\
    \ {\n            j = j + 2\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824527
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Optimize this function\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var\
    \ m = 2\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 2\n    }\n    while j <= n {\n        if n % j == 0 {\n\
    \            return false\n        }\n        j += 2\n    }\n    while k <= n\
    \ {\n        if n % k == 0 {\n            return false\n        }\n        k +=\
    \ 2\n    }\n    while m <= n {\n        if n % m == 0 {\n            return false\n\
    \        }\n        m += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3nvjkzby/tmp3nvjkzby.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd5c55fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd5c256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd5c256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd5c2557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nvjkzby                        0x00005576de2a42b7 <unavailable> + 4791

    5    libc.so.6                          0x00002abd5c74b460 __libc_start_main +
    245

    6    tmp3nvjkzby                        0x00005576de2a3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int = 0\n   \
    \ while i * i <= n {\n        if n % i == 0 {\n            return false\n    \
    \    }\n        s += i\n        i += 6\n    }\n    return s == n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp0od3g3rw/tmp0od3g3rw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b1bd10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b1ba07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b1ba07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b1ba067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0od3g3rw                        0x0000560c2f6fb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3b1befc460 __libc_start_main +
    245

    6    tmp0od3g3rw                        0x0000560c2f6faef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = n - 1\n\n \
    \   while i <= k {\n        if n % i == 0 {\n            return false\n      \
    \  }\n\n        i += j\n        j += 2\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphp3licf6/tmphp3licf6.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85e231fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85e2016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85e2016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85e20157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3licf6                        0x00005567c4dca77d <unavailable> + 6013

    5    libc.so.6                          0x00002b85e250b460 __libc_start_main +
    245

    6    tmphp3licf6                        0x00005567c4dc9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += j\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptn0gb_uo/tmptn0gb_uo.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87be76dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87be464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87be464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87be4637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn0gb_uo                        0x000055ea2532777d <unavailable> + 6013

    5    libc.so.6                          0x00002b87be959460 __libc_start_main +
    245

    6    tmptn0gb_uo                        0x000055ea25326ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n        k /= i\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp81x6cytg/tmp81x6cytg.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc7348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc703fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc703f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc703e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81x6cytg                        0x000055833f89139f <unavailable> + 5023

    5    libc.so.6                          0x00002b1dc7534460 __libc_start_main +
    245

    6    tmp81x6cytg                        0x000055833f890ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if i % j == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
