language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmppr4590fx/tmppr4590fx.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5064672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5064369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5064369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50643687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr4590fx                        0x000055c13cbac77d <unavailable> + 6013

    5    libc.so.6                          0x00002b506485e460 __libc_start_main +
    245

    6    tmppr4590fx                        0x000055c13cbabef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var m = n - 1\n\
    \    while i <= m {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if j > n / 2 {\n            return false\n        }\n        if\
    \ j == n / 2 {\n            if k <= n / 2 {\n                return false\n  \
    \          }\n        }\n        i += 2\n        j += 2\n        k++\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7oydzjdo.swift:45:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        k++\n         ^~\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if k % j ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824417
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if j > n / 2 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe3uxlvjf/tmpe3uxlvjf.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55660ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5565de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5565de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5565de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uxlvjf                        0x000056458cd8c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b55662d8460 __libc_start_main +
    245

    6    tmpe3uxlvjf                        0x000056458cd8bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let limit = (sqrt(Double(n)) / Double(2)).rounded(.up)\n\
    \    for i in 1..<limit {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33us4ty2.swift:33:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n)) / Double(2)).rounded(.up)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var prime: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var t: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var\
    \ u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n   \
    \ var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n\
    \    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int =\
    \ 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppmg5hikt.swift:38:9: error: invalid redeclaration of 't'\n    var\
    \ t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:33:9: note: 't' previously declared\
    \ here\n    var t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:53:9: error: invalid\
    \ redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:28:9:\
    \ note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:54:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:29:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:55:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:30:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:57:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:31:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:58:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:32:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:60:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:34:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:61:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:35:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:62:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:36:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:63:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:37:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:64:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmppmg5hikt.swift:33:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n "
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: optimize this function\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if i == 3 {\n            if n %\
    \ i == 0 {\n                return false\n            }\n        }\n        i\
    \ += s\n        s *= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pxvz8o7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_pxvz8o7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_pxvz8o7.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp_pxvz8o7.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        s += 2\n        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpt7gbt8p_/tmpt7gbt8p_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c20301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c1fff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c1fff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c1fff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7gbt8p_                        0x000055eecba2d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1c204ed460 __libc_start_main +
    245

    6    tmpt7gbt8p_                        0x000055eecba2cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % 3 == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6re8sd1g/tmp6re8sd1g.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ae7afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ae4a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82ae4a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82ae4a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6re8sd1g                        0x000055d84b5d12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b82ae99b460 __libc_start_main +
    245

    6    tmp6re8sd1g                        0x000055d84b5d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824417
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let mut i = 5\n    let mut s = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        if i == 3 {\n            if n % i == 0 {\n                return\
    \ false\n            }\n        }\n        i += s\n        s += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnm72itt_.swift:33:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 5\n\
    \            ^\n/tmp/tmpnm72itt_.swift:33:13: note: join the identifiers together\n\
    \    let mut i = 5\n        ~~~~^\n        muti\n/tmp/tmpnm72itt_.swift:33:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 5\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpnm72itt_.swift:34:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut s = 2\n            ^\n/tmp/tmpnm72itt_.swift:34:13: note: join the\
    \ identifiers together\n    let mut s = 2\n        ~~~~^\n        muts\n/tmp/tmpnm72itt_.swift:34:13:\
    \ note: join the identifiers together with camel-case\n    let mut s = 2\n   \
    \     ~~~~^\n        mutS\n/tmp/tmpnm72itt_.swift:34:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut s = 2\n        ^\n/tmp/tmpnm72itt_.swift:33:9: note: 'mut'\
    \ previously declared here\n    let mut i = 5\n        ^\n/tmp/tmpnm72itt_.swift:35:11:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpnm72itt_.swift:35:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpnm72itt_.swift:35:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpnm72itt_.swift:36:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpnm72itt_.swift:39:12:\
    \ error: cannot find 'i' in scope\n        if i == 3 {\n           ^\n/tmp/tmpnm72itt_.swift:40:20:\
    \ error: cannot find 'i' in scope\n            if n % i == 0 {\n             \
    \      ^\n/tmp/tmpnm72itt_.swift:44:9: error: cannot find 'i' in scope\n     \
    \   i += s\n        ^\n/tmp/tmpnm72itt_.swift:44:14: error: cannot find 's' in\
    \ scope\n        i += s\n             ^\n/tmp/tmpnm72itt_.swift:45:9: error: cannot\
    \ find 's' in scope\n        s += 2\n        ^\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    for i := 5; i * i <= n; i += 6 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkon5hmzr.swift:33:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmpkon5hmzr.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmpkon5hmzr.swift:33:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659824522
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    var m = true\n    while m {\n     \
    \   if k % 2 == 0 {\n            if i == n {\n                return true\n  \
    \          }\n            i += 2\n        }\n        k /= 2\n        if k == 1\
    \ {\n            j = j + 2\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824527
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Optimize this function\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n   \
    \     return false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var\
    \ m = 2\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 2\n    }\n    while j <= n {\n        if n % j == 0 {\n\
    \            return false\n        }\n        j += 2\n    }\n    while k <= n\
    \ {\n        if n % k == 0 {\n            return false\n        }\n        k +=\
    \ 2\n    }\n    while m <= n {\n        if n % m == 0 {\n            return false\n\
    \        }\n        m += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3nvjkzby/tmp3nvjkzby.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd5c55fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd5c256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd5c256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd5c2557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nvjkzby                        0x00005576de2a42b7 <unavailable> + 4791

    5    libc.so.6                          0x00002abd5c74b460 __libc_start_main +
    245

    6    tmp3nvjkzby                        0x00005576de2a3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int = 0\n   \
    \ while i * i <= n {\n        if n % i == 0 {\n            return false\n    \
    \    }\n        s += i\n        i += 6\n    }\n    return s == n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp0od3g3rw/tmp0od3g3rw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b1bd10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b1ba07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b1ba07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b1ba067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0od3g3rw                        0x0000560c2f6fb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3b1befc460 __libc_start_main +
    245

    6    tmp0od3g3rw                        0x0000560c2f6faef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = n - 1\n\n \
    \   while i <= k {\n        if n % i == 0 {\n            return false\n      \
    \  }\n\n        i += j\n        j += 2\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphp3licf6/tmphp3licf6.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85e231fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85e2016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85e2016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85e20157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3licf6                        0x00005567c4dca77d <unavailable> + 6013

    5    libc.so.6                          0x00002b85e250b460 __libc_start_main +
    245

    6    tmphp3licf6                        0x00005567c4dc9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += j\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptn0gb_uo/tmptn0gb_uo.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87be76dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87be464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87be464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87be4637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn0gb_uo                        0x000055ea2532777d <unavailable> + 6013

    5    libc.so.6                          0x00002b87be959460 __libc_start_main +
    245

    6    tmptn0gb_uo                        0x000055ea25326ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n        k /= i\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp81x6cytg/tmp81x6cytg.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc7348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc703fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc703f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc703e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81x6cytg                        0x000055833f89139f <unavailable> + 5023

    5    libc.so.6                          0x00002b1dc7534460 __libc_start_main +
    245

    6    tmp81x6cytg                        0x000055833f890ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if i % j == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp0wgy9prh/tmp0wgy9prh.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16c3363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16c305ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16c305a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16c30597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wgy9prh                        0x000055d11b3346fb <unavailable> + 5883

    5    libc.so.6                          0x00002b16c354f460 __libc_start_main +
    245

    6    tmp0wgy9prh                        0x000055d11b333ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpudyvbtd6/tmpudyvbtd6.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d85165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d84e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d84e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d84e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudyvbtd6                        0x000055f78840c2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b0d85351460 __libc_start_main +
    245

    6    tmpudyvbtd6                        0x000055f78840bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = n - 1\n\n \
    \   while i <= k {\n        if n % i == 0 {\n            return false\n      \
    \  }\n\n        i += j\n        j += 2\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphp3licf6/tmphp3licf6.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85e231fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85e2016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85e2016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85e20157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3licf6                        0x00005567c4dca77d <unavailable> + 6013

    5    libc.so.6                          0x00002b85e250b460 __libc_start_main +
    245

    6    tmphp3licf6                        0x00005567c4dc9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if i == n {\n            return true\n        }\n\
    \        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmplmzrvkjq/tmplmzrvkjq.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fbe947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbe63eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbe63e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbe63d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmzrvkjq                        0x00005600d3e082b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2fbeb33460 __libc_start_main +
    245

    6    tmplmzrvkjq                        0x00005600d3e07ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp4wg_g056/tmp4wg_g056.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27536f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27533ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27533eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27533ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wg_g056                        0x000055feeb8032b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b27538e0460 __libc_start_main +
    245

    6    tmp4wg_g056                        0x000055feeb802ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpsr0b0y5_/tmpsr0b0y5_.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cb2821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cb2518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cb2518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cb25177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr0b0y5_                        0x0000561049a996fb <unavailable> + 5883

    5    libc.so.6                          0x00002b3cb2a0d460 __libc_start_main +
    245

    6    tmpsr0b0y5_                        0x0000561049a98ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzztjcpq_.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmpzztjcpq_.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = 2\n    while i * j <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     if k % 3 == 0 {\n            return false\n        }\n        i = i + 2\n\
    \        j = j + 2\n        k = k + 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpy267kxpo/tmpy267kxpo.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b065a081c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0659d78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0659d78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0659d777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy267kxpo                        0x00005561ec5352b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b065a26d460 __libc_start_main +
    245

    6    tmpy267kxpo                        0x00005561ec534ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: replace with faster prime number\
    \ check\n    if n < 2 {\n        return false\n    }\n\n    var i = 2\n    var\
    \ prime = true\n    while i < n {\n        if n % i == 0 {\n            prime\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        while j <= n {\n  \
    \          if n % j == 0 {\n                return false\n            }\n    \
    \        j += 1\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3qxhfdag/tmp3qxhfdag.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff29aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff2979db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff2979d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff2979c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qxhfdag                        0x000055905cdea2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aff29c92460 __libc_start_main +
    245

    6    tmp3qxhfdag                        0x000055905cde9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += 2\n     \
    \   i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpxw67_iu8/tmpxw67_iu8.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea79245c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea78f3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea78f3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea78f3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw67_iu8                        0x000056305573377d <unavailable> + 6013

    5    libc.so.6                          0x00002aea79431460 __libc_start_main +
    245

    6    tmpxw67_iu8                        0x0000563055732ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n <= 31 && n > 1 {\n        return true\n\
    \    }\n    if n > 40 {\n        return false\n    }\n    if n <= 41 && n > 1\
    \ {\n        return true\n    }\n    if n <= 61 && n > 1 {\n        return true\n\
    \    }\n    if n <= 61 && n > 2 {\n        return true\n    }\n    if n <= 121\
    \ && n > 2 {\n        return true\n    }\n    if n <= 121 && n > 3 {\n       \
    \ return true\n    }\n    if n <= 171 && n > 3 {\n        return true\n    }\n\
    \    if n <= 171 && n > 4 {\n        return true\n    }\n    if n <= 191 && n\
    \ > 4 {\n        return true\n    }\n    if n <= 191 && n > 5 {\n        return\
    \ true\n    }\n    if n <= 191 && n > 6 {\n        return true\n    }\n    if\
    \ n <= 191 && n > 7 {\n        return true\n    }\n    if n <= 191 && n > 8 {\n\
    \        return true\n    }\n    if n <= 191 && n > 9 {\n        return true\n\
    \    }\n    if n <= 191 && n > 10 {\n        return true\n    }\n    if n <= 191\
    \ && n > 11 {\n        return true\n    }\n    if n <= 191 && n > 12 {\n     \
    \   return true\n    }\n    if n <= 191 && n > 13 {\n        return true\n   \
    \ }\n    if n <= 191 && n > 14 {\n        return true\n    }\n    if n <= 191\
    \ && n > 15 {\n        return true\n    }\n    if n <= 191 && n > 16 {\n     \
    \   return true\n    }\n    if n <= 191 && n > 17 {\n        return true\n   \
    \ }\n    if n <= 191 && n > 18 {\n        return true\n    }\n    if n <= 191\
    \ && n > 19 {\n        return true\n    }\n    if n <= 191 && n > 20 {\n     \
    \   return true\n    }\n    if n <= 191 && n > 21 {\n        return true\n   \
    \ }\n    if n <= 191 && n > 22 {\n        return true\n    }\n    if n <= 191\
    \ && n > 23 {\n        return true\n    }\n    if n <= 191 && n > 24 {\n     \
    \   return true\n    }\n    if n <= 191 && n > 25 {\n        return true\n   \
    \ }\n    if n <= 191 && n > 26 {\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpupy1501v.swift:138:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pxvz8o7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_pxvz8o7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_pxvz8o7.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp_pxvz8o7.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824419
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8x0r6qty.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp8x0r6qty.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp8x0r6qty.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n <= 3 {\n        return true\n    }\n    if n > 7 {\n        return\
    \ false\n    }\n    if n <= 11 {\n        return true\n    }\n    if n <= 13441\
    \ {\n        return true\n    }\n    if n <= 61 {\n        return true\n    }\n\
    \    if n <= 4 {\n        return false\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpoolkivtn/tmpoolkivtn.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3f95c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3f92bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3f92bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3f92bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoolkivtn                        0x000055fb9fdbe2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac3f97b2460 __libc_start_main +
    245

    6    tmpoolkivtn                        0x000055fb9fdbdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n <= 63 {\n \
    \       return true\n    }\n    if n > 63 {\n        return false\n    }\n   \
    \ let mut i = 6\n    let mut j = 3\n    let mut k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j %\
    \ i == 0 {\n            return false\n        }\n        if k % i == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k -=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppiv9ure6.swift:45:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 6\n\
    \            ^\n/tmp/tmppiv9ure6.swift:45:13: note: join the identifiers together\n\
    \    let mut i = 6\n        ~~~~^\n        muti\n/tmp/tmppiv9ure6.swift:45:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 6\n   \
    \     ~~~~^\n        mutI\n/tmp/tmppiv9ure6.swift:46:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut j = 3\n            ^\n/tmp/tmppiv9ure6.swift:46:13: note: join the\
    \ identifiers together\n    let mut j = 3\n        ~~~~^\n        mutj\n/tmp/tmppiv9ure6.swift:46:13:\
    \ note: join the identifiers together with camel-case\n    let mut j = 3\n   \
    \     ~~~~^\n        mutJ\n/tmp/tmppiv9ure6.swift:47:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut k = n - 1\n            ^\n/tmp/tmppiv9ure6.swift:47:13: note: join\
    \ the identifiers together\n    let mut k = n - 1\n        ~~~~^\n        mutk\n\
    /tmp/tmppiv9ure6.swift:47:13: note: join the identifiers together with camel-case\n\
    \    let mut k = n - 1\n        ~~~~^\n        mutK\n/tmp/tmppiv9ure6.swift:46:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut j = 3\n        ^\n/tmp/tmppiv9ure6.swift:45:9:\
    \ note: 'mut' previously declared here\n    let mut i = 6\n        ^\n/tmp/tmppiv9ure6.swift:47:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut k = n - 1\n        ^\n/tmp/tmppiv9ure6.swift:45:9:\
    \ note: 'mut' previously declared here\n    let mut i = 6\n        ^\n/tmp/tmppiv9ure6.swift:48:11:\
    \ error: cannot find 'i' in scope\n    while i <= k {\n          ^\n/tmp/tmppiv9ure6.swift:48:16:\
    \ error: cannot find 'k' in scope\n    while i <= k {\n               ^\n/tmp/tmppiv9ure6.swift:49:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmppiv9ure6.swift:52:12: error: cannot find 'j' in scope\n        if j %\
    \ i == 0 {\n           ^\n/tmp/tmppiv9ure6.swift:52:16: error: cannot find 'i'\
    \ in scope"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Make this faster\n    if n < 2 {\n\
    \        return false\n    }\n    if n == 2 {\n        return true\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += s\n        s += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5g11hmw2/tmp5g11hmw2.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26b7cf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26b79edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26b79ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26b79ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5g11hmw2                        0x00005586227c480a <unavailable> + 6154

    5    libc.so.6                          0x00002b26b7ee2460 __libc_start_main +
    245

    6    tmp5g11hmw2                        0x00005586227c3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfo2oc5_l/tmpfo2oc5_l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c4324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c401bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c401b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c401a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfo2oc5_l                        0x00005619d1ab180a <unavailable> + 6154

    5    libc.so.6                          0x00002ab5c4510460 __libc_start_main +
    245

    6    tmpfo2oc5_l                        0x00005619d1ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    var m = 2\n \
    \   while i <= n {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        if m > i {\n            m += i\n        }\n        i += k\n    \
    \    j += k\n        k *= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp2ixrf40y/tmp2ixrf40y.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6d2ba0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6d2897b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6d2897988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6d28967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ixrf40y                        0x0000556cd252532b <unavailable> + 4907

    5    libc.so.6                          0x00002ae6d2d8c460 __libc_start_main +
    245

    6    tmp2ixrf40y                        0x0000556cd2524ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfo2oc5_l/tmpfo2oc5_l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c4324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c401bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c401b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c401a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfo2oc5_l                        0x00005619d1ab180a <unavailable> + 6154

    5    libc.so.6                          0x00002ab5c4510460 __libc_start_main +
    245

    6    tmpfo2oc5_l                        0x00005619d1ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        s += 2\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1utwerlz/tmp1utwerlz.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b869ce04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b869cafbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b869cafb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b869cafa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1utwerlz                        0x00005584cc58b77d <unavailable> + 6013

    5    libc.so.6                          0x00002b869cff0460 __libc_start_main +
    245

    6    tmp1utwerlz                        0x00005584cc58aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8x0r6qty.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp8x0r6qty.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp8x0r6qty.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 2\n    var k = 3\n    var m = 2\n \
    \   while i <= n {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        if i == m {\n            return true\n        }\n        i += k\n\
    \        j += k\n        k += 2\n        m += 2\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpxf2hdhcu/tmpxf2hdhcu.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5d52e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5d4fdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5d4fdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5d4fda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxf2hdhcu                        0x0000556fc716f6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ba5d54d0460 __libc_start_main +
    245

    6    tmpxf2hdhcu                        0x0000556fc716eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if i == 3 {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += s\n        s *= 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    var m = 2\n\
    \    while i <= k {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if m == n {\n            return true\n        }\n        if n %\
    \ m == 0 {\n            return false\n        }\n        i += 2\n        m +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpkscccw2x/tmpkscccw2x.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea19eb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea19bb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea19bb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea19baf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkscccw2x                        0x0000557ad0f2c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002aea1a0a5460 __libc_start_main +
    245

    6    tmpkscccw2x                        0x0000557ad0f2bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int = 0\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            return false\n        }\n        s += i\n\
    \        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpfnk49i_y/tmpfnk49i_y.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab1c63cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab1c333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab1c333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab1c3327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnk49i_y                        0x000055d3708242b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aab1c828460 __libc_start_main +
    245

    6    tmpfnk49i_y                        0x000055d370823ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 5 {\n        return true\n    }\n   \
    \ if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_t014rbb.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_t014rbb.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_t014rbb.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if i == k {\n            return\
    \ true\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgpxpqz7x/tmpgpxpqz7x.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f897c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f894bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f894bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f894bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpxpqz7x                        0x000055a6d148977d <unavailable> + 6013

    5    libc.so.6                          0x00002b3f899b2460 __libc_start_main +
    245

    6    tmpgpxpqz7x                        0x000055a6d1488ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    var i = 2\n    var j = 2\n\
    \    var k = 2\n\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n\n        if j > n / i {\n            break\n        }\n\n\
    \        i += k\n        j += k\n        k += k\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzuh2c7j_/tmpzuh2c7j_.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e29c5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e29954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e29954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e299537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuh2c7j_                        0x000056207c11e6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b2e29e49460 __libc_start_main +
    245

    6    tmpzuh2c7j_                        0x000056207c11def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let mut i = 5\n    let mut s = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynslddgw.swift:33:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 5\n\
    \            ^\n/tmp/tmpynslddgw.swift:33:13: note: join the identifiers together\n\
    \    let mut i = 5\n        ~~~~^\n        muti\n/tmp/tmpynslddgw.swift:33:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 5\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpynslddgw.swift:34:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut s = 2\n            ^\n/tmp/tmpynslddgw.swift:34:13: note: join the\
    \ identifiers together\n    let mut s = 2\n        ~~~~^\n        muts\n/tmp/tmpynslddgw.swift:34:13:\
    \ note: join the identifiers together with camel-case\n    let mut s = 2\n   \
    \     ~~~~^\n        mutS\n/tmp/tmpynslddgw.swift:34:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut s = 2\n        ^\n/tmp/tmpynslddgw.swift:33:9: note: 'mut'\
    \ previously declared here\n    let mut i = 5\n        ^\n/tmp/tmpynslddgw.swift:35:11:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpynslddgw.swift:35:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpynslddgw.swift:35:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpynslddgw.swift:36:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpynslddgw.swift:39:9:\
    \ error: cannot find 'i' in scope\n        i += s\n        ^\n/tmp/tmpynslddgw.swift:39:14:\
    \ error: cannot find 's' in scope\n        i += s\n             ^\n/tmp/tmpynslddgw.swift:40:9:\
    \ error: cannot find 's' in scope\n        s += 2\n        ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpu2hth0aq/tmpu2hth0aq.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae316a98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31678fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae31678f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae31678e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2hth0aq                        0x0000559a0f8556fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae316c84460 __libc_start_main +
    245

    6    tmpu2hth0aq                        0x0000559a0f854ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += s\n        s += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpki4z1p41/tmpki4z1p41.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df4e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df4b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df4b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df4b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpki4z1p41                        0x0000555a842f080a <unavailable> + 6154

    5    libc.so.6                          0x00002b1df5066460 __libc_start_main +
    245

    6    tmpki4z1p41                        0x0000555a842efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += j\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp01ti3wd4/tmp01ti3wd4.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e9453ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e94235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e94235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e942347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01ti3wd4                        0x0000558d151a22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2e9472a460 __libc_start_main +
    245

    6    tmp01ti3wd4                        0x0000558d151a1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ i == j {\n            return true\n        }\n        i += 2\n        j += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe5rjdj2a/tmpe5rjdj2a.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e6c313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e6c00ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e6c00a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e6c0097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5rjdj2a                        0x00005613e0dd56fb <unavailable> + 5883

    5    libc.so.6                          0x00002b0e6c4ff460 __libc_start_main +
    245

    6    tmpe5rjdj2a                        0x00005613e0dd4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp4wg_g056/tmp4wg_g056.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27536f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27533ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27533eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27533ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wg_g056                        0x000055feeb8032b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b27538e0460 __libc_start_main +
    245

    6    tmp4wg_g056                        0x000055feeb802ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfo2oc5_l/tmpfo2oc5_l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c4324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c401bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c401b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c401a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfo2oc5_l                        0x00005619d1ab180a <unavailable> + 6154

    5    libc.so.6                          0x00002ab5c4510460 __libc_start_main +
    245

    6    tmpfo2oc5_l                        0x00005619d1ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j = k + 2\n\
    \        while j <= i {\n            if n % j == 0 {\n                return false\n\
    \            }\n            j += 2\n        }\n        k -= 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptdwb4d0_/tmptdwb4d0_.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bf05cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bf02c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bf02c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bf02c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdwb4d0_                        0x000055a2c4bba6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b0bf07ba460 __libc_start_main +
    245

    6    tmptdwb4d0_                        0x000055a2c4bb9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = n - 1\n\n \
    \   while i <= k {\n        if n % i == 0 {\n            return false\n      \
    \  }\n\n        i += j\n        j += 2\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphp3licf6/tmphp3licf6.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85e231fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85e2016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85e2016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85e20157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3licf6                        0x00005567c4dca77d <unavailable> + 6013

    5    libc.so.6                          0x00002b85e250b460 __libc_start_main +
    245

    6    tmphp3licf6                        0x00005567c4dc9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        if k % i == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k -= 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphatokt_x/tmphatokt_x.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece38fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece35f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece35f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece35f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphatokt_x                        0x000055f3d43562b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aece3ae6460 __libc_start_main +
    245

    6    tmphatokt_x                        0x000055f3d4355ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpz4cb1ja_/tmpz4cb1ja_.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af211b69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af211860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af211860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af21185f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4cb1ja_                        0x00005579ed71b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002af211d55460 __libc_start_main +
    245

    6    tmpz4cb1ja_                        0x00005579ed71aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    var s = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpurmtdmwt/tmpurmtdmwt.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b668221bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6681f12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6681f12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6681f117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurmtdmwt                        0x000055fc76053579 <unavailable> + 5497

    5    libc.so.6                          0x00002b6682407460 __libc_start_main +
    245

    6    tmpurmtdmwt                        0x000055fc76052ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpu2hth0aq/tmpu2hth0aq.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae316a98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31678fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae31678f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae31678e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2hth0aq                        0x0000559a0f8556fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae316c84460 __libc_start_main +
    245

    6    tmpu2hth0aq                        0x0000559a0f854ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    var k = (n - 1) / 2\n    var m = true\n    while\
    \ m {\n        if j % 2 == 0 {\n            if i != j {\n                return\
    \ false\n            }\n            i += 2\n        }\n        if k % 2 == 0 {\n\
    \            if i != k {\n                return false\n            }\n      \
    \      i += 2\n        }\n        if k % 3 == 0 {\n            if i != k {\n \
    \               return false\n            }\n            i += 2\n        }\n \
    \       if j % 3 == 0 {\n            if i != j {\n                return false\n\
    \            }\n            i += 2\n        }\n        j = k\n        k = ((n\
    \ - 1) / 2) * 2\n        if j == n {\n            m = false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp5th48120/tmp5th48120.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b196be02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b196baf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b196baf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b196baf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5th48120                        0x0000562cd40112b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b196bfee460 __libc_start_main +
    245

    6    tmp5th48120                        0x0000562cd4010ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpu2hth0aq/tmpu2hth0aq.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae316a98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31678fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae31678f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae31678e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2hth0aq                        0x0000559a0f8556fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae316c84460 __libc_start_main +
    245

    6    tmpu2hth0aq                        0x0000559a0f854ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = 3\n\
    \    while i <= n {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if j > n / 2 {\n            return false\n        }\n        if\
    \ k <= i {\n            return false\n        }\n        if n % k == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp81u0q_8r/tmp81u0q_8r.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3722fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba371ff1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba371ff1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba371ff07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81u0q_8r                        0x00005605cd1ed2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba3724e6460 __libc_start_main +
    245

    6    tmp81u0q_8r                        0x00005605cd1ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpit5qaspg/tmpit5qaspg.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ac3671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ac3368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ac3368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ac33677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit5qaspg                        0x000055868a86c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9ac385d460 __libc_start_main +
    245

    6    tmpit5qaspg                        0x000055868a86bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 3\n    var m = 2\n \
    \   while i <= n {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        if m > i {\n            if k % i == 0 {\n                return\
    \ false\n            }\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n        m += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpu92rx3q_/tmpu92rx3q_.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4968867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496855eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496855e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496855d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu92rx3q_                        0x000055648827b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b4968a53460 __libc_start_main +
    245

    6    tmpu92rx3q_                        0x000055648827aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += j\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpstokc179/tmpstokc179.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f2fb2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f2f826b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f2f826988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f2f8257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstokc179                        0x000055abc34782b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9f2fd1b460 __libc_start_main +
    245

    6    tmpstokc179                        0x000055abc3477ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp5lxbi19t/tmp5lxbi19t.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b692cf66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b692cc5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b692cc5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b692cc5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lxbi19t                        0x00005654579346fb <unavailable> + 5883

    5    libc.so.6                          0x00002b692d152460 __libc_start_main +
    245

    6    tmp5lxbi19t                        0x0000565457933ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Use a sieve\n    if n < 2 {\n  \
    \      return false\n    }\n    if n == 2 {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        if j % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpwfihdk97/tmpwfihdk97.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c9c085c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c9bd7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c9bd7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c9bd7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfihdk97                        0x00005566b4a776fb <unavailable> + 5883

    5    libc.so.6                          0x00002b3c9c271460 __libc_start_main +
    245

    6    tmpwfihdk97                        0x00005566b4a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var s: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var m: Int = 0\n   \
    \ var t: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var w: Int = 0\n    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\
    \ = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c:\
    \ Int = 0\n    var d: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmps3u_qrc0.swift:44:9: error: invalid redeclaration of 'd'\n    var\
    \ d: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:29:9: note: 'd' previously declared\
    \ here\n    var d: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:45:9: error: invalid\
    \ redeclaration of 'e'\n    var e: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:30:9:\
    \ note: 'e' previously declared here\n    var e: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:49:9:\
    \ error: invalid redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:27:9:\
    \ note: 'i' previously declared here\n    var i = 2\n        ^\n/tmp/tmps3u_qrc0.swift:51:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:35:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:52:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:36:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:53:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:33:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:56:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:31:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:57:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:32:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:59:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:28:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:60:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:34:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:62:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int = 0\n        ^\n/tmp/tmps3u_qrc0.swift:40:9:\
    \ note: 'w' previously declared here\n    var w: Int = 0\n      "
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 3 == 0\
    \ {\n        return false\n    }\n    if n == 4 {\n        return true\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n == 9\
    \ {\n        return true\n    }\n    if n % 11 == 0 {\n        return false\n\
    \    }\n    if n == 12 {\n        return true\n    }\n    if n % 13 == 0 {\n \
    \       return false\n    }\n    if n == 14 {\n        return true\n    }\n  \
    \  if n % 15 == 0 {\n        return false\n    }\n    if n == 16 {\n        return\
    \ true\n    }\n    if n % 17 == 0 {\n        return false\n    }\n    if n ==\
    \ 18 {\n        return true\n    }\n    if n % 19 == 0 {\n        return false\n\
    \    }\n    if n == 20 {\n        return true\n    }\n    if n % 21 == 0 {\n \
    \       return false\n    }\n    if n == 22 {\n        return true\n    }\n  \
    \  if n % 23 == 0 {\n        return false\n    }\n    if n == 24 {\n        return\
    \ true\n    }\n    if n % 25 == 0 {\n        return false\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n % 27 == 0 {\n        return false\n\
    \    }\n    if n == 28 {\n        return true\n    }\n    if n % 29 == 0 {\n \
    \       return false\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n % 31 == 0 {\n        return false\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n % 33 == 0 {\n        return false\n    }\n    if n ==\
    \ 34 {\n        return true\n    }\n    if n % 35 == 0 {\n        return false\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n % 37 == 0 {\n \
    \       return false\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n % 39 == 0 {\n        return false\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n % 41 == 0 {\n        return false\n    }\n    if n ==\
    \ 42 {\n        return true\n    }\n    if n % 43 == 0 {\n        return false\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n % 45 == 0 {\n \
    \       return false\n    }\n    if n == 46 {\n        return true\n    }\n  \
    \  if n % 47 == 0 {\n        return false\n    }\n    if n == 48 {\n        return\
    \ true\n    }\n    if n % 49 == 0 {\n        return false\n    }\n    if n ==\
    \ 50 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2l0l30t_.swift:193:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp2l0l30t_.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp2l0l30t_.swift:169:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzztjcpq_.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmpzztjcpq_.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var s = 2\n    var t = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += s\n        s += t\n        t += s\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5idn9yly/tmp5idn9yly.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b0870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b0567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b0567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b05667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5idn9yly                        0x000055afc15406fb <unavailable> + 5883

    5    libc.so.6                          0x00002b15b0a5c460 __libc_start_main +
    245

    6    tmp5idn9yly                        0x000055afc153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if n % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    var m = 2\n    while i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if m > i {\n \
    \           if k % i == 0 {\n                return false\n            }\n   \
    \     }\n        i += 2\n        j += 2\n        k += 2\n        m += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpses4gb92/tmpses4gb92.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4312a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4312779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4312779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43127787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpses4gb92                        0x000055da755f96fb <unavailable> + 5883

    5    libc.so.6                          0x00002b4312c6e460 __libc_start_main +
    245

    6    tmpses4gb92                        0x000055da755f8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Make this more efficient\n    if\
    \ n < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n == 1 {\n        return false\n    }\n    if n == 3 {\n      \
    \  return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (n - 1) / 2\n    var k = (n - 1) / 3\n    while i <= j {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ k == 0 {\n            return false\n        }\n        i += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n  \
    \          return false\n        }\n        i += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpfk02tz6h/tmpfk02tz6h.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cac0fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cabdf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cabdf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cabdf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfk02tz6h                        0x0000555c58a746fb <unavailable> + 5883

    5    libc.so.6                          0x00002b2cac2e8460 __libc_start_main +
    245

    6    tmpfk02tz6h                        0x0000555c58a73ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    var i = 2\n    var j = 2\n    var k = n - 1\n\n    while i <= k {\n    \
    \    if n % i == 0 {\n            return false\n        }\n\n        i += j\n\
    \        j += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp60z_yb7d/tmp60z_yb7d.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16ab4afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16ab1a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16ab1a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16ab1a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60z_yb7d                        0x0000557adc0226fb <unavailable> + 5883

    5    libc.so.6                          0x00002b16ab69b460 __libc_start_main +
    245

    6    tmp60z_yb7d                        0x0000557adc021ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: use Sieve of Eratosthenes for better\
    \ performance\n    if n < 2 {\n        return false\n    }\n\n    var isPrime\
    \ = [Bool](repeating: false, count: n+1)\n    isPrime[0] = true\n    for var i\
    \ = 1; i < n; i++ {\n        if isPrime[i] {\n            for var j = i*i; j <\
    \ n; j += i {\n                isPrime[j] = false\n            }\n        }\n\
    \    }\n\n    return isPrime[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb3itx27r.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb3itx27r.swift:27:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for var j = i*i; j < n; j += i {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += s\n        s = 6 - s\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0\
    \ {\n        return false\n    }\n    if n % 17 == 0 {\n        return false\n\
    \    }\n    if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0\
    \ {\n        return false\n    }\n    if n % 29 == 0 {\n        return false\n\
    \    }\n    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0\
    \ {\n        return false\n    }\n    if n % 41 == 0 {\n        return false\n\
    \    }\n    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0\
    \ {\n        return false\n    }\n    if n % 53 == 0 {\n        return false\n\
    \    }\n    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0\
    \ {\n        return false\n    }\n    if n % 67 == 0 {\n        return false\n\
    \    }\n    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0\
    \ {\n        return false\n    }\n    if n % 79 == 0 {\n        return false\n\
    \    }\n    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0\
    \ {\n        return false\n    }\n    if n % 97 == 0 {\n        return false\n\
    \    }\n    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 ==\
    \ 0 {\n        return false\n    }\n    if n % 107 == 0 {\n        return false\n\
    \    }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 ==\
    \ 0 {\n        return false\n    }\n    if n % 117 == 0 {\n        return false\n\
    \    }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 123 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 165 == 0 {\n        return false\n\
    \    }\n    if n % 169 == 0 {\n        return false\n    }\n    if n % 173 ==\
    \ 0 {\n        return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiwv9c65j.swift:159:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while i <= j {\n      \
    \  if i % n == 0 {\n            return false\n        }\n        i += k\n    \
    \    j += k\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_2ro0vep/tmp_2ro0vep.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae700d42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae700a39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae700a39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae700a387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2ro0vep                        0x00005614a3e302b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae700f2e460 __libc_start_main +
    245

    6    tmp_2ro0vep                        0x00005614a3e2fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n <= 63 {\n        return true\n    }\n \
    \   if n <= 122 {\n        return false\n    }\n    if n <= 65521 {\n        return\
    \ true\n    }\n    if n <= 131071 {\n        return false\n    }\n    if n <=\
    \ 262143 {\n        return true\n    }\n    if n <= 524287 {\n        return false\n\
    \    }\n    if n <= 1048573 {\n        return true\n    }\n    if n <= 2097151\
    \ {\n        return false\n    }\n    if n <= 4194303 {\n        return true\n\
    \    }\n    if n <= 8388607 {\n        return false\n    }\n    if n <= 16777215\
    \ {\n        return true\n    }\n    if n <= 33554431 {\n        return false\n\
    \    }\n    if n <= 67108863 {\n        return true\n    }\n    if n <= 134217727\
    \ {\n        return false\n    }\n    if n <= 268435455 {\n        return true\n\
    \    }\n    if n <= 536870911 {\n        return false\n    }\n    if n <= 1073741821\
    \ {\n        return true\n    }\n    if n <= 2147483647 {\n        return false\n\
    \    }\n    if n <= 4294967291 {\n        return true\n    }\n    if n <= 8589934591\
    \ {\n        return false\n    }\n    if n <= 17179869183 {\n        return true\n\
    \    }\n    if n <= 34359738367 {\n        return false\n    }\n    if n <= 68719476735\
    \ {\n        return true\n    }\n    if n <= 137438953471 {\n        return false\n\
    \    }\n    if n <= 268435456591 {\n        return true\n    }\n    if n <= 536870911591\
    \ {\n        return false\n    }\n    if n <= 1073741823191 {\n        return\
    \ true\n    }\n    if n <= 2147483646791 {\n        return false\n    }\n    if\
    \ n <= 4294967291191 {\n        return true\n    }\n    if n <= 8589934591191\
    \ {\n        return false\n    }\n    if n <= 17179869183191 {\n        return\
    \ true\n    }\n    if n <= 34359\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn_m1v0c4.swift:135:18: error: expected '{' after 'if' condition\n\
    \    if n <= 34359\n                 ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        j += 2\n        i += 1\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpwi1kmekp/tmpwi1kmekp.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bd993dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bd9634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bd9634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bd96337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi1kmekp                        0x000055ee283c32b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b6bd9b29460 __libc_start_main +
    245

    6    tmpwi1kmekp                        0x000055ee283c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = (n - 1) / 2\n    var k = n - 1\n    while i <= k {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        i += 2\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpziqf9ym4/tmpziqf9ym4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee291bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee28eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee28eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee28eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziqf9ym4                        0x000055ab7d3e12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aee293a8460 __libc_start_main +
    245

    6    tmpziqf9ym4                        0x000055ab7d3e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpct2t18_h/tmpct2t18_h.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e688bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e6582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e6582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e65817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpct2t18_h                        0x00005582ac1dd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b25e6a77460 __libc_start_main +
    245

    6    tmpct2t18_h                        0x00005582ac1dcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ i == k {\n            return true\n        }\n        i += j\n        j += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpcjzkgllf/tmpcjzkgllf.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcbc2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcb924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dcb924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dcb9237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjzkgllf                        0x000055edd7e6577d <unavailable> + 6013

    5    libc.so.6                          0x00002b8dcbe19460 __libc_start_main +
    245

    6    tmpcjzkgllf                        0x000055edd7e64ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_zvv3i5m.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_zvv3i5m.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_zvv3i5m.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: use Sieve of Eratosthenes for prime\
    \ number check\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 3\n    var m = 2\n    while i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if m > n / i {\n\
    \            return false\n        }\n        while j <= m {\n            if m\
    \ % j == 0 {\n                return false\n            }\n            k += 1\n\
    \            j += 1\n        }\n        m += 2\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpksmbtfc8/tmpksmbtfc8.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abda68dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abda65d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abda65d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abda65d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksmbtfc8                        0x0000560d21a502b7 <unavailable> + 4791

    5    libc.so.6                          0x00002abda6ac7460 __libc_start_main +
    245

    6    tmpksmbtfc8                        0x0000560d21a4fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    var m = n\n    var prime = true\n    while\
    \ i < m {\n        if m % i == 0 {\n            prime = false\n            break\n\
    \        }\n        i += 2\n    }\n    if prime {\n        return true\n    }\n\
    \    while j < k {\n        if m % j == 0 {\n            prime = false\n     \
    \       break\n        }\n        j += 2\n    }\n    if prime {\n        return\
    \ true\n    }\n    while k < n {\n        if m % k == 0 {\n            prime =\
    \ false\n            break\n        }\n        k += 2\n    }\n    if prime {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp__v_89i7/tmp__v_89i7.swift:91: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b811232cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8112023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8112023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81120227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__v_89i7                        0x000055c8dec736fb <unavailable> + 5883

    5    libc.so.6                          0x00002b8112518460 __libc_start_main +
    245

    6    tmp__v_89i7                        0x000055c8dec72ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: check whether n is prime\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp9rlt94k4/tmp9rlt94k4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aec2a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aebf9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aebf9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aebf997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rlt94k4                        0x0000556629f991b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b9aec48f460 __libc_start_main +
    245

    6    tmp9rlt94k4                        0x0000556629f98e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpsr0b0y5_/tmpsr0b0y5_.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cb2821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cb2518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cb2518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cb25177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr0b0y5_                        0x0000561049a996fb <unavailable> + 5883

    5    libc.so.6                          0x00002b3cb2a0d460 __libc_start_main +
    245

    6    tmpsr0b0y5_                        0x0000561049a98ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hcdzga.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpe1hcdzga.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpe1hcdzga.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpe1hcdzga.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpziqf9ym4/tmpziqf9ym4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee291bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee28eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee28eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee28eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziqf9ym4                        0x000055ab7d3e12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aee293a8460 __libc_start_main +
    245

    6    tmpziqf9ym4                        0x000055ab7d3e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_zvv3i5m.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_zvv3i5m.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_zvv3i5m.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int = 0\n   \
    \ while i * i <= n {\n        if n % i == 0 {\n            return false\n    \
    \    }\n        s += i\n        i += 6\n    }\n    return s == n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp0od3g3rw/tmp0od3g3rw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b1bd10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b1ba07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b1ba07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b1ba067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0od3g3rw                        0x0000560c2f6fb2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3b1befc460 __libc_start_main +
    245

    6    tmp0od3g3rw                        0x0000560c2f6faef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824522
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while\
    \ i <= j {\n        if i % n == 0 {\n            return false\n        }\n   \
    \     if k % n == 0 {\n            return false\n        }\n        i += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpb9g5256t/tmpb9g5256t.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb61cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb5ec2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fb5ec2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fb5ec17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9g5256t                        0x0000562f184562b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2fb63b7460 __libc_start_main +
    245

    6    tmpb9g5256t                        0x0000562f18455ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i <= k\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978594
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Implement this function\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp2qvuyfot/tmp2qvuyfot.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0967d91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0967a88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0967a88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0967a877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qvuyfot                        0x0000564129b05227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0967f7d460 __libc_start_main +
    245

    6    tmp2qvuyfot                        0x0000564129b04e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpfu4fdi2q/tmpfu4fdi2q.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d83bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d838c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d838c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d838c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfu4fdi2q                        0x000055f4b2b6b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b5d83db9460 __libc_start_main +
    245

    6    tmpfu4fdi2q                        0x000055f4b2b6aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s: Int = 0\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        s += i\n        i\
    \ += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpenbil6zy/tmpenbil6zy.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba678dd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba678acdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba678acd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba678acc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenbil6zy                        0x000055c1555b42b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba678fc2460 __libc_start_main +
    245

    6    tmpenbil6zy                        0x000055c1555b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe1hcdzga.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpe1hcdzga.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpe1hcdzga.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpe1hcdzga.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n < 2 {\n        return false\n    }\n    var i = 2\n \
    \   var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j % i == 0 {\n            return\
    \ false\n        }\n        if k % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k /= i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp8zrd6p39/tmp8zrd6p39.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8af09e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8af06dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8af06db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8af06da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zrd6p39                        0x0000559f64ac62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b8af0bd0460 __libc_start_main +
    245

    6    tmp8zrd6p39                        0x0000559f64ac5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Make this faster\n    if n < 2 {\n\
    \        return false\n    }\n\n    if n == 2 {\n        return true\n    }\n\n\
    \    if n == 3 {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n\n    if n % 3 == 0 {\n        return false\n    }\n\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n\n    while i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n\n        if k % i == 0 {\n   \
    \         return false\n        }\n\n        i += j\n        j += 2\n        k\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp0k00haxw/tmp0k00haxw.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b765563dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7655334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7655334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76553337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0k00haxw                        0x0000563646797579 <unavailable> + 5497

    5    libc.so.6                          0x00002b7655829460 __libc_start_main +
    245

    6    tmp0k00haxw                        0x0000563646796ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpfjftugap/tmpfjftugap.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab99e2c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab99dfbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab99dfba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab99dfb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjftugap                        0x0000563e0e9e94ff <unavailable> + 5375

    5    libc.so.6                          0x00002ab99e4af460 __libc_start_main +
    245

    6    tmpfjftugap                        0x0000563e0e9e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpa3gm5qu0/tmpa3gm5qu0.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af14b2b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14afadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14afad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14afac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3gm5qu0                        0x000055a07296c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002af14b4a2460 __libc_start_main +
    245

    6    tmpa3gm5qu0                        0x000055a07296bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpz25ui2rx/tmpz25ui2rx.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98e5ad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98e57cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98e57cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98e57cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz25ui2rx                        0x000055f50b7826fb <unavailable> + 5883

    5    libc.so.6                          0x00002b98e5cc2460 __libc_start_main +
    245

    6    tmpz25ui2rx                        0x000055f50b781ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_pxvz8o7.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp_pxvz8o7.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp_pxvz8o7.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp_pxvz8o7.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824419
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n\n    while\
    \ i <= n {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       if k % i == 0 {\n            return false\n        }\n\n        i += j\n\
    \        j += k\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpynwybl3i/tmpynwybl3i.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad37760bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad377302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad377302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3773017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynwybl3i                        0x00005628cae4d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad3777f7460 __libc_start_main +
    245

    6    tmpynwybl3i                        0x00005628cae4cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i < k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j %\
    \ i == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpj8imrx4j/tmpj8imrx4j.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b264b51dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b264b214b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b264b214988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b264b2137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8imrx4j                        0x0000558702dd86fb <unavailable> + 5883

    5    libc.so.6                          0x00002b264b709460 __libc_start_main +
    245

    6    tmpj8imrx4j                        0x0000558702dd7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpkoanvcrm/tmpkoanvcrm.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab193e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab193b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab193b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab193b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkoanvcrm                        0x000055fa972176fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab194055460 __libc_start_main +
    245

    6    tmpkoanvcrm                        0x000055fa97216ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    var i = 2\n\
    \    var j = 3\n    var k = n - 1\n    var m = 2\n    var n = 2\n    var p = 3\n\
    \    var q = 3\n    var r = 2\n    var s = 2\n    var t = 2\n    var u = 2\n \
    \   var v = 3\n    var w = 3\n    var x = 2\n    var y = 2\n    var z = 2\n  \
    \  var a = 2\n    var b = 2\n    var c = 2\n    var d = 2\n    var e = 2\n   \
    \ var f = 3\n    var g = 3\n    var h = 3\n    var i = 2\n    var j = 2\n    var\
    \ k = 2\n    var l = 3\n    var m = 2\n    var n = 2\n    var p = 3\n    var q\
    \ = 3\n    var r = 2\n    var s = 2\n    var t = 2\n    var u = 2\n    var v =\
    \ 3\n    var w = 3\n    var x = 2\n    var y = 2\n    var z = 2\n    var a = 2\n\
    \    var b = 2\n    var c = 2\n    var d = 2\n    var e = 2\n    var f = 3\n \
    \   var g = 3\n    var h = 3\n    var i = 2\n    var j = 2\n    var k = 2\n  \
    \  var l = 3\n    var m = 2\n    var n = 2\n    var p = 3\n    var q = 3\n   \
    \ var r = 2\n    var s = 2\n    var t = 2\n    var u = 2\n    var v = 3\n    var\
    \ w = 3\n    var x = 2\n    var y = 2\n    var z = 2\n    var a = 2\n    var b\
    \ = 2\n    var c = 2\n    var d = 2\n    var e = 2\n    var f = 3\n    var g =\
    \ 3\n    var h = 3\n    var i = 2\n    var j = 2\n    var k = 2\n    var l = 3\n\
    \    var m = 2\n    var n = 2\n    var p = 3\n    var q = 3\n    var r = 2\n \
    \   var s = 2\n    var t = 2\n    var u = 2\n    var v = 3\n    var w = 3\n  \
    \  var x = 2\n    var y = 2\n    var z = 2\n    var a = 2\n    var b = 2\n   \
    \ var c = 2\n    var d = 2\n    var e = 2\n    var f = 3\n    var g = 3\n    var\
    \ h = 3\n    var i = 2\n    var j = 2\n    var k = 2\n    var l = 3\n    var m\
    \ = 2\n    var n = 2\n    var p = 3\n    var q = 3\n    var r = 2\n    var s =\
    \ 2\n    var t = 2\n    var u = 2\n    var v = 3\n    var w = 3\n    var x = 2\n\
    \    var y = 2\n    var z = 2\n    var a = 2\n    var b = 2\n    var c = 2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbkc25uxg.swift:54:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 2\n        ^\n/tmp/tmpbkc25uxg.swift:30:9: note: 'i' previously declared\
    \ here\n    var i = 2\n        ^\n/tmp/tmpbkc25uxg.swift:55:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 2\n        ^\n/tmp/tmpbkc25uxg.swift:31:9:\
    \ note: 'j' previously declared here\n    var j = 3\n        ^\n/tmp/tmpbkc25uxg.swift:56:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 2\n        ^\n/tmp/tmpbkc25uxg.swift:32:9:\
    \ note: 'k' previously declared here\n    var k = n - 1\n        ^\n/tmp/tmpbkc25uxg.swift:58:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 2\n        ^\n/tmp/tmpbkc25uxg.swift:33:9:\
    \ note: 'm' previously declared here\n    var m = 2\n        ^\n/tmp/tmpbkc25uxg.swift:59:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 2\n        ^\n/tmp/tmpbkc25uxg.swift:34:9:\
    \ note: 'n' previously declared here\n    var n = 2\n        ^\n/tmp/tmpbkc25uxg.swift:60:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 3\n        ^\n/tmp/tmpbkc25uxg.swift:35:9:\
    \ note: 'p' previously declared here\n    var p = 3\n        ^\n/tmp/tmpbkc25uxg.swift:61:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 3\n        ^\n/tmp/tmpbkc25uxg.swift:36:9:\
    \ note: 'q' previously declared here\n    var q = 3\n        ^\n/tmp/tmpbkc25uxg.swift:62:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 2\n        ^\n/tmp/tmpbkc25uxg.swift:37:9:\
    \ note: 'r' previously declared here\n    var r = 2\n        ^\n/tmp/tmpbkc25uxg.swift:63:9:\
    \ error: invalid redeclaration of 's'\n    var s = 2\n        ^\n/tmp/tmpbkc25uxg.swift:38:9:\
    \ note: 's' previously declared here\n    var s = 2\n        ^\n/tmp/tmpbkc25uxg.swift:64:9:\
    \ error: invalid redeclaration of 't'\n    var t = 2\n        ^\n/tmp/tmpbkc25uxg.swift:39:9:\
    \ note: 't' previously declared here\n    var t = 2\n        ^\n/tmp/tmpbkc25uxg.swift:65:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 2\n        ^\n/tmp/tmpbkc25uxg.swift:40:9:\
    \ note: 'u' previously declared here\n    var u = 2\n        ^\n/tmp/tmpbkc25uxg.swift:66:9:\
    \ error: invalid redeclaration of 'v'\n    var v = 3\n        ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0\
    \ {\n        return false\n    }\n    if n % 17 == 0 {\n        return false\n\
    \    }\n    if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0\
    \ {\n        return false\n    }\n    if n % 29 == 0 {\n        return false\n\
    \    }\n    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0\
    \ {\n        return false\n    }\n    if n % 41 == 0 {\n        return false\n\
    \    }\n    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0\
    \ {\n        return false\n    }\n    if n % 53 == 0 {\n        return false\n\
    \    }\n    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0\
    \ {\n        return false\n    }\n    if n % 67 == 0 {\n        return false\n\
    \    }\n    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0\
    \ {\n        return false\n    }\n    if n % 79 == 0 {\n        return false\n\
    \    }\n    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0\
    \ {\n        return false\n    }\n    if n % 97 == 0 {\n        return false\n\
    \    }\n    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 ==\
    \ 0 {\n        return false\n    }\n    if n % 107 == 0 {\n        return false\n\
    \    }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 ==\
    \ 0 {\n        return false\n    }\n    if n % 117 == 0 {\n        return false\n\
    \    }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 123 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 165 == 0 {\n        return false\n\
    \    }\n    if n % 169 == 0 {\n        return false\n    }\n    if n % 173 ==\
    \ 0 {\n        return false\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiwv9c65j.swift:159:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 6 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n     \
    \   return true\n    }\n    if n == 53 {\n        return true\n    }\n    if n\
    \ == 54 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmps5dxasvs.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmps5dxasvs.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmps5dxasvs.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmps5dxasvs.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var j = 3\n    var k = 2\n    var m = Int(sqrt(Double(n)))\n\n    while\
    \ i <= m {\n        if n % i == 0 {\n            return false\n        }\n\n \
    \       if k % i == 0 {\n            return false\n        }\n\n        if j %\
    \ i == 0 {\n            return false\n        }\n\n        i += 2\n        j +=\
    \ 2\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu9gj3zn6.swift:37:17: error: cannot find 'sqrt' in scope\n    var\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 159 == 0 {\n        return false\n    }\n    if n % 163 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc39afrif.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpc39afrif.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpc39afrif.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while\
    \ i <= j {\n        if i % k == 0 {\n            return false\n        }\n   \
    \     i += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpor47nyby/tmpor47nyby.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31ad962c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ad659b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ad659988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ad6587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpor47nyby                        0x0000557d3fddb6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b31adb4e460 __libc_start_main +
    245

    6    tmpor47nyby                        0x0000557d3fddaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s: Int64 = 1\n    var d: Int64 = 2\n    var e:\
    \ Int64 = 3\n    var m: Int64 = 5\n    var t: Int64 = 6\n    var p: Int64 = 7\n\
    \    var q: Int64 = 8\n    var r: Int64 = 9\n    var v: Int64 = 10\n    var w:\
    \ Int64 = 11\n    var x: Int64 = 12\n    var y: Int64 = 13\n    var z: Int64 =\
    \ 14\n    var a: Int64 = 15\n    var b: Int64 = 16\n    var c: Int64 = 17\n  \
    \  var d: Int64 = 18\n    var e: Int64 = 19\n    var f: Int64 = 20\n    var g:\
    \ Int64 = 21\n    var h: Int64 = 22\n    var i: Int64 = 23\n    var j: Int64 =\
    \ 24\n    var k: Int64 = 25\n    var l: Int64 = 26\n    var m: Int64 = 27\n  \
    \  var n: Int64 = 28\n    var o: Int64 = 29\n    var p: Int64 = 30\n    var q:\
    \ Int64 = 31\n    var r: Int64 = 32\n    var s: Int64 = 33\n    var t: Int64 =\
    \ 34\n    var v: Int64 = 35\n    var w: Int64 = 36\n    var x: Int64 = 37\n  \
    \  var y: Int64 = 38\n    var z: Int64 = 39\n    var a: Int64 = 40\n    var b:\
    \ Int64 = 41\n    var c: Int64 = 42\n    var d: Int64 = 43\n    var e: Int64 =\
    \ 44\n    var f: Int64 = 45\n    var g: Int64 = 46\n    var h: Int64 = 47\n  \
    \  var i: Int64 = 48\n    var j: Int64 = 49\n    var k: Int64 = 50\n    var l:\
    \ Int64 = 51\n    var m: Int64 = 52\n    var n: Int64 = 53\n    var o: Int64 =\
    \ 54\n    var p: Int64 = 55\n    var q: Int64 = 56\n    var r: Int64 = 57\n  \
    \  var s: Int64 = 58\n    var t: Int64 = 59\n    var v: Int64 = 60\n    var w:\
    \ Int64 = 61\n    var x: Int64 = 62\n    var y: Int64 = 63\n    var z: Int64 =\
    \ 64\n    var a: Int64 = 65\n    var b: Int64 = 66\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprhbefmpv.swift:53:9: error: invalid redeclaration of 'd'\n    var\
    \ d: Int64 = 18\n        ^\n/tmp/tmprhbefmpv.swift:38:9: note: 'd' previously\
    \ declared here\n    var d: Int64 = 2\n        ^\n/tmp/tmprhbefmpv.swift:54:9:\
    \ error: invalid redeclaration of 'e'\n    var e: Int64 = 19\n        ^\n/tmp/tmprhbefmpv.swift:39:9:\
    \ note: 'e' previously declared here\n    var e: Int64 = 3\n        ^\n/tmp/tmprhbefmpv.swift:58:9:\
    \ error: invalid redeclaration of 'i'\n    var i: Int64 = 23\n        ^\n/tmp/tmprhbefmpv.swift:36:9:\
    \ note: 'i' previously declared here\n    var i = 5\n        ^\n/tmp/tmprhbefmpv.swift:62:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int64 = 27\n        ^\n/tmp/tmprhbefmpv.swift:40:9:\
    \ note: 'm' previously declared here\n    var m: Int64 = 5\n        ^\n/tmp/tmprhbefmpv.swift:65:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int64 = 30\n        ^\n/tmp/tmprhbefmpv.swift:42:9:\
    \ note: 'p' previously declared here\n    var p: Int64 = 7\n        ^\n/tmp/tmprhbefmpv.swift:66:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int64 = 31\n        ^\n/tmp/tmprhbefmpv.swift:43:9:\
    \ note: 'q' previously declared here\n    var q: Int64 = 8\n        ^\n/tmp/tmprhbefmpv.swift:67:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int64 = 32\n        ^\n/tmp/tmprhbefmpv.swift:44:9:\
    \ note: 'r' previously declared here\n    var r: Int64 = 9\n        ^\n/tmp/tmprhbefmpv.swift:68:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int64 = 33\n        ^\n/tmp/tmprhbefmpv.swift:37:9:\
    \ note: 's' previously declared here\n    var s: Int64 = 1\n        ^\n/tmp/tmprhbefmpv.swift:69:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int64 = 34\n        ^\n/tmp/tmprhbefmpv.swift:41:9:\
    \ note: 't' previously declared here\n    var t: Int64 = 6\n        ^\n/tmp/tmprhbefmpv.swift:70:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int64 = 35\n        ^\n/tmp/tmprhbefmpv.swift:45:9:\
    \ note: 'v' previously declared here\n    var v: Int64 = 10\n        ^\n/tmp/tmprhbefmpv.swift:71:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int64 = 36\n        ^\n/tmp/tmprhbefmpv.swift:46:9:\
    \ note: 'w"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzztjcpq_.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmpzztjcpq_.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n \
    \           return false\n        }\n        if j > n / 2 {\n            return\
    \ false\n        }\n        while k <= n / i {\n            if n % k == 0 {\n\
    \                return false\n            }\n            k += i\n        }\n\
    \        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfxg8acbx/tmpfxg8acbx.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9b34fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9b31f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9b31f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9b31f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxg8acbx                        0x00005624e29952b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad9b36ea460 __libc_start_main +
    245

    6    tmpfxg8acbx                        0x00005624e2994ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % i == 0 {\n   \
    \         return false\n        }\n        if k % j == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpct2t18_h/tmpct2t18_h.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e688bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e6582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e6582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e65817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpct2t18_h                        0x00005582ac1dd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b25e6a77460 __libc_start_main +
    245

    6    tmpct2t18_h                        0x00005582ac1dcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 159 == 0 {\n        return false\n    }\n    if n % 163 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc39afrif.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpc39afrif.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpc39afrif.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = 3\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3bs3v_ai/tmp3bs3v_ai.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6017c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6014b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6014b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6014b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bs3v_ai                        0x0000555b812af6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ae6019ac460 __libc_start_main +
    245

    6    tmp3bs3v_ai                        0x0000555b812aeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 1 {\n        return\
    \ false\n    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var\
    \ i = 2\n    var j = 3\n    var k = n - 1\n\n    while i <= k {\n        if n\
    \ % i == 0 {\n            return false\n        }\n\n        if j % i == 0 {\n\
    \            return false\n        }\n\n        i += 2\n        j += 2\n    }\n\
    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpikd6hrx1/tmpikd6hrx1.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52e62b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52e5fadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52e5fad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52e5fac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikd6hrx1                        0x00005591e64066fb <unavailable> + 5883

    5    libc.so.6                          0x00002b52e64a2460 __libc_start_main +
    245

    6    tmpikd6hrx1                        0x00005591e6405ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s: Int\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpandtxz9w/tmpandtxz9w.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2259c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e1f50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4e1f50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4e1f4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpandtxz9w                        0x0000560eaa11577d <unavailable> + 6013

    5    libc.so.6                          0x00002ad4e2445460 __libc_start_main +
    245

    6    tmpandtxz9w                        0x0000560eaa114ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let limit: Int = Int(sqrt(Double(n)))\n\
    \    for i in 2..<limit {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqybmkji6.swift:33:26: error: cannot find 'sqrt' in scope\n    let\
    \ limit: Int = Int(sqrt(Double(n)))\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if j > i {\n            j += 2\n\
    \        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpx812jdus/tmpx812jdus.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4a8b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4a8822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4a8822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4a88217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx812jdus                        0x0000556de6bf16fb <unavailable> + 5883

    5    libc.so.6                          0x00002ba4a8d17460 __libc_start_main +
    245

    6    tmpx812jdus                        0x0000556de6bf0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k\
    \ = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if n % j == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if i == 3 {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += s\n        s *= 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    let limit: Int = Int(sqrt(Double(n)))\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu85swcdp.swift:36:26: error: cannot find 'sqrt' in scope\n    let\
    \ limit: Int = Int(sqrt(Double(n)))\n                         ^~~~\n/tmp/tmpu85swcdp.swift:62:9:\
    \ error: invalid redeclaration of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:37:9:\
    \ note: 'i' previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:63:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:38:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:64:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:39:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:65:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:40:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:66:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:41:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:67:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:42:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:68:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:43:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:69:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:44:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:70:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:45:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:71:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:46:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpu85swcdp.swift:72:9:\
    \ error: inval"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i <= n {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        if j > n /\
    \ 2 {\n            return false\n        }\n        if k != n / i {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n        k += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpqlqjlgch/tmpqlqjlgch.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2478dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2478ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2478ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2478ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqjlgch                        0x000055b48f8872b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2478fd9460 __libc_start_main +
    245

    6    tmpqlqjlgch                        0x000055b48f886ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Make this more efficient\n    if\
    \ n < 2 {\n        return false\n    }\n\n    var i = 2\n    var j = 2\n    var\
    \ k = 2\n    var m = 1\n    var prime = true\n\n    while i < n {\n        if\
    \ n % i == 0 {\n            prime = false\n            break\n        }\n\n  \
    \      i += k\n        j += k\n        k += k\n        m *= k\n    }\n\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: use Sieve of Eratosthenes for better\
    \ performance\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n       \
    \ return false\n    }\n    if n % 5 == 0 {\n        return false\n    }\n    if\
    \ n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n        return\
    \ false\n    }\n    if n % 13 == 0 {\n        return false\n    }\n    if n %\
    \ 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n        return\
    \ false\n    }\n    if n % 23 == 0 {\n        return false\n    }\n    if n %\
    \ 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n        return\
    \ false\n    }\n    if n % 37 == 0 {\n        return false\n    }\n    if n %\
    \ 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n        return\
    \ false\n    }\n    if n % 47 == 0 {\n        return false\n    }\n    if n %\
    \ 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n        return\
    \ false\n    }\n    if n % 61 == 0 {\n        return false\n    }\n    if n %\
    \ 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n        return\
    \ false\n    }\n    if n % 73 == 0 {\n        return false\n    }\n    if n %\
    \ 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n        return\
    \ false\n    }\n    if n % 89 == 0 {\n        return false\n    }\n    if n %\
    \ 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n        return\
    \ false\n    }\n    if n % 103 == 0 {\n        return false\n    }\n    if n %\
    \ 107 == 0 {\n        return false\n    }\n    if n % 109 == 0 {\n        return\
    \ false\n    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n %\
    \ 117 == 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return\
    \ false\n    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n %\
    \ 131 == 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return\
    \ false\n    }\n    if n % 141 == 0 {\n        return false\n    }\n    if n %\
    \ 147 == 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return\
    \ false\n    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n %\
    \ 161 == 0 {\n        return false\n    }\n    if n % 167 == 0 {\n        return\
    \ false\n    }\n    if n % 173 == 0 {\n        return false\n    }\n    if n %\
    \ 179 == 0 {\n        return false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_hj31b3.swift:184:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpg_hj31b3.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpg_hj31b3.swift:160:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n < 2 {\n        return false\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbwrpezj.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmppbwrpezj.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmppbwrpezj.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        if k % i == 0 {\n   \
    \         return false\n        }\n        if k % j == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var m = Int(sqrt(Double(n)))\n    for {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if i > m {\n      \
    \      break\n        }\n        i += 2\n        j += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6q1xd5wi.swift:33:9: error: expected pattern\n    for {\n     \
    \   ^\n/tmp/tmp6q1xd5wi.swift:33:9: error: expected Sequence expression for for-each\
    \ loop\n    for {\n        ^\n/tmp/tmp6q1xd5wi.swift:32:17: error: cannot find\
    \ 'sqrt' in scope\n    var m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v5tq96g.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp9v5tq96g.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp9v5tq96g.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp9v5tq96g.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n == 4 {\n        return true\n    }\n\n    if n == 5\
    \ {\n        return true\n    }\n\n    if n == 6 {\n        return true\n    }\n\
    \n    if n == 7 {\n        return true\n    }\n\n    if n == 8 {\n        return\
    \ true\n    }\n\n    if n == 9 {\n        return true\n    }\n\n    if n == 10\
    \ {\n        return true\n    }\n\n    if n == 11 {\n        return true\n   \
    \ }\n\n    if n == 12 {\n        return true\n    }\n\n    if n == 13 {\n    \
    \    return true\n    }\n\n    if n == 14 {\n        return true\n    }\n\n  \
    \  if n == 15 {\n        return true\n    }\n\n    if n == 16 {\n        return\
    \ true\n    }\n\n    if n == 17 {\n        return true\n    }\n\n    if n == 18\
    \ {\n        return true\n    }\n\n    if n == 19 {\n        return true\n   \
    \ }\n\n    if n == 20 {\n        return true\n    }\n\n    if n == 21 {\n    \
    \    return true\n    }\n\n    if n == 22 {\n        return true\n    }\n\n  \
    \  if n == 23 {\n        return true\n    }\n\n    if n == 24 {\n        return\
    \ true\n    }\n\n    if n == 25 {\n        return true\n    }\n\n    if n == 26\
    \ {\n        return true\n    }\n\n    if n == 27 {\n        return true\n   \
    \ }\n\n    if n == 28 {\n        return true\n    }\n\n    if n == 29 {\n    \
    \    return true\n    }\n\n    if n == 30 {\n        return true\n    }\n\n  \
    \  if n == 31 {\n        return true\n    }\n\n    if n == 32 {\n        return\
    \ true\n    }\n\n    if n == 33 {\n        return true\n    }\n\n    if n == 34\
    \ {\n        return true\n    }\n\n    if n == 35 {\n        return true\n   \
    \ }\n\n    if n == 36 {\n        return true\n    }\n\n    if n == 37 {\n    \
    \    return true\n    }\n\n    if n == 38 {\n        return true\n    }\n\n  \
    \  if n == 39 {\n        return true\n    }\n\n    if n == 40 {\n        return\
    \ true\n    }\n\n    if n == 41 {\n        return true\n    }\n\n    if n == 42\
    \ {\n        return true\n    }\n\n    if n == 43 {\n        return true\n   \
    \ }\n\n    if n == 44 {\n        return true\n    }\n\n    if n == 45 {\n    \
    \    return true\n    }\n\n    if n == 46 {\n        return true\n    }\n\n  \
    \  if n == 47 {\n        return true\n    }\n\n    if n == 48 {\n        return\
    \ true\n    }\n\n    if n == 49 {\n        return true\n    }\n\n    if n == 50\
    \ {\n        return true\n    }\n\n    if n == 51 {\n        return true\n   \
    \ }\n\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0ia708bh.swift:251:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp0ia708bh.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp0ia708bh.swift:223:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp0ia708bh.swift:227:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpio30xdwx/tmpio30xdwx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7be4af5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7be47ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7be47ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7be47eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpio30xdwx                        0x000055faa91e42b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7be4ce1460 __libc_start_main +
    245

    6    tmpio30xdwx                        0x000055faa91e3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        j += 2\n        i += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpvkzs4ige/tmpvkzs4ige.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e7dc86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e7d97db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e7d97d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e7d97c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkzs4ige                        0x00005640c61382b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3e7de72460 __libc_start_main +
    245

    6    tmpvkzs4ige                        0x00005640c6137ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += 2\n     \
    \   i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpwo88w825/tmpwo88w825.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81f03b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81f00afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81f00af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81f00ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwo88w825                        0x0000557a58c932b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b81f05a4460 __libc_start_main +
    245

    6    tmpwo88w825                        0x0000557a58c92ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpct2t18_h/tmpct2t18_h.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e688bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e6582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e6582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e65817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpct2t18_h                        0x00005582ac1dd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b25e6a77460 __libc_start_main +
    245

    6    tmpct2t18_h                        0x00005582ac1dcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if j % i == 0 {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpz4cb1ja_/tmpz4cb1ja_.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af211b69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af211860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af211860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af21185f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4cb1ja_                        0x00005579ed71b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002af211d55460 __libc_start_main +
    245

    6    tmpz4cb1ja_                        0x00005579ed71aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfo2oc5_l/tmpfo2oc5_l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c4324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c401bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c401b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c401a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfo2oc5_l                        0x00005619d1ab180a <unavailable> + 6154

    5    libc.so.6                          0x00002ab5c4510460 __libc_start_main +
    245

    6    tmpfo2oc5_l                        0x00005619d1ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 141 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 167 ==\
    \ 0 {\n        return false\n    }\n    if n % 173 == 0 {\n        return false\n\
    \    }\n    if n % 179 == 0 {\n        return false\n    }\n    if n % 183 ==\
    \ 0 {\n        return false\n    }\n    if n % 187\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv00elya.swift:159:15: error: expected '{' after 'if' condition\n\
    \    if n % 187\n              ^\n/tmp/tmpxv00elya.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 187\n     \
    \    ^\n       ((     ) != 0)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpit5qaspg/tmpit5qaspg.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ac3671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ac3368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ac3368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ac33677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpit5qaspg                        0x000055868a86c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b9ac385d460 __libc_start_main +
    245

    6    tmpit5qaspg                        0x000055868a86bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i <= n {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        if j > n /\
    \ 2 {\n            return false\n        }\n        if k != n / i {\n        \
    \    return false\n        }\n        i += 2\n        j += 2\n        k += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpqlqjlgch/tmpqlqjlgch.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2478dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2478ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2478ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2478ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlqjlgch                        0x000055b48f8872b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2478fd9460 __libc_start_main +
    245

    6    tmpqlqjlgch                        0x000055b48f886ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j > n / 2 {\n            return false\n       \
    \ }\n        j += 2\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzmyow4u3/tmpzmyow4u3.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d1b2c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d1afb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d1afb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d1afb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmyow4u3                        0x0000555fc13ae2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b6d1b4ac460 __libc_start_main +
    245

    6    tmpzmyow4u3                        0x0000555fc13adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if n %\
    \ j == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 159 == 0 {\n        return false\n    }\n    if n % 163 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc39afrif.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpc39afrif.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpc39afrif.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        while j <= n {\n  \
    \          if n % j == 0 {\n                return false\n            }\n    \
    \        j += 1\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3qxhfdag/tmp3qxhfdag.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff29aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff2979db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff2979d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff2979c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3qxhfdag                        0x000055905cdea2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aff29c92460 __libc_start_main +
    245

    6    tmp3qxhfdag                        0x000055905cde9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j: Int\n    var p: Bool\n    var q: Int\n\
    \    var r: Int\n    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n\
    \    var w: Int\n    var x: Int\n    var y: Int\n    var z: Int\n    var a: Int\n\
    \    var b: Int\n    var c: Int\n    var d: Int\n    var e: Int\n    var f: Int\n\
    \    var g: Int\n    var h: Int\n    var i: Int\n    var j: Int\n    var k: Int\n\
    \    var l: Int\n    var m: Int\n    var n: Int\n    var o: Int\n    var p: Int\n\
    \    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n    var u: Int\n\
    \    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n    var z: Int\n\
    \    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n    var e: Int\n\
    \    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n    var j: Int\n\
    \    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n    var o: Int\n\
    \    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n    var t: Int\n\
    \    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n    var y: Int\n\
    \    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n    var d: Int\n\
    \    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n    var n: Int\n\
    \    var o: Int\n    var p: Int\n    var q: Int\n    var r: Int\n    var s: Int\n\
    \    var t: Int\n    var u: Int\n    var v: Int\n    var w: Int\n    var x: Int\n\
    \    var y: Int\n    var z: Int\n    var a: Int\n    var b: Int\n    var c: Int\n\
    \    var d: Int\n    var e: Int\n    var f: Int\n    var g: Int\n    var h: Int\n\
    \    var i: Int\n    var j: Int\n    var k: Int\n    var l: Int\n    var m: Int\n\
    \    var n: Int\n    var o: Int\n    var p: Int\n    var q: Int\n    var r: Int\n\
    \    var s: Int\n    var t: Int\n    var u: Int\n    var v: Int\n    var w\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqvk9wdo2.swift:48:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:27:9: note: 'i' previously declared\
    \ here\n    var i = 2\n        ^\n/tmp/tmpqvk9wdo2.swift:49:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:28:9:\
    \ note: 'j' previously declared here\n    var j: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:55:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:29:9:\
    \ note: 'p' previously declared here\n    var p: Bool\n        ^\n/tmp/tmpqvk9wdo2.swift:56:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:30:9:\
    \ note: 'q' previously declared here\n    var q: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:57:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:31:9:\
    \ note: 'r' previously declared here\n    var r: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:58:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:32:9:\
    \ note: 's' previously declared here\n    var s: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:59:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:33:9:\
    \ note: 't' previously declared here\n    var t: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:60:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:34:9:\
    \ note: 'u' previously declared here\n    var u: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:61:9:\
    \ error: invalid redeclaration of 'v'\n    var v: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:35:9:\
    \ note: 'v' previously declared here\n    var v: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:62:9:\
    \ error: invalid redeclaration of 'w'\n    var w: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:36:9:\
    \ note: 'w' previously declared here\n    var w: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:63:9:\
    \ error: invalid redeclaration of 'x'\n    var x: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:37:9:\
    \ note: 'x' previously declared here\n    var x: Int\n        ^\n/tmp/tmpqvk9wdo2.swift:64:9:\
    \ error: invalid redeclaration of 'y'\n    var y: Int"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    let sqrt = (Int(ceil(sqrt(Double(n)))))\n\
    \    for _ in 0..<sqrt {\n        if n % Int(pow(Double(2), Double(sqrt - 1)))\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2zxwxd0e.swift:33:21: error: cannot find 'ceil' in scope\n    let\
    \ sqrt = (Int(ceil(sqrt(Double(n)))))\n                    ^~~~\n/tmp/tmp2zxwxd0e.swift:33:26:\
    \ error: use of local variable 'sqrt' before its declaration\n    let sqrt = (Int(ceil(sqrt(Double(n)))))\n\
    \                         ^\n/tmp/tmp2zxwxd0e.swift:33:9: note: 'sqrt' declared\
    \ here\n    let sqrt = (Int(ceil(sqrt(Double(n)))))\n        ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8x0r6qty.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp8x0r6qty.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp8x0r6qty.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 159 == 0 {\n        return false\n    }\n    if n % 163 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc39afrif.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpc39afrif.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpc39afrif.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = n\
    \ - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        if j > i {\n            j += 2\n        }\n        i += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptw2kvksy.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptw2kvksy.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptw2kvksy.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmptw2kvksy.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    var j = 3\n    var k = n\
    \ - 1\n    while i <= k {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    if n % 61 == 0 {\n        return false\n    }\n    if n % 67 == 0 {\n\
    \        return false\n    }\n    if n % 71 == 0 {\n        return false\n   \
    \ }\n    if n % 73 == 0 {\n        return false\n    }\n    if n % 79 == 0 {\n\
    \        return false\n    }\n    if n % 83 == 0 {\n        return false\n   \
    \ }\n    if n % 89 == 0 {\n        return false\n    }\n    if n % 97 == 0 {\n\
    \        return false\n    }\n    if n % 101 == 0 {\n        return false\n  \
    \  }\n    if n % 103 == 0 {\n        return false\n    }\n    if n % 107 == 0\
    \ {\n        return false\n    }\n    if n % 109 == 0 {\n        return false\n\
    \    }\n    if n % 113 == 0 {\n        return false\n    }\n    if n % 117 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 123 == 0 {\n        return false\n    }\n    if n % 127 ==\
    \ 0 {\n        return false\n    }\n    if n % 131 == 0 {\n        return false\n\
    \    }\n    if n % 137 == 0 {\n        return false\n    }\n    if n % 139 ==\
    \ 0 {\n        return false\n    }\n    if n % 143 == 0 {\n        return false\n\
    \    }\n    if n % 147 == 0 {\n        return false\n    }\n    if n % 151 ==\
    \ 0 {\n        return false\n    }\n    if n % 157 == 0 {\n        return false\n\
    \    }\n    if n % 161 == 0 {\n        return false\n    }\n    if n % 165 ==\
    \ 0 {\n        return false\n    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf1jn_nf3.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpf1jn_nf3.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpf1jn_nf3.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8x0r6qty.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp8x0r6qty.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp8x0r6qty.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 0 {\n        return false\n    }\n    var i = 2\n\
    \    var j = 2\n    var k = n - 1\n    var m = n - 1\n    var prime = true\n \
    \   var composite = false\n    var composite2 = false\n    var composite3 = false\n\
    \    var composite4 = false\n    var composite5 = false\n    var composite6 =\
    \ false\n    var composite7 = false\n    var composite8 = false\n    var composite9\
    \ = false\n    var composite10 = false\n    var composite11 = false\n    var composite12\
    \ = false\n    var composite13 = false\n    var composite14 = false\n    var composite15\
    \ = false\n    var composite16 = false\n    var composite17 = false\n    var composite18\
    \ = false\n    var composite19 = false\n    var composite20 = false\n    var composite21\
    \ = false\n    var composite22 = false\n    var composite23 = false\n    var composite24\
    \ = false\n    var composite25 = false\n    var composite26 = false\n    var composite27\
    \ = false\n    var composite28 = false\n    var composite29 = false\n    var composite30\
    \ = false\n    var composite31 = false\n    var composite32 = false\n    var composite33\
    \ = false\n    var composite34 = false\n    var composite35 = false\n    var composite36\
    \ = false\n    var composite37 = false\n    var composite38 = false\n    var composite39\
    \ = false\n    var composite40 = false\n    var composite41 = false\n    var composite42\
    \ = false\n    var composite43 = false\n    var composite44 = false\n    var composite45\
    \ = false\n    var composite46 = false\n    var composite47 = false\n    var composite48\
    \ = false\n    var composite49 = false\n    var composite50 = false\n    var composite51\
    \ = false\n    var composite52 = false\n    var composite53 = false\n    var composite54\
    \ = false\n    var composite55 = false\n    var composite56 = false\n    var composite57\
    \ = false\n    var composite58 = false\n    var composite59 = false\n    var composite60\
    \ = false\n    var composite61 = false\n    var composite62 = false\n    var composite63\
    \ = false\n    var composite64 = false\n    var composite65 = false\n    var composite66\
    \ = false\n    var composite67 = false\n    var composite68 = false\n    var composite69\
    \ = false\n    var composite70 = false\n    var composite71 = false\n    var composite72\
    \ = false\n    var composite73 = false\n    var composite74 = false\n    var composite75\
    \ = false\n    var composite76 = false\n    var composite77 = false\n    var composite78\
    \ = false\n    var composite79 = false\n    var composite80 = false\n    var composite81\
    \ = false\n    var composite82 = false\n    var composite83 = false\n    var composite84\
    \ = false\n    var composite85 = false\n    var composite86 = false\n    var composite87\
    \ = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4jg0qnov.swift:30:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 2\n    ~~~~^\n    _\n/tmp/tmp4jg0qnov.swift:31:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = 2\n    ~~~~^\n    _\n/tmp/tmp4jg0qnov.swift:32:9: warning:\
    \ initialization of variable 'k' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var k = n - 1\n    ~~~~^\n    _\n/tmp/tmp4jg0qnov.swift:33:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = n - 1\n    ~~~~^\n    _\n/tmp/tmp4jg0qnov.swift:34:9:\
    \ warning: initialization of variable 'prime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime = true\n    ~~~~^~~~~\n\
    \    _\n/tmp/tmp4jg0qnov.swift:35:9: warning: initialization of variable 'composite'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var composite = false\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp4jg0qnov.swift:36:9:\
    \ warning: initialization of variable 'composite2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var composite2 = false\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp4jg0qnov.swift:37:9: warning: initialization of variable 'composite3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var composite3 = false\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp4jg0qnov.swift:38:9:\
    \ warning: initialization of variable 'composite4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var composite4 = false\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp4jg0qnov.swift:39:9: warning: initialization of variable 'composite5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var composite5 = false\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp4jg0qnov.swift:40:9:\
    \ warning: initialization of variable 'composite6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n  "
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 165 == 0 {\n        return false\n\
    \    }\n    if n % 169 == 0 {\n        return false\n    }\n    if n % 173 ==\
    \ 0 {\n        return false\n    }\n    if n % 177\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaf2js9k1.swift:159:15: error: expected '{' after 'if' condition\n\
    \    if n % 177\n              ^\n/tmp/tmpaf2js9k1.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 177\n     \
    \    ^\n       ((     ) != 0)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    if n % 5 == 0 {\n        return false\n\
    \    }\n    if n % 7 == 0 {\n        return false\n    }\n    if n % 11 == 0 {\n\
    \        return false\n    }\n    if n % 13 == 0 {\n        return false\n   \
    \ }\n    if n % 17 == 0 {\n        return false\n    }\n    if n % 19 == 0 {\n\
    \        return false\n    }\n    if n % 23 == 0 {\n        return false\n   \
    \ }\n    if n % 29 == 0 {\n        return false\n    }\n    if n % 31 == 0 {\n\
    \        return false\n    }\n    if n % 37 == 0 {\n        return false\n   \
    \ }\n    if n % 41 == 0 {\n        return false\n    }\n    if n % 43 == 0 {\n\
    \        return false\n    }\n    if n % 47 == 0 {\n        return false\n   \
    \ }\n    if n % 53 == 0 {\n        return false\n    }\n    if n % 59 == 0 {\n\
    \        return false\n    }\n    if n % 61 == 0 {\n        return false\n   \
    \ }\n    if n % 67 == 0 {\n        return false\n    }\n    if n % 71 == 0 {\n\
    \        return false\n    }\n    if n % 73 == 0 {\n        return false\n   \
    \ }\n    if n % 79 == 0 {\n        return false\n    }\n    if n % 83 == 0 {\n\
    \        return false\n    }\n    if n % 89 == 0 {\n        return false\n   \
    \ }\n    if n % 97 == 0 {\n        return false\n    }\n    if n % 101 == 0 {\n\
    \        return false\n    }\n    if n % 103 == 0 {\n        return false\n  \
    \  }\n    if n % 107 == 0 {\n        return false\n    }\n    if n % 109 == 0\
    \ {\n        return false\n    }\n    if n % 113 == 0 {\n        return false\n\
    \    }\n    if n % 117 == 0 {\n        return false\n    }\n    if n % 121 ==\
    \ 0 {\n        return false\n    }\n    if n % 123 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 139 == 0 {\n        return false\n    }\n    if n % 143 ==\
    \ 0 {\n        return false\n    }\n    if n % 147 == 0 {\n        return false\n\
    \    }\n    if n % 151 == 0 {\n        return false\n    }\n    if n % 157 ==\
    \ 0 {\n        return false\n    }\n    if n % 161 == 0 {\n        return false\n\
    \    }\n    if n % 165 == 0 {\n        return false\n    }\n    if n % 169 ==\
    \ 0 {\n        return false\n    }\n    if n % 17\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzztjcpq_.swift:159:14: error: expected '{' after 'if' condition\n\
    \    if n % 17\n             ^\n/tmp/tmpzztjcpq_.swift:159:10: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    if n % 17\n      \
    \   ^\n       ((    ) != 0)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpziqf9ym4/tmpziqf9ym4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee291bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee28eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee28eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee28eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziqf9ym4                        0x000055ab7d3e12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aee293a8460 __libc_start_main +
    245

    6    tmpziqf9ym4                        0x000055ab7d3e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i =\
    \ 2\n    var j = 3\n    while i * j <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if n % j == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    var k = 2\n    while i <= n {\n        if n % i == 0 {\n \
    \           return false\n        }\n        if j > k {\n            j += 2\n\
    \        }\n        i += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp__fjy3y6/tmp__fjy3y6.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9cc7b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9cc4a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9cc4a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9cc4a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__fjy3y6                        0x000055af43d382b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac9cc99d460 __libc_start_main +
    245

    6    tmp__fjy3y6                        0x000055af43d37ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Optimize this function\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var i = 2\n\
    \    var j = 3\n    var k = 3\n    var m = n - 1\n\n    while i <= m {\n     \
    \   if n % i == 0 {\n            return false\n        }\n\n        if j % n ==\
    \ 0 {\n            return false\n        }\n\n        if k % n == 0 {\n      \
    \      return false\n        }\n\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpegveidem/tmpegveidem.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbf0ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbf0bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbf0bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbf0bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegveidem                        0x000055cec9b592b7 <unavailable> + 4791

    5    libc.so.6                          0x00002acbf10bb460 __libc_start_main +
    245

    6    tmpegveidem                        0x000055cec9b58ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp395ykawq/tmp395ykawq.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e6862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e68322b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e68322988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e683217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp395ykawq                        0x000055e34a4832b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1e68817460 __libc_start_main +
    245

    6    tmp395ykawq                        0x000055e34a482ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var prime: Int = 2\n    var i: Int = 0\n    while i < n {\n\
    \        if prime % n == 0 {\n            return false\n        }\n        prime++\n\
    \        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpenu__twl.swift:33:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        prime++\n             ^~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpziqf9ym4/tmpziqf9ym4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee291bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee28eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee28eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee28eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziqf9ym4                        0x000055ab7d3e12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aee293a8460 __libc_start_main +
    245

    6    tmpziqf9ym4                        0x000055ab7d3e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let primes = Primes()\n    return primes.contains(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7swbw4pj.swift:18:18: error: cannot find 'Primes' in scope\n  \
    \  let primes = Primes()\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        while\
    \ j <= k {\n            if n % j == 0 {\n                return false\n      \
    \      }\n            j += 1\n        }\n        k += 2\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp17d4xv5e/tmp17d4xv5e.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2277ec2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2277bb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2277bb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2277bb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17d4xv5e                        0x000055d7fe7b02b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b22780ae460 __libc_start_main +
    245

    6    tmp17d4xv5e                        0x000055d7fe7afef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m {\n        if n %\
    \ Int(pow(Double(2), Double(Int(m)))) != 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8w1t3rjf.swift:36:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpziqf9ym4/tmpziqf9ym4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee291bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee28eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee28eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee28eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziqf9ym4                        0x000055ab7d3e12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aee293a8460 __libc_start_main +
    245

    6    tmpziqf9ym4                        0x000055ab7d3e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n\
    \    }\n    if n == 9 {\n        return true\n    }\n    if n == 10 {\n      \
    \  return true\n    }\n    if n == 11 {\n        return true\n    }\n    if n\
    \ == 12 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n     \
    \   return true\n    }\n    if n == 16 {\n        return true\n    }\n    if n\
    \ == 17 {\n        return true\n    }\n    if n == 18 {\n        return true\n\
    \    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n     \
    \   return true\n    }\n    if n == 21 {\n        return true\n    }\n    if n\
    \ == 22 {\n        return true\n    }\n    if n == 23 {\n        return true\n\
    \    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n     \
    \   return true\n    }\n    if n == 26 {\n        return true\n    }\n    if n\
    \ == 27 {\n        return true\n    }\n    if n == 28 {\n        return true\n\
    \    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 32 {\n        return true\n    }\n    if n == 33 {\n        return true\n\
    \    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n     \
    \   return true\n    }\n    if n == 36 {\n        return true\n    }\n    if n\
    \ == 37 {\n        return true\n    }\n    if n == 38 {\n        return true\n\
    \    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n     \
    \   return true\n    }\n    if n == 41 {\n        return true\n    }\n    if n\
    \ == 42 {\n        return true\n    }\n    if n == 43 {\n        return true\n\
    \    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n     \
    \   return true\n    }\n    if n == 46 {\n        return true\n    }\n    if n\
    \ == 47 {\n        return true\n    }\n    if n == 48 {\n        return true\n\
    \    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n     \
    \   return true\n    }\n    if n == 51 {\n        return true\n    }\n    if n\
    \ == 52 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8x0r6qty.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp8x0r6qty.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp8x0r6qty.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        if n == 1 {\n         \
    \   return true\n        }\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += s\n        s = 6 - s\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3\
    \ == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int64 = 1\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            return false\n  \
    \      }\n        s += i\n        i += 6\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1hvanvn7.swift:39:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        s += i\n             ^\n        \
    \     Int64( )\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ i == j {\n            return true\n        }\n        i += 2\n        j += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe5rjdj2a/tmpe5rjdj2a.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e6c313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e6c00ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e6c00a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e6c0097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5rjdj2a                        0x00005613e0dd56fb <unavailable> + 5883

    5    libc.so.6                          0x00002b0e6c4ff460 __libc_start_main +
    245

    6    tmpe5rjdj2a                        0x00005613e0dd4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978589
