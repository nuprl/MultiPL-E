name: HumanEval_156_int_to_mini_roman
language: swift
prompt: "\n/// Given a positive integer, obtain its roman numeral equivalent as a\
  \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
  /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
  \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\nfunc\
  \ int_to_mini_roman(number: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\"\
  )\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
  \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
  \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
  \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
  \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
  \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
  \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
completions: ["    let roman = roman_numerals(number: number)\n    return roman.map(String.init).joined()",
  "    let roman = roman_numerals(number: number)\n    return roman.lowercased()",
  "    let roman = roman_numerals(number: number)\n    return roman.map(String.init).joinWithSeparator(\"\
    \")", "    let roman = romanNumerals(number: number)\n    return roman.map({ $0.lowercased()\
    \ }).joined()", "    let roman = romanNumerals(number: number)\n    return roman.map(String.init).joined()",
  "    let roman = mini_roman(number)\n    return roman.lowercased()", "    var roman\
    \ = \"\"\n    var num = 0\n    var digit = 0\n    var isNegative = false\n\n \
    \   if number < 0 {\n        isNegative = true\n        number = -number\n   \
    \ }\n\n    switch number {\n    case 0:\n        roman = \"0\"\n    case 1:\n\
    \        roman = \"x\"\n    case 2:\n        roman = \"c\"\n    case 3:\n    \
    \    roman = \"b\"\n    case 4:\n        roman = \"a\"\n    case 5:\n        roman\
    \ = \"d\"\n    case 6:\n        roman = \"e\"\n    case 7:\n        roman = \"\
    f\"\n    case 8:\n        roman = \"g\"\n    case 9:\n        roman = \"h\"\n\
    \    case 10:\n        roman = \"i\"\n    case 11:\n        roman = \"j\"\n  \
    \  case 12:\n        roman = \"k\"\n    case 13:\n        roman = \"l\"\n    case\
    \ 14:\n        roman = \"m\"\n    case 15:\n        roman = \"n\"\n    case 16:\n\
    \        roman = \"o\"\n    case 17:\n        roman = \"p\"\n    case 18:\n  \
    \      roman = \"q\"\n    case 19:\n        roman = \"r\"\n    case 20:\n    \
    \    roman = \"s\"\n    case 21:\n        roman = \"t\"\n    case 22:\n      \
    \  roman = \"u\"\n    case 23:\n        roman = \"v\"\n    case 24:\n        roman\
    \ = \"w\"\n    case 25:\n        roman = \"x\"\n    case 26:\n        roman =\
    \ \"y\"\n    case 27:\n        roman = \"z\"\n    case 28:\n        roman = \"\
    aa\"\n    case 29:\n        roman = \"ab\"\n    case 30:\n        roman = \"ac\"\
    \n    case 31:\n        roman = \"ad\"\n    case 32:\n        roman = \"ae\"\n\
    \    case 33:\n        roman = \"af\"\n    case 34:\n        roman = \"ag\"\n\
    \    case 35:\n        roman = \"ai\"\n    case 36:\n        roman = \"aj\"\n\
    \    case 37:\n        roman = \"ak\"\n    case 38:\n        roman = \"al\"\n\
    \    case 39:\n        roman = \"am\"\n    case 40:\n        roman = \"an\"\n\
    \    case 41:\n        roman = \"ao\"\n    case 42:\n        roman = \"ap\"\n\
    \    case 43:\n        roman = \"aq\"\n    case 44:\n        roman = \"ar\"\n\
    \    case 45:\n        roman = \"as\"\n    case 46:\n        ", "    let roman\
    \ = roman_numeral(number)\n    return roman.lowercased()", "    let roman = roman_numerals(number:\
    \ number)\n    return roman.map(String.init).joined()", "    let roman = Array(1...number).map\
    \ { roman_numeral($0) }\n    return roman.join()", "    guard number >= 1 && number\
    \ <= 1000 else {\n        return \"\"\n    }\n\n    var roman = \"\"\n    var\
    \ numeral = \"\"\n\n    for _ in 1...number {\n        numeral += String(number)\n\
    \        roman += mini_roman_to_int(numeral)\n        numeral = \"\"\n    }\n\n\
    \    return roman.lowercased()", "    let roman = romanNumerals(from: number)\n\
    \    return roman.map({ $0.lowercased() }).joined()", "    var roman = \"\"\n\
    \    var roman_numeral = \"\"\n    var roman_numeral_digits = \"\"\n    var roman_numeral_digits_length\
    \ = 0\n    var roman_numeral_digits_length2 = 0\n    var roman_numeral_digits_length3\
    \ = 0\n    var roman_numeral_digits_length4 = 0\n    var roman_numeral_digits_length5\
    \ = 0\n    var roman_numeral_digits_length6 = 0\n    var roman_numeral_digits_length7\
    \ = 0\n    var roman_numeral_digits_length8 = 0\n    var roman_numeral_digits_length9\
    \ = 0\n    var roman_numeral_digits_length10 = 0\n    var roman_numeral_digits_length11\
    \ = 0\n    var roman_numeral_digits_length12 = 0\n    var roman_numeral_digits_length13\
    \ = 0\n    var roman_numeral_digits_length14 = 0\n    var roman_numeral_digits_length15\
    \ = 0\n    var roman_numeral_digits_length16 = 0\n    var roman_numeral_digits_length17\
    \ = 0\n    var roman_numeral_digits_length18 = 0\n    var roman_numeral_digits_length19\
    \ = 0\n    var roman_numeral_digits_length20 = 0\n    var roman_numeral_digits_length21\
    \ = 0\n    var roman_numeral_digits_length22 = 0\n    var roman_numeral_digits_length23\
    \ = 0\n    var roman_numeral_digits_length24 = 0\n    var roman_numeral_digits_length25\
    \ = 0\n    var roman_numeral_digits_length26 = 0\n    var roman_numeral_digits_length27\
    \ = 0\n    var roman_numeral_digits_length28 = 0\n    var roman_numeral_digits_length29\
    \ = 0\n    var roman_numeral_digits_length30 = 0\n    var roman_numeral_digits_length31\
    \ = 0\n    var roman_numeral_digits_length32 = 0\n    var roman_numeral_digits_length33\
    \ = 0\n    var roman_numeral_digits_length34 = 0\n    var roman_numeral_digits_length35\
    \ = 0\n    var roman_numeral_digits_length36 = 0\n    var roman_numeral_digits_length37\
    \ = 0\n    var roman_numeral_digits_length38 = 0\n    var roman_numeral_digits_length39\
    \ = 0\n    var roman_numeral_digits_length40 = 0\n    var roman_numeral_digits_length41\
    \ = 0\n    var roman_numeral_digits_length42 = 0\n    var roman_numeral_digits_length43\
    \ = 0\n    var roman_numeral_digits_length44 = 0\n    var roman_numeral_digits_length",
  "    let roman = Array(1...number).map { String($0) }\n    let romanString = roman.join()\n\
    \    return romanString.lowercased()", "    var roman = \"\"\n    var remainder\
    \ = number\n    var i = 2\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / 10, remainder % 10\n        roman += roman_digits[i]\n       \
    \ i++\n    }\n    return roman", "    let roman = int_to_roman(number)\n    return\
    \ roman.lowercased()", "    let roman = roman_numerals(number: number)\n    return\
    \ roman.map(String.init).joined()", "    var roman = \"\"\n    var roman_numeral\
    \ = \"\"\n    var roman_numeral_digits = \"\"\n    var roman_numeral_digit_count\
    \ = 0\n    var roman_numeral_digit_count_max = 0\n    var roman_numeral_digit_count_min\
    \ = 0\n    var roman_numeral_digit_count_max_min = 0\n    var roman_numeral_digit_count_max_min_index\
    \ = 0\n    var roman_numeral_digit_count_max_min_index2 = 0\n    var roman_numeral_digit_count_max_min_index3\
    \ = 0\n    var roman_numeral_digit_count_max_min_index4 = 0\n    var roman_numeral_digit_count_max_min_index5\
    \ = 0\n    var roman_numeral_digit_count_max_min_index6 = 0\n    var roman_numeral_digit_count_max_min_index7\
    \ = 0\n    var roman_numeral_digit_count_max_min_index8 = 0\n    var roman_numeral_digit_count_max_min_index9\
    \ = 0\n    var roman_numeral_digit_count_max_min_index10 = 0\n    var roman_numeral_digit_count_max_min_index11\
    \ = 0\n    var roman_numeral_digit_count_max_min_index12 = 0\n    var roman_numeral_digit_count_max_min_index13\
    \ = 0\n    var roman_numeral_digit_count_max_min_index14 = 0\n    var roman_numeral_digit_count_max_min_index15\
    \ = 0\n    var roman_numeral_digit_count_max_min_index16 = 0\n    var roman_numeral_digit_count_max_min_index17\
    \ = 0\n    var roman_numeral_digit_count_max_min_index18 = 0\n    var roman_numeral_digit_count_max_min_index19\
    \ = 0\n    var roman_numeral_digit_count_max_min_index20 = 0\n    var roman_numeral_digit_count_max_min_index21\
    \ = 0\n    var roman_numeral_digit_count_max_min_index22 = 0\n    var roman_numeral_digit_count_max_min_index23\
    \ = 0\n    var roman_numeral_digit_count_max_min_index24 = 0\n    var roman_numeral_digit_count_max_min_index25\
    \ = 0\n    var roman_numeral_digit_count_max_min_index26 = 0\n    var roman_numeral_digit_count_max_min_index27\
    \ = 0\n    var roman_numeral_digit_count_max_min_index28 = 0\n    var roman_numeral_digit_count_max_min_index29\
    \ = 0\n    var roman_numeral_digit_count_max_min_index30 = 0\n    var roman_numeral_digit_count_max_min_index31\
    \ = 0\n    var roman_numeral_digit_count_max_min_index32 = 0\n    var roman_numeral_digit_count_max_min_index33\
    \ = 0\n    var roman_numeral_digit_count_max_min_index34 = 0\n    var roman_numeral_digit_count_max_min_index35",
  "    let roman = romanNumerals(number: number)\n    return roman.map({ String($0)\
    \ }).joined()", "    let roman = roman_numeral(number)\n    return roman.lowercased()"]
stop_tokens:
- "\n}"
