language: swift
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            if\
    \ word != \"\" {\n                result += word\n                word = \"\"\n\
    \            }\n        } else {\n            word += String(c)\n        }\n \
    \   }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6g2rahg.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let c = s.characters[index\
    \ - 1]\n            let c2 = s.characters[index]\n            if c.isUppercase\
    \ && c2.isLowercase {\n                result += c.lowercaseString\n         \
    \   } else if c.isLowercase && c2.isUppercase {\n                result += c.uppercaseString\n\
    \            } else if c.isUppercase && c2.isLowercase {\n                result\
    \ += c.uppercaseString\n            } else if c.isLowercase && c2.isUppercase\
    \ {\n                result += c.lowercaseString\n            } else {\n     \
    \           result += c\n            }\n        } else {\n            result +=\
    \ c\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprugiq8h0.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprugiq8h0.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmprugiq8h0.swift:33:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            if c != \" \" {\n                result += String(c)\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0j7wg5g_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            if index\
    \ != 0 {\n                result += \" \"\n            }\n            result +=\
    \ c\n            index = 0\n        } else {\n            result += String(c)\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmph6j1otcv.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph6j1otcv.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += word\n            isSpace = false\n            word\
    \ = \"\"\n        }\n        if c == \" \" {\n            isSpace = true\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    result +=\
    \ word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvk8dwli1.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c.isUppercase {\n            result += c.lowercaseString\n\
    \        } else {\n            result += c.uppercaseString\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0by5vgm_.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0by5vgm_.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmp0by5vgm_.swift:20:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var words\
    \ = s.split(separator: \" \")\n    for word in words {\n        var newWord =\
    \ \"\"\n        for char in word {\n            if char.asciiValue > 96 {\n  \
    \              newWord += \"z\"\n            } else {\n                newWord\
    \ += String(char)\n            }\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpexgfkejy.swift:20:21: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if char.asciiValue > 96\
    \ {\n                    ^\n/tmp/tmpexgfkejy.swift:20:21: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if char.asciiValue > 96 {\n                    ^\n                       \
    \        ?? <#default value#>\n/tmp/tmpexgfkejy.swift:20:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if char.asciiValue > 96 {\n                    ^\n                      \
    \        !\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        var new_word = word\n        for char in word.unicodeScalars\
    \ {\n            let value = char.value\n            if value >= 97 && value <=\
    \ 122 {\n                new_word = new_word.replacingOccurrences(of: String(char),\
    \ with: String(value))\n            }\n        }\n        result += new_word +\
    \ \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpglmevzj9.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var index = 0\n    for c in s.characters {\n        if c == ' '\
    \ {\n            if word != \"\" {\n                result += word\n         \
    \       word = \"\"\n            }\n        } else {\n            word += c\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc1uniqsn.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpc1uniqsn.swift:18:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpc1uniqsn.swift:25:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            word\
    \ += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != s.characters.startIndex {\n           \
    \ let newIndex = index + Int(arc4random_uniform(UInt32(s.characters.count - index)))\n\
    \            let newChar = String(s.characters[newIndex])\n            result\
    \ += newChar\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyok3gy39.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyok3gy39.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpyok3gy39.swift:19:40: error:\
    \ cannot find 'arc4random_uniform' in scope\n            let newIndex = index\
    \ + Int(arc4random_uniform(UInt32(s.characters.count - index)))\n            \
    \                           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi21ki2rh.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi21ki2rh.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpi21ki2rh.swift:21:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:44: note:\
    \ found candidate with type '(Float16) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:44: note:\
    \ found candidate with type '(Float) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:44: note:\
    \ found candidate with type '(Double) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:44: note:\
    \ found candidate with type '(Float80) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:44: note:\
    \ found candidate with type '(Builtin.Int32) -> UInt32'\n            result +=\
    \ String(UnicodeScalar(UInt32(c))).uppercaseString\n                         \
    \                  ^\n/tmp/tmpi21ki2rh.swift:21:44: note: found candidate with\
    \ type '(Unicode.Scalar) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c))).uppercaseString\n\
    \                                           ^\n/tmp/tmpi21ki2rh.swift:21:30: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n   \
    \         result += "
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastSpace\
    \ = 0\n    for c in s.characters {\n        if c == ' ' {\n            lastSpace\
    \ = s.characters.count\n        }\n        if lastSpace > 0 {\n            result\
    \ += String(s.characters[lastSpace - 1 : s.characters.count - 1])\n        }\n\
    \        result += String(c)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdyx7tcyd.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpdyx7tcyd.swift:22:57: error: expected ',' separator\n            result\
    \ += String(s.characters[lastSpace - 1 : s.characters.count - 1])\n          \
    \                                              ^\n                           \
    \                            ,\n/tmp/tmpdyx7tcyd.swift:22:57: error: expected\
    \ expression in list of expressions\n            result += String(s.characters[lastSpace\
    \ - 1 : s.characters.count - 1])\n                                           \
    \             ^\n/tmp/tmpdyx7tcyd.swift:17:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdyx7tcyd.swift:19:27:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ lastSpace = s.characters.count\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpdyx7tcyd.swift:22:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            result += String(s.characters[lastSpace - 1 : s.characters.count\
    \ - 1])\n                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdyx7tcyd.swift:22:32:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += String(s.characters[lastSpace - 1 : s.characters.count - 1])\n   \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s.characters {\n        if c == \" \" {\n\
    \            if word != \"\" {\n                result += word\n             \
    \   word = \"\"\n            }\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphk78zaj6.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphk78zaj6.swift:17:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c)\n        if value > 96 {\n      \
    \      result += String(value - 26)\n        } else {\n            result += String(value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnckyjtz7.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnckyjtz7.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        if char == ' ' {\n            result += char\n  \
    \      } else {\n            result += String(UnicodeScalar(char).value - 32)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp21180mjm.swift:17:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' {\n                   ^~~\n               \
    \    \" \"\n/tmp/tmp21180mjm.swift:16:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp21180mjm.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmp21180mjm.swift:20:30:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(char).value\
    \ - 32)\n                             ^\nSwift.Unicode.Scalar:7:23: note: candidate\
    \ expects value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'Character')\n    @inlinable public init(_ v: Unicode.Scalar)\n            \
    \          ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        } else {\n            result = result + c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk0q7y5kb.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk0q7y5kb.swift:19:91:\
    \ error: cannot find 'NSStringCompareOptions' in scope\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                     ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk0q7y5kb.swift:19:24: error:\
    \ value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result = c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n         \
    \            ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk0q7y5kb.swift:19:136:\
    \ error: 'nil' requires a contextual type\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                                                                  ^\n/tmp/tmpk0q7y5kb.swift:21:100:\
    \ error: cannot find 'NSStringCompareOptions' in scope\n            result = result\
    \ + c.stringByReplacingOccurrencesOfString(\" \", withString: \"\", options: NSStringCompareOptions.LiteralSearch,\
    \ range: nil)\n                                                              \
    \                                     ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk0q7y5kb.swift:21:33:\
    \ error: value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result = result + c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n         \
    \                     ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk0q7y5kb.swift:21:145:\
    \ error: 'nil' requires a contextual type\n            r"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastChar\
    \ = \"\"\n    for c in s.characters {\n        if lastChar == \" \" {\n      \
    \      result += c\n            lastChar = \"\"\n        } else {\n          \
    \  result += String(UnicodeScalar(Int(c)!))\n            lastChar = c\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpayg1eg95.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpayg1eg95.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpayg1eg95.swift:22:30:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            result += String(UnicodeScalar(Int(c)!))\n                      \
    \       ^\n/tmp/tmpayg1eg95.swift:22:30: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result += String(UnicodeScalar(Int(c)!))\n\
    \                             ^\n                                            \
    \        ?? <#default value#>\n/tmp/tmpayg1eg95.swift:22:30: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result += String(UnicodeScalar(Int(c)!))\n                             ^\n\
    \                                                   !\n/tmp/tmpayg1eg95.swift:22:48:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += String(UnicodeScalar(Int(c)!))\n                      \
    \                         ^\n/tmp/tmpayg1eg95.swift:23:24: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            lastChar = c\n     \
    \                  ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastWord\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            if\
    \ lastWord.characters.count > 0 {\n                result += lastWord\n      \
    \          lastWord = \"\"\n            }\n        } else {\n            lastWord\
    \ += String(c)\n        }\n    }\n    if lastWord.characters.count > 0 {\n   \
    \     result += lastWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmps7nz_gei.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmps7nz_gei.swift:19:25:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if lastWord.characters.count > 0 {\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmps7nz_gei.swift:27:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    if lastWord.characters.count\
    \ > 0 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if let _ = c.isLetterOrDigit() {\n            result\
    \ += c.lowercaseString\n        } else {\n            result += c.uppercaseString\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptsxsnd0k.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptsxsnd0k.swift:17:22:\
    \ error: value of type 'Character' has no member 'isLetterOrDigit'\n        if\
    \ let _ = c.isLetterOrDigit() {\n                   ~ ^~~~~~~~~~~~~~~\n/tmp/tmptsxsnd0k.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmptsxsnd0k.swift:20:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var words\
    \ = s.split(\" \")\n    for word in words {\n        var newWord = \"\"\n    \
    \    for char in word {\n            if char.isUpper() {\n                newWord\
    \ += \"A\"\n            } else if char.isLower() {\n                newWord +=\
    \ \"a\"\n            } else {\n                newWord += char\n            }\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsoah6o4g.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = Int(c) - 97\n        let char = String(UnicodeScalar(index))\n\
    \        result += char\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpquckinar.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpquckinar.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let index = Int(c)\
    \ - 97\n                    ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c.isUppercase {\n            result += String(c)\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv6zch44p.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv6zch44p.swift:20:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 { // a-z\n\
    \            result += String(c)\n        } else if ascii < 123 { // A-Z\n   \
    \         result += String(c - 26)\n        } else {\n            result += String(c\
    \ - 91)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp297a9rz8.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp297a9rz8.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmp297a9rz8.swift:21:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            result += String(c - 26)\n    \
    \                         ^\n/tmp/tmp297a9rz8.swift:23:30: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Int'\n            result\
    \ += String(c - 91)\n                             ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i:]\
    \ + c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpptllv27f.swift:24:35: error: expected expression in list of expressions\n\
    \                result = result[i:] + c\n                                  ^\n\
    /tmp/tmpptllv27f.swift:17:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpptllv27f.swift:19:22: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ = c + result\n                     ^\n/tmp/tmpptllv27f.swift:21:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if c < result[i] {\n                   ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpptllv27f.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpptllv27f.swift:24:39:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = result[i:] + c\n                                   \
    \   ^\n/tmp/tmpptllv27f.swift:24:35: error: missing argument for parameter #1\
    \ in call\n                result = result[i:] + c\n                         \
    \         ^\n                                  <#Range<String.Index>#>\nSwift.String:3:12:\
    \ note: 'subscript(_:)' declared here\n    public subscript(r: Range<String.Index>)\
    \ -> Substring { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c < s.characters[i-1] {\n                result\
    \ += c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdelsva2_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdelsva2_.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpdelsva2_.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[i-1] {\n      \
    \             ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpdelsva2_.swift:21:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[i-1]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpdelsva2_.swift:22:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result += c\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(ascii + 32)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpag_ocyw7.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpag_ocyw7.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var index = 0\n    for char in s.characters {\n        if char ==\
    \ \" \" {\n            if word != \"\" {\n                result += word\n   \
    \             word = \"\"\n            }\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if word != \"\" {\n        result += word\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz20stu40.swift:18:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz20stu40.swift:17:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let nextIndex = s.characters.index(before:\
    \ index)\n            let nextChar = s.characters[nextIndex]\n            if nextChar\
    \ == \" \" {\n                result += c\n            } else {\n            \
    \    result += String(UnicodeScalar(Int(c) - Int(nextChar)))\n            }\n\
    \        } else {\n            result += c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6wsnktx6.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6wsnktx6.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp6wsnktx6.swift:22:27: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmp6wsnktx6.swift:24:48:\
    \ error: no exact matches in call to initializer \n                result += String(UnicodeScalar(Int(c)\
    \ - Int(nextChar)))\n                                               ^\n/tmp/tmp6wsnktx6.swift:24:48:\
    \ note: found candidate with type '(Float16) -> Int'\n                result +=\
    \ String(UnicodeScalar(Int(c) - Int(nextChar)))\n                            \
    \                   ^\n/tmp/tmp6wsnktx6.swift:24:48: note: found candidate with\
    \ type '(Float) -> Int'\n                result += String(UnicodeScalar(Int(c)\
    \ - Int(nextChar)))\n                                               ^\n/tmp/tmp6wsnktx6.swift:24:48:\
    \ note: found candidate with type '(Double) -> Int'\n                result +=\
    \ String(UnicodeScalar(Int(c) - Int(nextChar)))\n                            \
    \                   ^\n/tmp/tmp6wsnktx6.swift:24:48: note: found candidate with\
    \ type '(Float80) -> Int'\n                result += String(UnicodeScalar(Int(c)\
    \ - Int(nextChar)))\n                                               ^\n/tmp/tmp6wsnktx6.swift:24:48:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n                result\
    \ += String(UnicodeScalar(Int(c) - Int(nextChar)))\n                         \
    \                      ^\n/tmp/tmp6wsnktx6.swift:24:48: note: found candidate\
    \ with type '(Builtin.Word) -> Int'\n                result += String(UnicodeScalar(Int(c)\
    \ - Int(nextChar)))\n                                               ^\n/tmp/tmp6wsnktx6"
  stdout: ''
  timestamp: 1660014029
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = char.asciiValue\n        if value > 64\
    \ {\n            result += String(UnicodeScalar(value - 64))\n        } else {\n\
    \            result += String(UnicodeScalar(value))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvm186vhl.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvm186vhl.swift:18:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 64 {\n           ^\n/tmp/tmpvm186vhl.swift:18:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 64 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmpvm186vhl.swift:18:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 64 {\n  \
    \         ^\n                !\n/tmp/tmpvm186vhl.swift:19:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value - 64))\n                         \
    \                  ^\n/tmp/tmpvm186vhl.swift:19:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result\
    \ += String(UnicodeScalar(value - 64))\n                                     \
    \      ^\n                                           (     ?? <#default value#>)\n\
    /tmp/tmpvm186vhl.swift:19:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result += String(UnicodeScalar(value\
    \ - 64))\n                                           ^\n                     \
    \                           !\n/tmp/tmpvm186vhl.swift:21:44: error: value of optional\
    \ type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n            result\
    \ += String(UnicodeScalar(value))\n                                          \
    \ ^\n/tmp/tmpvm186vhl.swift:21:44: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default va"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    for c in s.characters {\n        if c == ' ' {\n         \
    \   result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4cab1hr3.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp4cab1hr3.swift:22:17: error: single-quoted string literal found, use '\"\
    '\n        if c == ' ' {\n                ^~~\n                \" \"\n/tmp/tmp4cab1hr3.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4cab1hr3.swift:21:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let ascii = Int(char)\n        if ascii < 97 {\n\
    \            result += String(char)\n        } else if ascii < 123 {\n       \
    \     result += String(char.unicodeScalars.first!)\n        } else {\n       \
    \     result += String(char.unicodeScalars.last!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_f6j6k_5.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_f6j6k_5.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c != \" \" {\n                result\
    \ = c + result\n            } else {\n                result = result[0 : result.startIndex.advancedBy(-1)]\
    \ + result\n            }\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj94t0rbe.swift:24:35: error: expected ',' separator\n         \
    \       result = result[0 : result.startIndex.advancedBy(-1)] + result\n     \
    \                             ^\n                                 ,\n/tmp/tmpj94t0rbe.swift:24:35:\
    \ error: expected expression in list of expressions\n                result =\
    \ result[0 : result.startIndex.advancedBy(-1)] + result\n                    \
    \              ^\n/tmp/tmpj94t0rbe.swift:17:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj94t0rbe.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpj94t0rbe.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpj94t0rbe.swift:24:32:\
    \ error: no exact matches in call to subscript \n                result = result[0\
    \ : result.startIndex.advancedBy(-1)] + result\n                             \
    \  ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>'\
    \ for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) ->\
    \ Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case ' ':\n            result +=\
    \ c\n        case ' ':\n            result += c\n        default:\n          \
    \  result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyz5l_i3.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmpuyz5l_i3.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmpuyz5l_i3.swift:16:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpuyz5l_i3.swift:19:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpuyz5l_i3.swift:21:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmpuyz5l_i3.swift:20:14: warning: literal value is\
    \ already handled by previous pattern; consider removing it\n        case ' ':\n\
    \             ^~~\n/tmp/tmpuyz5l_i3.swift:18:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ' ':\n             ^~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        } else {\n            result += c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpng0qapde.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpng0qapde.swift:19:91:\
    \ error: cannot find 'NSStringCompareOptions' in scope\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                     ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpng0qapde.swift:19:24: error:\
    \ value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result = c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n         \
    \            ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpng0qapde.swift:19:136:\
    \ error: 'nil' requires a contextual type\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\", options: NSStringCompareOptions.LiteralSearch, range:\
    \ nil)\n                                                                     \
    \                                                                  ^\n/tmp/tmpng0qapde.swift:21:92:\
    \ error: cannot find 'NSStringCompareOptions' in scope\n            result +=\
    \ c.stringByReplacingOccurrencesOfString(\" \", withString: \"\", options: NSStringCompareOptions.LiteralSearch,\
    \ range: nil)\n                                                              \
    \                             ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpng0qapde.swift:21:25:\
    \ error: value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result += c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n         \
    \             ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpng0qapde.swift:21:137:\
    \ error: 'nil' requires a contextual type\n            result += c.stringByReplacingOccur"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i:]\
    \ + c + result[i:]\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpr7_wmn40.swift:24:35: error: expected expression in list of expressions\n\
    \                result = result[i:] + c + result[i:]\n                      \
    \            ^\n/tmp/tmpr7_wmn40.swift:24:52: error: expected expression in list\
    \ of expressions\n                result = result[i:] + c + result[i:]\n     \
    \                                              ^\n/tmp/tmpr7_wmn40.swift:17:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr7_wmn40.swift:19:22: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result = c\
    \ + result\n                     ^\n/tmp/tmpr7_wmn40.swift:21:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if c < result[i] {\n                   ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr7_wmn40.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpr7_wmn40.swift:24:52:\
    \ error: missing argument for parameter #1 in call\n                result = result[i:]\
    \ + c + result[i:]\n                                                   ^\n   \
    \                                                <#Range<String.Index>#>\nSwift.String:3:12:\
    \ note: 'subscript(_:)' declared here\n    public subscript(r: Range<String.Index>)\
    \ -> Substring { get }\n           ^\n/tmp/tmpr7_wmn40.swift:24:39: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result = result[i:] + c + result[i:]\n                           \
    \           ^\n/tmp/tmpr7_wmn40.swift:24:35: error: missing argument for parameter\
    \ #1 in call\n                result = result[i:] + c + result[i:]\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var words\
    \ = s.split(\" \")\n    for word in words {\n        var newWord = \"\"\n    \
    \    for char in word {\n            newWord += String(Int(char.asciiValue) +\
    \ Int(Int(newWord.countElements() / 2)))\n        }\n        result += newWord\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9_7behcq.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s.characters {\n        if c == \" \" {\n\
    \            if word != \"\" {\n                result += word\n             \
    \   word = \"\"\n            }\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphk78zaj6.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphk78zaj6.swift:17:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let ascii = Int(char)\n        if ascii < 97 || ascii\
    \ > 122 {\n            result += String(char)\n        } else {\n            result\
    \ += String(UnicodeScalar(ascii).value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp61m_1l0k.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp61m_1l0k.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i:]\
    \ + c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpptllv27f.swift:24:35: error: expected expression in list of expressions\n\
    \                result = result[i:] + c\n                                  ^\n\
    /tmp/tmpptllv27f.swift:17:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpptllv27f.swift:19:22: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ = c + result\n                     ^\n/tmp/tmpptllv27f.swift:21:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if c < result[i] {\n                   ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpptllv27f.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpptllv27f.swift:24:39:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = result[i:] + c\n                                   \
    \   ^\n/tmp/tmpptllv27f.swift:24:35: error: missing argument for parameter #1\
    \ in call\n                result = result[i:] + c\n                         \
    \         ^\n                                  <#Range<String.Index>#>\nSwift.String:3:12:\
    \ note: 'subscript(_:)' declared here\n    public subscript(r: Range<String.Index>)\
    \ -> Substring { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c.isUppercase {\n                result += c.lowercase\n\
    \            } else {\n                result += c.uppercase\n            }\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf1ue_s3_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf1ue_s3_.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpf1ue_s3_.swift:22:29:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ result += c.lowercase\n                          ~ ^~~~~~~~~\n/tmp/tmpf1ue_s3_.swift:24:29:\
    \ error: value of type 'Character' has no member 'uppercase'\n               \
    \ result += c.uppercase\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c.isUppercase {\n                result += c.lowercaseString\n\
    \            } else {\n                result += c.uppercaseString\n         \
    \   }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpm254ep0f.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm254ep0f.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpm254ep0f.swift:22:29:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result += c.lowercaseString\n                          ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpm254ep0f.swift:24:29: error: value of type 'Character' has no member 'uppercaseString'\n\
    \                result += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s.characters {\n        if c == \" \" {\n\
    \            if word != \"\" {\n                result += word\n             \
    \   word = \"\"\n            }\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphk78zaj6.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphk78zaj6.swift:17:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyvtjac.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwcyvtjac.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n        }\n    }\n    for c in s.characters {\n\
    \        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: s.characters.endIndex)\n \
    \       }\n    }\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex {\n            let temp = s.characters[index]\n\
    \            s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n        }\n    }\n    for c in s.characters {\n\
    \        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: s.characters.endIndex)\n \
    \       }\n    }\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex {\n            let temp = s.characters[index]\n\
    \            s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n        }\n    }\n    for c in s.characters {\n\
    \        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: s.characters.endIndex)\n \
    \       }\n    }\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex {\n            let temp = s.characters[index]\n\
    \            s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n        }\n    }\n    for c in s.characters {\n\
    \        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: s.characters.endIndex)\n \
    \       }\n    }\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex {\n            let temp = s.characters[index]\n\
    \            s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n        }\n    }\n    for c in s.characters {\n\
    \        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ {\n            let temp = s.characters[index]\n            s.characters.\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppbbhjxfi.swift:92:25: error: expected member name following '.'\n\
    \            s.characters.\n                        ^\n/tmp/tmppbbhjxfi.swift:114:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmppbbhjxfi.swift:88:27:\
    \ note: to match this opening '{'\n    for c in s.characters {\n             \
    \             ^\n/tmp/tmppbbhjxfi.swift:114:116: error: expected '}' at end of\
    \ brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n                \
    \                                                                            \
    \                       ^\n/tmp/tmppbbhjxfi.swift:14:40: note: to match this opening\
    \ '{'\nfunc anti_shuffle(s: String) -> String {\n                            \
    \           ^\n/tmp/tmppbbhjxfi.swift:16:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppbbhjxfi.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmppbbhjxfi.swift:20:26: error:\
    \ no exact matches in call to instance method 'remove'\n            s.characters.remove(at:\
    \ index)\n                         ^\n/tmp/tmppbbhjxfi.swift:20:26: note: found\
    \ candidate with type '(String.Index) -> Character'\n            s.characters.remove(at:\
    \ index)\n                         ^\n/tmp/tmppbbhjxfi.swift:21:26: error: no\
    \ exact matches in call to instance method 'insert'\n            s.characters.insert(temp,\
    \ at: s.characters.endIndex)\n                         ^\n/tmp/tmppbbhjxfi.swift:21:26:\
    \ note: found candidate with type '(Character, String.Index) -> "
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            if c < s.characters[i-1] {\n                result\
    \ += String(c)\n            } else {\n                result += String(s.characters[i-1])\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq3d7yoke.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq3d7yoke.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[i-1] {\n      \
    \             ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpq3d7yoke.swift:21:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[i-1]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpq3d7yoke.swift:24:34: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       result += String(s.characters[i-1])\n                                \
    \ ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpq3d7yoke.swift:24:36: error: 'characters' is unavailable:\
    \ Please use String directly\n                result += String(s.characters[i-1])\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != \" \" {\n            result += String(c)\n \
    \       }\n    }\n    for c in s.characters {\n        if c == \" \" {\n     \
    \       result += \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxq7dgxw1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxq7dgxw1.swift:21:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = Int(c) - 97\n        if index < 0 {\n  \
    \          index += 26\n        }\n        result += String(UnicodeScalar(index))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpiodv7b52.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpiodv7b52.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let index = Int(c)\
    \ - 97\n                    ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    for c in s.characters {\n        if c == ' ' {\n         \
    \   result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4cab1hr3.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp4cab1hr3.swift:22:17: error: single-quoted string literal found, use '\"\
    '\n        if c == ' ' {\n                ^~~\n                \" \"\n/tmp/tmp4cab1hr3.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4cab1hr3.swift:21:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \" \":\n            result += c\n        default:\n     \
    \       result += String(UnicodeScalar(Int(c)))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppnueipvc.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppnueipvc.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmppnueipvc.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmppnueipvc.swift:23:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmppnueipvc.swift:23:44: not"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c).asciiValue\n        if value > 90\
    \ {\n            result += String(value - 90 + 32)\n        } else {\n       \
    \     result += String(value)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptl6l61u7.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptl6l61u7.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c).asciiValue\n\
    \                    ^\n/tmp/tmptl6l61u7.swift:17:21: note: found candidate with\
    \ type '(Float16) -> Int'\n        let value = Int(c).asciiValue\n           \
    \         ^\n/tmp/tmptl6l61u7.swift:17:21: note: found candidate with type '(Float)\
    \ -> Int'\n        let value = Int(c).asciiValue\n                    ^\n/tmp/tmptl6l61u7.swift:17:21:\
    \ note: found candidate with type '(Double) -> Int'\n        let value = Int(c).asciiValue\n\
    \                    ^\n/tmp/tmptl6l61u7.swift:17:21: note: found candidate with\
    \ type '(Float80) -> Int'\n        let value = Int(c).asciiValue\n           \
    \         ^\n/tmp/tmptl6l61u7.swift:17:21: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        let value = Int(c).asciiValue\n                    ^\n/tmp/tmptl6l61u7.swift:17:21:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        let value =\
    \ Int(c).asciiValue\n                    ^\n/tmp/tmptl6l61u7.swift:17:21: note:\
    \ found candidate with type '(String) -> Int?'\n        let value = Int(c).asciiValue\n\
    \                    ^\n/tmp/tmptl6l61u7.swift:17:28: error: reference to member\
    \ 'asciiValue' cannot be resolved without a contextual type\n        let value\
    \ = Int(c).asciiValue\n                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetter {\n            result += c.lowercaseString\n\
    \        } else {\n            result += c.uppercaseString\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprarq4vtr.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprarq4vtr.swift:18:25:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += c.lowercaseString\n                      ~ ^~~~~~~~~~~~~~~\n/tmp/tmprarq4vtr.swift:20:25:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += c.uppercaseString\n                      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = result\
    \ + c\n        } else {\n            if c == \" \" {\n                result =\
    \ result + c\n            } else {\n                result = result + String(c).swapcase()\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjwtv_8nq.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjwtv_8nq.swift:19:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = result + c\n                              ^\n/tmp/tmpjwtv_8nq.swift:22:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = result + c\n                                  ^\n/tmp/tmpjwtv_8nq.swift:24:45:\
    \ error: value of type 'String' has no member 'swapcase'\n                result\
    \ = result + String(c).swapcase()\n                                  ~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        }\n        if c != \" \" {\n            result += c\n        }\n    \
    \    i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphok796tf.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphok796tf.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmphok796tf.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for char in s.characters {\n        if char == \" \" {\n          \
    \  result += char\n            continue\n        }\n        if char < 97 {\n \
    \           result += char\n            continue\n        }\n        if char >\
    \ 122 {\n            result += char\n            continue\n        }\n       \
    \ if char < 65 {\n            result += char\n            continue\n        }\n\
    \        if char > 90 {\n            result += char\n            continue\n  \
    \      }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            result += char\n            continue\n\
    \        }\n        if char > 90 {\n            result += char\n            continue\n\
    \        }\n        if char < 97 {\n            result += char\n            continue\n\
    \        }\n        if char > 122 {\n            result += char\n            continue\n\
    \        }\n        if char < 65 {\n            \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp26mdw6xw.swift:181:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmp26mdw6xw.swift:17:30: note: to match this opening '{'\n    for\
    \ char in s.characters {\n                             ^\n/tmp/tmp26mdw6xw.swift:181:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmp26mdw6xw.swift:14:40:\
    \ note: to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n\
    \                                       ^\n/tmp/tmp26mdw6xw.swift:17:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in s.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp26mdw6xw.swift:19:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n/tmp/tmp26mdw6xw.swift:22:17: error: binary operator '<' cannot\
    \ be applied to operands of type 'Character' and 'Int'\n        if char < 97 {\n\
    \           ~~~~ ^ ~~\n/tmp/tmp26mdw6xw.swift:22:17: note: overloads for '<' exist\
    \ with these partially matching parameter lists: (Character, Character), (Int,\
    \ Int)\n        if char < 97 {\n                ^\n/tmp/tmp26mdw6xw.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmp26mdw6xw.swift:26:17:\
    \ error: binary operator '>' cannot be applied to operands of type 'Character'\
    \ and 'Int'\n        if char > 122 {\n           ~~~~ ^ ~~~\n/tmp/tmp26mdw6xw.swift:26:17:\
    \ note: overlo"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i:]\
    \ + c + result[i:]\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpr7_wmn40.swift:24:35: error: expected expression in list of expressions\n\
    \                result = result[i:] + c + result[i:]\n                      \
    \            ^\n/tmp/tmpr7_wmn40.swift:24:52: error: expected expression in list\
    \ of expressions\n                result = result[i:] + c + result[i:]\n     \
    \                                              ^\n/tmp/tmpr7_wmn40.swift:17:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr7_wmn40.swift:19:22: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result = c\
    \ + result\n                     ^\n/tmp/tmpr7_wmn40.swift:21:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if c < result[i] {\n                   ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr7_wmn40.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpr7_wmn40.swift:24:52:\
    \ error: missing argument for parameter #1 in call\n                result = result[i:]\
    \ + c + result[i:]\n                                                   ^\n   \
    \                                                <#Range<String.Index>#>\nSwift.String:3:12:\
    \ note: 'subscript(_:)' declared here\n    public subscript(r: Range<String.Index>)\
    \ -> Substring { get }\n           ^\n/tmp/tmpr7_wmn40.swift:24:39: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result = result[i:] + c + result[i:]\n                           \
    \           ^\n/tmp/tmpr7_wmn40.swift:24:35: error: missing argument for parameter\
    \ #1 in call\n                result = result[i:] + c + result[i:]\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    for _ in s.characters {\n        if i ==\
    \ 0 {\n            result = result + String(s.characters[k])\n            i =\
    \ i + 1\n            j = j + 1\n            k = k + 1\n        } else {\n    \
    \        if s.characters[k] > s.characters[j] {\n                result = result\
    \ + String(s.characters[k])\n                i = i + 1\n                j = j\
    \ + 1\n                k = k + 1\n            } else {\n                result\
    \ = result + String(s.characters[j])\n                i = i + 1\n            \
    \    j = j + 1\n                k = k + 1\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz32ql8e_.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz32ql8e_.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result = result + String(s.characters[k])\n\
    \                                     ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpz32ql8e_.swift:21:40: error:\
    \ 'characters' is unavailable: Please use String directly\n            result\
    \ = result + String(s.characters[k])\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz32ql8e_.swift:26:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s.characters[k] > s.characters[j]\
    \ {\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpz32ql8e_.swift:26:18: error: 'characters'\
    \ is unavailable: Please use String directly\n            if s.characters[k] >\
    \ s.characters[j] {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz32ql8e_.swift:26:34: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if s.characters[k] > s.characters[j] {\n                                 ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpz32ql"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += c\n            continue\n        }\n        if i == 0 {\n            result\
    \ += c\n            continue\n        }\n        if c > s.characters[i-1] {\n\
    \            result += c\n        } else {\n            result += \" \"\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppgq8li51.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppgq8li51.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmppgq8li51.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmppgq8li51.swift:26:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if c > s.characters[i-1] {\n          \
    \     ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmppgq8li51.swift:26:18: error: 'characters' is unavailable:\
    \ Please use String directly\n        if c > s.characters[i-1] {\n           \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmppgq8li51.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    var\
    \ word = \"\"\n    for c in s {\n        if c.isWhitespace {\n            if word\
    \ != \"\" {\n                newString += word\n                word = \"\"\n\
    \            }\n        } else {\n            word += c\n        }\n    }\n  \
    \  if word != \"\" {\n        newString += word\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyc_5d2fu.swift:24:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastWord\
    \ = \"\"\n    for word in s.split(\" \") {\n        if word != lastWord {\n  \
    \          result += word\n        }\n        lastWord = word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpoulbtza5.swift:17:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != \" \" {\n            result += String(UnicodeScalar(Int(c)))\n\
    \        } else {\n            result += \" \"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwlqvn3vt.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwlqvn3vt.swift:18:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:44: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpwlqvn3vt.swift:18:30: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Sc"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += c\n            isSpace = false\n        } else {\n\
    \            if let _ = c {\n                isSpace = true\n            } else\
    \ {\n                result += word\n                result += c\n           \
    \     word = \"\"\n                isSpace = false\n            }\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpchlh4lc0.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpchlh4lc0.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpchlh4lc0.swift:27:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmpchlh4lc0.swift:23:16:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \            if let _ = c {\n               ^       ~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     if lastChar == \" \" {\n                result += char\n            } else\
    \ {\n                result += char + lastChar\n            }\n        } else\
    \ {\n            lastChar = char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpp_wwvnrs.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp_wwvnrs.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpp_wwvnrs.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char + lastChar\n                          ^\n/tmp/tmpp_wwvnrs.swift:25:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    var j = 0\n    for _ in s.characters {\n        if i == 0 {\n       \
    \     result = result + String(s.characters[j])\n            j = j + 1\n     \
    \   } else {\n            if s.characters[j] == s.characters[i] {\n          \
    \      result = result + String(s.characters[j])\n                j = j + 1\n\
    \            } else {\n                result = result + String(s.characters[i])\n\
    \                i = i + 1\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpktqcau6o.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktqcau6o.swift:20:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result = result + String(s.characters[j])\n\
    \                                     ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpktqcau6o.swift:20:40: error:\
    \ 'characters' is unavailable: Please use String directly\n            result\
    \ = result + String(s.characters[j])\n                                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktqcau6o.swift:23:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if s.characters[j] == s.characters[i]\
    \ {\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpktqcau6o.swift:23:18: error: 'characters'\
    \ is unavailable: Please use String directly\n            if s.characters[j] ==\
    \ s.characters[i] {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpktqcau6o.swift:23:35: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if s.characters[j] == s.characters[i] {\n                                \
    \  ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpk"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += \" \"\n        } else {\n            result += String(c)\n        }\n   \
    \ }\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += \" \"\n        } else {\n            result += String(c)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbuxmwnjs.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbuxmwnjs.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbuxmwnjs.swift:16:9: warning: initialization of variable\
    \ 'index' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var index = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let ascii = Int(char)\n        if ascii < 97 || ascii\
    \ > 122 {\n            result += String(char)\n        } else {\n            result\
    \ += String(UnicodeScalar(ascii).value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp61m_1l0k.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp61m_1l0k.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let asciiValue = Int(char)\n        if asciiValue\
    \ > 96 {\n            result += String(UnicodeScalar(asciiValue - 96))\n     \
    \   } else {\n            result += String(UnicodeScalar(asciiValue))\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9k0fxoq3.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9k0fxoq3.swift:17:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    var\
    \ i = 0\n    for c in s.characters {\n        if i == 0 {\n            newString\
    \ += String(c)\n        } else {\n            newString += String(c)\n       \
    \ }\n        i += 1\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpn_l_gr2l.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let chars = word.characters\n        let sortedChars\
    \ = chars.sorted()\n        let sortedString = String(sortedChars)\n        result\
    \ += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_8qm4p2.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s {\n        if c.isWhiteSpace {\n     \
    \       if word != \"\" {\n                result += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += c\n        }\n\
    \    }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0x3a5i2l.swift:19:14: error: value of type 'Character' has no member\
    \ 'isWhiteSpace'\n        if c.isWhiteSpace {\n           ~ ^~~~~~~~~~~~\n/tmp/tmp0x3a5i2l.swift:25:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 {\n      \
    \      result += String(UnicodeScalar(ascii))\n        } else {\n            result\
    \ += String(UnicodeScalar(ascii-26))\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplcsnjjvd.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplcsnjjvd.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = s.count\n    var word = \"\"\
    \n    var char = \"\"\n    var isSpace = false\n    var isWord = false\n    var\
    \ isChar = false\n    var isNewWord = false\n    var isNewChar = false\n    var\
    \ isNewLine = false\n    var isNewLineAfterSpace = false\n    var isNewLineAfterNewWord\
    \ = false\n    var isNewLineAfterNewChar = false\n    var isNewLineAfterNewLine\
    \ = false\n    var isNewLineAfterNewLineAfterSpace = false\n    var isNewLineAfterNewLineAfterNewWord\
    \ = false\n    var isNewLineAfterNewLineAfterNewChar = false\n    var isNewLineAfterNewLineAfterNewLine\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterSpace = false\n    var\
    \ isNewLineAfterNewLineAfterNewLineAfterNewWord = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewChar\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLine = false\n   \
    \ var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterSpace = false\n    var\
    \ isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewWord = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewChar\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLine =\
    \ false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterSpace\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewWord\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewChar\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLine\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterSpace\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewWord\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewChar\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterSpace\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewWord\
    \ = false\n    var isNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewLineAfterNewChar\
    \ = false\n    var isNewLine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp27cr6x7l.swift:54:9: error: type annotation missing in pattern\n\
    \    var isNewLine\n        ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = s.count\n    for k in 0..<l {\n\
    \        if s[k] == \" \" {\n            result += \" \"\n            i += 1\n\
    \        } else {\n            result += s[k]\n            i += 1\n        }\n\
    \    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n        } else {\n            result += s[j]\n  \
    \          i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] ==\
    \ \" \" {\n            result += \" \"\n            i += 1\n        } else {\n\
    \            result += s[j]\n            i += 1\n        }\n    }\n    for j in\
    \ 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\n         \
    \   i += 1\n        } else {\n            result += s[j]\n            i += 1\n\
    \        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n        \
    \    result += \" \"\n            i += 1\n        } else {\n            result\
    \ += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n      \
    \  if s[j] == \" \" {\n            result += \" \"\n            i += 1\n     \
    \   } else {\n            result += s[j]\n            i += 1\n        }\n    }\n\
    \    for j in 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\
    \n            i += 1\n        } else {\n            result += s[j]\n         \
    \   i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n\
    \            result += \" \"\n            i += 1\n        } else {\n         \
    \   result += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n\
    \        if s[j] == \" \" {\n            result += \" \"\n            i += 1\n\
    \        } else {\n            result += s[j]\n            i += 1\n        }\n\
    \    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n            result +=\
    \ \" \"\n            i += 1\n        } else {\n            result += s[j]\n  \
    \          i += 1\n        }\n    }\n    for j in 0..<l {\n        if s[j] ==\
    \ \" \" {\n            result += \" \"\n            i += 1\n        } else {\n\
    \            result += s[j]\n            i += 1\n        }\n    }\n    for j in\
    \ 0..<l {\n        if s[j] == \" \" {\n            result += \" \"\n         \
    \   i += 1\n        } else {\n            result += s[j]\n            i += 1\n\
    \        }\n    }\n    for j in 0..<l {\n        if s[j] == \" \" {\n        \
    \    result += \" \"\n            i += 1\n        } else {\n            result\
    \ += s[j]\n            i += 1\n        }\n    }\n    for j in 0..<l {\n      \
    \  if s[j] == \" \" {\n            result += \" \"\n            i += 1\n     \
    \   } else {\n            result += s[j]\n            i += 1\n        }\n    }\n\
    \    for \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpo2epn2qd.swift:146:8: error: expected pattern\n    for \n     \
    \  ^\n/tmp/tmpo2epn2qd.swift:146:8: error: expected Sequence expression for for-each\
    \ loop\n    for \n       ^\n/tmp/tmpo2epn2qd.swift:146:8: error: expected '{'\
    \ to start the body of for-each loop\n    for \n       ^\n/tmp/tmpo2epn2qd.swift:21:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[k] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo2epn2qd.swift:25:24:\
    \ error: no exact matches in call to subscript \n            result += s[k]\n\
    \                       ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpo2epn2qd.swift:30:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[j] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo2epn2qd.swift:34:24:\
    \ error: no exact matches in call to subscript \n            result += s[j]\n\
    \                       ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpo2epn2qd.swift:39:12:\
    \ error: 's"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var index = 0\n    for char in s.characters {\n        char = char.unicodeScalars.first!\n\
    \        if char.value > 128 {\n            result += char.value\n           \
    \ result += char.unicodeScalars.last!.value\n        } else {\n            result\
    \ += char.value\n        }\n    }\n    for char in s.characters {\n        char\
    \ = char.unicodeScalars.first!\n        if char.value > 128 {\n            result\
    \ += char.value\n            result += char.unicodeScalars.last!.value\n     \
    \   } else {\n            result += char.value\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0meah_9.swift:18:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj0meah_9.swift:19:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.unicodeScalars.first!\n\
    \        ^~~~\n/tmp/tmpj0meah_9.swift:19:41: error: cannot assign value of type\
    \ 'Unicode.Scalar' to type 'Character'\n        char = char.unicodeScalars.first!\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmpj0meah_9.swift:20:17: error:\
    \ value of type 'Character' has no member 'value'\n        if char.value > 128\
    \ {\n           ~~~~ ^~~~~\n/tmp/tmpj0meah_9.swift:21:28: error: value of type\
    \ 'Character' has no member 'value'\n            result += char.value\n      \
    \                ~~~~ ^~~~~\n/tmp/tmpj0meah_9.swift:22:49: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'String'\n            result\
    \ += char.unicodeScalars.last!.value\n                                       \
    \         ^\n/tmp/tmpj0meah_9.swift:24:28: error: value of type 'Character' has\
    \ no member 'value'\n            result += char.value\n                      ~~~~\
    \ ^~~~~\n/tmp/tmpj0meah_9.swift:27:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj0meah_9.swift:28:9:\
    \ error: cannot assign to value: 'char' is a 'let' constant\n        char = char.unicodeScalars.first!\n\
    \        ^~~~\n/tmp/tmpj0meah_9.swift:28:41: error: cannot assign value of type\
    \ 'Unicode.Scalar' to type 'Character'\n        char = char.unicodeScalars.first!\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmpj0meah_9.swift:29:17: error:\
    \ value of type 'Character' has no member 'value'\n        if char.value > 128\
    \ {\n           ~~~~ ^~~~~\n/tmp/tmpj0meah_9.swift:30:28: error: val"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index\
    \ - 1]\n            s.characters.removeAtIndex(index)\n            s.characters.insertAtIndex(temp,\
    \ at: index)\n        }\n    }\n    for c in s.characters {\n        let index\
    \ = s.characters.indexOf(c)\n        if index != s.characters.endIndex && index\
    \ != 0 {\n            let temp = s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n\
    \            s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n \
    \   for c in s.characters {\n        let index = s.characters.indexOf(c)\n   \
    \     if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n \
    \           s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n  \
    \  for c in s.characters {\n        let index = s.characters.indexOf(c)\n    \
    \    if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n   \
    \         s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n    for\
    \ c in s.characters {\n        let index = s.characters.indexOf(c)\n        if\
    \ index != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index\
    \ - 1]\n            s.characters.removeAtIndex(index)\n            s.characters.insertAtIndex(temp,\
    \ at: index)\n        }\n    }\n    for c in s.characters {\n        let index\
    \ = s.characters.indexOf(c)\n        if index != s.characters.endIndex && index\
    \ != 0 {\n            let temp = s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n\
    \            s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n \
    \   for c in s.characters {\n        let index = s.characters.indexOf(c)\n   \
    \     if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n \
    \           s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n  \
    \  for c in s.characters {\n        let index = s.characters.indexOf(c)\n    \
    \    if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index - 1]\n            s.characters.removeAtIndex(index)\n   \
    \         s.characters.insertAtIndex(temp, at: index)\n        }\n    }\n    for\
    \ c in s.characters {\n        let index = s.characters.indexOf(c)\n        if\
    \ index != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index\
    \ - 1]\n            s.characters.removeAtIndex(index)\n            s.characters.insertAtIndex(temp,\
    \ at: index)\n        }\n    }\n    for c in s.character\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppxfs1lvc.swift:88:25: error: expected '{' to start the body of\
    \ for-each loop\n    for c in s.character\n                        ^\n/tmp/tmppxfs1lvc.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppxfs1lvc.swift:17:34: error: value of type 'String'\
    \ has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n     \
    \               ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmppxfs1lvc.swift:20:26: error: value\
    \ of type 'String' has no member 'removeAtIndex'\n            s.characters.removeAtIndex(index)\n\
    \            ~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmppxfs1lvc.swift:21:26: error:\
    \ value of type 'String' has no member 'insertAtIndex'\n            s.characters.insertAtIndex(temp,\
    \ at: index)\n            ~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmppxfs1lvc.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppxfs1lvc.swift:25:34: error: value of type 'String'\
    \ has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n     \
    \               ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmppxfs1lvc.swift:28:26: error: value\
    \ of type 'String' has no member 'removeAtIndex'\n            s.characters.removeAtIndex(index)\n\
    \            ~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmppxfs1lvc.swift:29:26: error:\
    \ value of type 'String' has no member 'insertAtIndex'\n            s.characters.insertAtIndex(temp,\
    \ at: index)\n            ~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmppxfs1lvc.swift:32:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppxfs1lvc.swift:33:34:"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += c\n        }\
    \ else {\n            result += String(UnicodeScalar(Int(c)))\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplg7amaam.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplg7amaam.swift:18:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmplg7amaam.swift:20:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmplg7amaam.swift:20:44: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeSc"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c.isUppercase {\n                result += c.lowercase\n\
    \            } else {\n                result += c.uppercase\n            }\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf1ue_s3_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf1ue_s3_.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpf1ue_s3_.swift:22:29:\
    \ error: value of type 'Character' has no member 'lowercase'\n               \
    \ result += c.lowercase\n                          ~ ^~~~~~~~~\n/tmp/tmpf1ue_s3_.swift:24:29:\
    \ error: value of type 'Character' has no member 'uppercase'\n               \
    \ result += c.uppercase\n                          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n            if c == \" \"\
    \ {\n                result += String(c)\n                i = 0\n            }\
    \ else {\n                i += 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp24ugpdxb.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c == \" \" {\n                result += c\n\
    \            } else {\n                result += String(c).swapFirst()\n     \
    \       }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5eoghblg.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5eoghblg.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5eoghblg.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += c\n                          ^\n/tmp/tmp5eoghblg.swift:24:37:\
    \ error: value of type 'String' has no member 'swapFirst'\n                result\
    \ += String(c).swapFirst()\n                          ~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c)\n        if value > 128 {\n     \
    \       result += String(UnicodeScalar(value - 128))\n        } else {\n     \
    \       result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsyb83u9w.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsyb83u9w.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpn5v9rmoe.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpn5v9rmoe.swift:22:21:\
    \ error: cannot find 'string' in scope\n            word += string(c)\n      \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let nextIndex = s.characters.indexOf(s[index!],\
    \ index! + 1)\n            let nextChar = s[index!]\n            let nextCharIndex\
    \ = s.characters.indexOf(nextChar, index! + 1)\n            if nextCharIndex ==\
    \ s.characters.endIndex {\n                result += nextChar\n            } else\
    \ {\n                result += String(nextChar) + String(s[index!])\n        \
    \    }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv2n5c7ty.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv2n5c7ty.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpv2n5c7ty.swift:19:42: error:\
    \ value of type 'String' has no member 'indexOf'\n            let nextIndex =\
    \ s.characters.indexOf(s[index!], index! + 1)\n                            ~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpv2n5c7ty.swift:21:46: error: value of type 'String' has no\
    \ member 'indexOf'\n            let nextCharIndex = s.characters.indexOf(nextChar,\
    \ index! + 1)\n                                ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c.isUppercase {\n                result += c.lowercaseString\n\
    \            } else {\n                result += c.uppercaseString\n         \
    \   }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpm254ep0f.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm254ep0f.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpm254ep0f.swift:22:29:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result += c.lowercaseString\n                          ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpm254ep0f.swift:24:29: error: value of type 'Character' has no member 'uppercaseString'\n\
    \                result += c.uppercaseString\n                          ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case ' ':\n            result +=\
    \ c\n        case ' ':\n            result += c\n        default:\n          \
    \  result += String(UnicodeScalar(c).value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5kkpt08m.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmp5kkpt08m.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmp5kkpt08m.swift:16:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5kkpt08m.swift:19:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmp5kkpt08m.swift:21:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmp5kkpt08m.swift:23:30: error: no exact matches\
    \ in call to initializer \n            result += String(UnicodeScalar(c).value)\n\
    \                             ^\nSwift.Unicode.Scalar:7:23: note: candidate expects\
    \ value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable public\
    \ init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23: note:\
    \ candidate expects value of type 'Unicode.Scalar' for parameter #1 (got 'Character')\n\
    \    @inlinable public init(_ v: Unicode.Scalar)\n                      ^\n/tmp/tmp5kkpt08m.swift:20:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case ' ':\n             ^~~\n/tmp/tmp5kkpt08m.swift:18:14: note:\
    \ first occurrence of identical literal pattern is here\n        case ' ':\n \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = String(s.characters[i:])\n\
    \            break\n        }\n        if c != s.characters[i-1] {\n         \
    \   result += String(s.characters[i-1:])\n            result += String(c)\n  \
    \      } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp412cwbyr.swift:19:44: error: expected expression in list of expressions\n\
    \            result = String(s.characters[i:])\n                             \
    \              ^\n/tmp/tmp412cwbyr.swift:23:46: error: expected ',' separator\n\
    \            result += String(s.characters[i-1:])\n                          \
    \                   ^\n                                             ,\n/tmp/tmp412cwbyr.swift:23:46:\
    \ error: expected expression in list of expressions\n            result += String(s.characters[i-1:])\n\
    \                                             ^\n/tmp/tmp412cwbyr.swift:17:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp412cwbyr.swift:19:44: error: missing argument for parameter\
    \ #1 in call\n            result = String(s.characters[i:])\n                \
    \                           ^\n                                           <#String.Index#>\n\
    Swift.String:12:12: note: 'subscript(_:)' declared here\n    public subscript(i:\
    \ String.Index) -> Character { get }\n           ^\n/tmp/tmp412cwbyr.swift:22:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if c != s.characters[i-1] {\n         \
    \       ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp412cwbyr.swift:22:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        if c != s.characters[i-1] {\n          \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp412cwbyr.swift:23:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            result += String(s.characters[i-1:])\n\
    \                             ^~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c < s.characters[i-1] {\n                result\
    \ += c\n            } else {\n                result += s.characters[i-1] + c\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy_499s76.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy_499s76.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpy_499s76.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[i-1] {\n      \
    \             ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpy_499s76.swift:21:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[i-1]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpy_499s76.swift:22:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result += c\n\
    \                          ^\n/tmp/tmpy_499s76.swift:24:39: error: no exact matches\
    \ in call to subscript \n                result += s.characters[i-1] + c\n   \
    \                                   ^\n/tmp/tmpy_499s76.swift:24:39: note: candidate\
    \ has partially matching parameter list (Range<String.Index>)\n              \
    \  result += s.characters[i-1] + c\n                                      ^\n\
    /tmp/tmpy_499s76.swift:24:39: note: candidate has partially matching parameter\
    \ list ((UnboundedRange_) -> ())\n                result += s.characters[i-1]\
    \ + c\n                                      ^\n/tmp/tmpy_499s76.swift:24:47:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += s.characters[i-1] + c\n                           \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let ascii = Int(char)\n        if ascii < 97 || ascii\
    \ > 122 {\n            result += String(char)\n        } else {\n            result\
    \ += String(UnicodeScalar(ascii).value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp61m_1l0k.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp61m_1l0k.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c)\n        if value > 96 {\n      \
    \      result += \"z\"\n        } else if value > 64 {\n            result +=\
    \ \"y\"\n        } else if value > 32 {\n            result += \"x\"\n       \
    \ } else {\n            result += \"w\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpe0awoo0n.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe0awoo0n.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += c\n            isSpace = false\n            continue\n\
    \        }\n        if c == \" \" {\n            isSpace = true\n            continue\n\
    \        }\n        if c < \"a\" || c > \"z\" {\n            result += c\n   \
    \         continue\n        }\n        word += c\n    }\n    for c in word.characters\
    \ {\n        if c < \"a\" || c > \"z\" {\n            result += c\n          \
    \  continue\n        }\n        result += c.uppercaseString\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1zjc9svq.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1zjc9svq.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp1zjc9svq.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp1zjc9svq.swift:32:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        word += c\n                ^\n/tmp/tmp1zjc9svq.swift:34:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in word.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1zjc9svq.swift:36:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmp1zjc9svq.swift:39:21: error: value of type 'Character' has\
    \ no member 'uppercaseString'\n        result += c.uppercaseString\n         \
    \         ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(Character(ascii + 32))\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp583t6uld.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp583t6uld.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmp583t6uld.swift:21:48: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String'\n            result += String(Character(ascii + 32))\n\
    \                                               ^\n/tmp/tmp583t6uld.swift:21:30:\
    \ error: no exact matches in call to initializer \n            result += String(Character(ascii\
    \ + 32))\n                             ^\n/tmp/tmp583t6uld.swift:21:30: note:\
    \ found candidate with type '(Unicode.Scalar) -> Character'\n            result\
    \ += String(Character(ascii + 32))\n                             ^\n/tmp/tmp583t6u"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c)\n        if value < 97 { result +=\
    \ String(c) }\n        else if value < 123 { result += String(c).swapFirst() }\n\
    \        else if value < 255 { result += String(c).swapLast() }\n        else\
    \ if value < 511 { result += String(c).swapFirst() }\n        else if value <\
    \ 571 { result += String(c).swapLast() }\n        else if value < 65535 { result\
    \ += String(c).swapFirst() }\n        else if value < 65535 { result += String(c).swapLast()\
    \ }\n        else if value < 1048575 { result += String(c).swapFirst() }\n   \
    \     else if value < 1048575 { result += String(c).swapLast() }\n        else\
    \ if value < 1073741823 { result += String(c).swapFirst() }\n        else if value\
    \ < 1073741823 { result += String(c).swapLast() }\n        else if value < 2147483647\
    \ { result += String(c).swapFirst() }\n        else if value < 2147483647 { result\
    \ += String(c).swapLast() }\n        else if value < -2147483647 { result += String(c).swapFirst()\
    \ }\n        else if value < -2147483647 { result += String(c).swapLast() }\n\
    \        else { result += String(c).swapFirst() }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpidf32a2z.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpidf32a2z.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpidf32a2z.swift:19:51: error: value of type 'String' has no member 'swapFirst'\n\
    \        else if value < 123 { result += String(c).swapFirst() }\n           \
    \                             ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpidf32a2z.swift:20:51:\
    \ error: value of type 'String' has no member 'swapLast'\n        else if value\
    \ < 255 { result += String(c).swapLast() }\n                                 \
    \       ~~~~~~~~~ ^~~~~~~~\n/tmp/tmpidf32a2z.swift:21:51: error: value of type\
    \ 'String' has no member 'swapFirst'\n        else if value < 511 { result +=\
    \ String(c).swapFir"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == ' ' {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp785bjdch.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp785bjdch.swift:17:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            if\
    \ word != \"\" {\n                result += word\n                word = \"\"\n\
    \            }\n        } else {\n            word += String(c)\n        }\n \
    \   }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6g2rahg.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            if c != \" \" {\n                result += String(c)\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0j7wg5g_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            if\
    \ word != \"\" {\n                result += word\n                word = \"\"\n\
    \            }\n        } else {\n            word += String(c)\n        }\n \
    \   }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu6g2rahg.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let chars = word.characters\n        let charsSorted\
    \ = chars.sorted()\n        let charsSortedString = String(charsSorted)\n    \
    \    result += charsSortedString\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1i9xzthk.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        switch c {\n        case \" \"\
    :\n            if word != \"\" {\n                result += word\n           \
    \     word = \"\"\n            }\n        case \".\":\n            if word !=\
    \ \"\" {\n                result += word\n                word = \"\"\n      \
    \      }\n        default:\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqe9zst9r.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \".\":\n            result += c\n        default:\n     \
    \       result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpczpy1nvu.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpczpy1nvu.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpczpy1nvu.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 {\n      \
    \      result += String(c)\n        } else if ascii < 123 {\n            result\
    \ += String(ascii + 32)\n        } else {\n            result += String(ascii\
    \ - 123)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwffhbccd.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwffhbccd.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isWhitespace {\n            if\
    \ i == 0 {\n                result += c.unicodeScalars.first!\n            } else\
    \ {\n                result += \" \"\n            }\n        } else {\n      \
    \      result += c.unicodeScalars.first!\n        }\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuytzv5wz.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpuytzv5wz.swift:20:24:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \                result += c.unicodeScalars.first!\n                       ^\n\
    Swift.RangeReplaceableCollection:4:35: note: where 'Other' = 'Unicode.Scalar'\n\
    \    @inlinable public static func += <Other>(lhs: inout Self, rhs: Other) where\
    \ Other : Sequence, Self.Element == Other.Element\n                          \
    \        ^\n/tmp/tmpuytzv5wz.swift:25:20: error: operator function '+=' requires\
    \ that 'Unicode.Scalar' conform to 'Sequence'\n            result += c.unicodeScalars.first!\n\
    \                   ^\nSwift.RangeReplaceableCollection:4:35: note: where 'Other'\
    \ = 'Unicode.Scalar'\n    @inlinable public static func += <Other>(lhs: inout\
    \ Self, rhs: Other) where Other : Sequence, Self.Element == Other.Element\n  \
    \                                ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = result\
    \ + c\n        } else {\n            if c != \" \" {\n                result =\
    \ result + c\n            }\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptl2dgvvf.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptl2dgvvf.swift:19:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = result + c\n                              ^\n/tmp/tmptl2dgvvf.swift:22:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = result + c\n                                  ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c == \" \" {\n                result\
    \ = c + result\n            } else {\n                result = c + result\n  \
    \          }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqwklayrj.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqwklayrj.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpqwklayrj.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpqwklayrj.swift:24:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(ascii + 26)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jvnak3d.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0jvnak3d.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            if index\
    \ != 0 {\n                result += \" \"\n            }\n            result +=\
    \ c\n            index = 0\n        } else {\n            result += String(c)\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmph6j1otcv.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph6j1otcv.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let asciiValue = Int(char)\n        if asciiValue\
    \ > 96 {\n            result += String(UnicodeScalar(asciiValue - 96))\n     \
    \   } else {\n            result += String(UnicodeScalar(asciiValue + 96))\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpncivg205.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpncivg205.swift:17:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    for\
    \ char in s.characters {\n        newString += String(char)\n    }\n    return\
    \ newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ml_zm9g.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        }\n        if c != \" \" {\n            result += c\n        }\n    \
    \    i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphok796tf.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphok796tf.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmphok796tf.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \" \":\n            result += c\n        default:\n     \
    \       result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e7_dla1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5e7_dla1.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:20:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \" \":\n             ^~~\n/tmp/tmp5e7_dla1.swift:18:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \" \":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i:]\
    \ + c + result[i:]\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpr7_wmn40.swift:24:35: error: expected expression in list of expressions\n\
    \                result = result[i:] + c + result[i:]\n                      \
    \            ^\n/tmp/tmpr7_wmn40.swift:24:52: error: expected expression in list\
    \ of expressions\n                result = result[i:] + c + result[i:]\n     \
    \                                              ^\n/tmp/tmpr7_wmn40.swift:17:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr7_wmn40.swift:19:22: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result = c\
    \ + result\n                     ^\n/tmp/tmpr7_wmn40.swift:21:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if c < result[i] {\n                   ^~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr7_wmn40.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpr7_wmn40.swift:24:52:\
    \ error: missing argument for parameter #1 in call\n                result = result[i:]\
    \ + c + result[i:]\n                                                   ^\n   \
    \                                                <#Range<String.Index>#>\nSwift.String:3:12:\
    \ note: 'subscript(_:)' declared here\n    public subscript(r: Range<String.Index>)\
    \ -> Substring { get }\n           ^\n/tmp/tmpr7_wmn40.swift:24:39: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result = result[i:] + c + result[i:]\n                           \
    \           ^\n/tmp/tmpr7_wmn40.swift:24:35: error: missing argument for parameter\
    \ #1 in call\n                result = result[i:] + c + result[i:]\n"
  stdout: ''
  timestamp: 1660013904
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index]\n\
    \            s.characters[index] = s.characters[s.characters.endIndex-1]\n   \
    \         s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n   \
    \ for c in s.characters {\n        if c == \" \" {\n            result += \" \"\
    \n        } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa6ig1ij1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa6ig1ij1.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpa6ig1ij1.swift:20:61: error:\
    \ cannot convert value of type 'String.Index' to expected argument type 'Int'\n\
    \            s.characters[index] = s.characters[s.characters.endIndex-1]\n   \
    \                                                         ^\n/tmp/tmpa6ig1ij1.swift:21:25:\
    \ error: cannot assign through subscript: subscript is get-only\n            s.characters[s.characters.endIndex-1]\
    \ = temp\n            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa6ig1ij1.swift:21:39:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            s.characters[s.characters.endIndex-1] = temp\n          \
    \                            ^\n/tmp/tmpa6ig1ij1.swift:24:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += word\n            word = \"\"\n            isSpace\
    \ = false\n        }\n        if c == \" \" {\n            isSpace = true\n  \
    \      } else {\n            word += String(c)\n        }\n    }\n    result +=\
    \ word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1jh4c76.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \" \":\n            result += c\n        default:\n     \
    \       result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e7_dla1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5e7_dla1.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:20:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \" \":\n             ^~~\n/tmp/tmp5e7_dla1.swift:18:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \" \":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastSpaceIndex\
    \ = -1\n    for index in 0..<s.characters.count {\n        let char = s.characters[index]\n\
    \        if char == \" \" {\n            if lastSpaceIndex == -1 {\n         \
    \       result += char\n            } else {\n                result += s.substring(lastSpaceIndex\
    \ + 1, index)\n            }\n            lastSpaceIndex = index\n        } else\
    \ {\n            result += char\n        }\n    }\n    if lastSpaceIndex != -1\
    \ {\n        result += s.substring(lastSpaceIndex + 1, s.characters.count)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpcx38gn1m.swift:17:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpcx38gn1m.swift:18:20: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        let char = s.characters[index]\n\
    \                   ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpcx38gn1m.swift:18:22: error: 'characters'\
    \ is unavailable: Please use String directly\n        let char = s.characters[index]\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpcx38gn1m.swift:21:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result += char\n       \
    \                   ^\n/tmp/tmpcx38gn1m.swift:23:29: error: value of type 'String'\
    \ has no member 'substring'\n                result += s.substring(lastSpaceIndex\
    \ + 1, index)\n                          ~ ^~~~~~~~~\n/tmp/tmpcx38gn1m.swift:27:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmpcx38gn1m.swift:31:21:\
    \ error: value of type 'String' has no member 'substring'\n        result += s.substring(lastSpaceIndex\
    \ + 1, s.characters.count)\n                  ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index]\n\
    \            s.characters.remove(at: index)\n            s.characters.insert(temp,\
    \ at: 0)\n        }\n    }\n    for c in s.characters {\n        let index = s.characters.indexOf(c)\n\
    \        if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters.remove(at: index)\n        \
    \    s.characters.insert(temp, at: 0)\n        }\n    }\n    for c in s.characters\
    \ {\n        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ && index != 0 {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: 0)\n        }\n    }\n   \
    \ for c in s.characters {\n        let index = s.characters.indexOf(c)\n     \
    \   if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index]\n            s.characters.remove(at: index)\n          \
    \  s.characters.insert(temp, at: 0)\n        }\n    }\n    for c in s.characters\
    \ {\n        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ && index != 0 {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: 0)\n        }\n    }\n   \
    \ for c in s.characters {\n        let index = s.characters.indexOf(c)\n     \
    \   if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index]\n            s.characters.remove(at: index)\n          \
    \  s.characters.insert(temp, at: 0)\n        }\n    }\n    for c in s.characters\
    \ {\n        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ && index != 0 {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: 0)\n        }\n    }\n   \
    \ for c in s.characters {\n        let index = s.characters.indexOf(c)\n     \
    \   if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index]\n            s.characters.remove(at: index)\n          \
    \  s.characters.insert(temp, at: 0)\n        }\n    }\n    for c in s.characters\
    \ {\n        let index = s.characters.indexOf(c)\n        if index != s.characters.endIndex\
    \ && index != 0 {\n            let temp = s.characters[index]\n            s.characters.remove(at:\
    \ index)\n            s.characters.insert(temp, at: 0)\n        }\n    }\n   \
    \ for c in s.characters {\n        let index = s.characters.indexOf(c)\n     \
    \   if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index]\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp8pv2bx8d.swift:114:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmp8pv2bx8d.swift:88:27: note: to match this opening '{'\n    for\
    \ c in s.characters {\n                          ^\n/tmp/tmp8pv2bx8d.swift:114:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmp8pv2bx8d.swift:14:40:\
    \ note: to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n\
    \                                       ^\n/tmp/tmp8pv2bx8d.swift:16:16: error:\
    \ 'characters' is unavailable: Please use String directly\n    for c in s.characters\
    \ {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8pv2bx8d.swift:17:34: error: value of type 'String' has no member\
    \ 'indexOf'\n        let index = s.characters.indexOf(c)\n                   \
    \ ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp8pv2bx8d.swift:20:26: error: no exact matches\
    \ in call to instance method 'remove'\n            s.characters.remove(at: index)\n\
    \                         ^\n/tmp/tmp8pv2bx8d.swift:20:26: note: found candidate\
    \ with type '(String.Index) -> Character'\n            s.characters.remove(at:\
    \ index)\n                         ^\n/tmp/tmp8pv2bx8d.swift:21:26: error: no\
    \ exact matches in call to instance method 'insert'\n            s.characters.insert(temp,\
    \ at: 0)\n                         ^\n/tmp/tmp8pv2bx8d.swift:21:26: note: found\
    \ candidate with type '(Character, String.Index) -> ()'\n            s.characters.insert(temp,\
    \ at: 0)\n                         ^\n/tmp/tmp8pv2bx8d.swift:21:26: note: found\
    \ candidate with type '(__ow"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let charArr = word.characters\n        var charArr2\
    \ = charArr\n        for char in charArr2 {\n            charArr2.remove(at: charArr2.index(of:\
    \ char))\n        }\n        let charArr3 = charArr2.sorted()\n        let charArr4\
    \ = charArr3.joined(separator: \"\")\n        result += charArr4\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ncyfafd.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        var newWord = \"\"\n        for char in word {\n\
    \            newWord = newWord + String(Int(char.unicodeScalars.value.integerValue)!)\n\
    \        }\n        result = result + newWord\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdmd1fxzw.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let chars = word.characters\n        let sortedChars\
    \ = chars.sorted()\n        let sortedString = String(sortedChars)\n        result\
    \ += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_8qm4p2.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += \" \"\n        } else {\n            result += String(c)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpcmnj8yc2.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcmnj8yc2.swift:16:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = Int(c) - 97\n        if index < 0 {\n  \
    \          index += 26\n        }\n        result += String(UnicodeScalar(index))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpiodv7b52.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpiodv7b52.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let index = Int(c)\
    \ - 97\n                    ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     if lastChar == \" \" {\n                result += char\n            } else\
    \ {\n                result += char + lastChar\n            }\n        } else\
    \ {\n            lastChar = char\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpp_wwvnrs.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp_wwvnrs.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmpp_wwvnrs.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char + lastChar\n                          ^\n/tmp/tmpp_wwvnrs.swift:25:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += c\n            isSpace = false\n            continue\n\
    \        }\n        if c == \" \" {\n            isSpace = true\n            continue\n\
    \        }\n        if c < \"a\" || c > \"z\" {\n            result += c\n   \
    \         continue\n        }\n        if c < \"A\" || c > \"Z\" {\n         \
    \   result += c\n            continue\n        }\n        word += c\n    }\n \
    \   for c in word.characters {\n        if c < \"a\" || c > \"z\" {\n        \
    \    result += c\n            continue\n        }\n        if c < \"A\" || c >\
    \ \"Z\" {\n            result += c\n            continue\n        }\n        result\
    \ += c\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpiwxbog0f.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpiwxbog0f.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpiwxbog0f.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpiwxbog0f.swift:33:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpiwxbog0f.swift:36:17:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        word += c\n                ^\n/tmp/tmpiwxbog0f.swift:38:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in word.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpiwxbog0f.swift:40:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpiwxbog0f.swift:44:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmpiwxbog0f.swift:47:19: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n        result += c\n\
    \                  ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s.characters {\n        if isSpace\
    \ {\n            result += c\n            isSpace = false\n        } else {\n\
    \            if c != \" \" {\n                word += c\n            } else {\n\
    \                isSpace = true\n            }\n        }\n    }\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += word\n      \
    \      word = \"\"\n        } else {\n            result += c\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0qh0a9s2.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0qh0a9s2.swift:20:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp0qh0a9s2.swift:24:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmp0qh0a9s2.swift:30:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0qh0a9s2.swift:35:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += c\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \".\":\n            result += c\n        default:\n     \
    \       result += String(UnicodeScalar(Int(c)))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu0twyfsj.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpu0twyfsj.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpu0twyfsj.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpu0twyfsj.swift:23:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpu0twyfsj.swift:23:44: not"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetterOrDigit() {\n            if let index =\
    \ s.range(of: c) {\n                let newIndex = index(index, offsetBy: 1)\n\
    \                let newChar = String(s[newIndex])\n                result +=\
    \ newChar\n                s.remove(at: newIndex)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp02cao4ss.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp02cao4ss.swift:17:14:\
    \ error: value of type 'Character' has no member 'isLetterOrDigit'\n        if\
    \ c.isLetterOrDigit() {\n           ~ ^~~~~~~~~~~~~~~\n/tmp/tmp02cao4ss.swift:18:30:\
    \ error: value of type 'String' has no member 'range'\n            if let index\
    \ = s.range(of: c) {\n                           ~ ^~~~~\n/tmp/tmp02cao4ss.swift:22:19:\
    \ error: no exact matches in call to instance method 'remove'\n              \
    \  s.remove(at: newIndex)\n                  ^\n/tmp/tmp02cao4ss.swift:22:19:\
    \ note: found candidate with type '(String.Index) -> Character'\n            \
    \    s.remove(at: newIndex)\n                  ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let value = Int(c) ?? 0\n        if value > 96 {\n \
    \           result += \"z\"\n        } else if value > 64 {\n            result\
    \ += \"y\"\n        } else if value > 32 {\n            result += \"x\"\n    \
    \    } else {\n            result += String(c)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa7385hju.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa7385hju.swift:17:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        let value = Int(c) ?? 0\n                        ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 {\n      \
    \      result += String(c)\n        } else {\n            result += String(ascii-96)\
    \ + String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpneut93qc.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpneut93qc.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 {\n      \
    \      result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp8n7bso4s.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8n7bso4s.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     if lastChar == \" \" {\n                result += char\n            } else\
    \ {\n                result += char + lastChar\n            }\n        } else\
    \ {\n            result += char\n            lastChar = char\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmph1zs66gc.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph1zs66gc.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char\n                          ^\n/tmp/tmph1zs66gc.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += char + lastChar\n                          ^\n/tmp/tmph1zs66gc.swift:25:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n/tmp/tmph1zs66gc.swift:26:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case ' ':\n            result +=\
    \ c\n        case ' ':\n            result += c\n        default:\n          \
    \  result += String(UnicodeScalar(Int(c)))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp35fi5s2e.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmp35fi5s2e.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmp35fi5s2e.swift:16:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp35fi5s2e.swift:19:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmp35fi5s2e.swift:21:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmp35fi5s2e.swift:23:44: error: no exact matches\
    \ in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmp35fi5s2e.swift:23:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmp35fi5s2e.swift:23:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmp35fi5s2e.swift:23:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmp35fi5s2e.swift:23:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmp35fi5s2e.swif"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdjxhelby.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex {\n            let temp = s.characters[index]\n   \
    \         s.characters[index] = s.characters[s.characters.endIndex]\n        \
    \    s.characters[s.characters.endIndex] = temp\n        }\n    }\n    for c in\
    \ s.character\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd483b1bp.swift:88:25: error: expected '{' to start the body of\
    \ for-each loop\n    for c in s.character\n                        ^\n/tmp/tmpd483b1bp.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd483b1bp.swift:17:34: error: value of type 'String'\
    \ has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n     \
    \               ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpd483b1bp.swift:21:25: error: cannot\
    \ assign through subscript: subscript is get-only\n            s.characters[s.characters.endIndex]\
    \ = temp\n            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd483b1bp.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd483b1bp.swift:25:34: error: value of type 'String'\
    \ has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n     \
    \               ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpd483b1bp.swift:29:25: error: cannot\
    \ assign through subscript: subscript is get-only\n            s.characters[s.characters.endIndex]\
    \ = temp\n            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd483b1bp.swift:32:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd483b1bp.swift:33:34: error: value of type 'String'\
    \ has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n     \
    \               ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpd483b1bp.swift:37:25: error: cannot\
    \ assign through subscript: subscript is get-only\n            s.characters[s.characters.endIndex]\
    \ = temp\n            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = char.asciiValue\n        if value > 96\
    \ {\n            result += String(UnicodeScalar(value - 96))\n        } else {\n\
    \            result += String(UnicodeScalar(value))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqx29z7pc.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqx29z7pc.swift:18:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 96 {\n           ^\n/tmp/tmpqx29z7pc.swift:18:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 96 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmpqx29z7pc.swift:18:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 96 {\n  \
    \         ^\n                !\n/tmp/tmpqx29z7pc.swift:19:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value - 96))\n                         \
    \                  ^\n/tmp/tmpqx29z7pc.swift:19:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result\
    \ += String(UnicodeScalar(value - 96))\n                                     \
    \      ^\n                                           (     ?? <#default value#>)\n\
    /tmp/tmpqx29z7pc.swift:19:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result += String(UnicodeScalar(value\
    \ - 96))\n                                           ^\n                     \
    \                           !\n/tmp/tmpqx29z7pc.swift:21:44: error: value of optional\
    \ type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n            result\
    \ += String(UnicodeScalar(value))\n                                          \
    \ ^\n/tmp/tmpqx29z7pc.swift:21:44: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default va"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s {\n        if c == \" \" {\n         \
    \   result += word\n            word = \"\"\n        } else {\n            word\
    \ += c\n        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_0hivyf3.swift:23:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    for\
    \ char in s.characters {\n        let asciiValue = Int(char)\n        if asciiValue\
    \ > 96 {\n            newString += \"z\"\n        } else if asciiValue > 64 {\n\
    \            newString += \"y\"\n        } else if asciiValue > 32 {\n       \
    \     newString += \"x\"\n        } else {\n            newString += String(char)\n\
    \        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7tx3x6yv.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7tx3x6yv.swift:17:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\")\n        } else {\n            result += c.stringByReplacingOccurrencesOfString(\"\
    \ \", withString: \"\")\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4xhcfdwz.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4xhcfdwz.swift:19:24:\
    \ error: value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result = c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\")\n                     ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4xhcfdwz.swift:21:25:\
    \ error: value of type 'Character' has no member 'stringByReplacingOccurrencesOfString'\n\
    \            result += c.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\")\n                      ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result +\
    \ c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprreep8h8.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprreep8h8.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmprreep8h8.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < result[i] {\n              \
    \     ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmprreep8h8.swift:22:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result = c +\
    \ result\n                         ^\n/tmp/tmprreep8h8.swift:24:35: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \           result = result + c\n                                  ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(ascii + 26)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jvnak3d.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0jvnak3d.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var i = 0\n    for c in s {\n        if c == \" \" {\n         \
    \   if word != \"\" {\n                result += word\n                word =\
    \ \"\"\n            }\n        } else {\n            word += c\n        }\n  \
    \  }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqn1601kk.swift:25:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            if c < s.characters[i-1] {\n                result\
    \ += c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdelsva2_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdelsva2_.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpdelsva2_.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[i-1] {\n      \
    \             ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpdelsva2_.swift:21:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[i-1]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpdelsva2_.swift:22:27: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result += c\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == ' ' {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpew39j8nk.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpew39j8nk.swift:17:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c != ' ' {\n            result += String(c)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpifa5fygc.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c != ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpifa5fygc.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = Int(char)\n        if value > 96 {\n\
    \            result += String(UnicodeScalar(value - 96))\n        } else {\n \
    \           result += String(UnicodeScalar(value))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuvprxbxb.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpuvprxbxb.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += c\n        case \" \":\n            result += c\n        default:\n     \
    \       result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e7_dla1.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5e7_dla1.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:21:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp5e7_dla1.swift:20:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \" \":\n             ^~~\n/tmp/tmp5e7_dla1.swift:18:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \" \":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1660013903
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyvtjac.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwcyvtjac.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(ascii + 32)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpag_ocyw7.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpag_ocyw7.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = char.asciiValue\n        if value > 96\
    \ {\n            result += String(UnicodeScalar(value))\n        } else {\n  \
    \          result += String(UnicodeScalar(value - 26))\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp46bhlmm5.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp46bhlmm5.swift:18:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 96 {\n           ^\n/tmp/tmp46bhlmm5.swift:18:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 96 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmp46bhlmm5.swift:18:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 96 {\n  \
    \         ^\n                !\n/tmp/tmp46bhlmm5.swift:19:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value))\n                              \
    \             ^\n/tmp/tmp46bhlmm5.swift:19:44: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default value#>\n/tmp/tmp46bhlmm5.swift:19:44: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result += String(UnicodeScalar(value))\n                        \
    \                   ^\n                                                !\n/tmp/tmp46bhlmm5.swift:21:44:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n            result += String(UnicodeScalar(value - 26))\n         \
    \                                  ^\n/tmp/tmp46bhlmm5.swift:21:44: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result += String(UnicodeScalar(value - 26))\n                      \
    \                     ^\n                                           (     ?? <#default\
    \ value#>)"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c.isUppercase {\n               \
    \ result = c + result\n            } else {\n                result = result +\
    \ c\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0inpk0k.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj0inpk0k.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpj0inpk0k.swift:22:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = c + result\n                         ^\n/tmp/tmpj0inpk0k.swift:24:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result = result + c\n                                  ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        var new_word = \"\"\n        for char in word {\n\
    \            new_word += String(UnicodeScalar(Int(char.value - 97)))\n       \
    \ }\n        result += new_word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxm_m58tk.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let index = s.characters.indexOf(c)\n        if index\
    \ != s.characters.endIndex && index != 0 {\n            let temp = s.characters[index]\n\
    \            s.characters[index] = s.characters[s.characters.endIndex-1]\n   \
    \         s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n   \
    \ for c in s.characters {\n        let index = s.characters.indexOf(c)\n     \
    \   if index != s.characters.endIndex && index != 0 {\n            let temp =\
    \ s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex && index != 0 {\n            let temp\
    \ = s.characters[index]\n            s.characters[index] = s.characters[s.characters.endIndex-1]\n\
    \            s.characters[s.characters.endIndex-1] = temp\n        }\n    }\n\
    \    for c in s.characters {\n        let index = s.characters.indexOf(c)\n  \
    \      if index != s.characters.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfbj1c32z.swift:82:42: error: expected '{' after 'if' condition\n\
    \        if index != s.characters.endIndex\n                                 \
    \        ^\n/tmp/tmpfbj1c32z.swift:104:116: error: expected '}' at end of brace\
    \ statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\"\
    ) == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n                        \
    \                                                                            \
    \               ^\n/tmp/tmpfbj1c32z.swift:14:40: note: to match this opening '{'\n\
    func anti_shuffle(s: String) -> String {\n                                   \
    \    ^\n/tmp/tmpfbj1c32z.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfbj1c32z.swift:17:34:\
    \ error: value of type 'String' has no member 'indexOf'\n        let index = s.characters.indexOf(c)\n\
    \                    ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpfbj1c32z.swift:20:61: error:\
    \ cannot convert value of type 'String.Index' to expected argument type 'Int'\n\
    \            s.characters[index] = s.characters[s.characters.endIndex-1]\n   \
    \                                                         ^\n/tmp/tmpfbj1c32z.swift:21:25:\
    \ error: cannot assign through subscript: subscript is get-only\n            s.characters[s.characters.endIndex-1]\
    \ = temp\n            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfbj1c32z.swift:21:39:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            s.characters[s.characters.endIndex-1] = temp\n          \
    \                            ^\n/tmp/tmpfbj1c32z.swift:24:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfbj1c32z.swift:25:34: error: value of type 'String' ha"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        if c == ' ' {\n            result += c\n        } else\
    \ {\n            result += String(UnicodeScalar(Int(c)))\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpo_1a9itu.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpo_1a9itu.swift:16:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpo_1a9itu.swift:18:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ += c\n                      ^\n/tmp/tmpo_1a9itu.swift:20:44: error: no exact\
    \ matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpo_1a9itu.swift:20:44: note:\
    \ candidate expec"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var newString = \"\"\n    var\
    \ word = \"\"\n    for char in s.characters {\n        if char == \" \" {\n  \
    \          newString += char\n        } else {\n            newString += String(UnicodeScalar(char).value\
    \ - 32)\n        }\n    }\n    for char in newString.characters {\n        if\
    \ char == \" \" {\n            word += char\n        } else {\n            word\
    \ += String(UnicodeScalar(char).value - 32)\n        }\n    }\n    return word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0pn0u02n.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0pn0u02n.swift:19:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += char\n                         ^\n/tmp/tmp0pn0u02n.swift:21:33:\
    \ error: no exact matches in call to initializer \n            newString += String(UnicodeScalar(char).value\
    \ - 32)\n                                ^\nSwift.Unicode.Scalar:7:23: note: candidate\
    \ expects value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'Character')\n    @inlinable public init(_ v: Unicode.Scalar)\n            \
    \          ^\n/tmp/tmp0pn0u02n.swift:24:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in newString.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0pn0u02n.swift:26:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += char\n             \
    \       ^\n/tmp/tmp0pn0u02n.swift:28:28: error: no exact matches in call to initializer\
    \ \n            word += String(UnicodeScalar(char).value - 32)\n             \
    \              ^\nSwift.Unicode.Scalar:7:23: note: candidate expects value of\
    \ type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable public init(_\
    \ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23: note: candidate\
    \ expects value of type 'Unicode.Scalar' for parameter #1 (got 'Character')\n\
    \    @inlinable public init(_ v: Unicode.Scalar)\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw2rqfra3.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw2rqfra3.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpw2rqfra3.swift:21:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \                                           ^\n/tmp/tmpw2rqfra3.swift:21:44: note:\
    \ found candidate with type '(Float16) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \                                           ^\n/tmp/tmpw2rqfra3.swift:21:44: note:\
    \ found candidate with type '(Float) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \                                           ^\n/tmp/tmpw2rqfra3.swift:21:44: note:\
    \ found candidate with type '(Double) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \                                           ^\n/tmp/tmpw2rqfra3.swift:21:44: note:\
    \ found candidate with type '(Float80) -> UInt32'\n            result += String(UnicodeScalar(UInt32(c)).value)\n\
    \                                           ^\n/tmp/tmpw2rqfra3.swift:21:44: note:\
    \ found candidate with type '(Builtin.Int32) -> UInt32'\n            result +=\
    \ String(UnicodeScalar(UInt32(c)).value)\n                                   \
    \        ^\n/tmp/tmpw2rqfra3.swift:21:44: note: found candidate with type '(Unicode.Scalar)\
    \ -> UInt32'\n            result += String(UnicodeScalar(UInt32(c)).value)\n \
    \                                          ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var words\
    \ = s.split(\" \")\n    for word in words {\n        var chars = word.characters\n\
    \        for char in chars {\n            var ascii = char.asciiValue\n      \
    \      if ascii < 97 {\n                ascii += 26\n            }\n         \
    \   if ascii > 122 {\n                ascii -= 26\n            }\n           \
    \ char.asciiValue = ascii\n        }\n        result += String(char)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmps8v5i0vg.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(\" \")\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    var isSpace = false\n    for c in s {\n        if isSpace {\n  \
    \          result += c\n            isSpace = false\n        } else {\n      \
    \      if c != \" \" {\n                word += c\n            } else {\n    \
    \            isSpace = true\n            }\n        }\n    }\n    for c in word\
    \ {\n        result += String.fromCharCode(Int(c) + Int(Int(c)))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsn6_oxhx.swift:20:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpsn6_oxhx.swift:24:25: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                word += c\n\
    \                        ^\n/tmp/tmpsn6_oxhx.swift:31:52: error: no exact matches\
    \ in call to initializer \n        result += String.fromCharCode(Int(c) + Int(Int(c)))\n\
    \                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:52:\
    \ note: found candidate with type '(Float16) -> Int'\n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:52:\
    \ note: found candidate with type '(Float) -> Int'\n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:52:\
    \ note: found candidate with type '(Double) -> Int'\n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:52:\
    \ note: found candidate with type '(Float80) -> Int'\n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:52:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n        result +=\
    \ String.fromCharCode(Int(c) + Int(Int(c)))\n                                \
    \                   ^\n/tmp/tmpsn6_oxhx.swift:31:52: note: found candidate with\
    \ type '(Builtin.Word) -> Int'\n        result += String.fromCharCode(Int(c) +\
    \ Int(Int(c)))\n                                                   ^\n/tmp/tmpsn6_oxhx.swift:31:39:\
    \ error: no exact matches in call to initializer \n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                      ^\n/tmp/tmpsn6_oxhx.swift:31:39:\
    \ note: found candidate with type '(Float16) -> Int'\n        result += String.fromCharCode(Int(c)\
    \ + Int(Int(c)))\n                                      ^\n"
  stdout: ''
  timestamp: 1660014028
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    var j = 0\n    for c in s.characters {\n        if i == 0 {\n       \
    \     result = result + c\n        }\n        if c == ' ' {\n            j = i\n\
    \        }\n        if j > 0 {\n            if c < s.characters[j] {\n       \
    \         result = result + c\n            }\n        }\n        i = i + 1\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7c2znkze.swift:22:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmp7c2znkze.swift:18:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7c2znkze.swift:20:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            result\
    \ = result + c\n                              ^\n/tmp/tmp7c2znkze.swift:26:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < s.characters[j] {\n        \
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp7c2znkze.swift:26:22: error: 'characters' is\
    \ unavailable: Please use String directly\n            if c < s.characters[j]\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp7c2znkze.swift:27:35: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result = result\
    \ + c\n                                  ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c < result[i] {\n               \
    \ result = c + result\n            } else {\n                result = result[i]\
    \ + result\n            }\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpkdevf19f.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpkdevf19f.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpkdevf19f.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c < result[i] {\n              \
    \     ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpkdevf19f.swift:22:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result = c +\
    \ result\n                         ^\n/tmp/tmpkdevf19f.swift:24:32: error: no\
    \ exact matches in call to subscript \n                result = result[i] + result\n\
    \                               ^\nSwift.String:3:12: note: candidate expects\
    \ value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public\
    \ subscript(r: Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c > result[i] {\n               \
    \ result = c + result\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpub0g8pik.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpub0g8pik.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpub0g8pik.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c > result[i] {\n              \
    \     ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpub0g8pik.swift:22:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result = c +\
    \ result\n                         ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            if c != \" \" {\n                result += String(c)\n\
    \            }\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0j7wg5g_.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isLetterOrDigit {\n           \
    \ if i == 0 {\n                result += c.unicodeScalars.first!\n           \
    \ } else {\n                result += c.unicodeScalars.last!\n            }\n\
    \        } else {\n            result += c\n        }\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_uy9rrph.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_uy9rrph.swift:18:14:\
    \ error: value of type 'Character' has no member 'isLetterOrDigit'\n        if\
    \ c.isLetterOrDigit {\n           ~ ^~~~~~~~~~~~~~~\n/tmp/tmp_uy9rrph.swift:20:24:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \                result += c.unicodeScalars.first!\n                       ^\n\
    Swift.RangeReplaceableCollection:4:35: note: where 'Other' = 'Unicode.Scalar'\n\
    \    @inlinable public static func += <Other>(lhs: inout Self, rhs: Other) where\
    \ Other : Sequence, Self.Element == Other.Element\n                          \
    \        ^\n/tmp/tmp_uy9rrph.swift:22:24: error: operator function '+=' requires\
    \ that 'Unicode.Scalar' conform to 'Sequence'\n                result += c.unicodeScalars.last!\n\
    \                       ^\nSwift.RangeReplaceableCollection:4:35: note: where\
    \ 'Other' = 'Unicode.Scalar'\n    @inlinable public static func += <Other>(lhs:\
    \ inout Self, rhs: Other) where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\n/tmp/tmp_uy9rrph.swift:25:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            if c > result[i] {\n               \
    \ result = c + result\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpub0g8pik.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpub0g8pik.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmpub0g8pik.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if c > result[i] {\n              \
    \     ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpub0g8pik.swift:22:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n                result = c +\
    \ result\n                         ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += String(c)\n\
    \        } else {\n            result += String(c)\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprfl8lcn7.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let chars = word.characters\n        let sortedChars\
    \ = chars.sorted()\n        let sortedString = String(sortedChars)\n        result\
    \ += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_8qm4p2.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += c\n        } else {\n            result += String(UnicodeScalar(Int(c)))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpusv4goya.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpusv4goya.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpusv4goya.swift:21:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Builtin.Int64' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(Int(c)))\n\
    \                                           ^\n/tmp/tmpusv4goya.swift:21:44: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeSc"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result += c\n\
    \        } else {\n            result += String(c).swapcase()\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmdatpu4.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjmdatpu4.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpjmdatpu4.swift:21:33:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(c).swapcase()\n                      ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = char.asciiValue\n        if value > 96\
    \ {\n            result += String(UnicodeScalar(value - 96))\n        } else {\n\
    \            result += String(UnicodeScalar(value))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqx29z7pc.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqx29z7pc.swift:18:12:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n        if value > 96 {\n           ^\n/tmp/tmpqx29z7pc.swift:18:12:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if value > 96 {\n           ^\n                 ?? <#default\
    \ value#>\n/tmp/tmpqx29z7pc.swift:18:12: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        if value > 96 {\n  \
    \         ^\n                !\n/tmp/tmpqx29z7pc.swift:19:44: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      result += String(UnicodeScalar(value - 96))\n                         \
    \                  ^\n/tmp/tmpqx29z7pc.swift:19:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result\
    \ += String(UnicodeScalar(value - 96))\n                                     \
    \      ^\n                                           (     ?? <#default value#>)\n\
    /tmp/tmpqx29z7pc.swift:19:44: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result += String(UnicodeScalar(value\
    \ - 96))\n                                           ^\n                     \
    \                           !\n/tmp/tmpqx29z7pc.swift:21:44: error: value of optional\
    \ type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n            result\
    \ += String(UnicodeScalar(value))\n                                          \
    \ ^\n/tmp/tmpqx29z7pc.swift:21:44: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result += String(UnicodeScalar(value))\n\
    \                                           ^\n                              \
    \                   ?? <#default va"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var word\
    \ = \"\"\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpn5v9rmoe.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpn5v9rmoe.swift:22:21:\
    \ error: cannot find 'string' in scope\n            word += string(c)\n      \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1660014026
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isLetterOrDigit {\n           \
    \ result += c.asciiValue\n        } else {\n            result += c.asciiValue\
    \ + \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpiozjmn7l.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpiozjmn7l.swift:18:14:\
    \ error: value of type 'Character' has no member 'isLetterOrDigit'\n        if\
    \ c.isLetterOrDigit {\n           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpiozjmn7l.swift:19:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n/tmp/tmpiozjmn7l.swift:21:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue + \" \"\n                        ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word\
    \ in s.split(\" \") {\n        let chars = word.characters\n        let sortedChars\
    \ = chars.sorted()\n        let sortedString = String(sortedChars)\n        result\
    \ += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_8qm4p2.swift:16:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        let ascii = Int(c)\n        if ascii < 97 || ascii >\
    \ 122 {\n            result += String(c)\n        } else {\n            result\
    \ += String(UnicodeScalar(ascii).value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpb1nmsou6.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpb1nmsou6.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += \" \"\n        } else {\n            result += String(c)\n        }\n   \
    \ }\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += \" \"\n        } else {\n            result += String(c)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp626hr8w8.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp626hr8w8.swift:24:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp626hr8w8.swift:16:9: warning: initialization of variable\
    \ 'i' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for char\
    \ in s.characters {\n        let value = Int(char)\n        if value < 97 {\n\
    \            result += String(char)\n        } else {\n            result += String(UnicodeScalar(value\
    \ - 97))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ah4noyy.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4ah4noyy.swift:17:21:\
    \ error: no exact matches in call to initializer \n        let value = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014027
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case ' ':\n            result +=\
    \ c\n        case ' ':\n            result += c\n        default:\n          \
    \  result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyz5l_i3.swift:18:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ' ':\n             ^~~\n             \" \"\n/tmp/tmpuyz5l_i3.swift:20:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ' ':\n   \
    \          ^~~\n             \" \"\n/tmp/tmpuyz5l_i3.swift:16:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpuyz5l_i3.swift:19:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += c\n              \
    \        ^\n/tmp/tmpuyz5l_i3.swift:21:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += c\n  \
    \                    ^\n/tmp/tmpuyz5l_i3.swift:20:14: warning: literal value is\
    \ already handled by previous pattern; consider removing it\n        case ' ':\n\
    \             ^~~\n/tmp/tmpuyz5l_i3.swift:18:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ' ':\n             ^~~\n"
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// >>>\
    \ anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n///\
    \ \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\
    \nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if i == 0 {\n            result = c\
    \ + result\n        } else {\n            result = c + result\n        }\n   \
    \     i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vcyoz6x.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vcyoz6x.swift:19:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n/tmp/tmp4vcyoz6x.swift:21:22:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result = c + result\n                     ^\n"
  stdout: ''
  timestamp: 1660013902
