language: swift
name: HumanEval_94_skjkasdkd
results:
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \     if num > 0 {\n            sum += num % 10\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp71rgqf89/tmp71rgqf89.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51ab487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51ab17eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51ab17e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51ab17d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71rgqf89                        0x00005570c547e5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b51ab673460 __libc_start_main +
    245

    6    tmp71rgqf89                        0x00005570c547e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \     if num > 0 {\n            sum += Int(String(num).characters.filter { $0\
    \ >= '0' && $0 <= '9' }.joined()) ?? 0\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy1qaxa66.swift:25:62: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(String(num).characters.filter { $0 >= '0' &&\
    \ $0 <= '9' }.joined()) ?? 0\n                                               \
    \              ^~~\n                                                         \
    \    \"0\"\n/tmp/tmpy1qaxa66.swift:25:75: error: single-quoted string literal\
    \ found, use '\"'\n            sum += Int(String(num).characters.filter { $0 >=\
    \ '0' && $0 <= '9' }.joined()) ?? 0\n                                        \
    \                                  ^~~\n                                     \
    \                                     \"9\"\n/tmp/tmpy1qaxa66.swift:25:47: error:\
    \ referencing instance method 'joined(separator:)' on 'BidirectionalCollection'\
    \ requires the types 'String.Element' (aka 'Character') and 'String' be equivalent\n\
    \            sum += Int(String(num).characters.filter { $0 >= '0' && $0 <= '9'\
    \ }.joined()) ?? 0\n                                              ^\nSwift.BidirectionalCollection:1:11:\
    \ note: where 'Self.Element' = 'String.Element' (aka 'Character')\nextension BidirectionalCollection\
    \ where Self.Element == String {\n          ^\n"
  stdout: ''
  timestamp: 1660014490
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ for num in lst {\n        if num > max {\n            max = num\n          \
    \  maxNum = num\n        }\n    }\n    if maxNum == 0 {\n        return max\n\
    \    }\n    var sum = 0\n    var prime: Int = 0\n    for num in lst {\n      \
    \  if num == maxNum {\n            sum += num\n        } else {\n            if\
    \ num > maxNum {\n                sum += maxNum\n                prime = maxNum\n\
    \            } else {\n                prime = num\n            }\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpohq7eq1x/tmpohq7eq1x.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd876f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd873ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd873eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd873ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohq7eq1x                        0x000055c9dfd07520 <unavailable> + 5408

    5    libc.so.6                          0x00002abd878e0460 __libc_start_main +
    245

    6    tmpohq7eq1x                        0x000055c9dfd070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     for y in lst {\n            if x > y {\n                continue\n     \
    \       }\n            if x == y {\n                continue\n            }\n\
    \            if x % y == 0 {\n                continue\n            }\n      \
    \      if x == max {\n                sum += Int(x / y)\n            }\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp3f9762it/tmp3f9762it.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd6830fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd68006b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd68006988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd680057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f9762it                        0x000055d822c5d6f0 <unavailable> + 5872

    5    libc.so.6                          0x00002acd684fb460 __libc_start_main +
    245

    6    tmp3f9762it                        0x000055d822c5d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     continue\n        }\n        if x % 3 == 0 {\n            continue\n   \
    \     }\n        if x % 5 == 0 {\n            continue\n        }\n        if\
    \ x % 7 == 0 {\n            continue\n        }\n        if x % 11 == 0 {\n  \
    \          continue\n        }\n        if x % 13 == 0 {\n            continue\n\
    \        }\n        if x % 17 == 0 {\n            continue\n        }\n      \
    \  if x % 19 == 0 {\n            continue\n        }\n        if x % 23 == 0 {\n\
    \            continue\n        }\n        if x % 29 == 0 {\n            continue\n\
    \        }\n        if x % 31 == 0 {\n            continue\n        }\n      \
    \  if x % 37 == 0 {\n            continue\n        }\n        if x % 41 == 0 {\n\
    \            continue\n        }\n        if x % 43 == 0 {\n            continue\n\
    \        }\n        if x % 47 == 0 {\n            continue\n        }\n      \
    \  if x % 53 == 0 {\n            continue\n        }\n        if x % 59 == 0 {\n\
    \            continue\n        }\n        if x % 61 == 0 {\n            continue\n\
    \        }\n        if x % 67 == 0 {\n            continue\n        }\n      \
    \  if x % 71 == 0 {\n            continue\n        }\n        if x % 73 == 0 {\n\
    \            continue\n        }\n        if x % 79 == 0 {\n            continue\n\
    \        }\n        if x % 83 == 0 {\n            continue\n        }\n      \
    \  if x % 89 == 0 {\n            continue\n        }\n        if x % 97 == 0 {\n\
    \            continue\n        }\n        if x % 101 == 0 {\n            continue\n\
    \        }\n        if x % 103 == 0 {\n            continue\n        }\n     \
    \   if x % 107 == 0 {\n            continue\n        }\n        if x % 109 ==\
    \ 0 {\n            continue\n        }\n        if x % 113 == 0 {\n          \
    \  continue\n        }\n        if x % 117 == 0 {\n            continue\n    \
    \    }\n        if x % 121 == 0 {\n            continue\n        }\n        if\
    \ x % 123 == 0 {\n            continue\n        }\n        if x % 127 == 0 {\n\
    \            continue\n        }\n        if x % 131 == 0 {\n            continue\n\
    \        }\n        if x % 137 == 0 {\n            continue\n        }\n     \
    \   if x % 139 == 0 {\n            continue\n        }\n        if x % 143 ==\
    \ 0 {\n            continue\n        }\n        if x % 147 == 0 {\n          \
    \  continue\n        }\n        if x % 151 == 0 {\n            continue\n    \
    \    }\n        if x % 157 == 0 {\n            continue\n        }\n        if\
    \ x % 161 == 0 {\n            continue\n        }\n        if x % 165 == 0 {\n\
    \            continue\n        }\n        if x % 169 == 0 {\n            continue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp1106kexy.swift:181:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp1106kexy.swift:20:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmp1106kexy.swift:181:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmp1106kexy.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp1106kexy.swift:161:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp1106kexy.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += Int(i) - Int(max\
    \ % i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b6998e1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6998b16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6998b16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6998b1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6998b15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g46e7zs                        0x000055fe9f97c1b6 <unavailable> + 8630

    6    tmp2g46e7zs                        0x000055fe9f97b672 <unavailable> + 5746

    7    libc.so.6                          0x00002b699900b460 __libc_start_main +
    245

    8    tmp2g46e7zs                        0x000055fe9f97b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 1 {\n            if x % 2 == 0 {\n                if x % 3 == 0 {\n    \
    \                if x % 5 == 0 {\n                        if x % 7 == 0 {\n  \
    \                          sum += x\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmprxkc1hrv/tmprxkc1hrv.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f86e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f83dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f83db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f83da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxkc1hrv                        0x00005593705f95b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b57f88d0460 __libc_start_main +
    245

    6    tmprxkc1hrv                        0x00005593705f9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if i % max == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_ja7oa38/tmp_ja7oa38.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445f3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b445f0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b445f0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b445f0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ja7oa38                        0x000055f00e70f5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b445f5d7460 __libc_start_main +
    245

    6    tmp_ja7oa38                        0x000055f00e70f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    if maxIndex\
    \ == 0 {\n        return max\n    }\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        if index != maxIndex {\n            sum += lst[index]\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp0ij08dtd/tmp0ij08dtd.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cde42bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cde122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cde122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cde1217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ij08dtd                        0x000055ff780795f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b6cde617460 __libc_start_main +
    245

    6    tmp0ij08dtd                        0x000055ff780791a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n     \
    \   if max < i {\n            max = i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpj0sgrlok/tmpj0sgrlok.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06052c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0604fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0604fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0604fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0sgrlok                        0x0000560e0ff395b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b06054b1460 __libc_start_main +
    245

    6    tmpj0sgrlok                        0x0000560e0ff39169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b4554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b424b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b78b424b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b78b424b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b78b424abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz_l2ioip                        0x000055d30accd070 <unavailable> + 8304

    6    tmpz_l2ioip                        0x000055d30accc532 <unavailable> + 5426

    7    libc.so.6                          0x00002b78b4740460 __libc_start_main +
    245

    8    tmpz_l2ioip                        0x000055d30accc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sum:\
    \ Int = 0\n    for x in lst {\n        if x % 2 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 3 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 5 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 7 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 11 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 13 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 17 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 19 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 23 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 29 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 31 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 37 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 41 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 43 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 47 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 53 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 59 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 61 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 67 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 71 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 73 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 79 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 83 == 0 {\n            largestPrime\
    \ = largestPrime + 1\n        }\n        if x % 89 == 0 {\n            largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpypodt3w2.swift:115:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpypodt3w2.swift:20:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmpypodt3w2.swift:115:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmpypodt3w2.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpypodt3w2.swift:91:13: error: cannot find\
    \ 'largest' in scope\n            largest\n            ^~~~~~~\n/tmp/tmpypodt3w2.swift:95:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for index in 0..<lst.count {\n        if lst[index] > max\
    \ {\n            max = lst[index]\n            maxIndex = index\n        }\n \
    \   }\n    for index in 0..<lst.count {\n        if lst[index] == max {\n    \
    \        sum += Int(lst[maxIndex])\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp32920cxv/tmp32920cxv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b827b2f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b827afeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b827afee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b827afed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32920cxv                        0x0000562574585720 <unavailable> + 5920

    5    libc.so.6                          0x00002b827b4e3460 __libc_start_main +
    245

    6    tmp32920cxv                        0x00005625745852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits\
    \ = 0\n    for number in lst {\n        if number % 2 == 0 {\n            largestPrime\
    \ = number\n        }\n        for number in lst {\n            if number % number\
    \ == 0 {\n                largestPrime = number\n            }\n        }\n  \
    \      sumOfDigits += Int(number)\n    }\n    return largestPrime + sumOfDigits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f7d90bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f7d602561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4f7d602286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4f7d60213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4f7d601bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpykuoqiha                        0x00005568614d6247 <unavailable> + 8775

    6    tmpykuoqiha                        0x00005568614d5672 <unavailable> + 5746

    7    libc.so.6                          0x00002b4f7daf7460 __libc_start_main +
    245

    8    tmpykuoqiha                        0x00005568614d52a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sumOfDigits:\
    \ Int = 0\n    for number in lst {\n        if number % 2 == 0 {\n           \
    \ largestPrime = number\n        }\n    }\n    for number in lst {\n        if\
    \ number % 2 == 0 {\n            if number > largestPrime {\n                largestPrime\
    \ = number\n            }\n        }\n    }\n    for number in lst {\n       \
    \ if number % 2 == 0 {\n            if number > largestPrime {\n             \
    \   largestPrime = number\n            }\n        }\n    }\n    for number in\
    \ lst {\n        if number % 2 == 0 {\n            if number > largestPrime {\n\
    \                largestPrime = number\n            }\n        }\n    }\n    for\
    \ number in lst {\n        if number % 2 == 0 {\n            if number > largestPrime\
    \ {\n                largestPrime = number\n            }\n        }\n    }\n\
    \    for number in lst {\n        if number % 2 == 0 {\n            if number\
    \ > largestPrime {\n                largestPrime = number\n            }\n   \
    \     }\n    }\n    for number in lst {\n        if number % 2 == 0 {\n      \
    \      if number > largestPrime {\n                largestPrime = number\n   \
    \         }\n        }\n    }\n    for number in lst {\n        if number % 2\
    \ == 0 {\n            if number > largestPrime {\n                largestPrime\
    \ = number\n            }\n        }\n    }\n    for number in lst {\n       \
    \ if number % 2 == 0 {\n            if number > largestPrime {\n             \
    \   largestPrime = number\n            }\n        }\n    }\n    for number in\
    \ lst {\n        if number % 2 == 0 {\n            if number > largestPrime {\n\
    \                largestPrime = number\n            }\n        }\n    }\n    for\
    \ number in lst {\n        if number % 2 == 0 {\n            if number > largestPrime\
    \ {\n                largestPrime = number\n            }\n        }\n    }\n\
    \    for number in lst {\n        if number % 2 == 0 {\n            if number\
    \ > largestPrime {\n                largestPrime = number\n            }\n   \
    \     }\n    }\n    for number in lst {\n        if number % 2 == 0 {\n      \
    \      if number > largestPrime {\n                largestPrime = number\n   \
    \         }\n        }\n    }\n    for number in lst {\n        if number % 2\
    \ == 0 {\n            if number > largestPrime {\n                largestPrime\
    \ = number\n            }\n        }\n    }\n    for number \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp9q85p177.swift:116:15: error: expected 'in' after for-each pattern\n\
    \    for number \n              ^\n/tmp/tmp9q85p177.swift:116:15: error: expected\
    \ Sequence expression for for-each loop\n    for number \n              ^\n/tmp/tmp9q85p177.swift:116:15:\
    \ error: expected '{' to start the body of for-each loop\n    for number \n  \
    \            ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeDigit:\
    \ Int = 0\n    var sumOfDigits = 0\n    for number in lst {\n        if number\
    \ > largestPrime {\n            largestPrime = number\n            largestPrimeDigit\
    \ = number\n        }\n        if number == largestPrime {\n            sumOfDigits\
    \ += number\n        }\n    }\n    return sumOfDigits\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpkvqqo0os/tmpkvqqo0os.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23808ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23805e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23805e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23805e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvqqo0os                        0x0000562d5d51c520 <unavailable> + 5408

    5    libc.so.6                          0x00002b2380ad8460 __libc_start_main +
    245

    6    tmpkvqqo0os                        0x0000562d5d51c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp3hqnreh0/tmp3hqnreh0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bab66dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bab364b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bab364988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bab3637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hqnreh0                        0x00005631cf4e35b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b7bab859460 __libc_start_main +
    245

    6    tmp3hqnreh0                        0x00005631cf4e3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            continue\n    \
    \    }\n        if num == max {\n            sum += num\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpo30p82m0/tmpo30p82m0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f5b7adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f5b4a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f5b4a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f5b4a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo30p82m0                        0x0000562975b22520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6f5b999460 __libc_start_main +
    245

    6    tmpo30p82m0                        0x0000562975b220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += Int(String(x))\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpb58ez41u.swift:25:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(x))\n \
    \                  ^\n/tmp/tmpb58ez41u.swift:25:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(x))\n                   ^\n                                  ??\
    \ <#default value#>\n/tmp/tmpb58ez41u.swift:25:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            sum +=\
    \ Int(String(x))\n                   ^\n                                 !\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b22256efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22253e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b22253e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b22253e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b22253e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp31us5xt7                        0x000055b4e5b75070 <unavailable> + 8304

    6    tmp31us5xt7                        0x000055b4e5b74532 <unavailable> + 5426

    7    libc.so.6                          0x00002b22258db460 __libc_start_main +
    245

    8    tmp31us5xt7                        0x000055b4e5b74169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            if\
    \ x % 2 == 0 {\n                continue\n            }\n            if x % 3\
    \ == 0 {\n                continue\n            }\n            if x % 5 == 0 {\n\
    \                continue\n            }\n            if x % 7 == 0 {\n      \
    \          continue\n            }\n            if x % 11 == 0 {\n           \
    \     continue\n            }\n            if x % 13 == 0 {\n                continue\n\
    \            }\n            if x % 17 == 0 {\n                continue\n     \
    \       }\n            if x % 19 == 0 {\n                continue\n          \
    \  }\n            if x % 23 == 0 {\n                continue\n            }\n\
    \            if x % 29 == 0 {\n                continue\n            }\n     \
    \       if x % 31 == 0 {\n                continue\n            }\n          \
    \  if x % 37 == 0 {\n                continue\n            }\n            if x\
    \ % 41 == 0 {\n                continue\n            }\n            if x % 43\
    \ == 0 {\n                continue\n            }\n            if x % 47 == 0\
    \ {\n                continue\n            }\n            if x % 53 == 0 {\n \
    \               continue\n            }\n            if x % 59 == 0 {\n      \
    \          continue\n            }\n            if x % 61 == 0 {\n           \
    \     continue\n            }\n            if x % 67 == 0 {\n                continue\n\
    \            }\n            if x % 71 == 0 {\n                continue\n     \
    \       }\n            if x % 73 == 0 {\n                continue\n          \
    \  }\n            if x % 79 == 0 {\n                continue\n            }\n\
    \            if x % 83 == 0 {\n                continue\n            }\n     \
    \       if x % 89 == 0 {\n                continue\n            }\n          \
    \  if x % 97 == 0 {\n                continue\n            }\n            if x\
    \ % 101 == 0 {\n                continue\n            }\n            if x % 103\
    \ == 0 {\n                continue\n            }\n            if x % 107 == 0\
    \ {\n                continue\n            }\n            if x % 109 == 0 {\n\
    \                continue\n            }\n            if x % 113 == 0 {\n    \
    \            continue\n            }\n            if x % 117 == 0 {\n        \
    \        continue\n            }\n            if x % 121 == 0 {\n            \
    \    continue\n            }\n            if x % 123 == 0 {\n                continue\n\
    \            }\n            if x % 127 == 0 {\n                continue\n    \
    \        }\n            if x % 131 == 0 {\n                continue\n        \
    \    }\n            if x % 137 == 0 {\n                continue\n            }\n\
    \            if x % 139 == 0 {\n                continue\n            }\n    \
    \        if x % 143 == 0 {\n                continue\n            }\n        \
    \    if x % 147 == 0 {\n                continue\n            }\n            if\
    \ x % 151 == 0 {\n                continue\n            }\n            if x %\
    \ 157 == 0 {\n                continue\n            }\n            if x % 161\
    \ == 0 {\n                continue\n            }\n            if x % 163 == 0\
    \ {\n                continue\n            }\n            if x % 167\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpeqffhn6v.swift:157:23: error: expected '{' after 'if' condition\n\
    \            if x % 167\n                      ^\n/tmp/tmpeqffhn6v.swift:181:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpeqffhn6v.swift:20:18:\
    \ note: to match this opening '{'\n    for x in lst {\n                 ^\n/tmp/tmpeqffhn6v.swift:181:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpeqffhn6v.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpeqffhn6v.swift:157:18: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n            if x % 167\n\
    \                 ^\n               ((     ) != 0)\n/tmp/tmpeqffhn6v.swift:161:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp3hqnreh0/tmp3hqnreh0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bab66dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bab364b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bab364988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bab3637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hqnreh0                        0x00005631cf4e35b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b7bab859460 __libc_start_main +
    245

    6    tmp3hqnreh0                        0x00005631cf4e3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var sum:\
    \ Int = 0\n    for num in lst {\n        if num > largestPrime {\n           \
    \ largestPrime = num\n        }\n    }\n    for num in lst {\n        if num >\
    \ largestPrime {\n            sum += Int(String(num).characters.filter { $0 >=\
    \ '0' && $0 <= '9' }.joined())\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpcpfxbexd.swift:27:62: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(String(num).characters.filter { $0 >= '0' &&\
    \ $0 <= '9' }.joined())\n                                                    \
    \         ^~~\n                                                             \"\
    0\"\n/tmp/tmpcpfxbexd.swift:27:75: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(String(num).characters.filter { $0 >= '0' &&\
    \ $0 <= '9' }.joined())\n                                                    \
    \                      ^~~\n                                                 \
    \                         \"9\"\n/tmp/tmpcpfxbexd.swift:27:20: error: value of\
    \ optional type 'Int?' must be unwrapped to a value of type 'Int'\n          \
    \  sum += Int(String(num).characters.filter { $0 >= '0' && $0 <= '9' }.joined())\n\
    \                   ^\n/tmp/tmpcpfxbexd.swift:27:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(num).characters.filter { $0 >= '0' && $0 <= '9' }.joined())\n\
    \                   ^\n                                                      \
    \                                    ?? <#default value#>\n/tmp/tmpcpfxbexd.swift:27:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            sum += Int(String(num).characters.filter { $0 >= '0' && $0\
    \ <= '9' }.joined())\n                   ^\n                                 \
    \                                                        !\n"
  stdout: ''
  timestamp: 1660014481
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     sum += x\n        }\n    }\n    if max > 0 {\n        sum += max\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpra9dzhmt/tmpra9dzhmt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08bd5a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08bd29fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08bd29f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08bd29e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpra9dzhmt                        0x0000560fe75215b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b08bd794460 __libc_start_main +
    245

    6    tmpra9dzhmt                        0x0000560fe7521169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % max == 0 {\n            sum += lst[index]\
    \ % max\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpbyhk6sjm/tmpbyhk6sjm.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86fd463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86fd15ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86fd15a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86fd1597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyhk6sjm                        0x00005580447ff5f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b86fd64f460 __libc_start_main +
    245

    6    tmpbyhk6sjm                        0x00005580447ff1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnaq6fn5m/tmpnaq6fn5m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d95930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d95627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d95627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d956267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnaq6fn5m                        0x000055815a2c95f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b2d95b1c460 __libc_start_main +
    245

    6    tmpnaq6fn5m                        0x000055815a2c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for index in 0..<lst.count {\n        let num = lst[index]\n\
    \        if num > max {\n            max = num\n            maxIndex = index\n\
    \        }\n    }\n    if maxIndex == lst.count {\n        return max\n    }\n\
    \    for index in 0..<lst.count {\n        let num = lst[index]\n        if num\
    \ == max {\n            sum += Int(num) - Int(max)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpfhdz981v/tmpfhdz981v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea921b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea91ea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea91ea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea91ea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhdz981v                        0x000055f872a6f720 <unavailable> + 5920

    5    libc.so.6                          0x00002aea9239d460 __libc_start_main +
    245

    6    tmpfhdz981v                        0x000055f872a6f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b4554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b424b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b78b424b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b78b424b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b78b424abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz_l2ioip                        0x000055d30accd070 <unavailable> + 8304

    6    tmpz_l2ioip                        0x000055d30accc532 <unavailable> + 5426

    7    libc.so.6                          0x00002b78b4740460 __libc_start_main +
    245

    8    tmpz_l2ioip                        0x000055d30accc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm9ui_fdl/tmpm9ui_fdl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e2ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e27beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e27be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e27bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9ui_fdl                        0x000055aafdb33520 <unavailable> + 5408

    5    libc.so.6                          0x00002b50e2cb3460 __libc_start_main +
    245

    6    tmpm9ui_fdl                        0x000055aafdb330d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += Int(String(i))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpdcikngp_.swift:27:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(i))\n \
    \                  ^\n/tmp/tmpdcikngp_.swift:27:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(i))\n                   ^\n                                  ??\
    \ <#default value#>\n/tmp/tmpdcikngp_.swift:27:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            sum +=\
    \ Int(String(i))\n                   ^\n                                 !\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for index in 0..<lst.count {\n        if lst[index] > max\
    \ {\n            max = lst[index]\n            maxIndex = index\n        }\n \
    \   }\n    for index in 0..<lst.count {\n        if lst[index] == max {\n    \
    \        sum += Int(lst[maxIndex])\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp32920cxv/tmp32920cxv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b827b2f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b827afeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b827afee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b827afed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32920cxv                        0x0000562574585720 <unavailable> + 5920

    5    libc.so.6                          0x00002b827b4e3460 __libc_start_main +
    245

    6    tmp32920cxv                        0x00005625745852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnaq6fn5m/tmpnaq6fn5m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d95930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d95627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d95627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d956267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnaq6fn5m                        0x000055815a2c95f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b2d95b1c460 __libc_start_main +
    245

    6    tmpnaq6fn5m                        0x000055815a2c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for index in 0..<lst.count {\n        if lst[index] > max\
    \ {\n            max = lst[index]\n            maxIndex = index\n        }\n \
    \   }\n    for index in 0..<lst.count {\n        if lst[index] == max {\n    \
    \        sum += lst[index].truncatingRemainder(dividingBy: 10).magnitude\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy1r731ba.swift:29:31: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n            sum += lst[index].truncatingRemainder(dividingBy:\
    \ 10).magnitude\n                   ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnaq6fn5m/tmpnaq6fn5m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d95930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d95627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d95627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d956267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnaq6fn5m                        0x000055815a2c95f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b2d95b1c460 __libc_start_main +
    245

    6    tmpnaq6fn5m                        0x000055815a2c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     continue\n        }\n        for y in 2..<x {\n            if x % y == 0\
    \ {\n                break\n            }\n        }\n        if y == x {\n  \
    \          continue\n        }\n        for z in 2..<x {\n            if x % z\
    \ == 0 {\n                break\n            }\n        }\n        if z == x {\n\
    \            continue\n        }\n        for w in 2..<x {\n            if x %\
    \ w == 0 {\n                break\n            }\n        }\n        if w == x\
    \ {\n            continue\n        }\n        for v in 2..<x {\n            if\
    \ x % v == 0 {\n                break\n            }\n        }\n        if v\
    \ == x {\n            continue\n        }\n        for u in 2..<x {\n        \
    \    if x % u == 0 {\n                break\n            }\n        }\n      \
    \  if u == x {\n            continue\n        }\n        for p in 2..<x {\n  \
    \          if x % p == 0 {\n                break\n            }\n        }\n\
    \        if p == x {\n            continue\n        }\n        for q in 2..<x\
    \ {\n            if x % q == 0 {\n                break\n            }\n     \
    \   }\n        if q == x {\n            continue\n        }\n        for r in\
    \ 2..<x {\n            if x % r == 0 {\n                break\n            }\n\
    \        }\n        if r == x {\n            continue\n        }\n        for\
    \ s in 2..<x {\n            if x % s == 0 {\n                break\n         \
    \   }\n        }\n        if s == x {\n            continue\n        }\n     \
    \   for t in 2..<x {\n            if x % t == 0 {\n                break\n   \
    \         }\n        }\n        if t == x {\n            continue\n        }\n\
    \        for u in 2..<x {\n            if x % u == 0 {\n                break\n\
    \            }\n        }\n        if u == x {\n            continue\n       \
    \ }\n        for v in 2..<x {\n            if x % v == 0 {\n                break\n\
    \            }\n        }\n        if v == x {\n            continue\n       \
    \ }\n        for w in 2..<x {\n            if x % w == 0 {\n                break\n\
    \            }\n        }\n        if w == x {\n            continue\n       \
    \ }\n        for u in 2..<x {\n            if x % u == 0 {\n                break\n\
    \            }\n        }\n        if u == x {\n            continue\n       \
    \ }\n        for v in 2..<x {\n            if x % v == 0 {\n                break\n\
    \            }\n        }\n        if v == x {\n            continue\n       \
    \ }\n        for u in 2..\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp4389d1qa.swift:150:21: error: expected '{' to start the body of\
    \ for-each loop\n        for u in 2..\n                    ^\n/tmp/tmp4389d1qa.swift:174:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmp4389d1qa.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp4389d1qa.swift:35:12: error: cannot find\
    \ 'y' in scope\n        if y == x {\n           ^\n/tmp/tmp4389d1qa.swift:43:12:\
    \ error: cannot find 'z' in scope\n        if z == x {\n           ^\n/tmp/tmp4389d1qa.swift:51:12:\
    \ error: cannot find 'w' in scope\n        if w == x {\n           ^\n/tmp/tmp4389d1qa.swift:59:12:\
    \ error: cannot find 'v' in scope\n        if v == x {\n           ^\n/tmp/tmp4389d1qa.swift:67:12:\
    \ error: cannot find 'u' in scope\n        if u == x {\n           ^\n/tmp/tmp4389d1qa.swift:75:12:\
    \ error: cannot find 'p' in scope\n        if p == x {\n           ^\n/tmp/tmp4389d1qa.swift:83:12:\
    \ error: cannot find 'q' in scope\n        if q == x {\n           ^\n/tmp/tmp4389d1qa.swift:91:12:\
    \ error: cannot find 'r' in scope\n        if r == x {\n           ^\n/tmp/tmp4389d1qa.swift:99:12:\
    \ error: cannot find 's' in scope\n        if s == x {\n           ^\n/tmp/tmp4389d1qa.swift:107:12:\
    \ error: cannot find 't' in scope\n        if t == x {\n           ^\n/tmp/tmp4389d1qa.swift:115:12:\
    \ error: cannot find 'u' in scope\n        if u == x {\n           ^\n/tmp/tmp4389d1qa.swift:123:12:\
    \ error: cannot find 'v' in scope\n        if v == x {\n           ^\n/tmp/tmp4389d1qa.swift:131:12:\
    \ error: cannot find 'w' in scope\n        if w == x {\n           ^\n/tmp/tmp4389d1qa.swift:139:12:\
    \ error: cannot find 'u' in scope\n        if u == x {\n           ^\n/tmp/tmp4389d1qa.swift:147:12:\
    \ error: cannot find 'v' in scope\n        if v == x {\n           ^\n/tmp/tmp4389d1qa.swift:150:19:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ u in 2..\n                  ^~\n                  ...\n/tmp/tmp4389d1qa.swift:154"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            if\
    \ x % 2 == 0 {\n                sum += x\n            }\n            if x % 3\
    \ == 0 {\n                sum += x\n            }\n            if x % 5 == 0 {\n\
    \                sum += x\n            }\n            if x % 7 == 0 {\n      \
    \          sum += x\n            }\n            if x % 11 == 0 {\n           \
    \     sum += x\n            }\n            if x % 13 == 0 {\n                sum\
    \ += x\n            }\n            if x % 17 == 0 {\n                sum += x\n\
    \            }\n            if x % 19 == 0 {\n                sum += x\n     \
    \       }\n            if x % 23 == 0 {\n                sum += x\n          \
    \  }\n            if x % 29 == 0 {\n                sum += x\n            }\n\
    \            if x % 31 == 0 {\n                sum += x\n            }\n     \
    \       if x % 37 == 0 {\n                sum += x\n            }\n          \
    \  if x % 41 == 0 {\n                sum += x\n            }\n            if x\
    \ % 43 == 0 {\n                sum += x\n            }\n            if x % 47\
    \ == 0 {\n                sum += x\n            }\n            if x % 53 == 0\
    \ {\n                sum += x\n            }\n            if x % 59 == 0 {\n \
    \               sum += x\n            }\n            if x % 61 == 0 {\n      \
    \          sum += x\n            }\n            if x % 67 == 0 {\n           \
    \     sum += x\n            }\n            if x % 71 == 0 {\n                sum\
    \ += x\n            }\n            if x % 73 == 0 {\n                sum += x\n\
    \            }\n            if x % 79 == 0 {\n                sum += x\n     \
    \       }\n            if x % 83 == 0 {\n                sum += x\n          \
    \  }\n            if x % 89 == 0 {\n                sum += x\n            }\n\
    \            if x % 97 == 0 {\n                sum += x\n            }\n     \
    \       if x % 101 == 0 {\n                sum += x\n            }\n         \
    \   if x % 103 == 0 {\n                sum += x\n            }\n            if\
    \ x % 107 == 0 {\n                sum += x\n            }\n            if x %\
    \ 109 == 0 {\n                sum += x\n            }\n            if x % 113\
    \ == 0 {\n                sum += x\n            }\n            if x % 117 == 0\
    \ {\n                sum += x\n            }\n            if x % 121 == 0 {\n\
    \                sum += x\n            }\n            if x % 123 == 0 {\n    \
    \            sum += x\n            }\n            if x % 127 == 0 {\n        \
    \        sum += x\n            }\n            if x % 131 == 0 {\n            \
    \    sum += x\n            }\n            if x % 137 == 0 {\n                sum\
    \ += x\n            }\n            if x % 139 == 0 {\n                sum += \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpjov3e9ak.swift:138:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpjov3e9ak.swift:161:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmpjov3e9ak.swift:27:18: note: to match this opening '{'\n\
    \        if x > 1 {\n                 ^\n/tmp/tmpjov3e9ak.swift:161:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmpjov3e9ak.swift:20:18:\
    \ note: to match this opening '{'\n    for x in lst {\n                 ^\n/tmp/tmpjov3e9ak.swift:161:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmpjov3e9ak.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmpjov3e9ak.swift:141:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined()!)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp_m9o6epv.swift:25:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(x).characters.filter\
    \ { $0 != \"0\" }.joined()!)\n                   ^\n/tmp/tmp_m9o6epv.swift:25:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined()!)\n\
    \                   ^\n                                                      \
    \                      ?? <#default value#>\n/tmp/tmp_m9o6epv.swift:25:20: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined()!)\n\
    \                   ^\n                                                      \
    \                     !\n"
  stdout: ''
  timestamp: 1660014476
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm9ui_fdl/tmpm9ui_fdl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e2ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e27beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e27be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e27bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9ui_fdl                        0x000055aafdb33520 <unavailable> + 5408

    5    libc.so.6                          0x00002b50e2cb3460 __libc_start_main +
    245

    6    tmpm9ui_fdl                        0x000055aafdb330d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i == 0 {\n            continue\n        }\n        if\
    \ max < i {\n            max = i\n        }\n    }\n    for i in lst {\n     \
    \   if i == 0 {\n            continue\n        }\n        if max < i {\n     \
    \       sum += Int(String(i).characters.dropLast())\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpw4kmsj0_.swift:33:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(i).characters.dropLast())\n\
    \                   ^\n/tmp/tmpw4kmsj0_.swift:33:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(i).characters.dropLast())\n                   ^\n            \
    \                                            ?? <#default value#>\n/tmp/tmpw4kmsj0_.swift:33:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            sum += Int(String(i).characters.dropLast())\n           \
    \        ^\n                                                       !\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var maxSum = 0\n    for index in 0..<lst.count {\n        let value = lst[index]\n\
    \        if isPrime(value) {\n            if value > max {\n                max\
    \ = value\n                maxIndex = index\n                maxSum = 0\n    \
    \        }\n        } else {\n            if value > maxSum {\n              \
    \  maxSum = value\n                maxIndex = index\n            }\n        }\n\
    \    }\n    return maxSum + max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpmzqracm1.swift:23:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(value) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnaq6fn5m/tmpnaq6fn5m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d95930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d95627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d95627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d956267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnaq6fn5m                        0x000055815a2c95f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b2d95b1c460 __libc_start_main +
    245

    6    tmpnaq6fn5m                        0x000055815a2c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     continue\n        }\n        for y in 2..<x {\n            if x % y == 0\
    \ {\n                break\n            }\n        }\n        if y == x {\n  \
    \          continue\n        }\n        for z in 3..<x {\n            if x % z\
    \ == 0 {\n                break\n            }\n        }\n        if z == x {\n\
    \            continue\n        }\n        sum += x\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprufjyhhv.swift:35:12: error: cannot find 'y' in scope\n       \
    \ if y == x {\n           ^\n/tmp/tmprufjyhhv.swift:43:12: error: cannot find\
    \ 'z' in scope\n        if z == x {\n           ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += Int(String(x).characters.filter { $0 >= '0' && $0\
    \ <= '9' }.joined()!)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpthhr5oi_.swift:25:60: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(String(x).characters.filter { $0 >= '0' &&\
    \ $0 <= '9' }.joined()!)\n                                                   \
    \        ^~~\n                                                           \"0\"\
    \n/tmp/tmpthhr5oi_.swift:25:73: error: single-quoted string literal found, use\
    \ '\"'\n            sum += Int(String(x).characters.filter { $0 >= '0' && $0 <=\
    \ '9' }.joined()!)\n                                                         \
    \               ^~~\n                                                        \
    \                \"9\"\n/tmp/tmpthhr5oi_.swift:25:20: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n            sum += Int(String(x).characters.filter\
    \ { $0 >= '0' && $0 <= '9' }.joined()!)\n                   ^\n/tmp/tmpthhr5oi_.swift:25:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            sum += Int(String(x).characters.filter { $0 >= '0' && $0\
    \ <= '9' }.joined()!)\n                   ^\n                                \
    \                                                         ?? <#default value#>\n\
    /tmp/tmpthhr5oi_.swift:25:20: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            sum += Int(String(x).characters.filter\
    \ { $0 >= '0' && $0 <= '9' }.joined()!)\n                   ^\n              \
    \                                                                          !\n"
  stdout: ''
  timestamp: 1660014482
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] % maxIndex == 0 {\n        \
    \    sum += lst[index] % maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmplh3afqvp/tmplh3afqvp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b244e5b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b244e2aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b244e2ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b244e2ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplh3afqvp                        0x0000557c905755f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b244e7a3460 __libc_start_main +
    245

    6    tmplh3afqvp                        0x0000557c905751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ for num in lst {\n        if num > max {\n            max = num\n          \
    \  maxNum = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num == maxNum {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm6pj_x9p/tmpm6pj_x9p.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4545d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45459fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45459fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45459f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6pj_x9p                        0x0000564e78b23520 <unavailable> + 5408

    5    libc.so.6                          0x00002b4545eef460 __libc_start_main +
    245

    6    tmpm6pj_x9p                        0x0000564e78b230d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime: Int = 0\n    var largestPrimeCount:\
    \ Int = 0\n    for num in lst {\n        if num > largestPrime {\n           \
    \ largestPrime = num\n            largestPrimeCount = 1\n        } else {\n  \
    \          if num == largestPrime {\n                largestPrimeCount += 1\n\
    \            }\n        }\n    }\n    return largestPrimeCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpowir83et/tmpowir83et.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6873b9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6873894b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6873894988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68738937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowir83et                        0x000055a6aa9ee520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6873d89460 __libc_start_main +
    245

    6    tmpowir83et                        0x000055a6aa9ee0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = 1\n        }\n        if num > maxPrime {\n            maxPrime\
    \ = num\n        }\n    }\n    return maxPrime + max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp6oymhuk8/tmp6oymhuk8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad430ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad4001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad4001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad40007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oymhuk8                        0x000056308699c520 <unavailable> + 5408

    5    libc.so.6                          0x00002b1ad44f6460 __libc_start_main +
    245

    6    tmp6oymhuk8                        0x000056308699c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        let value = lst[index]\n        if isPrime(value)\
    \ {\n            if value > max {\n                max = value\n             \
    \   maxIndex = index\n            }\n        }\n    }\n    return maxIndex ==\
    \ 0 ? 0 : max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpnhzarp1f.swift:22:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(value) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   var sum = 0\n    for index in 0..<lst.count {\n        let value = lst[index]\n\
    \        if isPrime(value) {\n            sum += value\n            if sum > max\
    \ {\n                max = sum\n                maxIndex = index\n           \
    \ }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprpxtj0o4.swift:23:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(value) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm9ui_fdl/tmpm9ui_fdl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e2ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e27beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e27be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e27bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9ui_fdl                        0x000055aafdb33520 <unavailable> + 5408

    5    libc.so.6                          0x00002b50e2cb3460 __libc_start_main +
    245

    6    tmpm9ui_fdl                        0x000055aafdb330d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x == max {\n         \
    \   sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp_55pb20d/tmp_55pb20d.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c9479dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c94494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c94494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c944937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_55pb20d                        0x000055ecd9972520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6c94989460 __libc_start_main +
    245

    6    tmp_55pb20d                        0x000055ecd99720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x == max {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp33nu92ts/tmp33nu92ts.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b782f2d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b782efcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b782efcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b782efce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33nu92ts                        0x000055a04fa06520 <unavailable> + 5408

    5    libc.so.6                          0x00002b782f4c4460 __libc_start_main +
    245

    6    tmp33nu92ts                        0x000055a04fa060d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var largestSum\
    \ = 0\n    for num in lst {\n        if num > largestPrime {\n            largestPrime\
    \ = num\n        }\n        if num > largestSum {\n            largestSum = num\n\
    \        }\n    }\n    return largestSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp1mh0882r/tmp1mh0882r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2228955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b222864cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b222864c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b222864b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mh0882r                        0x000055fe2c2f7520 <unavailable> + 5408

    5    libc.so.6                          0x00002b2228b41460 __libc_start_main +
    245

    6    tmp1mh0882r                        0x000055fe2c2f70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x == max {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm9ui_fdl/tmpm9ui_fdl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50e2ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50e27beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50e27be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50e27bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9ui_fdl                        0x000055aafdb33520 <unavailable> + 5408

    5    libc.so.6                          0x00002b50e2cb3460 __libc_start_main +
    245

    6    tmpm9ui_fdl                        0x000055aafdb330d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if x > max {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmprlceyqa6.swift:192:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmprlceyqa6.swift:164:18: note: to match this opening\
    \ '{'\n    for x in lst {\n                 ^\n/tmp/tmprlceyqa6.swift:192:46:\
    \ error: expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97,\
    \ 8192]) == 10)\n                                             ^\n/tmp/tmprlceyqa6.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmprlceyqa6.swift:172:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprlceyqa6.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            continue\n        }\n   \
    \     if x % max == 0 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmposbe0g3t/tmposbe0g3t.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ac9127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ac8e1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ac8e1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ac8e1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposbe0g3t                        0x00005636330355b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b5ac9313460 __libc_start_main +
    245

    6    tmposbe0g3t                        0x0000563633035169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += Int(String(x).characters.last!)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpdxu9zyuo.swift:28:20: error: no exact matches in call to initializer\
    \ \n            sum += Int(String(x).characters.last!)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'String.Element' (aka 'Character'))\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects value\
    \ of type 'Double' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'String.Element' (aka\
    \ 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for num in lst {\n        if num > largestPrime {\n            largestPrime\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == largestPrime\
    \ {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp53ecursw/tmp53ecursw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b40f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b3df0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b3df0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b3def7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53ecursw                        0x000055fd88584520 <unavailable> + 5408

    5    libc.so.6                          0x00002b65b42e5460 __libc_start_main +
    245

    6    tmp53ecursw                        0x000055fd885840d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if index == maxIndex {\n      \
    \      continue\n        }\n        if lst[index] > max {\n            continue\n\
    \        }\n        if lst[index] % maxIndex == 0 {\n            sum += lst[index]\
    \ / maxIndex\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpu4ig02nk/tmpu4ig02nk.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86938dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86935d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86935d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86935d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4ig02nk                        0x000056054e2435f0 <unavailable> + 5616

    5    libc.so.6                          0x00002b8693aca460 __libc_start_main +
    245

    6    tmpu4ig02nk                        0x000056054e2431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            sum += num % max\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpb6esy5zv/tmpb6esy5zv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f60c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f608feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f608fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f608fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6esy5zv                        0x000055e457ef55b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b2f60df3460 __libc_start_main +
    245

    6    tmpb6esy5zv                        0x000055e457ef5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += Int(truncatingIfNeeded(i\
    \ / max))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpw0x0twq2.swift:27:24: error: cannot find 'truncatingIfNeeded' in\
    \ scope\n            sum += Int(truncatingIfNeeded(i / max))\n               \
    \        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += Int(i) - Int(max\
    \ % i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b6998e1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6998b16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6998b16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6998b1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6998b15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2g46e7zs                        0x000055fe9f97c1b6 <unavailable> + 8630

    6    tmp2g46e7zs                        0x000055fe9f97b672 <unavailable> + 5746

    7    libc.so.6                          0x00002b699900b460 __libc_start_main +
    245

    8    tmp2g46e7zs                        0x000055fe9f97b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if i == max {\n            sum += i\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc2uom4a2/tmpc2uom4a2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dc79bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dc76b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dc76b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dc76b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2uom4a2                        0x000055ed5b510520 <unavailable> + 5408

    5    libc.so.6                          0x00002b5dc7bab460 __libc_start_main +
    245

    6    tmpc2uom4a2                        0x000055ed5b5100d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += Int(String(x).characters.filter{$0 >= '0' && $0\
    \ <= '9'}.joined())\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpiv4uwjho.swift:25:58: error: single-quoted string literal found,\
    \ use '\"'\n            sum += Int(String(x).characters.filter{$0 >= '0' && $0\
    \ <= '9'}.joined())\n                                                        \
    \ ^~~\n                                                         \"0\"\n/tmp/tmpiv4uwjho.swift:25:71:\
    \ error: single-quoted string literal found, use '\"'\n            sum += Int(String(x).characters.filter{$0\
    \ >= '0' && $0 <= '9'}.joined())\n                                           \
    \                           ^~~\n                                            \
    \                          \"9\"\n/tmp/tmpiv4uwjho.swift:25:20: error: value of\
    \ optional type 'Int?' must be unwrapped to a value of type 'Int'\n          \
    \  sum += Int(String(x).characters.filter{$0 >= '0' && $0 <= '9'}.joined())\n\
    \                   ^\n/tmp/tmpiv4uwjho.swift:25:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(x).characters.filter{$0 >= '0' && $0 <= '9'}.joined())\n     \
    \              ^\n                                                           \
    \                          ?? <#default value#>\n/tmp/tmpiv4uwjho.swift:25:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            sum += Int(String(x).characters.filter{$0 >= '0' && $0 <=\
    \ '9'}.joined())\n                   ^\n                                     \
    \                                               !\n"
  stdout: ''
  timestamp: 1660014482
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x > 1 {\n            sum\
    \ += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpcd0zbdxh/tmpcd0zbdxh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd0zbdxh                        0x000055f6bacdb520 <unavailable> + 5408

    5    libc.so.6                          0x00002b053e406460 __libc_start_main +
    245

    6    tmpcd0zbdxh                        0x000055f6bacdb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > 0 {\n            if isPrime(num) {\n        \
    \        sum += num\n            } else {\n                max = num\n       \
    \     }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpe3fyqf0o.swift:22:16: error: cannot find 'isPrime' in scope\n \
    \           if isPrime(num) {\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined())\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp15fon93z.swift:25:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(x).characters.filter\
    \ { $0 != \"0\" }.joined())\n                   ^\n/tmp/tmp15fon93z.swift:25:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined())\n\
    \                   ^\n                                                      \
    \                     ?? <#default value#>\n/tmp/tmp15fon93z.swift:25:20: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            sum += Int(String(x).characters.filter { $0 != \"0\" }.joined())\n\
    \                   ^\n                                                      \
    \                    !\n"
  stdout: ''
  timestamp: 1660014476
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            sum += num % max\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpb6esy5zv/tmpb6esy5zv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f60c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f608feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f608fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f608fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6esy5zv                        0x000055e457ef55b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b2f60df3460 __libc_start_main +
    245

    6    tmpb6esy5zv                        0x000055e457ef5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            sum += num % max\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpb6esy5zv/tmpb6esy5zv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f60c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f608feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f608fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f608fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6esy5zv                        0x000055e457ef55b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b2f60df3460 __libc_start_main +
    245

    6    tmpb6esy5zv                        0x000055e457ef5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     if x % 3 == 0 {\n                if x % 5 == 0 {\n                    if\
    \ x % 7 == 0 {\n                        sum += x\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp7tssk7l1/tmp7tssk7l1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab70f40ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab70f105b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab70f105988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab70f1047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7tssk7l1                        0x000055aa624ce5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002ab70f5fa460 __libc_start_main +
    245

    6    tmp7tssk7l1                        0x000055aa624ce169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n\
    \        if num == maxPrime {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp4auqfhon/tmp4auqfhon.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e96734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9642bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9642b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9642a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4auqfhon                        0x000055786110b520 <unavailable> + 5408

    5    libc.so.6                          0x00002b5e96920460 __libc_start_main +
    245

    6    tmp4auqfhon                        0x000055786110b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpqhgvpaln.swift:19:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmpqhgvpaln.swift:165:1: error: missing\
    \ return in global function expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxNum = 0\n   \
    \ for num in lst {\n        if num > max {\n            max = num\n          \
    \  maxNum = num\n        }\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num == maxNum {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpm6pj_x9p/tmpm6pj_x9p.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4545d03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45459fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45459fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45459f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6pj_x9p                        0x0000564e78b23520 <unavailable> + 5408

    5    libc.so.6                          0x00002b4545eef460 __libc_start_main +
    245

    6    tmpm6pj_x9p                        0x0000564e78b230d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \     if num > 0 {\n            sum += num % 10\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst:\
    \ [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp71rgqf89/tmp71rgqf89.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51ab487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51ab17eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51ab17e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51ab17d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71rgqf89                        0x00005570c547e5b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b51ab673460 __libc_start_main +
    245

    6    tmp71rgqf89                        0x00005570c547e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if x % 2 == 0 {\n       \
    \     continue\n        }\n        if x % 3 == 0 {\n            continue\n   \
    \     }\n        if x % 5 == 0 {\n            continue\n        }\n        if\
    \ x % 7 == 0 {\n            continue\n        }\n        if x % 11 == 0 {\n  \
    \          continue\n        }\n        if x % 13 == 0 {\n            continue\n\
    \        }\n        if x % 17 == 0 {\n            continue\n        }\n      \
    \  if x % 19 == 0 {\n            continue\n        }\n        if x % 23 == 0 {\n\
    \            continue\n        }\n        if x % 29 == 0 {\n            continue\n\
    \        }\n        if x % 31 == 0 {\n            continue\n        }\n      \
    \  if x % 37 == 0 {\n            continue\n        }\n        if x % 41 == 0 {\n\
    \            continue\n        }\n        if x % 43 == 0 {\n            continue\n\
    \        }\n        if x % 47 == 0 {\n            continue\n        }\n      \
    \  if x % 53 == 0 {\n            continue\n        }\n        if x % 59 == 0 {\n\
    \            continue\n        }\n        if x % 61 == 0 {\n            continue\n\
    \        }\n        if x % 67 == 0 {\n            continue\n        }\n      \
    \  if x % 71 == 0 {\n            continue\n        }\n        if x % 73 == 0 {\n\
    \            continue\n        }\n        if x % 79 == 0 {\n            continue\n\
    \        }\n        if x % 83 == 0 {\n            continue\n        }\n      \
    \  if x % 89 == 0 {\n            continue\n        }\n        if x % 97 == 0 {\n\
    \            continue\n        }\n        if x % 101 == 0 {\n            continue\n\
    \        }\n        if x % 103 == 0 {\n            continue\n        }\n     \
    \   if x % 107 == 0 {\n            continue\n        }\n        if x % 109 ==\
    \ 0 {\n            continue\n        }\n        if x % 113 == 0 {\n          \
    \  continue\n        }\n        if x % 117 == 0 {\n            continue\n    \
    \    }\n        if x % 121 == 0 {\n            continue\n        }\n        if\
    \ x % 123 == 0 {\n            continue\n        }\n        if x % 127 == 0 {\n\
    \            continue\n        }\n        if x % 131 == 0 {\n            continue\n\
    \        }\n        if x % 137 == 0 {\n            continue\n        }\n     \
    \   if x % 139 == 0 {\n            continue\n        }\n        if x % 143 ==\
    \ 0 {\n            continue\n        }\n        if x % 147 == 0 {\n          \
    \  continue\n        }\n        if x % 151 == 0 {\n            continue\n    \
    \    }\n        if x % 157 == 0 {\n            continue\n        }\n        if\
    \ x % 161 == 0 {\n            continue\n        }\n        if x % 165 == 0 {\n\
    \            continue\n        }\n        if x % 169 == 0 {\n            continue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmp1106kexy.swift:181:46: error: expected '}' at end of brace statement\n\
    assert(skjkasdkd(lst: [127, 97, 8192]) == 10)\n                              \
    \               ^\n/tmp/tmp1106kexy.swift:20:18: note: to match this opening '{'\n\
    \    for x in lst {\n                 ^\n/tmp/tmp1106kexy.swift:181:46: error:\
    \ expected '}' at end of brace statement\nassert(skjkasdkd(lst: [127, 97, 8192])\
    \ == 10)\n                                             ^\n/tmp/tmp1106kexy.swift:17:35:\
    \ note: to match this opening '{'\nfunc skjkasdkd(lst: [Int]) -> Int {\n     \
    \                             ^\n/tmp/tmp1106kexy.swift:161:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp1106kexy.swift:19:9:\
    \ warning: initialization of variable 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum = 0\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n        if\
    \ x > 0 {\n            sum += x / Int(Int(x) * Int(Int(x) + 1))\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpi2sgy1me/tmpi2sgy1me.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d14b93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d1488ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d1488a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d148897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2sgy1me                        0x000056078cbd36f0 <unavailable> + 5872

    5    libc.so.6                          0x00002b4d14d7f460 __libc_start_main +
    245

    6    tmpi2sgy1me                        0x000056078cbd32a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if max < i {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if max % i == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b4554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b424b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b78b424b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b78b424b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b78b424abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz_l2ioip                        0x000055d30accd070 <unavailable> + 8304

    6    tmpz_l2ioip                        0x000055d30accc532 <unavailable> + 5426

    7    libc.so.6                          0x00002b78b4740460 __libc_start_main +
    245

    8    tmpz_l2ioip                        0x000055d30accc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > 0 {\n            if num > max {\n           \
    \     max = num\n            }\n        }\n    }\n    for num in lst {\n     \
    \   if num > 0 {\n            if num > max {\n                max = num\n    \
    \        }\n        }\n    }\n    for num in lst {\n        if num > 0 {\n   \
    \         if num > max {\n                max = num\n            }\n        }\n\
    \    }\n    for num in lst {\n        if num > 0 {\n            if num > max {\n\
    \                max = num\n            }\n        }\n    }\n    for num in lst\
    \ {\n        if num > 0 {\n            if num > max {\n                max = num\n\
    \            }\n        }\n    }\n    for num in lst {\n        if num > 0 {\n\
    \            if num > max {\n                max = num\n            }\n      \
    \  }\n    }\n    for num in lst {\n        if num > 0 {\n            if num >\
    \ max {\n                max = num\n            }\n        }\n    }\n    for num\
    \ in lst {\n        if num > 0 {\n            if num > max {\n               \
    \ max = num\n            }\n        }\n    }\n    for num in lst {\n        if\
    \ num > 0 {\n            if num > max {\n                max = num\n         \
    \   }\n        }\n    }\n    for num in lst {\n        if num > 0 {\n        \
    \    if num > max {\n                max = num\n            }\n        }\n   \
    \ }\n    for num in lst {\n        if num > 0 {\n            if num > max {\n\
    \                max = num\n            }\n        }\n    }\n    for num in lst\
    \ {\n        if num > 0 {\n            if num > max {\n                max = num\n\
    \            }\n        }\n    }\n    for num in lst {\n        if num > 0 {\n\
    \            if num > max {\n                max = num\n            }\n      \
    \  }\n    }\n    for num in lst {\n        if num > 0 {\n            if num >\
    \ max {\n                max = num\n            }\n        }\n    }\n    for num\
    \ in lst {\n        if num > 0 {\n            if num > max {\n               \
    \ max = num\n            }\n        }\n    }\n    for num in lst {\n        if\
    \ num > 0 {\n            if num > max {\n                max = num\n         \
    \   }\n        }\n    }\n    for num in lst {\n        if num > 0 {\n        \
    \    if num > max {\n                max = num\n            }\n        }\n   \
    \ }\n    for num in lst {\n        if num > 0 {\n            if num > max {\n\
    \                max = num\n            }\n        }\n    }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpfz6y7byw.swift:19:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmpfz6y7byw.swift:147:1: error: missing\
    \ return in global function expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    var sum = 0\n\
    \    for x in lst {\n        if x > largestPrime {\n            largestPrime =\
    \ x\n        }\n    }\n    for x in lst {\n        if x == largestPrime {\n  \
    \          sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpbaqo08nb/tmpbaqo08nb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac180bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1808cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1808cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1808cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbaqo08nb                        0x000056240698e520 <unavailable> + 5408

    5    libc.so.6                          0x00002ac180dc2460 __libc_start_main +
    245

    6    tmpbaqo08nb                        0x000056240698e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = 1\n        }\n        if num == max {\n            maxPrime++\n\
    \        }\n    }\n    return maxPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpipi96vbm.swift:26:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxPrime++\n                    ^~\n"
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ i in lst {\n        if i > max {\n            max = i\n        }\n    }\n  \
    \  for i in lst {\n        if i == max {\n            sum += i\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc2uom4a2/tmpc2uom4a2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dc79bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dc76b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dc76b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dc76b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2uom4a2                        0x000055ed5b510520 <unavailable> + 5408

    5    libc.so.6                          0x00002b5dc7bab460 __libc_start_main +
    245

    6    tmpc2uom4a2                        0x000055ed5b5100d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ x > max {\n            max = x\n        }\n        if isPrime(x) {\n       \
    \     sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpy781pwxi.swift:27:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(x) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num > max {\n            continue\n    \
    \    }\n        if num == max {\n            sum += num\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpo30p82m0/tmpo30p82m0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f5b7adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f5b4a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f5b4a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f5b4a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo30p82m0                        0x0000562975b22520 <unavailable> + 5408

    5    libc.so.6                          0x00002b6f5b999460 __libc_start_main +
    245

    6    tmpo30p82m0                        0x0000562975b220d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ num in lst {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n    for num in lst {\n        if num == max {\n            sum += num\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpnpv_k3_e/tmpnpv_k3_e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cd69bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cd66b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cd66b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cd66b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpv_k3_e                        0x000055be64ec5520 <unavailable> + 5408

    5    libc.so.6                          0x00002b8cd6ba7460 __libc_start_main +
    245

    6    tmpnpv_k3_e                        0x000055be64ec50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: 1
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n    for x in lst {\n        if x == 0 {\n \
    \           continue\n        }\n        if max < x {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == 0 {\n            continue\n\
    \        }\n        if max < x {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == 0 {\n            continue\n        }\n        if\
    \ max < x {\n            max = x\n        }\n    }\n    for x in lst {\n     \
    \   if x == 0 {\n            continue\n        }\n        if max < x {\n     \
    \       max = x\n        }\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1,\
    \ 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst:\
    \ [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst:\
    \ [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\n\
    assert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127,\
    \ 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: SyntaxError
  stderr: "/tmp/tmpqhgvpaln.swift:19:9: warning: initialization of variable 'sum'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum = 0\n    ~~~~^~~\n    _\n/tmp/tmpqhgvpaln.swift:165:1: error: missing\
    \ return in global function expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x > max {\n            sum += x\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst: [0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
    assert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\
    \ == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpht9y_gpl/tmpht9y_gpl.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae97ed58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97ea4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae97ea4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae97ea4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpht9y_gpl                        0x00005556d7629520 <unavailable> + 5408

    5    libc.so.6                          0x00002ae97ef44460 __libc_start_main +
    245

    6    tmpht9y_gpl                        0x00005556d76290d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014472
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxPrime = 0\n \
    \   for num in lst {\n        if num > max {\n            max = num\n        \
    \    maxPrime = 1\n        }\n        if num > maxPrime {\n            maxPrime\
    \ = num\n        }\n    }\n    return maxPrime + max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmp6oymhuk8/tmp6oymhuk8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad430ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad4001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad4001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad40007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oymhuk8                        0x000056308699c520 <unavailable> + 5408

    5    libc.so.6                          0x00002b1ad44f6460 __libc_start_main +
    245

    6    tmp6oymhuk8                        0x000056308699c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    var sum =\
    \ 0\n    for index in 0..<lst.count {\n        if lst[index] == max {\n      \
    \      sum += Int(lst[index])\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25)\nassert(skjkasdkd(lst:\
    \ [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\n\
    assert(skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\n\
    assert(skjkasdkd(lst: [0, 81, 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0,\
    \ 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst: [8191]) == 19)\nassert(skjkasdkd(lst:\
    \ [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst: [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpc7xlteyr/tmpc7xlteyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b493729cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4936f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4936f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4936f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7xlteyr                        0x00005583dae6a720 <unavailable> + 5920

    5    libc.so.6                          0x00002b4937488460 __libc_start_main +
    245

    6    tmpc7xlteyr                        0x00005583dae6a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var sum = 0\n    for\
    \ x in lst {\n        if x > max {\n            max = x\n        }\n    }\n  \
    \  for x in lst {\n        if x == max {\n            sum += x\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpgtynajyb/tmpgtynajyb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtynajyb                        0x000055e61f165520 <unavailable> + 5408

    5    libc.so.6                          0x00002acb7c4a7460 __libc_start_main +
    245

    6    tmpgtynajyb                        0x000055e61f1650d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014471
- exit_code: -4
  program: "\n/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n\
    /// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0,\
    \ 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\n\
    func skjkasdkd(lst: [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n \
    \   for index in 0..<lst.count {\n        if lst[index] > max {\n            max\
    \ = lst[index]\n            maxIndex = index\n        }\n    }\n    if maxIndex\
    \ == 0 {\n        return max\n    }\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        if index == maxIndex {\n            continue\n        }\n       \
    \ if lst[index] % maxIndex == 0 {\n            sum += lst[index] / maxIndex\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(skjkasdkd(lst:\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) ==\
    \ 10)\nassert(skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]) == 25)\nassert(skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13)\nassert(skjkasdkd(lst: [0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11)\nassert(skjkasdkd(lst: [0, 81,\
    \ 12, 3, 1, 21]) == 3)\nassert(skjkasdkd(lst: [0, 8, 1, 2, 1, 7]) == 7)\nassert(skjkasdkd(lst:\
    \ [8191]) == 19)\nassert(skjkasdkd(lst: [8191, 123456, 127, 7]) == 19)\nassert(skjkasdkd(lst:\
    \ [127, 97, 8192]) == 10)"
  status: Exception
  stderr: 'tmpwi4_f5ks/tmpwi4_f5ks.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa7cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa79e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa79e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa79e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi4_f5ks                        0x00005653ea41e5f0 <unavailable> + 5616

    5    libc.so.6                          0x00002aeaa7edc460 __libc_start_main +
    245

    6    tmpwi4_f5ks                        0x00005653ea41e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014472
