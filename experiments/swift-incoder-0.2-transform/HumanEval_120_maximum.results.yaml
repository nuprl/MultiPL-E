language: swift
name: HumanEval_120_maximum
results:
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var maxArr = [Int]()\n    var maxIndex =\
    \ 0\n    for index in 0..<k {\n        if arr[index] > maxArr[index] {\n     \
    \       maxArr[index] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return maxArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b098ac8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b098a985561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b098a985286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b098a98513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b098a984bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b098a784e83 <unavailable> + 188035

    6    tmpqkz5_6fx                        0x00005572ea223714 <unavailable> + 10004

    7    tmpqkz5_6fx                        0x00005572ea222659 <unavailable> + 5721

    8    libc.so.6                          0x00002b098ae7a460 __libc_start_main +
    245

    9    tmpqkz5_6fx                        0x00005572ea222339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for (_, v) in arr.enumerated() {\n        if v > max[k-1] {\n           \
    \ max[k-1] = v\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpt4kzjikc/tmpt4kzjikc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced74b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced71aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced71aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced71a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4kzjikc                        0x000055dce858e7d9 <unavailable> + 6105

    5    libc.so.6                          0x00002aced769f460 __libc_start_main +
    245

    6    tmpt4kzjikc                        0x000055dce858e3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    \n    for index in 0..<arr.count {\n        if arr[index] > max[index]\
    \ {\n            max[index] = arr[index]\n        }\n    }\n    \n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpznqzcon0/tmpznqzcon0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe321e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe31edfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe31edf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe31ede7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznqzcon0                        0x000055578b642749 <unavailable> + 5961

    5    libc.so.6                          0x00002afe323d4460 __libc_start_main +
    245

    6    tmpznqzcon0                        0x000055578b642349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n    \
    \        max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp0s6ov4tw/tmp0s6ov4tw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe9e615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe9e30cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe9e30c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe9e30b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s6ov4tw                        0x000056505bb90749 <unavailable> + 5961

    5    libc.so.6                          0x00002afe9e801460 __libc_start_main +
    245

    6    tmp0s6ov4tw                        0x000056505bb90349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var maxArr = [Int]()\n    var maxIndex\
    \ = -1\n    \n    for i in 0..<k {\n        if arr[i] > maxArr[i] {\n        \
    \    maxArr[i] = arr[i]\n            maxIndex = i\n        }\n    }\n    \n  \
    \  for i in 0..<k {\n        if arr[i] > maxArr[i] {\n            maxArr[i] =\
    \ arr[i]\n            maxIndex = i\n        }\n    }\n    \n    return maxArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b587961ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5879311561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5879311286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b587931113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5879310bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5879110e83 <unavailable> + 188035

    6    tmp6n4hro06                        0x0000557939c1d743 <unavailable> + 10051

    7    tmp6n4hro06                        0x0000557939c1c659 <unavailable> + 5721

    8    libc.so.6                          0x00002b5879806460 __libc_start_main +
    245

    9    tmp6n4hro06                        0x0000557939c1c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var maxArr = [Int]()\n    for _ in 0..<k\
    \ {\n        maxArr.append(arr[0])\n        arr.remove(at: 0)\n    }\n    for\
    \ num in arr {\n        if num > maxArr[k-1] {\n            maxArr[k-1] = num\n\
    \        }\n    }\n    return maxArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8qiit_0r.swift:22:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: 0)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9c1yh9_7.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1 {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqv2_m28e.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 0..k-1 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9o6u37gr.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var maxArr = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        maxArr[i] = max(arr[i], maxArr[i])\n\
    \    }\n    \n    return maxArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4bwgycxp/tmp4bwgycxp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dffd6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dffa62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dffa62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dffa617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bwgycxp                        0x0000562a0a8837d9 <unavailable> + 6105

    5    libc.so.6                          0x00002b5dfff57460 __libc_start_main +
    245

    6    tmp4bwgycxp                        0x0000562a0a8833d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex] {\n     \
    \       max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n    }\n \
    \   \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b847bcf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b847b9ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b847b9ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847b9ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b847b9ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b847b7ece83 <unavailable> + 188035

    6    tmpmvz18bih                        0x00005580c4156711 <unavailable> + 10001

    7    tmpmvz18bih                        0x00005580c4155659 <unavailable> + 5721

    8    libc.so.6                          0x00002b847bee2460 __libc_start_main +
    245

    9    tmpmvz18bih                        0x00005580c4155339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[index] {\n      \
    \      maxIndex = index\n            max = [arr[index]]\n        } else if arr[index]\
    \ == max[index] {\n            max.append(arr[index])\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b272cf58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b272cc4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b272cc4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b272cc4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b272cc4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b272ca4ee83 <unavailable> + 188035

    6    tmpkhdpwdmy                        0x0000560d464b4714 <unavailable> + 10004

    7    tmpkhdpwdmy                        0x0000560d464b3659 <unavailable> + 5721

    8    libc.so.6                          0x00002b272d144460 __libc_start_main +
    245

    9    tmpkhdpwdmy                        0x0000560d464b3339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1 {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqv2_m28e.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 0..k-1 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d6126cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d60f63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d60f63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d60f6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d60f62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d60d62e83 <unavailable> + 188035

    6    tmps20od5tw                        0x0000555ca092c711 <unavailable> + 10001

    7    tmps20od5tw                        0x0000555ca092b659 <unavailable> + 5721

    8    libc.so.6                          0x00002b0d61458460 __libc_start_main +
    245

    9    tmps20od5tw                        0x0000555ca092b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of the array\")\n    \n    var max = [Int](repeating:\
    \ -Int.max, count: k)\n    \n    for i in 0..<k {\n        if arr[i] > max[i]\
    \ {\n            max[i] = arr[i]\n        }\n    }\n    \n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpvxa_736b/tmpvxa_736b.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4779c88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b477997fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b477997f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b477997e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxa_736b                        0x0000557b479fa749 <unavailable> + 5961

    5    libc.so.6                          0x00002b4779e74460 __libc_start_main +
    245

    6    tmpvxa_736b                        0x0000557b479fa349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ace89bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace898a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ace898a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ace898a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ace898a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ace896a2e83 <unavailable> + 188035

    6    tmpneqn8nu7                        0x000055eee5c2d714 <unavailable> + 10004

    7    tmpneqn8nu7                        0x000055eee5c2c659 <unavailable> + 5721

    8    libc.so.6                          0x00002ace89d98460 __libc_start_main +
    245

    9    tmpneqn8nu7                        0x000055eee5c2c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x == max[0] {\n            for y in max {\n              \
    \  if y > x {\n                    max[1] = y\n                    break\n   \
    \             }\n            }\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afb687c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb684bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afb684bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afb684bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afb684bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afb682bee83 <unavailable> + 188035

    6    tmptmwavf38                        0x0000563514e666e5 <unavailable> + 9957

    7    tmptmwavf38                        0x0000563514e65639 <unavailable> + 5689

    8    libc.so.6                          0x00002afb689b4460 __libc_start_main +
    245

    9    tmptmwavf38                        0x0000563514e65319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for element in arr {\n        max[element > max[element.count-1]?element.count-1:element.count]\
    \ = element\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpf5k3lmpy.swift:21:44: error: expected ',' separator\n        max[element\
    \ > max[element.count-1]?element.count-1:element.count] = element\n          \
    \                                 ^\n                                        \
    \   ,\n/tmp/tmpf5k3lmpy.swift:21:57: error: extra argument in call\n        max[element\
    \ > max[element.count-1]?element.count-1:element.count] = element\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmpf5k3lmpy.swift:21:21:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \        max[element > max[element.count-1]?element.count-1:element.count] = element\n\
    \                    ^\n/tmp/tmpf5k3lmpy.swift:21:43: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        max[element\
    \ > max[element.count-1]?element.count-1:element.count] = element\n          \
    \                                ^\n/tmp/tmpf5k3lmpy.swift:21:43: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     max[element > max[element.count-1]?element.count-1:element.count] = element\n\
    \                                          ^\n                               \
    \             ?? <#default value#>\n/tmp/tmpf5k3lmpy.swift:21:43: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        max[element\
    \ > max[element.count-1]?element.count-1:element.count] = element\n          \
    \                                ^\n                      (                  \
    \  )!\n/tmp/tmpf5k3lmpy.swift:21:35: error: value of type 'Int' has no member\
    \ 'count'\n        max[element > max[element.count-1]?element.count-1:element.count]\
    \ = element\n                          ~~~~~~~ ^~~~~\n/tmp/tmpf5k3lmpy.swift:21:43:\
    \ error: cannot use optional chaining on non-optional value of type 'Int'\n  \
    \      max[element > max[element.count-1]?element.count-1:element.count] = element\n\
    \                      ~~~~~~~~~~~~~~~~~~~~^\n                               \
    \           \n/tmp/tmpf5k3lmpy.swift:21:52: error: value of type 'Int' has no\
    \ member 'c"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp94wxloac.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n        }\n    }\n    \n    return max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpfpo7s6q1/tmpfpo7s6q1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e0accc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e07c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e07c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e07c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpo7s6q1                        0x0000563ebe0ac749 <unavailable> + 5961

    5    libc.so.6                          0x00002ac7e0cb8460 __libc_start_main +
    245

    6    tmpfpo7s6q1                        0x0000563ebe0ac349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   maxIndex = index\n        }\n    }\n    max[maxIndex] = arr[k]\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d13ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d10e3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad1d10e3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad1d10e313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad1d10e2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad1d0ee2e83 <unavailable> + 188035

    6    tmpxa6talkt                        0x00005581ec65471d <unavailable> + 10013

    7    tmpxa6talkt                        0x00005581ec653659 <unavailable> + 5721

    8    libc.so.6                          0x00002ad1d15d8460 __libc_start_main +
    245

    9    tmpxa6talkt                        0x00005581ec653339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpy2b13upd.swift:24:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    var index = 0\n    for element in arr {\n\
    \        if element > max {\n            max = element\n        }\n        if\
    \ index == k {\n            result[index] = max\n            index = 0\n     \
    \   } else {\n            result[index] = element\n            index += 1\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpbi5xmv7r/tmpbi5xmv7r.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61af468c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61af15fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61af15f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61af15e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbi5xmv7r                        0x000056436ebc26d9 <unavailable> + 5849

    5    libc.so.6                          0x00002b61af654460 __libc_start_main +
    245

    6    tmpbi5xmv7r                        0x000056436ebc22d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1m_80hc2.swift:21:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpeymom8n1/tmpeymom8n1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c781cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c77ec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c77ec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c77ec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeymom8n1                        0x000055b88b97c749 <unavailable> + 5961

    5    libc.so.6                          0x00002b0c783bb460 __libc_start_main +
    245

    6    tmpeymom8n1                        0x000055b88b97c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        if v > max[k-1] {\n      \
    \      max[k-1] = v\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp23n8zfo4/tmp23n8zfo4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4598c75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b459896cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b459896c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b459896b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp23n8zfo4                        0x00005570d3dad7d9 <unavailable> + 6105

    5    libc.so.6                          0x00002b4598e61460 __libc_start_main +
    245

    6    tmp23n8zfo4                        0x00005570d3dad3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > len(arr) {\n        return arr\n    }\n\
    \    \n    var max = [Int]()\n    \n    for index in 0..<k {\n        if arr[index]\
    \ > max[0] {\n            max[0] = arr[index]\n        }\n    }\n    \n    for\
    \ index in 1..<k {\n        if arr[index] > max[index] {\n            max[index]\
    \ = arr[index]\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpz13t7vhg.swift:18:12: error: cannot find 'len' in scope\n    if\
    \ k > len(arr) {\n           ^~~\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = [Int](arr[index], max[index])\n\
    \        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfj_lvfxh.swift:24:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmpfj_lvfxh.swift:26:19: error: no exact matches in call to\
    \ initializer \n            max = [Int](arr[index], max[index])\n            \
    \      ^\nSwift.Array:4:23: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(repeating:count:)')\n    @inlinable public init(repeating repeatedValue:\
    \ Element, count: Int)\n                      ^\nSwift.RangeReplaceableCollection:2:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9c1yh9_7.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpklo9365j/tmpklo9365j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3442953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344264ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344264a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34426497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklo9365j                        0x0000556c6ddb4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3442b3f460 __libc_start_main +
    245

    6    tmpklo9365j                        0x0000556c6ddb4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array<Int>(repeating: 0, count:\
    \ k)\n    var max = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max {\n            max = arr[index]\n        }\n    }\n    for index in 0..<k\
    \ {\n        result[index] = max\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpyopkv1gh/tmpyopkv1gh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9afba38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9afb72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9afb72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9afb72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyopkv1gh                        0x000055e7b77eb749 <unavailable> + 5961

    5    libc.so.6                          0x00002b9afbc24460 __libc_start_main +
    245

    6    tmpyopkv1gh                        0x000055e7b77eb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = [Int](arr[index], max[index])\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsef9n201.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmpsef9n201.swift:24:19: error: no exact matches in call to\
    \ initializer \n            max = [Int](arr[index], max[index])\n            \
    \      ^\nSwift.Array:4:23: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(repeating:count:)')\n    @inlinable public init(repeating repeatedValue:\
    \ Element, count: Int)\n                      ^\nSwift.RangeReplaceableCollection:2:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -1000, count:\
    \ k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = maxIndex + 1\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp3c7bverj/tmp3c7bverj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a826a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a8239fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a8239f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a8239e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c7bverj                        0x00005638007f9749 <unavailable> + 5961

    5    libc.so.6                          0x00002b6a82894460 __libc_start_main +
    245

    6    tmp3c7bverj                        0x00005638007f9349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array<Int>(repeating: 0, count:\
    \ k)\n    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    result[maxIndex] = max\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp0z1gsfca/tmp0z1gsfca.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360e7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360e4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360e4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360e4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0z1gsfca                        0x000055f2cc2fb749 <unavailable> + 5961

    5    libc.so.6                          0x00002b360e9d9460 __libc_start_main +
    245

    6    tmp0z1gsfca                        0x000055f2cc2fb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpioietxtr/tmpioietxtr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28d7be8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28d78dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28d78df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28d78de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpioietxtr                        0x000055e232234729 <unavailable> + 5929

    5    libc.so.6                          0x00002b28d7dd4460 __libc_start_main +
    245

    6    tmpioietxtr                        0x000055e232234329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv2y1g06n.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > arr.count {\n        return arr\n    }\n\
    \    \n    var result = [Int]()\n    var max = 0\n    \n    for element in arr\
    \ {\n        if element > max {\n            max = element\n        }\n    }\n\
    \    \n    for element in arr {\n        if element == max {\n            result.append(element)\n\
    \        }\n    }\n    \n    return result[k..<arr.count]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8s78l_3l.swift:37:18: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n    return result[k..<arr.count]\n\
    \                 ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue\
    \ ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n  \
    \                    ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:2:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\nSwift.MutableCollection:2:23: note: 'subscript(_:)' produces '@lvalue\
    \ ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[k-1] {\n   \
    \         max[k-1] = arr[i]\n        }\n    }\n    \n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp3s5_gwz9/tmp3s5_gwz9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ed11dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ece14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ece14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ece137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3s5_gwz9                        0x0000564c60417749 <unavailable> + 5961

    5    libc.so.6                          0x00002b01ed309460 __libc_start_main +
    245

    6    tmp3s5_gwz9                        0x0000564c60417349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k <= 0 || k > arr.count {\n        return\
    \ []\n    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[maxIndex] {\n            maxIndex\
    \ = index\n            max = [arr[index]]\n        } else if arr[index] == max[maxIndex]\
    \ {\n            max.append(arr[index])\n        }\n    }\n    \n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37be8f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37be5eb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b37be5eb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b37be5eb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b37be5eabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b37be3eae83 <unavailable> + 188035

    6    tmpiyu9izx8                        0x0000563b03fa066d <unavailable> + 9837

    7    tmpiyu9izx8                        0x0000563b03f9f5d9 <unavailable> + 5593

    8    libc.so.6                          0x00002b37beae0460 __libc_start_main +
    245

    9    tmpiyu9izx8                        0x0000563b03f9f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        if v > max[k-1] {\n      \
    \      max[k-1] = v\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpdy4r89vg/tmpdy4r89vg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2baf26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2bac1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2bac1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2bac1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy4r89vg                        0x0000563a57ebf7d9 <unavailable> + 6105

    5    libc.so.6                          0x00002af2bb112460 __libc_start_main +
    245

    6    tmpdy4r89vg                        0x0000563a57ebf3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k must be positive\")\n\
    \    precondition(arr.count > 0, \"arr must have at least one element\")\n   \
    \ precondition(k <= arr.count, \"k must be less than or equal to the number of\
    \ elements\")\n    \n    var max = [Int]()\n    var maxIndex = 0\n    for index\
    \ in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b99edabcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99ed7b3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b99ed7b3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b99ed7b313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b99ed7b2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b99ed5b2e83 <unavailable> + 188035

    6    tmpq9b_n2v2                        0x00005613e0d8585a <unavailable> + 10330

    7    tmpq9b_n2v2                        0x00005613e0d84659 <unavailable> + 5721

    8    libc.so.6                          0x00002b99edca8460 __libc_start_main +
    245

    9    tmpq9b_n2v2                        0x00005613e0d84339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            max[index]\
    \ = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpghbclh1x/tmpghbclh1x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b759a901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b759a5f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b759a5f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b759a5f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghbclh1x                        0x0000556cb7df6749 <unavailable> + 5961

    5    libc.so.6                          0x00002b759aaed460 __libc_start_main +
    245

    6    tmpghbclh1x                        0x0000556cb7df6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    for index in\
    \ 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = max[index..<arr.count]\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6lhix816.swift:23:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmp6lhix816.swift:25:22: error: cannot assign value of type\
    \ 'ArraySlice<Int>' to type '[Int]'\n            max = max[index..<arr.count]\n\
    \                  ~~~^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var maxArr = [Int]()\n    for x in\
    \ arr {\n        if x > maxArr[k] {\n            maxArr[k] = x\n        }\n  \
    \  }\n    return maxArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b739f58ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739f285561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b739f285286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b739f28513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b739f284bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b739f084e83 <unavailable> + 188035

    6    tmp8xlbcrhv                        0x000055a3113ea678 <unavailable> + 9848

    7    tmp8xlbcrhv                        0x000055a3113e9639 <unavailable> + 5689

    8    libc.so.6                          0x00002b739f77a460 __libc_start_main +
    245

    9    tmp8xlbcrhv                        0x000055a3113e9319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7cond6dh.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpe4ki4pe6/tmpe4ki4pe6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4751c8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4751985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4751985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47519847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4ki4pe6                        0x000055754f679749 <unavailable> + 5961

    5    libc.so.6                          0x00002b4751e7a460 __libc_start_main +
    245

    6    tmpe4ki4pe6                        0x000055754f679349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n    \
    \        max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp0s6ov4tw/tmp0s6ov4tw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe9e615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe9e30cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe9e30c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe9e30b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s6ov4tw                        0x000056505bb90749 <unavailable> + 5961

    5    libc.so.6                          0x00002afe9e801460 __libc_start_main +
    245

    6    tmp0s6ov4tw                        0x000056505bb90349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k must be positive\")\n\
    \    precondition(arr.count >= k, \"k must be less than or equal to the length\
    \ of the array\")\n    var max = [Int]()\n    for index in 0..<k {\n        if\
    \ arr[index] > max[index] {\n            max = [Int](max[index], arr[index])\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpodnmi2ls.swift:23:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpm5x8x37a.swift:21:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n        result = result.maxElement()\n                 ~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   maxIndex = index\n        }\n    }\n    max[maxIndex] = arr[k]\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d13ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d10e3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad1d10e3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad1d10e313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad1d10e2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad1d0ee2e83 <unavailable> + 188035

    6    tmpxa6talkt                        0x00005581ec65471d <unavailable> + 10013

    7    tmpxa6talkt                        0x00005581ec653659 <unavailable> + 5721

    8    libc.so.6                          0x00002ad1d15d8460 __libc_start_main +
    245

    9    tmpxa6talkt                        0x00005581ec653339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k should be positive\"\
    )\n    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: -Int.max, count: k)\n    for (_, v) in arr.enumerated()\
    \ {\n        max[k % (k + 1)] = v\n        k += 1\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp938hi5hi.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n        k += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n         \
    \   max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjcltu6zd.swift:148:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpjcltu6zd.swift:173:72: error: expected '}' at end of brace statement\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])\n    \
    \                                                                   ^\n/tmp/tmpjcltu6zd.swift:145:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmpjcltu6zd.swift:173:72:\
    \ error: expected '}' at end of brace statement\nassert(maximum(arr: [1, 2, 3,\
    \ -23, 243, -400, 0], k: 0) == [] as [Int])\n                                \
    \                                       ^\n/tmp/tmpjcltu6zd.swift:17:43: note:\
    \ to match this opening '{'\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n   \
    \                                       ^\n/tmp/tmpjcltu6zd.swift:151:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpoubf3gx6.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpklo9365j/tmpklo9365j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3442953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344264ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344264a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34426497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklo9365j                        0x0000556c6ddb4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3442b3f460 __libc_start_main +
    245

    6    tmpklo9365j                        0x0000556c6ddb4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if max < x {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0vunecyx.swift:21:12: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        if max < x {\n           ^\n/tmp/tmp0vunecyx.swift:22:19:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n            max =\
    \ x\n                  ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x < max[0] {\n            max[0] = x\n  \
    \      }\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n   \
    \ }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpwg9s_e44/tmpwg9s_e44.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1a0feec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1a0ce5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1a0ce5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1a0ce47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwg9s_e44                        0x000056479483a729 <unavailable> + 5929

    5    libc.so.6                          0x00002ad1a11da460 __libc_start_main +
    245

    6    tmpwg9s_e44                        0x000056479483a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv2y1g06n.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        let maxIndex = arr.index(max{$0 > $1})\
    \ + i\n        max[i] = arr[maxIndex]\n    }\n    \n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7pw1qcf_.swift:23:28: error: no exact matches in call to instance\
    \ method 'index'\n        let maxIndex = arr.index(max{$0 > $1}) + i\n       \
    \                    ^\n/tmp/tmp7pw1qcf_.swift:23:28: note: found candidate with\
    \ type '(Int) -> Int'\n        let maxIndex = arr.index(max{$0 > $1}) + i\n  \
    \                         ^\n/tmp/tmp7pw1qcf_.swift:23:28: note: found candidate\
    \ with type '(Int) -> Int'\n        let maxIndex = arr.index(max{$0 > $1}) + i\n\
    \                           ^\n/tmp/tmp7pw1qcf_.swift:23:34: error: cannot call\
    \ value of non-function type '[Int]'\n        let maxIndex = arr.index(max{$0\
    \ > $1}) + i\n                                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[k-1] {\n      \
    \      max[k-1] = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpuistq8qh/tmpuistq8qh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6c090fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6c0606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6c0606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6c06057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuistq8qh                        0x00005638e1004749 <unavailable> + 5961

    5    libc.so.6                          0x00002ab6c0afb460 __libc_start_main +
    245

    6    tmpuistq8qh                        0x00005638e1004349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp5ghd7fg3/tmp5ghd7fg3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72307ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba722d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba722d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba722d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ghd7fg3                        0x00005627aefa8729 <unavailable> + 5929

    5    libc.so.6                          0x00002ba723266460 __libc_start_main +
    245

    6    tmp5ghd7fg3                        0x00005627aefa8329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of the array\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        max[index] = max(arr[index],\
    \ max[index])\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpd3j0w0dl.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp5ghd7fg3/tmp5ghd7fg3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72307ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba722d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba722d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba722d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ghd7fg3                        0x00005627aefa8729 <unavailable> + 5929

    5    libc.so.6                          0x00002ba723266460 __libc_start_main +
    245

    6    tmp5ghd7fg3                        0x00005627aefa8329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpm9ismo4z/tmpm9ismo4z.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b085aeacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b085aba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b085aba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b085aba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9ismo4z                        0x000055f36fa2f749 <unavailable> + 5961

    5    libc.so.6                          0x00002b085b098460 __libc_start_main +
    245

    6    tmpm9ismo4z                        0x000055f36fa2f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpklo9365j/tmpklo9365j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3442953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344264ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344264a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34426497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklo9365j                        0x0000556c6ddb4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3442b3f460 __libc_start_main +
    245

    6    tmpklo9365j                        0x0000556c6ddb4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for (_, v) in arr.enumerated() {\n        if v > max[k-1] {\n           \
    \ max[k-1] = v\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpt4kzjikc/tmpt4kzjikc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced74b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced71aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced71aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced71a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4kzjikc                        0x000055dce858e7d9 <unavailable> + 6105

    5    libc.so.6                          0x00002aced769f460 __libc_start_main +
    245

    6    tmpt4kzjikc                        0x000055dce858e3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k must be positive\")\n\
    \    precondition(arr.count > 0, \"arr must not be empty\")\n    precondition(k\
    \ <= arr.count, \"k must be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k {\n      \
    \  if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    \n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8472055c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8471d4c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8471d4c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8471d4c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8471d4bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8471b4be83 <unavailable> + 188035

    6    tmpobhtg6pl                        0x000056462d08685a <unavailable> + 10330

    7    tmpobhtg6pl                        0x000056462d085659 <unavailable> + 5721

    8    libc.so.6                          0x00002b8472241460 __libc_start_main +
    245

    9    tmpobhtg6pl                        0x000056462d085339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        max[min(k, arr.count - 1)]\
    \ = max(max[min(k, arr.count - 1)], v)\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgbnj0q_4.swift:21:38: error: cannot call value of non-function\
    \ type '[Int]'\n        max[min(k, arr.count - 1)] = max(max[min(k, arr.count\
    \ - 1)], v)\n                                     ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab080339c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab080030561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab080030286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab08003013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab08002fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab07fe2fe83 <unavailable> + 188035

    6    tmp6c4jf0b5                        0x0000557968021711 <unavailable> + 10001

    7    tmp6c4jf0b5                        0x0000557968020659 <unavailable> + 5721

    8    libc.so.6                          0x00002ab080525460 __libc_start_main +
    245

    9    tmp6c4jf0b5                        0x0000557968020339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k < 0 || k > arr.count {\n        return []\n\
    \    }\n    var result = arr\n    for _ in 0..<k {\n        result = result.sorted(by:\
    \ {$0 > $1})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpvhktyac4/tmpvhktyac4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98765ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98762f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98762f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98762f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhktyac4                        0x0000557f11cd0619 <unavailable> + 5657

    5    libc.so.6                          0x00002b98767eb460 __libc_start_main +
    245

    6    tmpvhktyac4                        0x0000557f11cd0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1 {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqv2_m28e.swift:20:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 0..k-1 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp94wxloac.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpf129ek_7/tmpf129ek_7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab140bafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1408a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1408a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1408a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf129ek_7                        0x0000561add156749 <unavailable> + 5961

    5    libc.so.6                          0x00002ab140d9b460 __libc_start_main +
    245

    6    tmpf129ek_7                        0x0000561add156349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex] {\n     \
    \       max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n    }\n \
    \   \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b847bcf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b847b9ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b847b9ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847b9ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b847b9ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b847b7ece83 <unavailable> + 188035

    6    tmpmvz18bih                        0x00005580c4156711 <unavailable> + 10001

    7    tmpmvz18bih                        0x00005580c4155659 <unavailable> + 5721

    8    libc.so.6                          0x00002b847bee2460 __libc_start_main +
    245

    9    tmpmvz18bih                        0x00005580c4155339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k should be positive\"\
    )\n    precondition(k <= arr.count, \"k should be less than or equal to length\
    \ of array\")\n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            maxIndex = index\n    \
    \        max = [arr[index]]\n        } else if arr[index] == max[index] {\n  \
    \          max.append(arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0318cf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03189ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03189ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03189ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03189ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03187ebe83 <unavailable> + 188035

    6    tmpskorw874                        0x00005589393d87ac <unavailable> + 10156

    7    tmpskorw874                        0x00005589393d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002b0318ee1460 __libc_start_main +
    245

    9    tmpskorw874                        0x00005589393d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n         \
    \   max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n \
    \   for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[0] {\n       \
    \     max[0] = x\n        }\n    }\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[0] {\n            max[0] = \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjcltu6zd.swift:148:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpjcltu6zd.swift:173:72: error: expected '}' at end of brace statement\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])\n    \
    \                                                                   ^\n/tmp/tmpjcltu6zd.swift:145:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmpjcltu6zd.swift:173:72:\
    \ error: expected '}' at end of brace statement\nassert(maximum(arr: [1, 2, 3,\
    \ -23, 243, -400, 0], k: 0) == [] as [Int])\n                                \
    \                                       ^\n/tmp/tmpjcltu6zd.swift:17:43: note:\
    \ to match this opening '{'\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n   \
    \                                       ^\n/tmp/tmpjcltu6zd.swift:151:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            maxIndex = index\n        }\n    }\n    \n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb938abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb935a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeb935a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeb935a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeb935a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeb933a1e83 <unavailable> + 188035

    6    tmp9weupzsp                        0x0000555fd7fcf740 <unavailable> + 10048

    7    tmp9weupzsp                        0x0000555fd7fce659 <unavailable> + 5721

    8    libc.so.6                          0x00002aeb93a97460 __libc_start_main +
    245

    9    tmp9weupzsp                        0x0000555fd7fce339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > arr.count {\n        return\
    \ []\n    }\n    \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex\
    \ = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[k-1] {\n  \
    \          max[k-1] = arr[i]\n            maxIndex = k - 1\n        }\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpu29n5_vy/tmpu29n5_vy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5409367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b540905eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b540905e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b540905d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu29n5_vy                        0x000055d9162bd6c9 <unavailable> + 5833

    5    libc.so.6                          0x00002b5409553460 __libc_start_main +
    245

    6    tmpu29n5_vy                        0x000055d9162bd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k should be positive\"\
    )\n    precondition(arr.count > 0, \"arr should be non-empty\")\n    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k {\n        let\
    \ maxIndex = arr.index(max{$0 > arr[i]})\n        max[i] = arr[maxIndex]\n   \
    \     \n        if maxIndex == arr.count - 1 {\n            break\n        }\n\
    \        \n        arr.remove(at: maxIndex)\n    }\n    \n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpey856y_9.swift:25:28: error: no exact matches in call to instance\
    \ method 'index'\n        let maxIndex = arr.index(max{$0 > arr[i]})\n       \
    \                    ^\n/tmp/tmpey856y_9.swift:25:28: note: found candidate with\
    \ type '(Int) -> Int'\n        let maxIndex = arr.index(max{$0 > arr[i]})\n  \
    \                         ^\n/tmp/tmpey856y_9.swift:25:28: note: found candidate\
    \ with type '(Int) -> Int'\n        let maxIndex = arr.index(max{$0 > arr[i]})\n\
    \                           ^\n/tmp/tmpey856y_9.swift:25:28: note: found candidate\
    \ with type '((Int) throws -> Bool) throws -> Array<Int>.Index?' (aka '((Int)\
    \ throws -> Bool) throws -> Optional<Int>')\n        let maxIndex = arr.index(max{$0\
    \ > arr[i]})\n                           ^\n/tmp/tmpey856y_9.swift:25:28: note:\
    \ found candidate with type '(Int) -> Array<Int>.Index?' (aka '(Int) -> Optional<Int>')\n\
    \        let maxIndex = arr.index(max{$0 > arr[i]})\n                        \
    \   ^\n/tmp/tmpey856y_9.swift:25:34: error: cannot call value of non-function\
    \ type '[Int]'\n        let maxIndex = arr.index(max{$0 > arr[i]})\n         \
    \                        ^\n/tmp/tmpey856y_9.swift:32:13: error: no exact matches\
    \ in call to instance method 'remove'\n        arr.remove(at: maxIndex)\n    \
    \        ^\n/tmp/tmpey856y_9.swift:32:13: note: found candidate with type '(Int)\
    \ -> Int'\n        arr.remove(at: maxIndex)\n            ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k < 0 || k > arr.count {\n        return []\n\
    \    }\n    var max = [Int]()\n    for index in 0..<k {\n        if arr[index]\
    \ > max[index] {\n            max = [Int](max[index], arr[index])\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpo5c_15_p.swift:24:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5555796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b555548d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b555548d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b555548d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b555548cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b555528ce83 <unavailable> + 188035

    6    tmpdz1iam1o                        0x000056014373e711 <unavailable> + 10001

    7    tmpdz1iam1o                        0x000056014373d659 <unavailable> + 5721

    8    libc.so.6                          0x00002b5555982460 __libc_start_main +
    245

    9    tmpdz1iam1o                        0x000056014373d339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > len(arr) {\n        return arr\n\
    \    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[maxIndex] {\n            maxIndex =\
    \ index\n        }\n    }\n    \n    for index in 0..<k {\n        max[maxIndex]\
    \ = arr[index]\n        maxIndex += 1\n    }\n    \n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmprgb40vqz.swift:18:22: error: cannot find 'len' in scope\n    if\
    \ k == 0 || k > len(arr) {\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > arr.count {\n        return arr\n    }\n\
    \    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n     \
    \   if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8f551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b8f248561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7b8f248286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7b8f24813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7b8f247bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7b8f047e83 <unavailable> + 188035

    6    tmp9p3b9doa                        0x00005640cfd39603 <unavailable> + 9731

    7    tmp9p3b9doa                        0x00005640cfd385c9 <unavailable> + 5577

    8    libc.so.6                          0x00002b7b8f73d460 __libc_start_main +
    245

    9    tmp9p3b9doa                        0x00005640cfd382a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int]()\n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpdjy26qlk.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d73fd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d73cd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d73cd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d73cd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d73ccfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3d73acfe83 <unavailable> + 188035

    6    tmpj8aoj834                        0x000055c5fe20d714 <unavailable> + 10004

    7    tmpj8aoj834                        0x000055c5fe20c659 <unavailable> + 5721

    8    libc.so.6                          0x00002b3d741c5460 __libc_start_main +
    245

    9    tmpj8aoj834                        0x000055c5fe20c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpads3_8ai/tmpads3_8ai.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf9e8edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf9e5e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf9e5e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf9e5e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpads3_8ai                        0x0000559b1589d749 <unavailable> + 5961

    5    libc.so.6                          0x00002aaf9ead9460 __libc_start_main +
    245

    6    tmpads3_8ai                        0x0000559b1589d349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for x in arr {\n        if max[k-1] < x {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp7pfy27b9/tmp7pfy27b9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b619559ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6195295b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6195295988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61952947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pfy27b9                        0x0000564fdd88f729 <unavailable> + 5929

    5    libc.so.6                          0x00002b619578a460 __libc_start_main +
    245

    6    tmp7pfy27b9                        0x0000564fdd88f329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp86myihc3/tmp86myihc3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d57089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d56d80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d56d80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d56d7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86myihc3                        0x000055ed4d140729 <unavailable> + 5929

    5    libc.so.6                          0x00002b0d57275460 __libc_start_main +
    245

    6    tmp86myihc3                        0x000055ed4d140329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpffx77rev.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        if arr[i] > max[i] {\n   \
    \         max[i] = arr[i]\n        }\n    }\n    \n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpim4aoeaz/tmpim4aoeaz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2146749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2146440b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2146440988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b214643f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpim4aoeaz                        0x0000563c5b423749 <unavailable> + 5961

    5    libc.so.6                          0x00002b2146935460 __libc_start_main +
    245

    6    tmpim4aoeaz                        0x0000563c5b423349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1dd04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1dcd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1dcd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1dcd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1dcd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1dcb41e83 <unavailable> + 188035

    6    tmp7henxh__                        0x000055991a8d8714 <unavailable> + 10004

    7    tmp7henxh__                        0x000055991a8d7659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba1dd237460 __libc_start_main +
    245

    9    tmp7henxh__                        0x000055991a8d7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6b724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6b41b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe6b41b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe6b41b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe6b41abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afe6b21ae83 <unavailable> + 188035

    6    tmpr46o1c5f                        0x000055cdc059d711 <unavailable> + 10001

    7    tmpr46o1c5f                        0x000055cdc059c659 <unavailable> + 5721

    8    libc.so.6                          0x00002afe6b910460 __libc_start_main +
    245

    9    tmpr46o1c5f                        0x000055cdc059c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k must be positive\")\n\
    \    precondition(arr.count > 0, \"arr must not be empty\")\n    precondition(k\
    \ <= arr.count, \"k must be less than or equal to arr.count\")\n    var max =\
    \ [Int](repeating: 0, count: k)\n    for i in 0..<k {\n        max[i] = max(arr[i],\
    \ max[i])\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvrf8bwu8.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > arr.count {\n        return []\n    }\n\
    \    var max = [Int](repeating: 0, count: k)\n    for index in 0..<k {\n     \
    \   max[index] = arr[index]\n    }\n    for index in k..<arr.count {\n       \
    \ if arr[index] > max[k-1] {\n            max[k-1] = arr[index]\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpzt8kjtnu/tmpzt8kjtnu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae918508c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9181ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9181ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9181fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzt8kjtnu                        0x00005621ffab36c9 <unavailable> + 5833

    5    libc.so.6                          0x00002ae9186f4460 __libc_start_main +
    245

    6    tmpzt8kjtnu                        0x00005621ffab32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for index in 0..<arr.count {\n        if arr[index] > max[k-1] {\n \
    \           max[k-1] = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmppkbd0j7w/tmppkbd0j7w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b549dec1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b549dbb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b549dbb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b549dbb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkbd0j7w                        0x00005578a8349749 <unavailable> + 5961

    5    libc.so.6                          0x00002b549e0ad460 __libc_start_main +
    245

    6    tmppkbd0j7w                        0x00005578a8349349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        let maxIndex = arr.index(of: -Int.max)!\n        \n    \
    \    if maxIndex == index {\n            continue\n        }\n        \n     \
    \   max.append(arr[maxIndex])\n        \n        if maxIndex < index {\n     \
    \       arr.remove(at: maxIndex)\n        }\n    }\n    \n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpr25lmutf.swift:23:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let maxIndex = arr.index(of: -Int.max)!\n    \
    \                       ^\n/tmp/tmpr25lmutf.swift:23:28: note: use 'firstIndex(of:)'\
    \ instead\n        let maxIndex = arr.index(of: -Int.max)!\n                 \
    \          ^~~~~\n                           firstIndex\n/tmp/tmpr25lmutf.swift:32:17:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \            arr.remove(at: maxIndex)\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpx8a956g5/tmpx8a956g5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c6c83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c697ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c697a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c69797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8a956g5                        0x000055bac79e3729 <unavailable> + 5929

    5    libc.so.6                          0x00002b46c6e6f460 __libc_start_main +
    245

    6    tmpx8a956g5                        0x000055bac79e3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n    \
    \        max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpv62s35h_/tmpv62s35h_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b900c7c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b900c4bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b900c4bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b900c4ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv62s35h_                        0x00005578bb361749 <unavailable> + 5961

    5    libc.so.6                          0x00002b900c9b0460 __libc_start_main +
    245

    6    tmpv62s35h_                        0x00005578bb361349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpklo9365j/tmpklo9365j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3442953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344264ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344264a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34426497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklo9365j                        0x0000556c6ddb4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3442b3f460 __libc_start_main +
    245

    6    tmpklo9365j                        0x0000556c6ddb4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of the array\")\n    \n    var max = [Int]()\n \
    \   var maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6833434c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b683312b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b683312b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b683312b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b683312abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6832f2ae83 <unavailable> + 188035

    6    tmpiamccshy                        0x0000555f8eab3714 <unavailable> + 10004

    7    tmpiamccshy                        0x0000555f8eab2659 <unavailable> + 5721

    8    libc.so.6                          0x00002b6833620460 __libc_start_main +
    245

    9    tmpiamccshy                        0x0000555f8eab2339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpapevi3nm.swift:24:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(arr[index], k))\n              \
    \                       ^\n                                                  count:\
    \ \n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > arr.count {\n        return []\n    }\n\
    \    \n    var max = [Int](repeating: -Int.max, count: k)\n    var maxIndex =\
    \ 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[i]\n            maxIndex = maxIndex + 1\n   \
    \     }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp1nzuo8r9/tmp1nzuo8r9.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe2230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe1f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe1f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe1f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nzuo8r9                        0x000055c3047216c9 <unavailable> + 5833

    5    libc.so.6                          0x00002aebe241c460 __libc_start_main +
    245

    6    tmp1nzuo8r9                        0x000055c3047212c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > len(arr) {\n        return []\n\
    \    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpui95anfd.swift:18:22: error: cannot find 'len' in scope\n    if\
    \ k == 0 || k > len(arr) {\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > arr.count {\n        return\
    \ arr\n    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f2ccadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f2c9a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f2c9a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f2c9a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f2c9a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5f2c7a3e83 <unavailable> + 188035

    6    tmpzprma_lx                        0x000055e43735e651 <unavailable> + 9809

    7    tmpzprma_lx                        0x000055e43735d5c9 <unavailable> + 5577

    8    libc.so.6                          0x00002b5f2ce99460 __libc_start_main +
    245

    9    tmpzprma_lx                        0x000055e43735d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuwdz6yg2.swift:21:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for index in 0..<arr.count {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpeymom8n1/tmpeymom8n1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c781cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c77ec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c77ec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c77ec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeymom8n1                        0x000055b88b97c749 <unavailable> + 5961

    5    libc.so.6                          0x00002b0c783bb460 __libc_start_main +
    245

    6    tmpeymom8n1                        0x000055b88b97c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b53ba549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53ba240561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b53ba240286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b53ba24013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b53ba23fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b53ba03fe83 <unavailable> + 188035

    6    tmp9pjr3xaz                        0x000055732468b711 <unavailable> + 10001

    7    tmp9pjr3xaz                        0x000055732468a659 <unavailable> + 5721

    8    libc.so.6                          0x00002b53ba735460 __libc_start_main +
    245

    9    tmp9pjr3xaz                        0x000055732468a339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpjigo9bpe/tmpjigo9bpe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae84b6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae84b3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae84b3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae84b3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjigo9bpe                        0x000055645f702729 <unavailable> + 5929

    5    libc.so.6                          0x00002ae84b8c4460 __libc_start_main +
    245

    6    tmpjigo9bpe                        0x000055645f702329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array<Int>(repeating: 0, count:\
    \ k)\n    var max = 0\n    for element in arr {\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in arr {\n     \
    \   if element == max {\n            result[result.index(of: element)] = element\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp244sq8ry.swift:28:27: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result[result.index(of: element)] = element\n     \
    \                     ^\n/tmp/tmp244sq8ry.swift:28:27: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            result[result.index(of:\
    \ element)] = element\n                          ^\n                         \
    \                    ?? <#default value#>\n/tmp/tmp244sq8ry.swift:28:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result[result.index(of: element)] = element\n                   \
    \       ^\n                                            !\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        max[k] = max(max[k], v)\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxy17emi3.swift:21:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[k] = max(max[k], v)\n                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = maxIndex + 1\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpwv91fq8z/tmpwv91fq8z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b096b75cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b096b453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b096b453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b096b4527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwv91fq8z                        0x000055d6b0979749 <unavailable> + 5961

    5    libc.so.6                          0x00002b096b948460 __libc_start_main +
    245

    6    tmpwv91fq8z                        0x000055d6b0979349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    var maxIndex = 0\n    \n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    \n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpzs_v1e3b/tmpzs_v1e3b.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330e4bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b330e1b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b330e1b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b330e1b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzs_v1e3b                        0x0000557e2406e749 <unavailable> + 5961

    5    libc.so.6                          0x00002b330e6aa460 __libc_start_main +
    245

    6    tmpzs_v1e3b                        0x0000557e2406e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv2y1g06n.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[k] {\n            max = [Int](repeatElement(max[k], k))\n \
    \       }\n        max[k] = x\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpff5jpxvs.swift:22:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(max[k], k))\n                  \
    \                   ^\n                                              count: \n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        let element = arr[index]\n        if element\
    \ > max[index] {\n            max[index] = element\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpd5gsruhj/tmpd5gsruhj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b41e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b3eddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b3edd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b3edc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5gsruhj                        0x00005609b9e62749 <unavailable> + 5961

    5    libc.so.6                          0x00002b38b43d2460 __libc_start_main +
    245

    6    tmpd5gsruhj                        0x00005609b9e62349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpxzsifngh/tmpxzsifngh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7155150c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7154e47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7154e47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7154e467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzsifngh                        0x0000561f531bd749 <unavailable> + 5961

    5    libc.so.6                          0x00002b715533c460 __libc_start_main +
    245

    6    tmpxzsifngh                        0x0000561f531bd349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k-1 {\n\
    \        result = result.sorted { $0 > $1 }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpalbds09y/tmpalbds09y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab038c6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab038964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab038964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0389637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalbds09y                        0x00005607989d66a9 <unavailable> + 5801

    5    libc.so.6                          0x00002ab038e59460 __libc_start_main +
    245

    6    tmpalbds09y                        0x00005607989d62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -1000, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfpny8yv_.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x < max[0] {\n            max[0] = x\n  \
    \      }\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n   \
    \ }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp6aio66z2/tmp6aio66z2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7547ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef75175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef75175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef751747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6aio66z2                        0x0000564338441729 <unavailable> + 5929

    5    libc.so.6                          0x00002aef7566a460 __libc_start_main +
    245

    6    tmp6aio66z2                        0x0000564338441329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9c1yh9_7.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpv131f31f/tmpv131f31f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc2b87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc287eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc287e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc287d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv131f31f                        0x000055b2e4133729 <unavailable> + 5929

    5    libc.so.6                          0x00002abfc2d73460 __libc_start_main +
    245

    6    tmpv131f31f                        0x000055b2e4133329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for i in 0..<k {\n        let maxIndex = arr.index(of: max(arr))\n \
    \       max[i] = arr[maxIndex]\n        arr.remove(at: maxIndex)\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0d01crag.swift:21:38: error: cannot call value of non-function\
    \ type '[Int]'\n        let maxIndex = arr.index(of: max(arr))\n             \
    \                        ^\n/tmp/tmp0d01crag.swift:23:13: error: no exact matches\
    \ in call to instance method 'remove'\n        arr.remove(at: maxIndex)\n    \
    \        ^\n/tmp/tmp0d01crag.swift:23:13: note: found candidate with type '(Int)\
    \ -> Int'\n        arr.remove(at: maxIndex)\n            ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > len(arr) {\n        return []\n\
    \    }\n    \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex =\
    \ 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index] {\n  \
    \          maxIndex = index\n            max = [Int](repeating: arr[index], count:\
    \ k)\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp5zi7yb4u.swift:18:22: error: cannot find 'len' in scope\n    if\
    \ k == 0 || k > len(arr) {\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d6126cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d60f63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d60f63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d60f6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d60f62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d60d62e83 <unavailable> + 188035

    6    tmps20od5tw                        0x0000555ca092c711 <unavailable> + 10001

    7    tmps20od5tw                        0x0000555ca092b659 <unavailable> + 5721

    8    libc.so.6                          0x00002b0d61458460 __libc_start_main +
    245

    9    tmps20od5tw                        0x0000555ca092b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpioietxtr/tmpioietxtr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28d7be8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28d78dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28d78df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28d78de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpioietxtr                        0x000055e232234729 <unavailable> + 5929

    5    libc.so.6                          0x00002b28d7dd4460 __libc_start_main +
    245

    6    tmpioietxtr                        0x000055e232234329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k > 0, \"k should be positive\"\
    )\n    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: -1000, count: k)\n    for x in arr {\n     \
    \   if x < max[k] {\n            max[k] = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b40d7b15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40d780c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b40d780c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b40d780c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b40d780bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b40d760be83 <unavailable> + 188035

    6    tmpc_l4dagj                        0x000055a7fe3ed749 <unavailable> + 10057

    7    tmpc_l4dagj                        0x000055a7fe3ec649 <unavailable> + 5705

    8    libc.so.6                          0x00002b40d7d01460 __libc_start_main +
    245

    9    tmpc_l4dagj                        0x000055a7fe3ec329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[0] {\n            for y in max {\n               \
    \ if x > y {\n                    max[0] = y\n                    break\n    \
    \            }\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b31e23f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31e20f0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b31e20f0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b31e20f013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b31e20efbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b31e1eefe83 <unavailable> + 188035

    6    tmpy37u794r                        0x000056416d1a66e5 <unavailable> + 9957

    7    tmpy37u794r                        0x000056416d1a5639 <unavailable> + 5689

    8    libc.so.6                          0x00002b31e25e5460 __libc_start_main +
    245

    9    tmpy37u794r                        0x000056416d1a5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    for element in arr {\n        if element > max[k-1] {\n     \
    \       max[k-1] = element\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4p1iap9z/tmp4p1iap9z.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee8d393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee8d08ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee8d08a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee8d0897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p1iap9z                        0x000055a9b55e6729 <unavailable> + 5929

    5    libc.so.6                          0x00002aee8d57f460 __libc_start_main +
    245

    6    tmp4p1iap9z                        0x000055a9b55e6329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k {\n\
    \        result = result.max()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp_cv5j6p3.swift:21:25: error: cannot assign value of type 'Int?'\
    \ to type '[Int]'\n        result = result.max()\n                 ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   maxIndex = index\n            max = [Int](repeating: arr[index], count: k)\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2a1329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2a1020561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae2a1020286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae2a102013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae2a101fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae2a0e1fe83 <unavailable> + 188035

    6    tmpw2lai46g                        0x000055d341b20721 <unavailable> + 10017

    7    tmpw2lai46g                        0x000055d341b1f669 <unavailable> + 5737

    8    libc.so.6                          0x00002ae2a1515460 __libc_start_main +
    245

    9    tmpw2lai46g                        0x000055d341b1f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -1000, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfpny8yv_.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    var maxIndex = 0\n    \n    for index in 0..<arr.count {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmppf_aifu9/tmppf_aifu9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1bd06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1b9fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1b9fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1b9fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppf_aifu9                        0x0000559a21731749 <unavailable> + 5961

    5    libc.so.6                          0x00002baa1bef2460 __libc_start_main +
    245

    6    tmppf_aifu9                        0x0000559a21731349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    for x in arr {\n        if max[k-1] < x {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4nd7rq3c/tmp4nd7rq3c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac730279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac72ff70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac72ff70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac72ff6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4nd7rq3c                        0x000055df15550729 <unavailable> + 5929

    5    libc.so.6                          0x00002ac730465460 __libc_start_main +
    245

    6    tmp4nd7rq3c                        0x000055df15550329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var maxArr = [Int]()\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > maxArr[index] {\n            maxArr[index]\
    \ = arr[index]\n        }\n    }\n    \n    return maxArr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae965f5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae965c56561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae965c56286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae965c5613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae965c55bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae965a55e83 <unavailable> + 188035

    6    tmpxhsq0d_h                        0x000055dbfffe76fc <unavailable> + 9980

    7    tmpxhsq0d_h                        0x000055dbfffe6659 <unavailable> + 5721

    8    libc.so.6                          0x00002ae96614b460 __libc_start_main +
    245

    9    tmpxhsq0d_h                        0x000055dbfffe6339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for element in arr {\n        if element > max[k-1] {\n            max[k-1]\
    \ = element\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpeetmgi73/tmpeetmgi73.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842c585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842c27cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842c27c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842c27b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetmgi73                        0x0000562ae4f2a729 <unavailable> + 5929

    5    libc.so.6                          0x00002b842c771460 __libc_start_main +
    245

    6    tmpeetmgi73                        0x0000562ae4f2a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6b724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6b41b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe6b41b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe6b41b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe6b41abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afe6b21ae83 <unavailable> + 188035

    6    tmpr46o1c5f                        0x000055cdc059d711 <unavailable> + 10001

    7    tmpr46o1c5f                        0x000055cdc059c659 <unavailable> + 5721

    8    libc.so.6                          0x00002afe6b910460 __libc_start_main +
    245

    9    tmpr46o1c5f                        0x000055cdc059c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var maxArr = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > maxArr[index]\
    \ {\n            maxArr[index] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    \n    return maxArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e806cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7d63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7e7d63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7e7d6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7e7d62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac7e7b62e83 <unavailable> + 188035

    6    tmpn7bxgijx                        0x0000558307224714 <unavailable> + 10004

    7    tmpn7bxgijx                        0x0000558307223659 <unavailable> + 5721

    8    libc.so.6                          0x00002ac7e8258460 __libc_start_main +
    245

    9    tmpn7bxgijx                        0x0000558307223339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x < max[0] {\n            max[0] = x\n       \
    \ }\n        if x > max[k-1] {\n            max[k-1] = x\n        }\n    }\n \
    \   return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpj07db4w8/tmpj07db4w8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfac736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfac42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfac42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfac42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj07db4w8                        0x000055cf8efcf729 <unavailable> + 5929

    5    libc.so.6                          0x00002adfac922460 __libc_start_main +
    245

    6    tmpj07db4w8                        0x000055cf8efcf329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > arr.count {\n        return\
    \ arr\n    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for\
    \ index in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f2ccadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f2c9a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f2c9a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f2c9a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f2c9a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5f2c7a3e83 <unavailable> + 188035

    6    tmpzprma_lx                        0x000055e43735e651 <unavailable> + 9809

    7    tmpzprma_lx                        0x000055e43735d5c9 <unavailable> + 5577

    8    libc.so.6                          0x00002b5f2ce99460 __libc_start_main +
    245

    9    tmpzprma_lx                        0x000055e43735d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        let max = arr[index]\n        for index in 0..<arr.count\
    \ {\n            if arr[index] > max {\n                max = arr[index]\n   \
    \         }\n        }\n        \n        max.sort()\n        \n        max =\
    \ [max] + max\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpi4lo7mi_.swift:26:17: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n                max = arr[index]\n                ^~~\n/tmp/tmpi4lo7mi_.swift:23:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let max = arr[index]\n\
    \        ^~~\n        var\n/tmp/tmpi4lo7mi_.swift:30:13: error: value of type\
    \ 'Int' has no member 'sort'\n        max.sort()\n        ~~~ ^~~~\n/tmp/tmpi4lo7mi_.swift:32:15:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        max = [max] + max\n              ^\n/tmp/tmpi4lo7mi_.swift:32:9: error:\
    \ cannot assign to value: 'max' is a 'let' constant\n        max = [max] + max\n\
    \        ^~~\n/tmp/tmpi4lo7mi_.swift:23:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let max = arr[index]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n    }\n\
    \    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpv2y1g06n.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(arr[i], max[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxpnvgxue.swift:22:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(arr[index], k))\n              \
    \                       ^\n                                                  count:\
    \ \n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6b724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6b41b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe6b41b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe6b41b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe6b41abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afe6b21ae83 <unavailable> + 188035

    6    tmpr46o1c5f                        0x000055cdc059d711 <unavailable> + 10001

    7    tmpr46o1c5f                        0x000055cdc059c659 <unavailable> + 5721

    8    libc.so.6                          0x00002afe6b910460 __libc_start_main +
    245

    9    tmpr46o1c5f                        0x000055cdc059c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpx8a956g5/tmpx8a956g5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c6c83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c697ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c697a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c69797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8a956g5                        0x000055bac79e3729 <unavailable> + 5929

    5    libc.so.6                          0x00002b46c6e6f460 __libc_start_main +
    245

    6    tmpx8a956g5                        0x000055bac79e3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    for index in\
    \ 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = [Int](arr[index], max[index])\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_xmeqpg.swift:23:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmp8_xmeqpg.swift:25:19: error: no exact matches in call to\
    \ initializer \n            max = [Int](arr[index], max[index])\n            \
    \      ^\nSwift.Array:4:23: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(repeating:count:)')\n    @inlinable public init(repeating repeatedValue:\
    \ Element, count: Int)\n                      ^\nSwift.RangeReplaceableCollection:2:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array<Int>(repeating: 0, count:\
    \ k)\n    var max = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max {\n            max = arr[index]\n        }\n    }\n    for index in 0..<arr.count\
    \ {\n        if arr[index] == max {\n            result[index] = max\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpj_krdk2z/tmpj_krdk2z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae09a821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae09a518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae09a518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae09a5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_krdk2z                        0x000055af7896a749 <unavailable> + 5961

    5    libc.so.6                          0x00002ae09aa0d460 __libc_start_main +
    245

    6    tmpj_krdk2z                        0x000055af7896a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for i in 0..<k {\n        let index = arr.index(of: max(arr))\n\
    \        max[i] = arr[index]\n        arr.remove(at: index)\n    }\n    \n   \
    \ return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphx4plt4t.swift:23:35: error: cannot call value of non-function\
    \ type '[Int]'\n        let index = arr.index(of: max(arr))\n                \
    \                  ^\n/tmp/tmphx4plt4t.swift:25:13: error: no exact matches in\
    \ call to instance method 'remove'\n        arr.remove(at: index)\n          \
    \  ^\n/tmp/tmphx4plt4t.swift:25:13: note: found candidate with type '(Int) ->\
    \ Int'\n        arr.remove(at: index)\n            ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpklo9365j/tmpklo9365j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3442953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344264ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344264a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34426497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklo9365j                        0x0000556c6ddb4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3442b3f460 __libc_start_main +
    245

    6    tmpklo9365j                        0x0000556c6ddb4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9c1yh9_7.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp86myihc3/tmp86myihc3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d57089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d56d80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d56d80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d56d7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86myihc3                        0x000055ed4d140729 <unavailable> + 5929

    5    libc.so.6                          0x00002b0d57275460 __libc_start_main +
    245

    6    tmp86myihc3                        0x000055ed4d140329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [arr[index]]\n        } else\
    \ if arr[index] == max[index] {\n            max.append(arr[index])\n        }\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d73fd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d73cd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d73cd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d73cd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d73ccfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3d73acfe83 <unavailable> + 188035

    6    tmpj8aoj834                        0x000055c5fe20d714 <unavailable> + 10004

    7    tmpj8aoj834                        0x000055c5fe20c659 <unavailable> + 5721

    8    libc.so.6                          0x00002b3d741c5460 __libc_start_main +
    245

    9    tmpj8aoj834                        0x000055c5fe20c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp94wxloac.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpw60_z_po.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ -1000, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(max[i], arr[i])\n\
    \    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjwni0lw4.swift:23:18: error: cannot call value of non-function\
    \ type '[Int]'\n        max[i] = max(max[i], arr[i])\n                 ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6b724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6b41b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe6b41b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe6b41b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe6b41abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afe6b21ae83 <unavailable> + 188035

    6    tmpr46o1c5f                        0x000055cdc059d711 <unavailable> + 10001

    7    tmpr46o1c5f                        0x000055cdc059c659 <unavailable> + 5721

    8    libc.so.6                          0x00002afe6b910460 __libc_start_main +
    245

    9    tmpr46o1c5f                        0x000055cdc059c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        let max = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpbdzlkuhd.swift:22:19: error: cannot call value of non-function\
    \ type '[Int]'\n        let max = max(arr[index], max[index])\n              \
    \    ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k > len(arr) {\n        return nil\n    }\n\
    \    \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n   \
    \ \n    for i in 0..<k {\n        if arr[i] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[i]\n            maxIndex = i\n        }\n    }\n    \n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpd2ww0trw.swift:18:12: error: cannot find 'len' in scope\n    if\
    \ k > len(arr) {\n           ^~~\n/tmp/tmpd2ww0trw.swift:19:16: error: 'nil' is\
    \ incompatible with return type '[Int]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            max[index]\
    \ = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpghbclh1x/tmpghbclh1x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b759a901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b759a5f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b759a5f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b759a5f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghbclh1x                        0x0000556cb7df6749 <unavailable> + 5961

    5    libc.so.6                          0x00002b759aaed460 __libc_start_main +
    245

    6    tmpghbclh1x                        0x0000556cb7df6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -Int.max, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpioietxtr/tmpioietxtr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28d7be8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28d78dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28d78df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28d78de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpioietxtr                        0x000055e232234729 <unavailable> + 5929

    5    libc.so.6                          0x00002b28d7dd4460 __libc_start_main +
    245

    6    tmpioietxtr                        0x000055e232234329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpm5x8x37a.swift:21:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n        result = result.maxElement()\n                 ~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x < max[0] {\n            max[0] = x\n  \
    \      }\n    }\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpcqdv_9u5/tmpcqdv_9u5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb44375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb4406cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb4406c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb4406b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqdv_9u5                        0x000055fc72454729 <unavailable> + 5929

    5    libc.so.6                          0x00002adb44561460 __libc_start_main +
    245

    6    tmpcqdv_9u5                        0x000055fc72454329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int]()\n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpnluflek5.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6b724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6b41b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afe6b41b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afe6b41b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afe6b41abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afe6b21ae83 <unavailable> + 188035

    6    tmpr46o1c5f                        0x000055cdc059d711 <unavailable> + 10001

    7    tmpr46o1c5f                        0x000055cdc059c659 <unavailable> + 5721

    8    libc.so.6                          0x00002afe6b910460 __libc_start_main +
    245

    9    tmpr46o1c5f                        0x000055cdc059c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for x in arr {\n \
    \       if x > max[0] {\n            max[0] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[k] {\n            max[k] = x\n        }\n    }\n \
    \   return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3,\
    \ -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4,\
    \ 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae31fcf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae31f9ee561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae31f9ee286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae31f9ee13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae31f9edbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae31f7ede83 <unavailable> + 188035

    6    tmpa60eog7f                        0x000056319b4b96bf <unavailable> + 9919

    7    tmpa60eog7f                        0x000056319b4b8639 <unavailable> + 5689

    8    libc.so.6                          0x00002ae31fee3460 __libc_start_main +
    245

    9    tmpa60eog7f                        0x000056319b4b8319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n   \
    \     }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoo5fskbe/tmpoo5fskbe.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b875f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo5fskbe                        0x000055a97f682729 <unavailable> + 5929

    5    libc.so.6                          0x00002b85b8c55460 __libc_start_main +
    245

    6    tmpoo5fskbe                        0x000055a97f682329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for index in 0..<k {\n        max[index] = max(arr[index], max[index])\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7cond6dh.swift:21:22: error: cannot call value of non-function\
    \ type '[Int]'\n        max[index] = max(arr[index], max[index])\n           \
    \          ^\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = Array(repeating: 0, count: k)\n\
    \    var max = 0\n    for element in arr {\n        if element > max {\n     \
    \       max = element\n        }\n    }\n    for element in arr {\n        if\
    \ element == max {\n            result[element - max] = element\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpku6rob1v/tmpku6rob1v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35eb61bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35eb312b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35eb312988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35eb3117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpku6rob1v                        0x00005557cbffd6d9 <unavailable> + 5849

    5    libc.so.6                          0x00002b35eb807460 __libc_start_main +
    245

    6    tmpku6rob1v                        0x00005557cbffd2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0d6bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0d68cd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0d68cd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0d68cd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0d68ccbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba0d66cce83 <unavailable> + 188035

    6    tmpvsugv_ih                        0x000055ed8b5aa711 <unavailable> + 10001

    7    tmpvsugv_ih                        0x000055ed8b5a9659 <unavailable> + 5721

    8    libc.so.6                          0x00002ba0d6dc2460 __libc_start_main +
    245

    9    tmpvsugv_ih                        0x000055ed8b5a9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824643
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for i in 0..<k {\n        if arr[i] > max[i] {\n            max[i] = arr[i]\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpyeege5jt/tmpyeege5jt.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3945fb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3945cafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3945caf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3945cae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyeege5jt                        0x00005559dac74749 <unavailable> + 5961

    5    libc.so.6                          0x00002b39461a4460 __libc_start_main +
    245

    6    tmpyeege5jt                        0x00005559dac74349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = max[index..<arr.count]\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2q9a19zk.swift:22:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmp2q9a19zk.swift:24:22: error: cannot assign value of type\
    \ 'ArraySlice<Int>' to type '[Int]'\n            max = max[index..<arr.count]\n\
    \                  ~~~^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    var max = [Int](repeating: -1000,\
    \ count: k)\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpxzsifngh/tmpxzsifngh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7155150c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7154e47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7154e47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7154e467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzsifngh                        0x0000561f531bd749 <unavailable> + 5961

    5    libc.so.6                          0x00002b715533c460 __libc_start_main +
    245

    6    tmpxzsifngh                        0x0000561f531bd349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: -1000, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp86myihc3/tmp86myihc3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d57089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d56d80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d56d80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d56d7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86myihc3                        0x000055ed4d140729 <unavailable> + 5929

    5    libc.so.6                          0x00002b0d57275460 __libc_start_main +
    245

    6    tmp86myihc3                        0x000055ed4d140329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978743
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k < arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[maxIndex] {\n     \
    \       max[maxIndex] = arr[i]\n            maxIndex = i\n        }\n    }\n \
    \   \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpdv99bq55/tmpdv99bq55.swift:18: Precondition failed: k should be less
    than or equal to arr.count

    Current stack trace:

    0    libswiftCore.so                    0x00002af5551b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af554eaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af554eaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af554ea97b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpdv99bq55                        0x0000561ab67fa601 <unavailable> + 9729

    5    tmpdv99bq55                        0x0000561ab67f9659 <unavailable> + 5721

    6    libc.so.6                          0x00002af55539f460 __libc_start_main +
    245

    7    tmpdv99bq55                        0x0000561ab67f9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    for index in\
    \ 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](max[index],\
    \ arr[index])\n        } else {\n            max = [Int](arr[index], max[index])\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8_xmeqpg.swift:23:19: error: no exact matches in call to initializer\
    \ \n            max = [Int](max[index], arr[index])\n                  ^\nSwift.Array:4:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\nSwift.RangeReplaceableCollection:2:23: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n    @inlinable\
    \ public init(repeating repeatedValue: Self.Element, count: Int)\n           \
    \           ^\n/tmp/tmp8_xmeqpg.swift:25:19: error: no exact matches in call to\
    \ initializer \n            max = [Int](arr[index], max[index])\n            \
    \      ^\nSwift.Array:4:23: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(repeating:count:)')\n    @inlinable public init(repeating repeatedValue:\
    \ Element, count: Int)\n                      ^\nSwift.RangeReplaceableCollection:2:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxpnvgxue.swift:22:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(arr[index], k))\n              \
    \                       ^\n                                                  count:\
    \ \n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpxpnvgxue.swift:22:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(arr[index], k))\n              \
    \                       ^\n                                                  count:\
    \ \n"
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    for element in arr {\n        if element > max[k-1] {\n            max[k-1]\
    \ = element\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpeetmgi73/tmpeetmgi73.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842c585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842c27cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842c27c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842c27b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetmgi73                        0x0000562ae4f2a729 <unavailable> + 5929

    5    libc.so.6                          0x00002b842c771460 __libc_start_main +
    245

    6    tmpeetmgi73                        0x0000562ae4f2a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to the length of arr\")\n    \n    var max = [Int]()\n    var\
    \ maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b160e1dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160ded6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b160ded6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b160ded613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b160ded5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b160dcd5e83 <unavailable> + 188035

    6    tmpf28446qe                        0x000055e57f8ea711 <unavailable> + 10001

    7    tmpf28446qe                        0x000055e57f8e9659 <unavailable> + 5721

    8    libc.so.6                          0x00002b160e3cb460 __libc_start_main +
    245

    9    tmpf28446qe                        0x000055e57f8e9339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    \n    for index in 0..<arr.count {\n        if arr[index] > max[index]\
    \ {\n            max[index] = arr[index]\n        }\n    }\n    \n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp996aphkl/tmp996aphkl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed11d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed0eccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed0ecc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed0ecb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp996aphkl                        0x0000560b20c07749 <unavailable> + 5961

    5    libc.so.6                          0x00002b3ed13c1460 __libc_start_main +
    245

    6    tmp996aphkl                        0x0000560b20c07349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: -Int.max,\
    \ count: k)\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n        }\n    }\n    \n    return max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp7g3l8kv7/tmp7g3l8kv7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6186724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b618641bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b618641b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b618641a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7g3l8kv7                        0x000055a63f4e4749 <unavailable> + 5961

    5    libc.so.6                          0x00002b6186910460 __libc_start_main +
    245

    6    tmp7g3l8kv7                        0x000055a63f4e4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[index] {\n            maxIndex\
    \ = index\n            max = [arr[index]]\n        } else if arr[index] == max[index]\
    \ {\n            max.append(arr[index])\n        }\n    }\n    return max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b426d38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b426d081561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b426d081286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b426d08113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b426d080bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b426ce80e83 <unavailable> + 188035

    6    tmpzje12ncb                        0x0000564efdb20714 <unavailable> + 10004

    7    tmpzje12ncb                        0x0000564efdb1f659 <unavailable> + 5721

    8    libc.so.6                          0x00002b426d576460 __libc_start_main +
    245

    9    tmpzje12ncb                        0x0000564efdb1f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var result = arr\n    for _ in 0..<k {\n\
    \        result = result.maxElement()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpm5x8x37a.swift:21:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n        result = result.maxElement()\n                 ~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > arr.count {\n        return\
    \ []\n    }\n    \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex\
    \ = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[i]\n            maxIndex = maxIndex + 1\n   \
    \     }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmppigxsvv6/tmppigxsvv6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d59d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d59a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d59a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d59a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppigxsvv6                        0x0000563937f866c9 <unavailable> + 5833

    5    libc.so.6                          0x00002b3d59f47460 __libc_start_main +
    245

    6    tmppigxsvv6                        0x0000563937f862c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    if k == 0 || k > len(arr) {\n        return []\n\
    \    }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    \n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(maximum(arr: [-3, -4, 5],\
    \ k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20,\
    \ 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2,\
    \ -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0],\
    \ k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10],\
    \ k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp82jh9gpu.swift:18:22: error: cannot find 'len' in scope\n    if\
    \ k == 0 || k > len(arr) {\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978744
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr:\
    \ [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the\
    \ array will be in the range of [1, 1000].\n/// 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr:\
    \ [Int], k: Int) -> [Int] {\n    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    \n    for index\
    \ in 0..<k {\n        if arr[index] > max[index] {\n            max = [Int](repeatElement(arr[index],\
    \ k))\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpapevi3nm.swift:24:38: error: missing argument label 'count:' in\
    \ call\n            max = [Int](repeatElement(arr[index], k))\n              \
    \                       ^\n                                                  count:\
    \ \n"
  stdout: ''
  timestamp: 1659978743
