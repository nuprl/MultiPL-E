language: swift
name: HumanEval_116_sort_array
results:
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    \n    for\
    \ index in 0..<sortedArr.count {\n        let ones = sortedArr[index] & 1\n  \
    \      \n        if ones == 0 {\n            sortedArr.swapAt(index, index + 1)\n\
    \        }\n    }\n    \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af0bee14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0beb0b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af0beb0b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af0beb0b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af0beb0abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af0beaf58a2 <unavailable> + 1345698

    6    libswiftCore.so                    0x00002af0beaf5815 <unavailable> + 1345557

    7    libswiftCore.so                    0x00002af0beaf5450 MutableCollection.swapAt(_:_:)
    + 377

    8    tmp1p2g2gq5                        0x0000564817ac32cc <unavailable> + 8908

    9    tmp1p2g2gq5                        0x0000564817ac25d4 <unavailable> + 5588

    10   libc.so.6                          0x00002af0bf000460 __libc_start_main +
    245

    11   tmp1p2g2gq5                        0x0000564817ac22a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824931
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    }\
    \ else {\n        result.sortInPlace(by: {\n            $0.decimalValue < $1.decimalValue\n\
    \        })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9jrral8i.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9jrral8i.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace(by:\
    \ {\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArray = [Int]()\n    var\
    \ oneCount = 0\n    var decimalCount = 0\n    for element in arr {\n        if\
    \ element == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += element - oneCount\n            oneCount = 0\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            sortedArray.append(element)\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    sortedArray = sortedArray.reverse()\n \
    \   return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgbdq991u.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpgbdq991u.swift:32:31:\
    \ error: cannot assign value of type '()' to type '[Int]'\n    sortedArray = sortedArray.reverse()\n\
    \                  ~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n\
    \            let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n\
    \                let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9cthl1p7.swift:15:23: error: no exact matches in call to subscript\
    \ \n        let ones = arr[i].trailingZeroBitCount()\n                      ^\n\
    /tmp/tmp9cthl1p7.swift:15:23: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n       \
    \               ^\n/tmp/tmp9cthl1p7.swift:15:23: note: found candidate with type\
    \ '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                      ^\n/tmp/tmp9cthl1p7.swift:15:27: error: value of type 'ArraySlice<Int>'\
    \ has no member 'trailingZeroBitCount'\n        let ones = arr[i].trailingZeroBitCount()\n\
    \                   ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9cthl1p7.swift:17:34:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            let decimal\
    \ = arr[i].decimalValue()\n                          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for number\
    \ in arr {\n        let binaryString = String(number, radix: 2)\n        let count\
    \ = binaryString.count\n        let decimal = Int(binaryString, radix: 2)\n  \
    \      if count == 1 {\n            result.insert(decimal, at: 0)\n        } else\
    \ {\n            let index = result.index(of: decimal)\n            if index !=\
    \ nil {\n                result[index!] = decimal\n            } else {\n    \
    \            result.insert(decimal, at: 0)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpx2rt50c_.swift:19:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n/tmp/tmpx2rt50c_.swift:19:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.insert(decimal, at: 0)\n                          ^\n       \
    \                           ?? <#default value#>\n/tmp/tmpx2rt50c_.swift:19:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(decimal, at: 0)\n                         \
    \ ^\n                                 !\n/tmp/tmpx2rt50c_.swift:21:42: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \           let index = result.index(of: decimal)\n                          \
    \               ^\n/tmp/tmpx2rt50c_.swift:21:42: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            let index\
    \ = result.index(of: decimal)\n                                         ^\n  \
    \                                               ?? <#default value#>\n/tmp/tmpx2rt50c_.swift:21:42:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            let index = result.index(of: decimal)\n                 \
    \                        ^\n                                                !\n\
    /tmp/tmpx2rt50c_.swift:25:31: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n                result.insert(decimal, at: 0)\n  \
    \                            ^\n/tmp/tmpx2rt50c_.swift:25:31: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \       result.insert(decimal, at: 0)\n                              ^\n     \
    \                                 ?? <#default value#>\n/tmp/tmpx2rt50c_.swift:25:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.insert(decimal, at: 0)\n                     \
    \         ^\n                                 "
  stdout: ''
  timestamp: 1659824930
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones > 0 {\n           \
    \ result[i] = arr[i]\n        }\n    }\n    for i in 0..<arr.count {\n       \
    \ let ones = arr[i].bitCount()\n        if ones == 0 {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    for i in 0..<arr.count {\n        let ones =\
    \ arr[i].bitCount()\n        if ones < 0 {\n            result[i] = -result[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7thidbvs.swift:15:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp7thidbvs.swift:21:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp7thidbvs.swift:27:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ result[i] = arr[i]\n        }\n    }\n    return result.sorted(by: { $0.binCount()\
    \ < $1.binCount() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_6v__c8u.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp_6v__c8u.swift:20:35: error: value of type 'Int' has no member\
    \ 'binCount'\n    return result.sorted(by: { $0.binCount() < $1.binCount() })\n\
    \                               ~~ ^~~~~~~~\n/tmp/tmp_6v__c8u.swift:20:51: error:\
    \ value of type 'Int' has no member 'binCount'\n    return result.sorted(by: {\
    \ $0.binCount() < $1.binCount() })\n                                         \
    \      ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    while i < arr.count {\n        sorted =\
    \ append(sorted, arr[i])\n        i += 1\n    }\n    for j = i; j > 0; j-- {\n\
    \        for k = j - 1; k >= 0; k-- {\n            if arr[j] > arr[k] {\n    \
    \            let temp = arr[j]\n                arr[j] = arr[k]\n            \
    \    arr[k] = temp\n            }\n        }\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu4jceqgo.swift:21:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for j = i; j > 0; j-- {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpu4jceqgo.swift:22:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for k = j\
    \ - 1; k >= 0; k-- {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu4jceqgo.swift:18:18:\
    \ error: cannot find 'append' in scope\n        sorted = append(sorted, arr[i])\n\
    \                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpgidkxtl6.swift:142:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpgidkxtl6.swift:167:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpgidkxtl6.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpgidkxtl6.swift:148:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpgidkxtl6.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        ones = num.trailingZeroBitCount()\n     \
    \   if ones == 0 {\n            result.insert(num, at: 0)\n        } else {\n\
    \            result.insert(num, at: result.count - ones)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvjvpvijp.swift:16:20: error: cannot call value of non-function\
    \ type 'Int'\n        ones = num.trailingZeroBitCount()\n                   ^\
    \                   ~~\n                                       \n"
  stdout: ''
  timestamp: 1659824930
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr.filter{$0 == 1}.count\n        if ones > i {\n   \
    \         let tmp = result[i]\n            result[i] = result[ones]\n        \
    \    result[ones] = tmp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp9x4ub6zc/tmp9x4ub6zc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc47eecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc47be3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc47be3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc47be27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x4ub6zc                        0x000055d4fc8d2734 <unavailable> + 5940

    5    libc.so.6                          0x00002afc480d8460 __libc_start_main +
    245

    6    tmp9x4ub6zc                        0x000055d4fc8d2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824931
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for x in arr {\n        if x != 0 {\n\
    \            ones.append(x)\n        } else {\n            zeros.append(x)\n \
    \       }\n    }\n    ones = sort_array(ones)\n    zeros = sort_array(zeros)\n\
    \    for x in ones {\n        for y in zeros {\n            if x == y {\n    \
    \            continue\n            }\n            if x < y {\n               \
    \ result.append(x)\n            } else {\n                result.append(y)\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2rdwjnie.swift:23:23: error: missing argument label 'arr:' in call\n\
    \    ones = sort_array(ones)\n                      ^\n                      arr:\
    \ \n/tmp/tmp2rdwjnie.swift:24:24: error: missing argument label 'arr:' in call\n\
    \    zeros = sort_array(zeros)\n                       ^\n                   \
    \    arr: \n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            dec += num\n        }\n    }\n \
    \   if ones > 0 {\n        result = dec.sorted()\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu1ya1dnz.swift:24:22: error: value of type 'Int' has no member\
    \ 'sorted'\n        result = dec.sorted()\n                 ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ result.sort { $0.binCount() < $1.binCount() }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxwddewi2.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpxwddewi2.swift:20:22: error: value of type 'Int' has no member\
    \ 'binCount'\n    result.sort { $0.binCount() < $1.binCount() }\n            \
    \      ~~ ^~~~~~~~\n/tmp/tmpxwddewi2.swift:20:38: error: value of type 'Int' has\
    \ no member 'binCount'\n    result.sort { $0.binCount() < $1.binCount() }\n  \
    \                                ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        if count >\
    \ 1 {\n            result.insert(element, at: result.endIndex)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmply7q6fce/tmply7q6fce.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0992f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0992c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0992c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0992c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmply7q6fce                        0x000055e7f1e59664 <unavailable> + 5732

    5    libc.so.6                          0x00002b0993157460 __libc_start_main +
    245

    6    tmply7q6fce                        0x000055e7f1e59249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824931
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                oneCount--\n\
    \                result.insert(result.count - oneCount, num)\n            } else\
    \ {\n                result.insert(result.count, num)\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4y4inwa6.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp4y4inwa6.swift:20:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      oneCount--\n                        ^~\n/tmp/tmp4y4inwa6.swift:21:24: error:\
    \ no exact matches in call to instance method 'insert'\n                result.insert(result.count\
    \ - oneCount, num)\n                       ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n/tmp/tmp4y4inwa6.swift:23:24: error: no\
    \ exact matches in call to instance method 'insert'\n                result.insert(result.count,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    \n    var result = [Int]()\n    \n\
    \    for element in arr {\n        let ones = count_ones(element)\n        if\
    \ ones == 0 {\n            result.append(element)\n        } else {\n        \
    \    let decimal = element / pow(2, ones)\n            result.append(decimal)\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpid67d9vg.swift:17:20: error: cannot find 'count_ones' in scope\n\
    \        let ones = count_ones(element)\n                   ^~~~~~~~~~\n/tmp/tmpid67d9vg.swift:21:37:\
    \ error: cannot find 'pow' in scope\n            let decimal = element / pow(2,\
    \ ones)\n                                    ^~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n        \
    \        let index = result.index(of: decimal)\n                result.remove(at:\
    \ index)\n                result.insert(decimal, at: i)\n            } else {\n\
    \                let index = result.index(of: ones)\n                result.remove(at:\
    \ index)\n                result.insert(ones, at: i)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp58oapsp7.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp58oapsp7.swift:17:34: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            let decimal = arr[i].decimalValue()\n          \
    \                ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = arr.count\n    while i < k {\n        if arr[i]\
    \ == 1 {\n            result.append(i)\n            i += 1\n        } else {\n\
    \            j = i\n            while j < k {\n                if arr[j] == 1\
    \ {\n                    result.append(j)\n                    j += 1\n      \
    \          } else {\n                    k = j\n                    while k <\
    \ k {\n                        if arr[k] == 1 {\n                            result.append(k)\n\
    \                            k += 1\n                        } else {\n      \
    \                      i = k\n                            break\n            \
    \            }\n                    }\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpfb4a79zy/tmpfb4a79zy.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd26779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd26470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd26470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd2646f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb4a79zy                        0x00005646ef5aa544 <unavailable> + 5444

    5    libc.so.6                          0x00002acd26965460 __libc_start_main +
    245

    6    tmpfb4a79zy                        0x00005646ef5aa129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element\n\
    \        }\n    }\n    if ones > 0 {\n        result = sort_array(arr: arr, ones:\
    \ ones, decimal: decimal)\n    } else {\n        result = sort_array(arr: arr,\
    \ ones: 0, decimal: decimal)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmph2e41tkl.swift:24:28: error: extra arguments at positions #2, #3\
    \ in call\n        result = sort_array(arr: arr, ones: ones, decimal: decimal)\n\
    \                           ^\n/tmp/tmph2e41tkl.swift:12:6: note: 'sort_array(arr:)'\
    \ declared here\nfunc sort_array(arr: [Int]) -> [Int] {\n     ^\n/tmp/tmph2e41tkl.swift:26:28:\
    \ error: extra arguments at positions #2, #3 in call\n        result = sort_array(arr:\
    \ arr, ones: 0, decimal: decimal)\n                           ^\n/tmp/tmph2e41tkl.swift:12:6:\
    \ note: 'sort_array(arr:)' declared here\nfunc sort_array(arr: [Int]) -> [Int]\
    \ {\n     ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n \
    \       } else {\n            decimal -= num\n        }\n    }\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal -= num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimal -= num\n        }\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal +=\
    \ num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n       \
    \     ones += 1\n        } else {\n            decimal -= num\n        }\n   \
    \ }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n    \
    \    } else {\n            decimal += num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal -= num\n        }\n    }\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal += num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal -= num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += num\n        }\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal -=\
    \ num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n       \
    \     ones += 1\n        } else {\n            decimal += num\n        }\n   \
    \ }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n    \
    \    } else {\n            decimal -= num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += num\n        }\n    }\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal -= num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += num\n        }\n    }\n    for\
    \ num in \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpk0nr_h5k.swift:149:15: error: expected Sequence expression for\
    \ for-each loop\n    for num in \n              ^\n/tmp/tmpk0nr_h5k.swift:149:15:\
    \ error: expected '{' to start the body of for-each loop\n    for num in \n  \
    \            ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBitCount()\n\
    \        decimal = num.decimalValue()\n        if ones > 0 {\n            sorted\
    \ = sorted.sorted { $0 < $1 }\n        }\n        if decimal > 0 {\n         \
    \   sorted = sorted.sorted { $0 < $1 }\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpinwj71xn.swift:17:20: error: cannot call value of non-function\
    \ type 'Int'\n        ones = num.trailingZeroBitCount()\n                   ^\
    \                   ~~\n                                       \n/tmp/tmpinwj71xn.swift:18:23:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        decimal = num.decimalValue()\n\
    \                  ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += pow(x, 2)\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr, ones: ones, decimal:\
    \ decimal)\n    }\n    if ones < 0 {\n        result = sort_array(arr: arr, ones:\
    \ -ones, decimal: -decimal)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptbjy0g_h.swift:20:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(x, 2)\n                       ^~~\n/tmp/tmptbjy0g_h.swift:24:28:\
    \ error: extra arguments at positions #2, #3 in call\n        result = sort_array(arr:\
    \ arr, ones: ones, decimal: decimal)\n                           ^\n/tmp/tmptbjy0g_h.swift:12:6:\
    \ note: 'sort_array(arr:)' declared here\nfunc sort_array(arr: [Int]) -> [Int]\
    \ {\n     ^\n/tmp/tmptbjy0g_h.swift:27:28: error: extra arguments at positions\
    \ #2, #3 in call\n        result = sort_array(arr: arr, ones: -ones, decimal:\
    \ -decimal)\n                           ^\n/tmp/tmptbjy0g_h.swift:12:6: note:\
    \ 'sort_array(arr:)' declared here\nfunc sort_array(arr: [Int]) -> [Int] {\n \
    \    ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element *\
    \ pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, ones)\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpowep8856.swift:155:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpowep8856.swift:128:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpowep8856.swift:155:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpowep8856.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpowep8856.swift:20:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, ones)\n      \
    \                           ^~~\n/tmp/tmpowep8856.swift:27:34: error: cannot find\
    \ 'pow' in scope\n            decimal += element * pow(10, ones)\n           \
    \                      ^~~\n/tmp/tmpowep8856.swift:34:34: error: cannot find 'pow'\
    \ in scope\n            decimal += element * pow(10, ones)\n                 \
    \                ^~~\n/tmp/tmpowep8856.swift:41:34: error: cannot find 'pow' in\
    \ scope\n            decimal += element * pow(10, ones)\n                    \
    \             ^~~\n/tmp/tmpowep8856.swift:48:34: error: cannot find 'pow' in scope\n\
    \            decimal += element * pow(10, ones)\n                            \
    \     ^~~\n/tmp/tmpowep8856.swift:55:34: error: cannot find 'pow' in scope\n \
    \           decimal += element * pow(10, ones)\n                             \
    \    ^~~\n/tmp/tmpowep8856.swift:62:34: error: cannot find 'pow' in scope\n  \
    \          decimal += element * pow(10, ones)\n                              \
    \   ^~~\n/tmp/tmpowep8856.swift:69:34: error: cannot find 'pow' in scope\n   \
    \         decimal += element * pow(10, ones)\n                               \
    \  ^~~\n/tmp/tmpowep8856.swift:76:34: error: cannot find 'pow' in scope\n    \
    \        decimal += element * pow(10, ones)\n                                \
    \ ^~~\n/tmp/tmpowep8856.swift:83:34: error: cannot find 'p"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var count = 0\n    for\
    \ _ in arr {\n        i += 1\n        count += arr[i]\n    }\n    for _ in arr\
    \ {\n        j += 1\n        count += arr[j]\n    }\n    for _ in arr {\n    \
    \    k += 1\n        count += arr[k]\n    }\n    for _ in arr {\n        if count\
    \ == 0 {\n            temp += arr[i]\n            i += 1\n            count -=\
    \ arr[i]\n        } else {\n            temp += arr[j]\n            j += 1\n \
    \           count -= arr[j]\n        }\n        if count == 0 {\n            temp\
    \ += arr[k]\n            k += 1\n            count -= arr[k]\n        }\n    \
    \    if count == 0 {\n            result.insert(i, temp)\n            temp = 0\n\
    \            i = 0\n            j = 0\n            k = 0\n            count =\
    \ 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphe8p15v5.swift:47:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(i, temp)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        sorted = sorted.sorted()\n    }\n    if decimal\
    \ > 0 {\n        sorted = sorted.sorted()\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp475g20gt/tmp475g20gt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dfe482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dfe179b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dfe179988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dfe1787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp475g20gt                        0x000055aff63c0654 <unavailable> + 5716

    5    libc.so.6                          0x00002b4dfe66e460 __libc_start_main +
    245

    6    tmp475g20gt                        0x000055aff63c0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + element)\n                oneCount = 0\n            } else {\n \
    \               result.insert(element, at: 0)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmps84t3nht.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr: arr,\
    \ ones: ones, decimal: decimal)\n    }\n    if ones == 0 {\n        result = sort_array(arr:\
    \ arr, decimal: decimal)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0wcljmcs.swift:24:28: error: extra arguments at positions #2, #3\
    \ in call\n        result = sort_array(arr: arr, ones: ones, decimal: decimal)\n\
    \                           ^\n/tmp/tmp0wcljmcs.swift:12:6: note: 'sort_array(arr:)'\
    \ declared here\nfunc sort_array(arr: [Int]) -> [Int] {\n     ^\n/tmp/tmp0wcljmcs.swift:27:48:\
    \ error: extra argument 'decimal' in call\n        result = sort_array(arr: arr,\
    \ decimal: decimal)\n                           ~~~~~~~~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    }\
    \ else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7_p5jyjo.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp7_p5jyjo.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDecreasingOrder'\n\
    \        result.sortInPlaceByDecreasingOrder(decimal)\n        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for v in arr {\n        if v == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += v\n        }\n    }\n\
    \    if ones > 0 {\n        result = sort_array(arr: arr)\n        result.append(decimal)\n\
    \    } else {\n        result = arr\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979961
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones.append(num)\n        } else {\n            zeros.append(num)\n\
    \        }\n    }\n    for num in ones {\n        result.append(num)\n    }\n\
    \    for num in zeros {\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpparjxdfe/tmpparjxdfe.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f1932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f1629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f1629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f16287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpparjxdfe                        0x000055a0e2e8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b37f1b1e460 __libc_start_main +
    245

    6    tmpparjxdfe                        0x000055a0e2e8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for x in arr {\n        if x == 0 {\n\
    \            zeros.append(x)\n        } else {\n            ones.append(x)\n \
    \       }\n    }\n    for x in ones {\n        let index = zeros.indexOf(x)\n\
    \        if index != -1 {\n            zeros.remove(at: index)\n            result.insert(x,\
    \ at: index)\n        } else {\n            result.insert(x, at: result.count)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnsp85cgp.swift:24:27: error: value of type '[Int]' has no member\
    \ 'indexOf'\n        let index = zeros.indexOf(x)\n                    ~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 0 {\n            continue\n     \
    \   }\n        result.append(num)\n        i += 1\n    }\n    for num in arr {\n\
    \        if num == 0 {\n            continue\n        }\n        if i > 0 {\n\
    \            if result[i-1] > num {\n                result[i-1] = num\n     \
    \       }\n        } else {\n            result.append(num)\n        }\n     \
    \   i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b99d383cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99d3533561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b99d3533286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b99d353313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b99d3532bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b99d3332e83 <unavailable> + 188035

    6    tmpcdnbmspx                        0x0000559e946ca309 <unavailable> + 8969

    7    tmpcdnbmspx                        0x0000559e946c95b4 <unavailable> + 5556

    8    libc.so.6                          0x00002b99d3a28460 __libc_start_main +
    245

    9    tmpcdnbmspx                        0x0000559e946c9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n                ones = 0\n            }\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_zyi21qv/tmp_zyi21qv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeae05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeadd53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeadd53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeadd527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zyi21qv                        0x00005637bc359604 <unavailable> + 5636

    5    libc.so.6                          0x00002afeae248460 __libc_start_main +
    245

    6    tmp_zyi21qv                        0x00005637bc3591e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n            }\n            ones = 1\n            result.append(element)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpj3olduk8/tmpj3olduk8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64a563c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64a25ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64a25a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64a2597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3olduk8                        0x000055b3bfda8604 <unavailable> + 5636

    5    libc.so.6                          0x00002af64a74f460 __libc_start_main +
    245

    6    tmpj3olduk8                        0x000055b3bfda81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            oneCount = 0\n        }\n        if oneCount ==\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp61ho3_mh.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for x in arr {\n        ones = x & 1\n        if ones == 0 {\n    \
    \        result.append(x)\n        } else {\n            switch ones {\n     \
    \       case 1:\n                result.sort()\n            case 2:\n        \
    \        result.sort()\n            case 3:\n                result.sort()\n \
    \           case 4:\n                result.sort()\n            case 5:\n    \
    \            result.sort()\n            case 6:\n                result.sort()\n\
    \            default:\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3t6feq11/tmp3t6feq11.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8818f51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8818c48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8818c48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8818c477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3t6feq11                        0x000055b4f57bc724 <unavailable> + 5924

    5    libc.so.6                          0x00002b881913d460 __libc_start_main +
    245

    6    tmp3t6feq11                        0x000055b4f57bc309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for value in arr {\n        if value == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += value\n     \
    \   }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else {\n\
    \        result.sortInPlaceWithComparator({ (lhs, rhs) -> Bool in\n          \
    \  return lhs.compare(rhs) == .orderedAscending\n        })\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9mgupcw6.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9mgupcw6.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceWithComparator'\n   \
    \     result.sortInPlaceWithComparator({ (lhs, rhs) -> Bool in\n        ~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n  \
    \  if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n        result.sort()\n\
    \    }\n    if decimal > 0 {\n        result = sort_array(result)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpokq3jeyu.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmpokq3jeyu.swift:33:29: error: missing argument\
    \ label 'arr:' in call\n        result = sort_array(result)\n                \
    \            ^\n                            arr: \n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else {\n\
    \        result.sortInPlaceByDecreasingOrder(decimal)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8t8hiyfx.swift:24:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp8t8hiyfx.swift:26:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDecreasingOrder'\n\
    \        result.sortInPlaceByDecreasingOrder(decimal)\n        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArray = [Int]()\n    var\
    \ oneCount = 0\n    var decimalCount = 0\n    for number in arr {\n        if\
    \ number == 1 {\n            oneCount += 1\n        } else {\n            decimalCount\
    \ += number - oneCount\n            oneCount = 0\n        }\n    }\n    if oneCount\
    \ > 0 {\n        decimalCount += oneCount - 1\n    }\n    for number in arr {\n\
    \        if number == 1 {\n            sortedArray.append(number)\n        } else\
    \ {\n            sortedArray.append(decimalCount / number)\n            decimalCount\
    \ %= number\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9mbowyp8/tmp9mbowyp8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfb27cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfb24c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfb24c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfb24c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mbowyp8                        0x0000558550bae694 <unavailable> + 5780

    5    libc.so.6                          0x00002abfb29bb460 __libc_start_main +
    245

    6    tmp9mbowyp8                        0x0000558550bae279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 0 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    for number in arr {\n        if number == 0 {\n           \
    \ ones += 1\n        } else {\n            decimal -= number\n        }\n    }\n\
    \    if ones == arr.count {\n        result = arr\n    } else {\n        result\
    \ = arr\n        for number in arr {\n            if number == 0 {\n         \
    \       ones += 1\n            } else {\n                decimal += number\n \
    \           }\n        }\n        for number in arr {\n            if number ==\
    \ 0 {\n                ones += 1\n            } else {\n                decimal\
    \ -= number\n            }\n        }\n        if ones == arr.count {\n      \
    \      result = arr\n        } else {\n            result = arr\n            for\
    \ number in arr {\n                if number == 0 {\n                    ones\
    \ += 1\n                } else {\n                    decimal += number\n    \
    \            }\n            }\n            for number in arr {\n             \
    \   if number == 0 {\n                    ones += 1\n                } else {\n\
    \                    decimal -= number\n                }\n            }\n   \
    \         if ones == arr.count {\n                result = arr\n            }\
    \ else {\n                result = arr\n                for number in arr {\n\
    \                    if number == 0 {\n                        ones += 1\n   \
    \                 } else {\n                        decimal += number\n      \
    \              }\n                }\n                for number in arr {\n   \
    \                 if number == 0 {\n                        ones += 1\n      \
    \              } else {\n                        decimal -= number\n         \
    \           }\n                }\n                if ones == arr.count {\n   \
    \                 result = arr\n                } else {\n                   \
    \ result = arr\n                    for number in arr {\n                    \
    \    if number == 0 {\n                            ones += 1\n               \
    \         } else {\n                            decimal += number\n          \
    \              }\n                    }\n                    for number in arr\
    \ {\n                        if number == 0 {\n                            ones\
    \ += 1\n                        } else {\n                            decimal\
    \ -= number\n                        }\n                    }\n              \
    \      if ones == arr.count {\n                        result = arr\n        \
    \            } else {\n                        result = arr\n                \
    \        for number in arr {\n                            if number == 0 {\n \
    \                               ones += 1\n                            } else\
    \ {\n                                decimal += number\n                     \
    \       }\n                        }\n                        for number in arr\
    \ {\n                            if number == 0 {\n                          \
    \      ones += 1\n                            } else {\n                     \
    \           decimal -= number\n                            }\n               \
    \         }\n                        if ones == arr.count {\n                \
    \            result = arr\n                        } else {\n                \
    \            result = arr\n                            for number in arr {\n \
    \                               if number == 0 {\n                           \
    \         ones += 1\n                                } else {\n              \
    \                      decimal += number\n                                }\n\
    \                            }\n                            for number in arr\
    \ {\n                                if number == 0 {\n                      \
    \              ones += 1\n                                } else {\n         \
    \                           decimal -= number\n                              \
    \  }\n                            }\n                            if ones == arr.count\
    \ {\n                                result = arr\n                          \
    \  } else {\n                                result = arr\n                  \
    \              for number in arr {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsq3szzkm.swift:166:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpsq3szzkm.swift:140:36:\
    \ note: to match this opening '{'\n                            } else {\n    \
    \                               ^\n/tmp/tmpsq3szzkm.swift:166:64: error: expected\
    \ '}' at end of brace statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\n                                                       \
    \        ^\n/tmp/tmpsq3szzkm.swift:122:32: note: to match this opening '{'\n \
    \                       } else {\n                               ^\n/tmp/tmpsq3szzkm.swift:166:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpsq3szzkm.swift:104:28: note: to match this\
    \ opening '{'\n                    } else {\n                           ^\n/tmp/tmpsq3szzkm.swift:166:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpsq3szzkm.swift:86:24: note: to match this opening\
    \ '{'\n                } else {\n                       ^\n/tmp/tmpsq3szzkm.swift:166:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpsq3szzkm.swift:68:20: note: to match this opening\
    \ '{'\n            } else {\n                   ^\n/tmp/tmpsq3szzkm.swift:166:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpsq3szzkm.swift:50:16: note: to match this opening\
    \ '{'\n        } else {\n               ^\n/tmp/tmpsq3szzkm.swift:166:64: error:\
    \ expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4, 8, 16,"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            result += [ones]\n            ones = 1\n  \
    \      }\n    }\n    result += [ones]\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpe53d8zjd/tmpe53d8zjd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5fd9c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5fd6bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5fd6bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5fd6bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe53d8zjd                        0x000055be8dc4b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ad5fdbb1460 __libc_start_main +
    245

    6    tmpe53d8zjd                        0x000055be8dc4b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n      \
    \  } else {\n            if ones > 0 {\n                result.append((ones -\
    \ 1) * 10)\n            }\n            ones = 1\n            result.append(x)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmptpxpvm4k/tmptpxpvm4k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf1181bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf11512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf11512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf115117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpxpvm4k                        0x000055d4337bc604 <unavailable> + 5636

    5    libc.so.6                          0x00002aaf11a07460 __libc_start_main +
    245

    6    tmptpxpvm4k                        0x000055d4337bc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones == 0 {\n        result = arr\n    } else {\n        result\
    \ = arr.sorted()\n    }\n    if ones > 0 {\n        result = result.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqoek_4o2/tmpqoek_4o2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1fbce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fb9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fb9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fb9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqoek_4o2                        0x000055e1c7c79654 <unavailable> + 5716

    5    libc.so.6                          0x00002ac1fbecf460 __libc_start_main +
    245

    6    tmpqoek_4o2                        0x000055e1c7c79239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for num in arr {\n        if num == 1 {\n            ones[0]++\n\
    \        } else {\n            if ones[0] > 0 {\n                ones[0]--\n \
    \               result.insert(result.end(), ones[0])\n            }\n        \
    \    ones[0] = 1\n            result.insert(result.end(), num)\n        }\n  \
    \  }\n    if ones[0] > 0 {\n        ones[0]--\n        result.insert(result.end(),\
    \ ones[0])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgkv5u3x3.swift:17:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpgkv5u3x3.swift:20:24:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      ones[0]--\n                       ^~\n/tmp/tmpgkv5u3x3.swift:21:30: error:\
    \ missing argument label 'at:' in call\n                result.insert(result.end(),\
    \ ones[0])\n                             ^\n                                 \
    \           at: \n/tmp/tmpgkv5u3x3.swift:21:38: error: value of type '[Int]' has\
    \ no member 'end'\n                result.insert(result.end(), ones[0])\n    \
    \                          ~~~~~~ ^~~\n/tmp/tmpgkv5u3x3.swift:24:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(result.end(),\
    \ num)\n                   ^\n/tmp/tmpgkv5u3x3.swift:24:20: note: found candidate\
    \ with type '(__owned Int, Int) -> ()'\n            result.insert(result.end(),\
    \ num)\n                   ^\n/tmp/tmpgkv5u3x3.swift:24:34: error: value of type\
    \ '[Int]' has no member 'end'\n            result.insert(result.end(), num)\n\
    \                          ~~~~~~ ^~~\n/tmp/tmpgkv5u3x3.swift:28:16: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n        ones[0]--\n     \
    \          ^~\n/tmp/tmpgkv5u3x3.swift:29:22: error: missing argument label 'at:'\
    \ in call\n        result.insert(result.end(), ones[0])\n                    \
    \ ^\n                                    at: \n/tmp/tmpgkv5u3x3.swift:29:30: error:\
    \ value of type '[Int]' has no member 'end'\n        result.insert(result.end(),\
    \ ones[0])\n                      ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n        ones\
    \ = 0\n        decimal = 0\n    }\n    for num in arr {\n        if num == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= num\n       \
    \ }\n    }\n    if ones == 0 {\n        result = arr.sorted()\n    }\n    if decimal\
    \ > 0 {\n        result = result.sorted()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979962
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var count = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            count += 1\n        } else {\n            if count > 0 {\n\
    \                result.append(j)\n                count = 0\n            }\n\
    \            j = i\n            i = element\n        }\n    }\n    if count >\
    \ 0 {\n        result.append(j)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp_ksm2d0_/tmp_ksm2d0_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d30f91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d30c88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d30c88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d30c877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ksm2d0_                        0x0000562179e6b604 <unavailable> + 5636

    5    libc.so.6                          0x00002b7d3117d460 __libc_start_main +
    245

    6    tmp_ksm2d0_                        0x0000562179e6b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        let binary = x.binary(radix: 2)\n        let decimal = Int(binary)\n\
    \        if decimal < 0 {\n            decimal = -decimal\n        }\n       \
    \ if decimal > result.count {\n            result.append(decimal)\n        } else\
    \ {\n            result[decimal] = x\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpm_fbd14v.swift:15:24: error: value of type 'Int' has no member\
    \ 'binary'\n        let binary = x.binary(radix: 2)\n                     ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        if x > zeros[0] {\n            result.insert(zeros[0],\
    \ x)\n            zeros[0]--\n        }\n    }\n    for x in zeros {\n       \
    \ if x > ones[0] {\n            result.insert(ones[0], x)\n            ones[0]--\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkjhco8s8.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpkjhco8s8.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmpkjhco8s8.swift:25:26: error: missing\
    \ argument label 'at:' in call\n            result.insert(zeros[0], x)\n     \
    \                    ^\n                                    at: \n/tmp/tmpkjhco8s8.swift:26:21:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  zeros[0]--\n                    ^~\n/tmp/tmpkjhco8s8.swift:31:26: error: missing\
    \ argument label 'at:' in call\n            result.insert(ones[0], x)\n      \
    \                   ^\n                                   at: \n/tmp/tmpkjhco8s8.swift:32:20:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  ones[0]--\n                   ^~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let value = arr[index]\n        if value == 0 {\n \
    \           continue\n        }\n        let ones = binary(value, width: 32)\n\
    \        let decimal = ones * 10\n        if decimal > result.last {\n       \
    \     result.removeLast()\n        }\n        result.append(decimal)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvy3h22s1.swift:19:20: error: cannot find 'binary' in scope\n  \
    \      let ones = binary(value, width: 32)\n                   ^~~~~~\n/tmp/tmpvy3h22s1.swift:21:29:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if decimal > result.last {\n                            ^\n/tmp/tmpvy3h22s1.swift:21:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if decimal > result.last {\n                            ^\n \
    \                                ?? <#default value#>\n/tmp/tmpvy3h22s1.swift:21:29:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if decimal > result.last {\n                            ^\n \
    \                               !\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for idx in 0..<arr.count {\n        let ones = arr[idx] & 1\n\
    \        if ones == 0 {\n            result[idx] = arr[idx]\n        } else {\n\
    \            let decimal = arr[idx] >> 1\n            result[idx] = decimal\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4ciua_tb/tmp4ciua_tb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c71649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c71340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c71340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7133f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ciua_tb                        0x0000562866d446e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b4c71835460 __libc_start_main +
    245

    6    tmp4ciua_tb                        0x0000562866d442c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            oneCount = 0\n        }\n        if oneCount > 0\
    \ {\n            result.insert(result.count, num)\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkgsbcoe8.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpkgsbcoe8.swift:22:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(result.count,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += pow(x, 2)\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n     \
    \   } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones += 1\n        } else {\n      \
    \      decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if\
    \ x == 1 {\n            ones += 1\n        } else {\n            decimal += pow(x,\
    \ 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += pow(x, 2)\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnjtnf361.swift:149:17: error: expected '{' to start the body of\
    \ for-each loop\n    for x in arr\n                ^\n/tmp/tmpnjtnf361.swift:20:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:27:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:34:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:41:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:48:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:55:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:62:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:69:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:76:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:83:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:90:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:97:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:104:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:111:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpnjtnf361.swift:118:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpnjtnf361.swift:125:24: error: cannot find 'pow'\
    \ in scope"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0 {\n        \
    \    ones += 1\n            decimal = decimal * 10 + x\n        } else {\n   \
    \         sorted.append(decimal)\n            decimal = 0\n            ones =\
    \ 0\n        }\n    }\n    sorted.append(decimal)\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv3fizts1/tmpv3fizts1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba487441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba487138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba487138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4871377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3fizts1                        0x000055c4806db604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba48762d460 __libc_start_main +
    245

    6    tmpv3fizts1                        0x000055c4806db1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] == 0 {\n            swap(&result[idx], &result[idx+1])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmps1eej31k.swift:16:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[idx], &result[idx+1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(idx, idx+1)\n/tmp/tmps1eej31k.swift:16:32: note: conflicting\
    \ access is here\n            swap(&result[idx], &result[idx+1])\n           \
    \                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n \
    \   }\n    if ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n \
    \       result = result.sorted()\n    }\n    if decimal > 0 {\n        result\
    \ = result.sorted()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1ummohki.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            sorted.append(num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        sorted.sort()\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpes8t63hm.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let bin = String(format: \"\
    %0*b\", i, arr[i])\n        let count = bin.characters.filter({ $0 == \"1\" }).count\n\
    \        result[i] = Int(bin.characters.filter({ $0 == \"1\" }).count) / Int(count)\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2zqxe7mq.swift:15:25: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        let bin = String(format:\
    \ \"%0*b\", i, arr[i])\n                        ^~~~~~~~~\n                  \
    \                       radix:  uppercase: \n/tmp/tmp2zqxe7mq.swift:15:48: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n        let\
    \ bin = String(format: \"%0*b\", i, arr[i])\n                                \
    \               ^\n                                            (      != 0)\n\
    /tmp/tmp2zqxe7mq.swift:15:19: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n        let bin = String(format: \"\
    %0*b\", i, arr[i])\n                  ^\nSwift.String:2:12: note: where 'T' =\
    \ 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool =\
    \ false) where T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    for x in arr {\n        if x != 0 {\n            ones = append(ones,\
    \ 1)\n        } else {\n            ones = append(ones, 0)\n        }\n    }\n\
    \    for x in ones {\n        if x > 0 {\n            result = append(result,\
    \ x)\n        }\n    }\n    for x in ones {\n        if x < 0 {\n            result\
    \ = append(result, -x)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp56tzqbrz.swift:17:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 1)\n                   ^~~~~~\n/tmp/tmp56tzqbrz.swift:19:20:\
    \ error: cannot find 'append' in scope\n            ones = append(ones, 0)\n \
    \                  ^~~~~~\n/tmp/tmp56tzqbrz.swift:24:22: error: cannot find 'append'\
    \ in scope\n            result = append(result, x)\n                     ^~~~~~\n\
    /tmp/tmp56tzqbrz.swift:29:22: error: cannot find 'append' in scope\n         \
    \   result = append(result, -x)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            result.insert(oneCount, num)\n            oneCount\
    \ = 0\n        }\n    }\n    if oneCount > 0 {\n        result.insert(oneCount,\
    \ arr[arr.count-1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphb19huro.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmphb19huro.swift:19:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(oneCount,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmphb19huro.swift:24:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(oneCount, arr[arr.count-1])\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n        result[result.count-1]\
    \ = decimal\n    } else {\n        result = arr\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqbdy4b5f.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            switch ones {\n            case 0:\n      \
    \          result.append(element)\n            case 1:\n                result.append(element)\n\
    \            case 2:\n                result.append(element)\n            case\
    \ 3:\n                result.append(element)\n            case 4:\n          \
    \      result.append(element)\n            case 5:\n                result.append(element)\n\
    \            case 6:\n                result.append(element)\n            }\n\
    \            ones = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmprrfssmra.swift:19:13: error: switch must be exhaustive\n      \
    \      switch ones {\n            ^\n/tmp/tmprrfssmra.swift:19:13: note: do you\
    \ want to add a default clause?\n            switch ones {\n            ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n    if ones\
    \ == 0 {\n        result = decimal\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_mu59_ob.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmp_mu59_ob.swift:27:18: error: cannot assign value\
    \ of type 'Int' to type '[Int]'\n        result = decimal\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    \n    for\
    \ index in 0..<sortedArr.count {\n        let ones = sortedArr[index] & 1\n  \
    \      \n        if ones == 0 {\n            sortedArr.swapAt(index, index + 1)\n\
    \        }\n    }\n    \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af0bee14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0beb0b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af0beb0b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af0beb0b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af0beb0abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af0beaf58a2 <unavailable> + 1345698

    6    libswiftCore.so                    0x00002af0beaf5815 <unavailable> + 1345557

    7    libswiftCore.so                    0x00002af0beaf5450 MutableCollection.swapAt(_:_:)
    + 377

    8    tmp1p2g2gq5                        0x0000564817ac32cc <unavailable> + 8908

    9    tmp1p2g2gq5                        0x0000564817ac25d4 <unavailable> + 5588

    10   libc.so.6                          0x00002af0bf000460 __libc_start_main +
    245

    11   tmp1p2g2gq5                        0x0000564817ac22a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824931
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        if count >\
    \ 0 {\n            result.insert(element, at: result.endIndex)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpjq7vbi1p/tmpjq7vbi1p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b8a567c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b8a25eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b8a25e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b8a25d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjq7vbi1p                        0x000055da2f8cc664 <unavailable> + 5732

    5    libc.so.6                          0x00002b8b8a753460 __libc_start_main +
    245

    6    tmpjq7vbi1p                        0x000055da2f8cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for num in arr {\n        if num == 0 {\n  \
    \          zeros.append(num)\n        } else {\n            ones.append(num)\n\
    \        }\n    }\n    for num in ones {\n        if zeros.contains(num) {\n \
    \           zeros.remove(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in zeros {\n        if ones.contains(num) {\n \
    \           ones.remove(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpo1bkf5q0.swift:25:19: error: no exact matches in call to instance\
    \ method 'remove'\n            zeros.remove(num)\n                  ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmpo1bkf5q0.swift:32:18: error: no exact matches\
    \ in call to instance method 'remove'\n            ones.remove(num)\n        \
    \         ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let bin = String(format: \"\
    %08b\", arr[i])\n        let count = bin.count\n        if count < 8 {\n     \
    \       result[i] = 0\n        } else {\n            let bin = String(format:\
    \ \"%08b\", arr[i])\n            let count = bin.count\n            let bin =\
    \ String(format: \"%0*d\", 0, bin)\n            let count = bin.count\n      \
    \      result[i] = Int(bin, radix: 2)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkd667q23.swift:15:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let bin = String(format:\
    \ \"%08b\", arr[i])\n                        ^~~~~~~\n                       \
    \  repeating       count: \n/tmp/tmpkd667q23.swift:20:29: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n           \
    \ let bin = String(format: \"%08b\", arr[i])\n                            ^~~~~~~\n\
    \                             repeating       count: \n/tmp/tmpkd667q23.swift:22:29:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \            let bin = String(format: \"%0*d\", 0, bin)\n                    \
    \        ^~~~~~~~~\n                                             radix:  uppercase:\
    \ \n/tmp/tmpkd667q23.swift:22:23: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n            let bin = String(format:\
    \ \"%0*d\", 0, bin)\n                      ^\nSwift.String:2:12: note: where 'T'\
    \ = 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmpkd667q23.swift:24:25:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            result[i] = Int(bin, radix: 2)\n                        ^\n/tmp/tmpkd667q23.swift:24:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[i] = Int(bin, radix: 2)\n                        ^\n\
    \                                           ?? <#default value#>\n/tmp/tmpkd667q23.swift:24:25:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result[i] = Int(bin, radix: 2)\n                        ^\n\
    \                                          !\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n            }\n            oneCount\
    \ = 0\n        }\n    }\n    if oneCount > 0 {\n        result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpexnks765.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpexnks765.swift:26:45:\
    \ error: cannot find 'num' in scope\n        result.append((oneCount - 1) * 10\
    \ + num) // sort by decimal value\n                                          \
    \  ^~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ let decimal = arr[i].decimalValue()\n            if decimal > 0 {\n        \
    \        let index = arr.index(of: decimal)\n                result[index] = arr[i]\n\
    \                arr.remove(at: i)\n                i = index\n            } else\
    \ {\n                let index = arr.index(of: ones)\n                result[index]\
    \ = arr[i]\n                arr.remove(at: i)\n                i = index\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkc18u1vq.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpkc18u1vq.swift:17:34: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            let decimal = arr[i].decimalValue()\n          \
    \                ~~~~~~ ^~~~~~~~~~~~\n/tmp/tmpkc18u1vq.swift:21:21: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n        \
    \        arr.remove(at: i)\n                ~~~ ^\n/tmp/tmpkc18u1vq.swift:22:17:\
    \ error: cannot assign to value: 'i' is a 'let' constant\n                i =\
    \ index\n                ^\n/tmp/tmpkc18u1vq.swift:26:21: error: cannot use mutating\
    \ member on immutable value: 'arr' is a 'let' constant\n                arr.remove(at:\
    \ i)\n                ~~~ ^\n/tmp/tmpkc18u1vq.swift:27:17: error: cannot assign\
    \ to value: 'i' is a 'let' constant\n                i = index\n             \
    \   ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    \n    for\
    \ i in 0..<sortedArr.count {\n        let ones = sortedArr[i].bitCount()\n   \
    \     if ones == 0 {\n            sortedArr.swapAt(i, sortedArr.count - 1 - i)\n\
    \        }\n    }\n    \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdqxdlu5n.swift:16:33: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = sortedArr[i].bitCount()\n                   ~~~~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        ones += element\n\
    \        decimal += element / 2\n    }\n    if ones < 0 {\n        ones = -ones\n\
    \        decimal = -decimal\n    }\n    for element in arr {\n        if element\
    \ == 0 {\n            continue\n        }\n        let index = element / 2\n \
    \       if ones == 0 {\n            result.insert(index, element)\n        } else\
    \ {\n            let index = element / 2\n            if decimal == 0 {\n    \
    \            result.insert(index, element)\n            } else {\n           \
    \     result.insert(index, element + decimal)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpi7ivr0zx.swift:30:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(index, element)\n               \
    \    ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpi7ivr0zx.swift:34:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(index, element)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpi7ivr0zx.swift:36:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(index, element + decimal)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for el in arr {\n        if el == 1 {\n            count += 1\n   \
    \     } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * 10 + el)\n                count = 0\n            }\n        }\n    }\n\
    \    if count > 0 {\n        result.append((count - 1) * 10 + arr[arr.count])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpx34e_5mo/tmpx34e_5mo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b764f593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b764f28ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b764f28a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b764f2897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx34e_5mo                        0x00005653eba886b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b764f77f460 __libc_start_main +
    245

    6    tmpx34e_5mo                        0x00005653eba88299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for value in arr {\n        if value == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += value\n     \
    \   }\n    }\n    if ones > 0 {\n        result.sort(by: { (a, b) -> Bool in\n\
    \            return a > b\n        })\n    } else {\n        result.sort(by: {\
    \ (a, b) -> Bool in\n            return a < b\n        })\n    }\n    for value\
    \ in arr {\n        if value == 1 {\n            ones += 1\n        } else {\n\
    \            decimal -= value\n        }\n    }\n    for _ in 0..<ones {\n   \
    \     result.insert(decimal, decimal)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7mnpbuls.swift:40:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(decimal, decimal)\n               ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        result.append(x)\n    }\n    for x in zeros {\n\
    \        result.append(x)\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones[0]--\n        } else {\n            zeros[0]--\n        }\n  \
    \  }\n    for x in ones {\n        result.append(x)\n    }\n    for x in zeros\
    \ {\n        result.append(x)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpndh9izsw.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpndh9izsw.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmpndh9izsw.swift:31:20: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            ones[0]--\n \
    \                  ^~\n/tmp/tmpndh9izsw.swift:33:21: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            zeros[0]--\n              \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] == 0 {\n            result.remove(at: idx)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9fr6_012/tmp9fr6_012.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b3917c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b360eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77b360e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77b360d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fr6_012                        0x0000557ce36d1674 <unavailable> + 5748

    5    libc.so.6                          0x00002b77b3b03460 __libc_start_main +
    245

    6    tmp9fr6_012                        0x0000557ce36d1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    if arr.count\
    \ < 2 {\n        return result\n    }\n    var ones = [0]\n    var zeros = [0]\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            zeros[0]++\n        }\n    }\n    for x in arr {\n        if\
    \ x == 1 {\n            ones[0]--\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            zeros[0]++\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]--\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]++\n        } else {\n            zeros[0]++\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]++\n        } else {\n            zeros[0]++\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]++\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]--\n        } else {\n            zeros[0]--\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]--\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]--\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]++\n        } else {\n            zeros[0]--\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n        }\
    \ else {\n            zeros[0]--\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones[0]++\n        } else {\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n\
    \        } else {\n            zeros[0]--\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones[0]++\n        } else {\n          \
    \  zeros[0]--\n        }\n    }\n    for x in arr {\n        if x == 1 {\n   \
    \         ones[0]--\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpri059ec1.swift:177:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpri059ec1.swift:152:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmpri059ec1.swift:177:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpri059ec1.swift:12:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmpri059ec1.swift:21:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpri059ec1.swift:23:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmpri059ec1.swift:28:20: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            ones[0]--\n \
    \                  ^~\n/tmp/tmpri059ec1.swift:30:21: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            zeros[0]--\n              \
    \      ^~\n/tmp/tmpri059ec1.swift:35:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpri059ec1.swift:37:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmpri059ec1.swift:42:20: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            ones[0]--\n \
    \                  ^~\n/tmp/tmpri059ec1.swift:44:21: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            zeros[0]--\n              \
    \      ^~\n/tmp/tmpri059ec1.swift:49:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpri059ec1.swift:51:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones.append(num)\n        } else {\n            zeros.append(num)\n\
    \        }\n    }\n    for num in ones {\n        result.append(num)\n    }\n\
    \    for num in zeros {\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpparjxdfe/tmpparjxdfe.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f1932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f1629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f1629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f16287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpparjxdfe                        0x000055a0e2e8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b37f1b1e460 __libc_start_main +
    245

    6    tmpparjxdfe                        0x000055a0e2e8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n                ones = 0\n            }\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_zyi21qv/tmp_zyi21qv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeae05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeadd53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeadd53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeadd527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zyi21qv                        0x00005637bc359604 <unavailable> + 5636

    5    libc.so.6                          0x00002afeae248460 __libc_start_main +
    245

    6    tmp_zyi21qv                        0x00005637bc3591e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones == 0 {\n        result = arr\n    } else {\n        result\
    \ = arr.sorted()\n    }\n    if ones > 0 {\n        result = result.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqoek_4o2/tmpqoek_4o2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1fbce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1fb9dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1fb9da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1fb9d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqoek_4o2                        0x000055e1c7c79654 <unavailable> + 5716

    5    libc.so.6                          0x00002ac1fbecf460 __libc_start_main +
    245

    6    tmpqoek_4o2                        0x000055e1c7c79239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sortedArr = arr\n    sortedArr\
    \ = arr.sorted()\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpew4ivz2v/tmpew4ivz2v.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcb1c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcb191ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcb191a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcb19197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpew4ivz2v                        0x0000562955a40494 <unavailable> + 5268

    5    libc.so.6                          0x00002afcb1e0f460 __libc_start_main +
    245

    6    tmpew4ivz2v                        0x0000562955a40079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for x in arr {\n        ones += x\n        decimal\
    \ += x * (ones - decimal)\n    }\n    for x in arr {\n        if ones == 0 {\n\
    \            result.insert(decimal, x)\n        } else {\n            result.insert(decimal,\
    \ x - decimal)\n        }\n        ones = x - ones\n        decimal = x - decimal\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4q06zuyk.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(decimal, x)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4q06zuyk.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ x - decimal)\n                   ^\nSwift.Array:11:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for el in\
    \ arr {\n        let bin = String(bin: el, radix: 2)\n        let index = bin.index(bin.startIndex,\
    \ offsetBy: 1)\n        let count = bin[index..<bin.endIndex].count\n        result.append(el)\n\
    \        result.sort(by: { (a, b) -> Bool in\n            if a > b {\n       \
    \         return true\n            } else if a < b {\n                return false\n\
    \            } else {\n                return count > 0 ? a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedAscending : a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedDescending\n            }\n        })\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6k6d9mge.swift:15:25: error: extraneous argument label 'bin:' in\
    \ call\n        let bin = String(bin: el, radix: 2)\n                        ^~~~~~\n\
    \                         \n/tmp/tmp6k6d9mge.swift:25:38: error: value of type\
    \ 'Int' has no member 'compare'\n                return count > 0 ? a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedAscending : a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedDescending\n                                   ~ ^~~~~~~\n\
    /tmp/tmp6k6d9mge.swift:25:123: error: value of type 'Int' has no member 'compare'\n\
    \                return count > 0 ? a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedAscending : a.compare(Int(bin[index..<bin.endIndex].prefix(upTo:\
    \ index))) == .orderedDescending\n                                           \
    \                                                                            \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979958
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n                ones = 0\n            }\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_zyi21qv/tmp_zyi21qv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeae05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeadd53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeadd53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeadd527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zyi21qv                        0x00005637bc359604 <unavailable> + 5636

    5    libc.so.6                          0x00002afeae248460 __libc_start_main +
    245

    6    tmp_zyi21qv                        0x00005637bc3591e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979956
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var count\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        if count >\
    \ 0 {\n            result.append(element)\n        }\n    }\n    if count > 0\
    \ {\n        result.append(count)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmppglyi9hi/tmppglyi9hi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8be05e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8be02dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8be02dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8be02db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppglyi9hi                        0x000055defe14d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8be07d1460 __libc_start_main +
    245

    6    tmppglyi9hi                        0x000055defe14d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            continue\n        }\n        let decimal = arr[index] >> 1\n    \
    \    if decimal > 0 {\n            result[index] = decimal\n        } else {\n\
    \            result[index] = -decimal\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpgno1nglk/tmpgno1nglk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab7f47ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab7f171b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab7f171988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab7f1707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgno1nglk                        0x0000563f8c12f674 <unavailable> + 5748

    5    libc.so.6                          0x00002aab7f666460 __libc_start_main +
    245

    6    tmpgno1nglk                        0x0000563f8c12f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for x in arr {\n        if x == 1 {\n   \
    \         oneCount++\n        } else {\n            decimalCount += Int(x) * Int(oneCount)\n\
    \            oneCount = 0\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            result.append(x)\n        } else {\n            decimalCount\
    \ += Int(x) * Int(oneCount)\n            oneCount = 0\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            result.append(x)\n        } else\
    \ {\n            decimalCount += Int(x) * Int(oneCount)\n            oneCount\
    \ = 0\n        }\n    }\n    for x in arr {\n        if x == 1 {\n           \
    \ result.append(x)\n        } else {\n            decimalCount += Int(x) * Int(oneCount)\n\
    \            oneCount = 0\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            result.append(x)\n        } else {\n            decimalCount\
    \ += Int(x) * Int(oneCount)\n            oneCount = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpis6jc7s3.swift:18:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            ones = ones * 2 + 1\n        }\n        result.append(num)\n\
    \    }\n    if ones == 0 {\n        return result\n    }\n    var decimal = ones\n\
    \    var decimalIndex = 0\n    var decimalSum = 0\n    for num in arr {\n    \
    \    decimalSum += num\n        if decimalSum > decimal {\n            decimal\
    \ = decimalSum\n            decimalIndex = num\n        }\n    }\n    result.insert(decimalIndex,\
    \ arr[decimalIndex])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpv4n60k_c.swift:36:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(decimalIndex, arr[decimalIndex])\n      \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for v in arr {\n        if v == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += v\n        }\n    }\n    if ones\
    \ > 0 {\n        ones = dec / ones\n        dec = dec % ones\n    }\n    for v\
    \ in arr {\n        if v == 1 {\n            dec -= 1\n            if dec > 0\
    \ {\n                dec -= 1\n            }\n        } else {\n            dec\
    \ += v\n        }\n        result.insert(dec, v)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpft53m69t.swift:36:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(dec, v)\n               ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           result += [element]\n        } else {\n            result += [element\
    \ - decimal + ones]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpa09r91mf/tmpa09r91mf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04736c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04733b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04733b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04733b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa09r91mf                        0x0000556669922694 <unavailable> + 5780

    5    libc.so.6                          0x00002b04738ac460 __libc_start_main +
    245

    6    tmpa09r91mf                        0x0000556669922279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted: [Int] = []\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let count = bin.characters.filter({\
    \ $0 == \"1\" }).count\n        sorted.append(Int(count) * 10)\n        sorted.append(num)\n\
    \    }\n    sorted.sort()\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpcaashhbi.swift:16:25: error: 'characters' is unavailable: Please\
    \ use String directly\n        let count = bin.characters.filter({ $0 == \"1\"\
    \ }).count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var decimals = [0]\n    var decimalsIndex = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones[decimalsIndex] += 1\n        } else\
    \ {\n            decimals[decimalsIndex] += 1\n        }\n        decimalsIndex\
    \ += 1\n    }\n    for decimalIndex in 0..<decimals.count {\n        let decimal\
    \ = decimals[decimalIndex]\n        if decimal == 1 {\n            decimalsIndex\
    \ -= 1\n        }\n        let onesCount = ones[decimalsIndex]\n        if onesCount\
    \ > 0 {\n            decimalsIndex += 1\n        }\n        let onesIndex = decimalsIndex\n\
    \        result.append(arr[decimalIndex])\n        ones[onesIndex] -= onesCount\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eed4c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eed1be561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2eed1be286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2eed1be13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2eed1bdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2eecfbd7ec <unavailable> + 186348

    6    tmp71fd0oj7                        0x000055612d8bb4fe <unavailable> + 9470

    7    tmp71fd0oj7                        0x000055612d8ba794 <unavailable> + 6036

    8    libc.so.6                          0x00002b2eed6b3460 __libc_start_main +
    245

    9    tmp71fd0oj7                        0x000055612d8ba469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    for k in arr {\n        if k == 1 {\n \
    \           result.append(k)\n            i += 1\n        } else {\n         \
    \   if j == i {\n                result.append(k)\n                j += 1\n  \
    \          } else {\n                if k > result[j] {\n                    result.append(k)\n\
    \                    j += 1\n                } else {\n                    result.append(result[j])\n\
    \                    j += 1\n                }\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqpgrkqyq/tmpqpgrkqyq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7846952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7846649b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7846649988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78466487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpgrkqyq                        0x0000557924b35654 <unavailable> + 5716

    5    libc.so.6                          0x00002b7846b3e460 __libc_start_main +
    245

    6    tmpqpgrkqyq                        0x0000557924b35239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        if x == 1 {\n            result.insert(result.count, x)\n   \
    \     } else {\n            let y = x % 10\n            let z = x / 10\n     \
    \       let z = z * 10 + y\n            result.insert(result.count, z)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1pkh0__2.swift:16:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(result.count, x)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp1pkh0__2.swift:20:17:\
    \ error: invalid redeclaration of 'z'\n            let z = z * 10 + y\n      \
    \          ^\n/tmp/tmp1pkh0__2.swift:19:17: note: 'z' previously declared here\n\
    \            let z = x / 10\n                ^\n/tmp/tmp1pkh0__2.swift:21:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(result.count,\
    \ z)\n                   ^\n/tmp/tmp1pkh0__2.swift:21:20: note: found candidate\
    \ with type '(__owned Int, Int) -> ()'\n            result.insert(result.count,\
    \ z)\n                   ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        ones = number & 1\n\
    \        decimal = number >> 1\n        if decimal > 0 {\n            result.append(decimal)\n\
    \        } else {\n            result.append(ones)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzprqmsqu/tmpzprqmsqu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1484cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14849aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14849ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14849ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzprqmsqu                        0x000055f44c33b604 <unavailable> + 5636

    5    libc.so.6                          0x00002b1484ea3460 __libc_start_main +
    245

    6    tmpzprqmsqu                        0x000055f44c33b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for v in arr {\n        if v == 1 {\n            ones += 1\n      \
    \  } else {\n            if ones > 0 {\n                result.insert(result.count\
    \ - ones, v)\n                ones = 0\n            } else {\n               \
    \ result.insert(result.count, v)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3n6a44hu.swift:20:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count - ones, v)\n   \
    \                    ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp3n6a44hu.swift:23:24: error: no exact matches in call\
    \ to instance method 'insert'\n                result.insert(result.count, v)\n\
    \                       ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            oneCount = 0\n        }\n        if oneCount > 0\
    \ {\n            result.insert(result.count, num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        result.insert(result.count, oneCount)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyfyxif8h.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpyfyxif8h.swift:22:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(result.count,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpyfyxif8h.swift:26:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(result.count, oneCount)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        result.append(x)\n    }\n    for x in zeros {\n\
    \        result.append(x)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7jmlk2hx.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmp7jmlk2hx.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr.filter{$0 ==\
    \ 1}.count\n        result[i] = ones\n        if ones > 0 {\n            result[i]\
    \ = Int(pow(2.0, Double(ones)) - 1.0)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqzkrgiii.swift:18:29: error: cannot find 'pow' in scope\n     \
    \       result[i] = Int(pow(2.0, Double(ones)) - 1.0)\n                      \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpxm2ocgpt/tmpxm2ocgpt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a23fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a20f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a20f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a20f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxm2ocgpt                        0x0000560438b96724 <unavailable> + 5924

    5    libc.so.6                          0x00002b92a25ea460 __libc_start_main +
    245

    6    tmpxm2ocgpt                        0x0000560438b96309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones == 0 {\n                result.append(num)\n\
    \            } else {\n                if num < result[result.count - 1] {\n \
    \                   result.append(num)\n                } else {\n           \
    \         result.insert(result.count - 1, num)\n                }\n          \
    \  }\n            ones = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp21ky_9m.swift:25:28: error: no exact matches in call to instance\
    \ method 'insert'\n                    result.insert(result.count - 1, num)\n\
    \                           ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [1]\n    for x in arr {\n        if x == 1 {\n            ones = append(ones,\
    \ 1)\n        } else {\n            ones = append(ones, 0)\n        }\n    }\n\
    \    for x in ones {\n        if x == 1 {\n            result = append(result,\
    \ x)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptosq62ov.swift:17:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 1)\n                   ^~~~~~\n/tmp/tmptosq62ov.swift:19:20:\
    \ error: cannot find 'append' in scope\n            ones = append(ones, 0)\n \
    \                  ^~~~~~\n/tmp/tmptosq62ov.swift:24:22: error: cannot find 'append'\
    \ in scope\n            result = append(result, x)\n                     ^~~~~~\n\
    /tmp/tmptosq62ov.swift:26:22: error: cannot find 'append' in scope\n         \
    \   result = append(result, 0)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                oneCount--\n\
    \                result.insert(result.count - oneCount, num)\n            } else\
    \ {\n                result.insert(result.count, num)\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4y4inwa6.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp4y4inwa6.swift:20:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      oneCount--\n                        ^~\n/tmp/tmp4y4inwa6.swift:21:24: error:\
    \ no exact matches in call to instance method 'insert'\n                result.insert(result.count\
    \ - oneCount, num)\n                       ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n/tmp/tmp4y4inwa6.swift:23:24: error: no\
    \ exact matches in call to instance method 'insert'\n                result.insert(result.count,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659824930
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.sort()\n\
    \                oneCount = 0\n            }\n            result.append(element)\n\
    \        }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6ekvh_6s.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for index in\
    \ stride(from: 0, to: arr.count, by: 1) {\n        let ones = arr[index].trailingZeroBitCount\n\
    \        if ones > 0 {\n            let decimal = arr[index].trailingZeroBitCount\
    \ / 2\n            let index = result.index(of: decimal)\n            result[index]\
    \ = arr[index]\n            result[index + 1] = arr[index + 1]\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgbn8bbh1.swift:18:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: decimal)\n  \
    \                             ^\n/tmp/tmpgbn8bbh1.swift:18:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: decimal)\n               \
    \                ^~~~~\n                               firstIndex\n/tmp/tmpgbn8bbh1.swift:19:20:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result[index] = arr[index]\n                   ^\n/tmp/tmpgbn8bbh1.swift:19:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = arr[index]\n                   ^\n      \
    \                   ?? <#default value#>\n/tmp/tmpgbn8bbh1.swift:19:20: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result[index] = arr[index]\n                   ^\n              \
    \          !\n/tmp/tmpgbn8bbh1.swift:19:33: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result[index] = arr[index]\n                      \
    \          ^\n/tmp/tmpgbn8bbh1.swift:19:33: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result[index]\
    \ = arr[index]\n                                ^\n                          \
    \            ?? <#default value#>\n/tmp/tmpgbn8bbh1.swift:19:33: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result[index] = arr[index]\n                                ^\n         \
    \                            !\n/tmp/tmpgbn8bbh1.swift:20:20: error: value of\
    \ optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to\
    \ a value of type 'Array<Int>.Index' (aka 'Int')\n            result[index + 1]\
    \ = arr[index + 1]\n                   ^\n/tmp/tmpgbn8bbh1.swift:20:20: note:\
    \ coalesce using '??' to provid"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for el in arr {\n        if el == 1 {\n            ones += 1\n    \
    \    } else {\n            if ones == 0 {\n                result.append(el)\n\
    \            } else {\n                result.insert(result.count - ones, el)\n\
    \            }\n            ones = 0\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphqbjpvon.swift:22:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count - ones, el)\n  \
    \                     ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.bitCount(&ones)\n\
    \        decimal = num.decimalValue()\n        if ones > 0 {\n            result.insert(decimal,\
    \ num)\n        } else {\n            result.insert(-decimal, num)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz0g7a13v.swift:17:20: error: value of type 'Int' has no member\
    \ 'bitCount'\n        ones = num.bitCount(&ones)\n               ~~~ ^~~~~~~~\n\
    /tmp/tmpz0g7a13v.swift:18:23: error: value of type 'Int' has no member 'decimalValue'\n\
    \        decimal = num.decimalValue()\n                  ~~~ ^~~~~~~~~~~~\n/tmp/tmpz0g7a13v.swift:20:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpz0g7a13v.swift:22:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(-decimal, num)\n    \
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 0 {\n            continue\n     \
    \   }\n        if i == 0 {\n            result.append(num)\n        } else {\n\
    \            if num == result[i-1] {\n                result.append(num)\n   \
    \         } else {\n                result.insert(i, num)\n            }\n   \
    \     }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2zpjfws_.swift:25:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(i, num)\n                   \
    \    ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            dec += num\n        }\n    }\n \
    \   for num in arr {\n        if num == 1 {\n            dec -= num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num\n        } else {\n            dec += num\n  \
    \      }\n        if dec > 0 {\n            dec -= num\n        } else {\n   \
    \         dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n        } else {\n            dec += num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num\n        } else {\n            dec += num\n  \
    \      }\n        if dec > 0 {\n            dec -= num\n        } else {\n   \
    \         dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n        } else {\n            dec += num\n        }\n\
    \        if dec > 0 {\n            dec -= num\n        } else {\n            dec\
    \ += num\n        }\n        if dec > 0 {\n            dec -= num\n        } else\
    \ {\n            dec += num\n        }\n        if dec > 0 {\n            dec\
    \ -= num\n        } else {\n            dec += num\n        }\n        if dec\
    \ > 0 {\n            dec -= num\n        } else {\n            dec += num\n  \
    \      }\n        if dec > 0 {\n            dec -= num\n        } else {\n   \
    \         dec += num\n        }\n        if dec > 0 {\n            dec -= num\n\
    \        } else {\n            dec += num\n        }\n        if dec > 0 {\n \
    \           dec -= num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptxf5w0r_.swift:151:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmptxf5w0r_.swift:23:20:\
    \ note: to match this opening '{'\n    for num in arr {\n                   ^\n\
    /tmp/tmptxf5w0r_.swift:151:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmptxf5w0r_.swift:12:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmptxf5w0r_.swift:132:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmptxf5w0r_.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr)\n        ones = 0\n\
    \        decimal = 0\n    }\n    for num in arr {\n        if num == 1 {\n   \
    \         ones += 1\n        } else {\n            decimal -= num\n        }\n\
    \        if decimal < 0 {\n            decimal = 0\n            ones += 1\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += num\n        }\n        if decimal\
    \ > 0 {\n            decimal = 0\n            ones += 1\n        }\n    }\n  \
    \  for num in arr {\n        if num == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal -= num\n        }\n        if decimal < 0 {\n       \
    \     decimal = 0\n            ones += 1\n        }\n        if decimal > 0 {\n\
    \            decimal = 0\n            ones += 1\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += num\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal < 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n        if decimal < 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal > 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n       \
    \ if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += num\n        }\n        if decimal > 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal < 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal > 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal > 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n        if decimal < 0 {\n            decimal = 0\n     \
    \       ones += 1\n        }\n        if decimal > 0 {\n            decimal =\
    \ 0\n            ones += 1\n        }\n        if decimal < 0 {\n            decimal\
    \ = 0\n            ones += 1\n        }\n        if decimal > 0 {\n          \
    \  decimal = 0\n            ones += 1\n        }\n        if decimal > 0 {\n \
    \           decimal = 0\n            ones += 1\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3w3kosq2.swift:24:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal += num\n        }\n\
    \    }\n    if ones > 0 {\n        result = sort_array(arr: arr)\n    }\n    if\
    \ ones == 0 {\n        result.sort()\n    }\n    if ones < 0 {\n        result.sort(by:\
    \ {$0 < $1})\n    }\n    if decimal > 0 {\n        result = result.sorted()\n\
    \    }\n    if decimal < 0 {\n        result.sort(by: {$0 > $1})\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 0 {\n            swap(&result[i], &result[i+1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpm9msbl5w.swift:16:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[i], &result[i+1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(i, i+1)\n/tmp/tmpm9msbl5w.swift:16:30: note: conflicting\
    \ access is here\n            swap(&result[i], &result[i+1])\n               \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    for x in arr {\n        ones = x & 1\n        result.insert(x, ones)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aOnes = a & 1\n \
    \       let bOnes = b & 1\n        if aOnes == bOnes {\n            return a <\
    \ b\n        }\n        return aOnes < bOnes\n    })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpubv0gj8c.swift:17:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(x, ones)\n               ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.insert(result.count\
    \ - oneCount, num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(result.count, num)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpx4si3pfq.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpx4si3pfq.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count - oneCount, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpx4si3pfq.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let count = bin.count\n\
    \        let decimal = Int(bin, radix: 10)\n        if count == 1 {\n        \
    \    result.append(decimal)\n        } else {\n            let maxIndex = result.count\
    \ - 1\n            let maxValue = result[maxIndex]\n            if decimal > maxValue\
    \ {\n                result[maxIndex] = decimal\n            }\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9kpt2313.swift:19:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(decimal)\n\
    \                          ^\n/tmp/tmp9kpt2313.swift:19:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(decimal)\n                          ^\n                    \
    \              ?? <#default value#>\n/tmp/tmp9kpt2313.swift:19:27: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.append(decimal)\n                          ^\n                   \
    \              !\n/tmp/tmp9kpt2313.swift:23:16: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n            if decimal >\
    \ maxValue {\n               ^\n/tmp/tmp9kpt2313.swift:23:16: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if decimal > maxValue {\n               ^\n                       ?? <#default\
    \ value#>\n/tmp/tmp9kpt2313.swift:23:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            if decimal > maxValue\
    \ {\n               ^\n                      !\n/tmp/tmp9kpt2313.swift:24:36:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \                result[maxIndex] = decimal\n                                \
    \   ^\n/tmp/tmp9kpt2313.swift:24:36: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n                result[maxIndex] = decimal\n\
    \                                   ^\n                                      \
    \     ?? <#default value#>\n/tmp/tmp9kpt2313.swift:24:36: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n              \
    \  result[maxIndex] = decimal\n                                   ^\n        \
    \                                  !\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                oneCount--\n\
    \                result.sort()\n            }\n            oneCount = 0\n    \
    \    }\n        result.append(element)\n    }\n    if oneCount > 0 {\n       \
    \ result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzupywshd.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpzupywshd.swift:20:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      oneCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ ones = -ones\n        }\n        let decimal = arr[i].truncatingRemainder(dividingBy:\
    \ 1)\n        if decimal != 0 {\n            result[i] = decimal\n        }\n\
    \        if ones == 0 {\n            result[i] = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2hopedhy.swift:15:27: error: value of type 'Int' has no member\
    \ 'bitCount'\n        let ones = arr[i].bitCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmp2hopedhy.swift:19:30: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let decimal = arr[i].truncatingRemainder(dividingBy:\
    \ 1)\n                      ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var sorted = [Int]()\n    for num\
    \ in arr {\n        let bin = String(num, radix: 2)\n        let count = bin.characters.filter({\
    \ $0 == \"1\" }).count\n        sorted.append(count)\n    }\n    sorted.sort()\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpc28cgsj7.swift:16:25: error: 'characters' is unavailable: Please\
    \ use String directly\n        let count = bin.characters.filter({ $0 == \"1\"\
    \ }).count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for x in arr {\n        if x == 1 {\n      \
    \      ones[0]++\n        } else {\n            zeros[0]++\n        }\n    }\n\
    \    for x in ones {\n        if x > 0 {\n            result.insert(result.count-1,\
    \ x)\n        }\n    }\n    for x in zeros {\n        if x > 0 {\n           \
    \ result.insert(result.count-1, x)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpniz42wt4.swift:18:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            ones[0]++\n                   ^~\n/tmp/tmpniz42wt4.swift:20:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  zeros[0]++\n                    ^~\n/tmp/tmpniz42wt4.swift:25:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(result.count-1,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpniz42wt4.swift:30:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(result.count-1, x)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpxm2ocgpt/tmpxm2ocgpt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a23fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a20f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a20f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a20f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxm2ocgpt                        0x0000560438b96724 <unavailable> + 5924

    5    libc.so.6                          0x00002b92a25ea460 __libc_start_main +
    245

    6    tmpxm2ocgpt                        0x0000560438b96309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] == 0 {\n            continue\n      \
    \  }\n        j := i\n        for j > 0 && arr[j-1] == 0 {\n            j--\n\
    \        }\n        if j > i {\n            swap(&result[i], &result[j])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_slt7m19.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp_slt7m19.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp_slt7m19.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp_slt7m19.swift:18:10:\
    \ error: consecutive statements on a line must be separated by ';'\n        j\
    \ := i\n         ^\n         ;\n/tmp/tmp_slt7m19.swift:18:11: error: expected\
    \ expression\n        j := i\n          ^\n/tmp/tmp_slt7m19.swift:19:15: error:\
    \ expected 'in' after for-each pattern\n        for j > 0 && arr[j-1] == 0 {\n\
    \              ^\n/tmp/tmp_slt7m19.swift:19:15: error: unary operator cannot be\
    \ separated from its operand\n        for j > 0 && arr[j-1] == 0 {\n         \
    \     ^~\n               \n/tmp/tmp_slt7m19.swift:19:15: error: '>' is not a prefix\
    \ unary operator\n        for j > 0 && arr[j-1] == 0 {\n              ^\n/tmp/tmp_slt7m19.swift:19:26:\
    \ error: cannot find 'j' in scope\n        for j > 0 && arr[j-1] == 0 {\n    \
    \                     ^\n/tmp/tmp_slt7m19.swift:19:19: error: for-in loop requires\
    \ 'Bool' to conform to 'Sequence'\n        for j > 0 && arr[j-1] == 0 {\n    \
    \          ~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for number in arr {\n        if number == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += number\n    \
    \    }\n    }\n    if ones == arr.count {\n        result.sort()\n    } else {\n\
    \        result.sort(by: {\n            decimal.compare($0, $1) == .orderedAscending\n\
    \        })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnttpaxp4.swift:27:21: error: value of type 'Int' has no member\
    \ 'compare'\n            decimal.compare($0, $1) == .orderedAscending\n      \
    \      ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in\
    \ arr {\n        let binary = binary(x)\n        let decimal = Int(binary)\n \
    \       if decimal > 0 {\n            result.insert(decimal, at: 0)\n        }\
    \ else {\n            result.insert(-decimal, at: 0)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp07ofg7eu.swift:15:22: error: use of local variable 'binary' before\
    \ its declaration\n        let binary = binary(x)\n                     ^\n/tmp/tmp07ofg7eu.swift:15:13:\
    \ note: 'binary' declared here\n        let binary = binary(x)\n            ^\n\
    /tmp/tmp07ofg7eu.swift:20:27: error: cannot convert value of type 'Float16' to\
    \ expected argument type 'Int'\n            result.insert(-decimal, at: 0)\n \
    \                         ^\n                          Int(    )\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpac0vhd0t/tmpac0vhd0t.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac0vhd0t                        0x000055e48589f494 <unavailable> + 5268

    5    libc.so.6                          0x00002ba4e4503460 __libc_start_main +
    245

    6    tmpac0vhd0t                        0x000055e48589f079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824829
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var oneCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.insert(result.count\
    \ - oneCount, element)\n                oneCount = 0\n            } else {\n \
    \               result.insert(result.count, element)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0u1wahg3.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp0u1wahg3.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count - oneCount, element)\n                       ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp0u1wahg3.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, element)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].decimalValue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbcn7uu7u.swift:15:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmpbcn7uu7u.swift:19:32: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            result[i] = arr[i].decimalValue\n              \
    \          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979957
