name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>>\
  \ next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n\
  /// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int])\
  \ -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    var smallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            smallest = el\n        }\n    }\n    return smallest", "    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n \
    \       return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    if lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1]\
    \ {\n        return nil\n    }\n    return lst[0]", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    if lst.count <= 1 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var smallestIndex = lst.startIndex\n    for i in 1..lst.count {\n\
    \        if lst[i] < smallest {\n            smallest = lst[i]\n            smallestIndex\
    \ = i\n        }\n    }\n\n    return smallestIndex < lst.endIndex ? lst[smallestIndex]\
    \ : nil", "    guard lst.count > 0 else {\n        return nil\n    }\n    guard\
    \ lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n\
    \    let index = lst.index(of: smallest)\n    if index == 0 {\n        return\
    \ nil\n    }\n    let next = lst[index + 1]\n    return next", "    var smallest\
    \ = lst[0]\n    var smallestIndex = -1\n    for index in 1..<lst.count {\n   \
    \     if lst[index] < smallest {\n            smallest = lst[index]\n        \
    \    smallestIndex = index\n        }\n    }\n    return smallestIndex == lst.count\
    \ ? nil : smallest", "    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] < lst[1] {\n \
    \       return lst[1]\n    }\n    return lst[0]", "    var smallest = lst[0]\n\
    \    for x in lst {\n        if x < smallest {\n            smallest = x\n   \
    \     }\n    }\n    return smallest", "    guard lst.count > 0 else {\n      \
    \  return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for value in lst {\n        if\
    \ value < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = value\n        } else if value < secondSmallest {\n            secondSmallest\
    \ = value\n        }\n    }\n    return secondSmallest", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    for element in lst\
    \ {\n        if element < smallest {\n            smallest = element\n       \
    \ }\n    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in 2..lst.count {\n        if\
    \ smallest.isLess(lst[index]) {\n            secondSmallest = smallest\n     \
    \       smallest = lst[index]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n\
    \        if lst[i] < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n     \
    \       secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n  \
    \          smallest = el\n        }\n    }\n    return smallest", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n    if lst.count > 1 {\n        return lst[1]\n\
    \    }\n    return nil", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i]) {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n\
    \    }\n    if lst[1] < lst[0] {\n        return lst[1]\n    }\n    return lst[0]",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var smallestIndex\
    \ = lst.startIndex\n    for i in lst.startIndex..<lst.endIndex {\n        if lst[i]\
    \ < smallest {\n            smallest = lst[i]\n            smallestIndex = i\n\
    \        }\n    }\n\n    return smallest", "    guard lst.count > 0 else {\n \
    \       return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n  \
    \  }\n    if lst.count == 2 {\n        return lst[0]\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n    return lst[0]", "    if lst.count == 0\
    \ {\n        return nil\n    }\n    if lst.count > 1 {\n        return lst[1]\n\
    \    }\n    return nil", "    if lst.count == 0 {\n        return nil\n    }\n\
    \    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n    return lst[0]", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    for x in lst\
    \ {\n        if x < smallest {\n            smallest = x\n        }\n    }\n \
    \   return smallest", "    var smallest: Int? = nil\n    for x in lst {\n    \
    \    if smallest == nil || x < smallest {\n            smallest = x\n        }\n\
    \    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n \
    \   for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ lst[i] < secondSmallest {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n \
    \       return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if lst.count == 0 {\n        return nil\n   \
    \ }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[1]\n    }\n    return lst[0]", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for\
    \ x in lst {\n        if x < smallest {\n            smallest = x\n        }\n\
    \    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var smallestIndex = -1\n    for index in 1..<lst.count\
    \ {\n        if lst[index] < smallest {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ == lst.count ? nil : lst[smallestIndex + 1]", "    var smallest = lst[0]\n \
    \   var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count >= 2 else {\n        return nil\n    }\n   \
    \ guard lst.first > lst.last else {\n        return nil\n    }\n    var smallest\
    \ = lst.first\n    var secondSmallest = lst.first\n    for element in lst.dropFirst()\
    \ {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else {\n            if element < secondSmallest\
    \ {\n                secondSmallest = element\n            }\n        }\n    }\n\
    \    return secondSmallest", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    if lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1]\
    \ {\n        return nil\n    }\n    return lst[0]", "    if lst.count < 2 {\n\
    \        return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n  \
    \  }\n    if lst[0] == lst[1] {\n        return nil\n    }\n    return lst[0]",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n    let\
    \ rest = lst[1..<lst.count]\n    return rest.sorted(by: { $0 < $1 }).first", " \
    \   if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n\
    \        return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    if lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1]\
    \ {\n        return nil\n    }\n    return lst[1]", "    guard lst.count > 0 else\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var smallestIndex\
    \ = 0\n    for index in 1..lst.count {\n        if lst[index] < smallest {\n \
    \           smallest = lst[index]\n            smallestIndex = index\n       \
    \ }\n    }\n    return smallestIndex == lst.count ? nil : lst[smallestIndex +\
    \ 1]", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el\
    \ in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    var\
    \ smallest = lst[0]\n    for el in lst {\n        if el < smallest {\n       \
    \     smallest = el\n        }\n    }\n    return smallest", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return lst[0]",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let min = lst[0]\n    let minIndex\
    \ = lst.index(of: min)\n    if minIndex == 0 {\n        return nil\n    }\n  \
    \  let minIndex = minIndex! + 1\n    return lst[minIndex]", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    for el in\
    \ lst {\n        if el < smallest {\n            smallest = el\n        }\n  \
    \  }\n    return smallest", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    guard lst.count > 2 else {\n \
    \       return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    for x in lst {\n        if x < smallest\
    \ {\n            smallest = x\n        }\n    }\n    return smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var smallestIndex = lst.startIndex\n    for index in lst.startIndex..<lst.endIndex\
    \ {\n        if smallestIndex == lst.endIndex {\n            return nil\n    \
    \    }\n        if lst[index] < smallest {\n            smallest = lst[index]\n\
    \            smallestIndex = index\n        }\n    }\n    return smallest", " \
    \   var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n   \
    \         smallest = x\n        }\n    }\n    return smallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    let smallest = lst[0]\n    let rest = lst[1..<lst.count]\n\
    \    if let smallestIndex = rest.index(of: smallest) {\n        return rest[smallestIndex\
    \ + 1]\n    }\n    return nil", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n \
    \   let smallest = lst[0]\n    let secondSmallest = lst[1]\n    if smallest <\
    \ secondSmallest {\n        return secondSmallest\n    }\n    return smallest",
  "    var smallest: Int?\n    for element in lst {\n        if smallest == nil ||\
    \ element < smallest {\n            smallest = element\n        }\n    }\n   \
    \ return smallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[0]\n    }\n    let smallest\
    \ = lst[0]\n    let secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        return secondSmallest\n    }\n    return smallest", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n    return nil",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n   \
    \     return lst[1]\n    }\n    if lst[0] == lst[1] {\n        return nil\n  \
    \  }\n    if lst[0] < lst[1] {\n        return lst[0]\n    }\n    return lst[1]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count <= 2 else {\n   \
    \     return nil\n    }\n    let smallest = lst[0]\n    let secondSmallest = lst[1]\n\
    \    if smallest > secondSmallest {\n        return secondSmallest\n    }\n  \
    \  return smallest", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n \
    \       return lst[0]\n    }\n    if lst.count > 2 {\n        return nil\n   \
    \ }\n    if let mid = lst.index(of: lst[0]) {\n        if let right = lst.index(of:\
    \ lst[mid+1], offsetBy: 1) {\n            return lst[mid+1]\n        } else {\n\
    \            return nil\n        }\n    } else {\n        return nil\n    }",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n     \
    \   if lst[i] < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n          \
    \  secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", "  \
    \  var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest.isLesserThan(lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count == 1 {\n \
    \       return lst[0]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in\
    \ lst.indices {\n        if index < 2 {\n            continue\n        }\n   \
    \     if smallest.isLesserThan(lst[index]) {\n            secondSmallest = lst[index]\n\
    \        }\n        smallest = lst[index]\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest >\
    \ lst[i] {\n            secondSmallest = smallest\n            smallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n \
    \   }\n    if lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count\
    \ > 2 {\n        let mid = lst.count / 2\n        let left = lst[0 ..< mid]\n\
    \        let right = lst[mid..<lst.count]\n        return min(left, right).next_smallest()\n\
    \    }\n    return nil", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest > lst[i] {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if secondSmallest\
    \ > lst[i] {\n                secondSmallest = lst[i]\n            }\n       \
    \ }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n        return\
    \ nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0]\
    \ < lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    for element\
    \ in lst {\n        if element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n\n    return secondSmallest", "    var smallest = lst[0]\n   \
    \ var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n\
    \            secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count <= 2 else {\n        return nil\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest.isLess(&lst[index])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    for element in lst\
    \ {\n        if element < smallest {\n            smallest = element\n       \
    \ }\n    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest: Int?\n    var\
    \ smallestIndex: Int?\n    for index in 0..<lst.count {\n        if smallest ==\
    \ nil || lst[index] < smallest {\n            smallest = lst[index]\n        \
    \    smallestIndex = index\n        }\n    }\n    return smallestIndex", "   \
    \ var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n     \
    \       smallest = x\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n\
    \    }\n    if lst[0] == lst[1] {\n        return nil\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    if lst.count\
    \ == 0 {\n        return nil\n    }\n\n    if lst.count == 1 {\n        return\
    \ lst[0]\n    }\n\n    if lst[0] < lst[1] {\n        return lst[1]\n    }\n\n\
    \    return lst[0]", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if smallest*secondSmallest > lst[index] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[index]\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n\
    \            smallest = lst[i]\n        } else {\n            secondSmallest =\
    \ lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n\
    \    for index in lst.startIndex..<lst.endIndex {\n        if smallestIndex ==\
    \ lst.endIndex {\n            return nil\n        }\n        if lst[index] < smallest\
    \ {\n            smallest = lst[index]\n            smallestIndex = index\n  \
    \      }\n    }\n    return smallest", "    guard lst.count > 0 else {\n     \
    \   return nil\n    }\n\n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n\
    \    for i in lst.indices {\n        if smallestIndex == i {\n            continue\n\
    \        }\n        if lst[i] < smallest {\n            smallest = lst[i]\n  \
    \          smallestIndex = i\n        }\n    }\n    return smallest", "    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n\
    \        if element < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = element\n        } else if element < secondSmallest {\n  \
    \          secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  for x in lst {\n        if x < smallest {\n            smallest = x\n     \
    \   }\n    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for value in lst {\n        if value < smallest {\n          \
    \  secondSmallest = smallest\n            smallest = value\n        } else if\
    \ value < secondSmallest {\n            secondSmallest = value\n        }\n  \
    \  }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for value in lst\
    \ {\n        if value < smallest {\n            secondSmallest = smallest\n  \
    \          smallest = value\n        } else if value < secondSmallest {\n    \
    \        secondSmallest = value\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    if let mid = lst.index(of: lst[0])\
    \ {\n        return lst[mid]\n    }\n    return nil", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for element in lst {\n        if element < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = element\n        }\
    \ else if element < secondSmallest {\n            secondSmallest = element\n \
    \       }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else\
    \ {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var smallestIndex\
    \ = lst.startIndex\n    for i in lst.indices {\n        if smallestIndex == i\
    \ {\n            continue\n        }\n        if lst[i] < smallest {\n       \
    \     smallest = lst[i]\n            smallestIndex = i\n        }\n    }\n\n \
    \   return smallest", "    var smallest = lst[0]\n    var smallest_index = -1\n\
    \    for index in 1..<lst.count {\n        if lst[index] < smallest {\n      \
    \      smallest = lst[index]\n            smallest_index = index\n        }\n\
    \    }\n    if smallest_index == -1 {\n        return nil\n    }\n    return smallest",
  "    var smallest = lst[0]\n    var smallestIndex = -1\n    for index in 1..<lst.count\
    \ {\n        if lst[index] < smallest {\n            smallest = lst[index]\n \
    \           smallestIndex = index\n        }\n    }\n    return smallestIndex\
    \ < lst.count ? lst[smallestIndex + 1] : nil", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for element in lst {\n        if element <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = element\n\
    \        } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..<lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    guard lst.count > 1 else {\n        return\
    \ lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var smallestIndex\
    \ = -1\n    for index in 1..<lst.count {\n        if lst[index] < smallest {\n\
    \            smallest = lst[index]\n            smallestIndex = index\n      \
    \  }\n    }\n    return smallestIndex == lst.count ? nil : smallest", "    var\
    \ smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n         \
    \   smallest = x\n        }\n    }\n    return smallest", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n\n    let smallest = lst[0]\n    var smallestIndex =\
    \ lst.startIndex\n    for index in lst.indices {\n        if index < smallestIndex\
    \ {\n            smallestIndex = index\n        }\n    }\n\n    if smallestIndex\
    \ < lst.endIndex {\n        return lst[smallestIndex + 1]\n    }\n\n    return\
    \ nil", "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count >\
    \ 2 {\n        return lst[1]\n    }\n    if lst.count == 2 {\n        return lst[1]\n\
    \    }\n    return nil", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    let smallest = lst[0]\n    let index = lst.index(of: smallest)\n\
    \n    if index == 0 {\n        return nil\n    }\n\n    let next = lst[index +\
    \ 1]\n    if next == smallest {\n        return nil\n    }\n\n    return next",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n  \
    \      return lst[1]\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n\
    \    }\n    return lst[0]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            secondSmallest = lst[i]\n        }\n    }\n    return\
    \ secondSmallest", "    if lst.count < 2 {\n        return nil\n    }\n    if\
    \ lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] == lst[1] {\n \
    \       return nil\n    }\n    if lst[0] < lst[1] {\n        return lst[1]\n \
    \   }\n    return lst[0]", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count <= 2 else {\n        return nil\n    }\n    guard\
    \ let first = lst[0] else {\n        return nil\n    }\n    guard let second =\
    \ lst[1] else {\n        return nil\n    }\n    if first > second {\n        return\
    \ nil\n    }\n    return second", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for value in lst {\n        if value < smallest {\n          \
    \  secondSmallest = smallest\n            smallest = value\n        } else if\
    \ value < secondSmallest {\n            secondSmallest = value\n        }\n  \
    \  }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ lst[i] < secondSmallest {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n\n    return secondSmallest", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in 2..lst.count {\n        if lst[index] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[index]\n\
    \        } else if lst[index] < secondSmallest {\n            secondSmallest =\
    \ lst[index]\n        }\n    }\n    return secondSmallest", "    var smallest:\
    \ Int? = nil\n    for x in lst {\n        if smallest == nil || x < smallest {\n\
    \            smallest = x\n        }\n    }\n    return smallest", "    var smallest:\
    \ Int? = nil\n    for el in lst {\n        if smallest == nil || el < smallest\
    \ {\n            smallest = el\n        }\n    }\n    return smallest", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    for\
    \ element in lst {\n        if element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    for element in lst {\n\
    \        if element < smallest {\n            smallest = element\n        }\n\
    \    }\n    return smallest", "    var smallest = lst[0]\n    for x in lst {\n\
    \        if x < smallest {\n            smallest = x\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest\
    \ {\n            smallest = x\n        }\n    }\n    return smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count >= 2 else\
    \ {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    for x\
    \ in lst {\n        if x < smallest {\n            smallest = x\n        }\n \
    \   }\n    return smallest", "    var smallest: Int? = nil\n    for x in lst {\n\
    \        if smallest == nil || x < smallest {\n            smallest = x\n    \
    \    }\n    }\n    return smallest", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count\
    \ > 2 {\n        let pivot = lst.sort()[0]\n        var left = lst.filter{$0 >\
    \ pivot}\n        var right = lst.filter{$0 < pivot}\n        if left.count >\
    \ 0 {\n            return left[1]\n        }\n        if right.count > 0 {\n \
    \           return right[1]\n        }\n    }\n    return nil", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    let min = lst[0]\n    let minIndex = lst.index(of: min)\n    let minValue\
    \ = lst[minIndex]\n    lst.indices.forEach {\n        if let value = lst[$0] {\n\
    \            if value < minValue {\n                min = value\n            \
    \    minIndex = $0\n            }\n        }\n    }\n    return min", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n       \
    \ return lst[1]\n    }\n    var smallest = lst[0]\n    for element in lst {\n\
    \        if element < smallest {\n            smallest = element\n        }\n\
    \    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for i in 1..<lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for x in lst {\n        if x < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = x\n       \
    \ } else if x < secondSmallest {\n            secondSmallest = x\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n\
    \    for index in lst.startIndex..<lst.endIndex {\n        if smallestIndex ==\
    \ lst.endIndex {\n            return nil\n        }\n        if lst[index] < smallest\
    \ {\n            smallest = lst[index]\n            smallestIndex = index\n  \
    \      }\n    }\n    return smallest", "    guard lst.count > 0 else {\n     \
    \   return nil\n    }\n\n    if lst.count <= 1 {\n        return nil\n    }\n\n\
    \    let min = lst[0]\n    let minIndex = lst.index(of: min)\n    let minValue\
    \ = lst[minIndex]\n\n    lst.indices.forEach { index in\n        if index != minIndex\
    \ {\n            if lst[index] < minValue {\n                min = lst[index]\n\
    \                minIndex = index\n                minValue = lst[index]\n   \
    \         }\n        }\n    }\n\n    return min", "    guard lst.count > 0 else\
    \ {\n        return nil\n    }\n    guard lst.count <= 2 else {\n        return\
    \ nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n    if lst.count\
    \ > 2 {\n        return lst[lst.count - 2]\n    }\n    return nil", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLesserThan(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            secondSmallest = lst[i]\n        }\n    }\n    return\
    \ secondSmallest", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in 2..lst.count\
    \ {\n        if smallest > lst[index] {\n            secondSmallest = smallest\n\
    \            smallest = lst[index]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    let smallest = lst[0]\n    let rest = lst[1..<lst.count]\n\
    \    if let smallestIndex = rest.index(of: smallest) {\n        return rest[smallestIndex\
    \ + 1]\n    }\n    return nil", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var smallestIndex = lst.startIndex\n\
    \    for i in 1..lst.count {\n        if lst[i] < smallest {\n            smallest\
    \ = lst[i]\n            smallestIndex = i\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ <= 2 else {\n        return nil\n    }\n    let smallest = lst[0]\n    let secondSmallest\
    \ = lst[1]\n    if smallest < secondSmallest {\n        return smallest\n    }\n\
    \    return secondSmallest", "    var smallest = lst[0]\n    for x in lst {\n\
    \        if x < smallest {\n            smallest = x\n        }\n    }\n    return\
    \ smallest", "    guard lst.count > 0 else {\n        return nil\n    }\n    guard\
    \ lst.count > 1 else {\n        return lst[0]\n    }\n    if lst[0] < lst[1] {\n\
    \        return lst[1]\n    }\n    return lst[0]", "    if lst.count < 2 {\n \
    \       return nil\n    }\n    if lst.count > 2 {\n        return lst[1]\n   \
    \ }\n    if lst[0] == lst[1] {\n        return nil\n    }\n    if lst[0] < lst[1]\
    \ {\n        return lst[0]\n    }\n    return lst[1]", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if smallest > lst[i] {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ {\n            if secondSmallest > lst[i] {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst\
    \ {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    if lst.count > 2 {\n   \
    \     return lst[1]\n    }\n    if lst[0] == lst[1] {\n        return nil\n  \
    \  }\n    if lst[0] < lst[1] {\n        return lst[0]\n    }\n    return lst[1]",
  "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest {\n    \
    \        smallest = x\n        }\n    }\n    return smallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    for value in\
    \ lst {\n        if value < smallest {\n            smallest = value\n       \
    \ }\n    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for i in 1..lst.count {\n        if smallest.isLess(&lst[i]) {\n        \
    \    secondSmallest = smallest\n            smallest = lst[i]\n        }\n   \
    \ }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n    }\n \
    \   var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for index in lst.indices\
    \ {\n        if index < lst.count - 1 {\n            if smallest > lst[index +\
    \ 1] {\n                secondSmallest = smallest\n                smallest =\
    \ lst[index + 1]\n            }\n        } else {\n            if smallest > secondSmallest\
    \ {\n                return smallest\n            }\n        }\n    }\n    return\
    \ nil", "    var smallest = lst[0]\n    for x in lst {\n        if x < smallest\
    \ {\n            smallest = x\n        }\n    }\n    return smallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else\
    \ {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..lst.count {\n        if smallest.isLess(&lst[i]) {\n\
    \            secondSmallest = lst[i]\n            smallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    var smallest: Int?\n    var smallestIndex:\
    \ Int?\n    for index in 0..<lst.count {\n        if smallest == nil {\n     \
    \       smallest = lst[index]\n            smallestIndex = index\n        }\n\
    \        if lst[index] < smallest {\n            smallest = lst[index]\n     \
    \       smallestIndex = index\n        }\n    }\n    return smallest", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for index in lst.indices {\n        if smallest*secondSmallest\
    \ > lst[index] {\n            secondSmallest = smallest\n            smallest\
    \ = lst[index]\n        }\n    }\n    return secondSmallest", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    if lst.count == 2 {\n        return lst[1]\n\
    \    }\n    if lst.count == 1 {\n        return lst[0]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count <= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    guard lst.count > 1 else {\n        return\
    \ lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    let smallest =\
    \ lst[0]\n    var smallestIndex = 0\n    var smallestIndex2 = 0\n\n    for index\
    \ in 1..<lst.count {\n        if lst[index] < smallest {\n            smallestIndex\
    \ = index\n            smallest = lst[index]\n        }\n        if lst[index]\
    \ < lst[smallestIndex] {\n            smallestIndex2 = index\n        }\n    }\n\
    \n    if smallestIndex2 == 0 {\n        return nil\n    }\n\n    return lst[smallestIndex2]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    if lst.count ==\
    \ 0 {\n        return nil\n    }\n    if lst.count < 2 {\n        return nil\n\
    \    }\n    if lst.count > 2 {\n        return lst[1]\n    }\n    if lst[0] ==\
    \ lst[1] {\n        return nil\n    }\n    return lst[0]", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    if lst.count == 2 {\n        return lst[1]\n    }\n    if lst[0] <\
    \ lst[1] {\n        return lst[1]\n    }\n    return lst[0]", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for x in lst {\n        if x < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = x\n        } else if x < secondSmallest {\n\
    \            secondSmallest = x\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var smallestIndex = lst.startIndex\n    for index in lst.startIndex..<lst.endIndex\
    \ {\n        if smallestIndex == lst.startIndex {\n            break\n       \
    \ }\n\n        if lst[index] < smallest {\n            smallest = lst[index]\n\
    \            smallestIndex = index\n        }\n    }\n\n    return smallest"]
stop_tokens:
- "\n}"
