language: swift
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  var result: [String] = []\n    \n    for word in words {\n        if let word\
    \ = word.lowercased() {\n            result.append(word)\n        }\n    }\n \
    \   \n    if result.count == 0 {\n        return .failure(Int(txt.characters.count))\n\
    \    }\n    \n    if result.count % 2 == 1 {\n        return .failure(Int(txt.characters.count))\n\
    \    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeq0muqsq.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpeq0muqsq.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeq0muqsq.swift:30:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeq0muqsq.swift:34:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    guard words.count % 2 == 0 else { return .failure(0)\
    \ }\n    guard let chars = words.map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1zr3gkmi.swift:18:2000: error: expected member name following '.'\n\
    \    guard let chars = words.map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(String.init).map(Stri"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result\
    \ = [String]()\n    \n    for word in words {\n        if let wordCount = word.characters.count\
    \ {\n            if wordCount > 1 {\n                result.append(word)\n   \
    \         } else {\n                result.append(String(word.characters.map {\
    \ String($0) }))\n            }\n        } else {\n            result.append(word)\n\
    \        }\n    }\n    \n    if result.count == 0 {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    if result.count == 1 {\n        return .success(result)\n  \
    \  }\n    \n    if result.count > 1 {\n        return .success(result)\n    }\n\
    \    \n    return .success(result.map { String($0.lowercased()) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyq71_2dm.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpyq71_2dm.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpyq71_2dm.swift:34:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   return .success(words.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_hl5x73g.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().characters.count }\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx98tshpr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx98tshpr.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var words:\
    \ [String] = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \        }\n        \n        for letter in letters {\n            guard let letter\
    \ = letter.lowercased() else {\n                return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \            }\n            \n            if letters.count % 2 == 0 {\n      \
    \          words.append(letter)\n            } else {\n                words.append(letter)\n\
    \                words.append(letter)\n            }\n        }\n    }\n    \n\
    \    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0y2snmj1.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp0y2snmj1.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp0y2snmj1.swift:22:34:\
    \ error: value of type 'String' has no member 'components'\n        guard let\
    \ letters = word.components(separatedBy: \",\") else {\n                     \
    \       ~~~~ ^~~~~~~~~~\n/tmp/tmp0y2snmj1.swift:23:33: error: cannot find 'arc4random_uniform'\
    \ in scope\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordsInAlphabet = words.filter { $0.count > 0 }\n    let wordsInAlphabetCount\
    \ = wordsInAlphabet.count\n    let oddLetterCount = wordsInAlphabet.filter { $0.count\
    \ % 2 == 1 }.count\n    \n    if wordCount == 0 {\n        return .failure(wordCount)\n\
    \    }\n    \n    if wordsInAlphabetCount == 0 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 1 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 2 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 3 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 4 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 5 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 6 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 7 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 8 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 9 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 10 {\n        return\
    \ .success(wordsInAlphabet)\n    }\n    \n    if wordsInAlphabetCount == wordCount\
    \ - 11 {\n        return .success(wordsInAlphabet)\n    }\n    \n    if wordsInAlphabetCount\
    \ == wordCount - 12 {\n        return .success(wordsInAlphabet)\n    }\n    \n\
    \    if wordsInAlphabetCount == wordCount - 13 {\n        return .success(wordsInAlphabet)\n\
    \    }\n    \n    if wordsInAlphabetCount == wordCount - 14 {\n        return\
    \ .success(wordsInAlphabet)\n    }\n    \n    if wordsInAlphabetCount == wordCount\
    \ - 15 {\n        return .success(wordsInAlphabet)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdcio4xrx.swift:113:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpdcio4xrx.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpdcio4xrx.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpdcio4xrx.swift:94:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let firstLetter\
    \ = words[0].characters.first!\n    let lastLetter = words[wordCount - 1].characters.last!\n\
    \    if firstLetter != lastLetter {\n        return .failure(wordCount)\n    }\n\
    \    let letterCount = firstLetter - 'a' + 1\n    if letterCount % 2 != 0 {\n\
    \        return .failure(letterCount)\n    }\n    return .success(words)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpob4y6e5z.swift:28:37: error: single-quoted string literal found,\
    \ use '\"'\n    let letterCount = firstLetter - 'a' + 1\n                    \
    \                ^~~\n                                    \"a\"\n/tmp/tmpob4y6e5z.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let commaWords = words.filter\
    \ { $0 == \",\" }\n    if commaWords.count == 0 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    }\n    return .success(words.map { $0.lowercased()\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbmi6rgcz.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(0))\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for word in words {\n        if let wordString = word.trimmingCharacters(in:\
    \ .whitespacesAndNewlines), !wordString.isEmpty {\n            result.append(wordString)\n\
    \        }\n    }\n    \n    if result.count == 0 {\n        return .failure(Int(0))\n\
    \    }\n    \n    if result.count > 1 {\n        return .success(result)\n   \
    \ }\n    \n    let lowercaseLetters = result.count\n    \n    if lowercaseLetters\
    \ % 2 == 1 {\n        return .success(result)\n    }\n    \n    return .success(Array(result.prefix(Int(lowercaseLetters\
    \ / 2))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzgthbpnk.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpzgthbpnk.swift:24:58: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n        if let wordString\
    \ = word.trimmingCharacters(in: .whitespacesAndNewlines), !wordString.isEmpty\
    \ {\n                                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    let wordCountWithCommas = words.count + words.count - 1\n    \n    if\
    \ wordCountWithCommas == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    \n    return .success(words.map { $0.lowercased() })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsbzr850a.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord = words[words.count\
    \ - 1]\n    let firstLetter = firstWord.characters.first!\n    let lastLetter\
    \ = lastWord.characters.last!\n    let firstLetterUppercase = firstLetter.isUppercase\n\
    \    let lastLetterUppercase = lastLetter.isUppercase\n    let firstLetterLowercase\
    \ = firstLetter.isLowercase\n    let lastLetterLowercase = lastLetter.isLowercase\n\
    \    let firstLetterLetterOrder = firstLetterUppercase ? firstLetterLowercase\
    \ : firstLetterUppercase\n    let lastLetterLetterOrder = lastLetterUppercase\
    \ ? lastLetterLowercase : lastLetterUppercase\n    let firstLetterLetterOrderOdd\
    \ = firstLetterLetterOrder & 1\n    let lastLetterLetterOrderOdd = lastLetterLetterOrder\
    \ & 1\n    let firstLetterLetterOrderEven = firstLetterLetterOrder >> 1\n    let\
    \ lastLetterLetterOrderEven = lastLetterLetterOrder >> 1\n    let firstLetterLetterOrderOddEven\
    \ = firstLetterLetterOrderOdd | firstLetterLetterOrderEven\n    let lastLetterLetterOrderOddEven\
    \ = lastLetterLetterOrderOdd | lastLetterLetterOrderEven\n    let firstLetterLetterOrderOddEvenOdd\
    \ = firstLetterLetterOrderOddEven & 1\n    let lastLetterLetterOrderOddEvenOdd\
    \ = lastLetterLetterOrderOddEven & 1\n    let firstLetterLetterOrderOddEvenEven\
    \ = firstLetterLetterOrderOddEven >> 1\n    let lastLetterLetterOrderOddEvenEven\
    \ = lastLetterLetterOrderOddEven >> 1\n    let firstLetterLetterOrderOddEvenOddEven\
    \ = firstLetterLetterOrderOddEvenOdd | firstLetterLetterOrderOddEvenEven\n   \
    \ let lastLetterLetterOrderOddEvenOddEven = lastLetterLetterOrderOddEvenOdd |\
    \ lastLetterLetterOrderOddEvenEven\n    let firstLetterLetterOrderOddEvenOddOddEven\
    \ = firstLetterLetterOrderOddEvenOddEven & 1\n    let lastLetterLetterOrderOddEvenOddOddEven\
    \ = lastLetterLetterOrderOddEvenOddEven & 1\n    let firstLetterLetterOrderOddEvenOddOddEvenOdd\
    \ = firstLetterLetterOrderOddEvenOddEven >> 1\n    let lastLetterLetterOrderOddEvenOddOddEvenOd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgiufe4j6.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpgiufe4j6.swift:47:9: error: type annotation missing\
    \ in pattern\n    let lastLetterLetterOrderOddEvenOddOddEvenOd\n        ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let commaWords\
    \ = words.filter {$0 == \",\"}\n    if commaWords.count == 0 {\n        return\
    \ .success(words.map {String($0)})\n    }\n    return .success(words.map {String($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6pa5ytk3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp6pa5ytk3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let wordCount = words.count\n\
    \    let charCount = txt.characters.count\n    if charCount % wordCount != 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let chars = Array(txt.characters)\n\
    \    let charsCount = chars.count\n    let charsArray = chars.map { String($0)\
    \ }\n    let charsArrayCount = charsArray.count\n    let charsArrayCount = charsArrayCount\
    \ / wordCount\n    let charsArrayCount = charsArrayCount + 1\n    let charsArrayCount\
    \ = charsArrayCount % wordCount\n    let charsArrayCount = charsArrayCount < wordCount\
    \ ? charsArrayCount : wordCount\n    let charsArrayCount = charsArrayCount < charsCount\
    \ ? charsArrayCount : charsCount\n    let charsArrayCount = charsArrayCount <\
    \ wordCount ? wordCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : wordCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < wordCount ? wordCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : wordCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < wordCount ? wordCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : wordCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < wordCount ? wordCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : wordCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < wordCount ? wordCount : charsArrayCount\n    let charsArrayCount = charsArrayCount\
    \ < charsCount ? charsCount : wordCount\n    let charsArrayCount = charsArrayCount\
    \ < char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp2819f5px.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp2819f5px.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2819f5px.swift:23:25: error: 'characters' is unavailable:\
    \ Please use String directly\n    let charCount = txt.characters.count\n     \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2819f5px.swift:25:33: error: 'characters' is unavailable: Please\
    \ use String directly\n        return .failure(Int(txt.characters.count))\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2819f5px.swift:27:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let chars = Array(txt.characters)\n        \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2819f5px.swift:50:45: error: cannot find 'char' in scope\n    let\
    \ charsArrayCount = charsArrayCount < char\n                                 \
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount2\
    \ = words.count - 1\n    if wordCount == wordCount2 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 1 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 2 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 3 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 4 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 5 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 6 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 7 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 8 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 9 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 10 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 11 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 12 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 13 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 14 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 15 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 16 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 17 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 18 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 19 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 20 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 21 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 22 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 23 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 24 {\n        return .success(words)\n\
    \    }\n    if wordCount == wordCount2 + 25 {\n        return .success(words)\n\
    \    }\n    return .failure(wordCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp03d50fdh.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let letterCount\
    \ = words.reduce(0) { (result, word) -> Int in\n        let letterCount = word.count\n\
    \        if letterCount == 1 {\n            return result + 1\n        }\n   \
    \     return result + letterCount\n    }\n    if letterCount % 2 == 1 {\n    \
    \    return .success(words.map { $0.lowercased() })\n    }\n    return .success(words.map\
    \ { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmp_l_nwz.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpmp_l_nwz.swift:28:23: error: cannot convert return\
    \ expression of type 'String' to return type 'Int'\n        return result + letterCount\n\
    \               ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let words = words.compactMap { $0.lowercased()\
    \ }\n    let even = words.filter { $0.count % 2 == 0 }\n    let odd = words.filter\
    \ { $0.count % 2 != 0 }\n    return .success(even.count + odd.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzxx1n3db.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = wordCount + words.count - 1\n    let wordCountWithCommasWithOddOrder\
    \ = wordCountWithCommas + words.count - 1\n    if wordCountWithCommasWithOddOrder\
    \ % 2 == 1 {\n        return .success(words.map { $0.lowercased() })\n    }\n\
    \    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp52eeitel.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp52eeitel.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    guard words.count % 2 == 0 else {\n       \
    \ return .failure(words.count / 2)\n    }\n    let letters = words.map { $0.lowercased()\
    \ }\n    return .success(letters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp3427jbos.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord\
    \ = words[words.count - 1]\n    if firstWord.count > lastWord.count {\n      \
    \  return .failure(firstWord.count)\n    }\n    if firstWord.count < lastWord.count\
    \ {\n        return .success(firstWord)\n    }\n    let firstLetter = firstWord.characters.first!\n\
    \    let lastLetter = lastWord.characters.last!\n    if firstLetter > lastLetter\
    \ {\n        return .failure(firstLetter)\n    }\n    if firstLetter < lastLetter\
    \ {\n        return .success(firstWord)\n    }\n    let firstLetterIndex = firstWord.index(firstLetter)\n\
    \    let lastLetterIndex = lastWord.index(lastLetter)\n    let firstLetterCount\
    \ = firstLetterIndex - firstWord.startIndex\n    let lastLetterCount = lastWord.endIndex\
    \ - lastLetterIndex\n    if firstLetterCount % 2 != 0 {\n        return .failure(firstLetterCount)\n\
    \    }\n    if lastLetterCount % 2 != 0 {\n        return .failure(lastLetterCount)\n\
    \    }\n    return .success(firstWord.prefix(firstLetterCount))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpw6blib4e.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let commaWords = words.filter\
    \ { $0 == \",\" }\n    if commaWords.count == 0 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    }\n    return .success(words.map { $0.lowercased()\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbmi6rgcz.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = words.count - words.filter({ $0 == \",\" }).count\n\
    \    let wordCountWithCommasWithOddOrder = words.count - words.filter({ $0 >=\
    \ ord('a') && $0 <= ord('z') }).count\n    \n    if wordCount == 0 {\n       \
    \ return .failure(wordCount)\n    }\n    \n    if wordCountWithCommas == 0 {\n\
    \        return .success(words)\n    }\n    \n    if wordCountWithCommasWithOddOrder\
    \ == 0 {\n        return .success(words)\n    }\n    \n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpl0kvkg_o.swift:18:82: error: single-quoted string literal found,\
    \ use '\"'\n    let wordCountWithCommasWithOddOrder = words.count - words.filter({\
    \ $0 >= ord('a') && $0 <= ord('z') }).count\n                                \
    \                                                 ^~~\n                      \
    \                                                           \"a\"\n/tmp/tmpl0kvkg_o.swift:18:100:\
    \ error: single-quoted string literal found, use '\"'\n    let wordCountWithCommasWithOddOrder\
    \ = words.count - words.filter({ $0 >= ord('a') && $0 <= ord('z') }).count\n \
    \                                                                            \
    \                      ^~~\n                                                 \
    \                                                  \"z\"\n/tmp/tmpl0kvkg_o.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpl0kvkg_o.swift:18:78: error:\
    \ cannot find 'ord' in scope\n    let wordCountWithCommasWithOddOrder = words.count\
    \ - words.filter({ $0 >= ord('a') && $0 <= ord('z') }).count\n               \
    \                                                              ^~~\n/tmp/tmpl0kvkg_o.swift:18:96:\
    \ error: cannot find 'ord' in scope\n    let wordCountWithCommasWithOddOrder =\
    \ words.count - words.filter({ $0 >= ord('a') && $0 <= ord('z') }).count\n   \
    \                                                                            \
    \                ^~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    var result: [String] = []\n    \n    for word in words {\n \
    \       if let letters = word.components(separatedBy: \",\") {\n            for\
    \ letter in letters {\n                if let count = letters.filter({ $0.isLetter\
    \ }).count {\n                    if count % 2 == 1 {\n                      \
    \  result.append(letter)\n                    }\n                }\n         \
    \   }\n        } else {\n            result.append(word)\n        }\n    }\n \
    \   \n    if result.count == 0 {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpiif6a17u.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpiif6a17u.swift:17:29: error: cannot find 'arc4random_uniform'\
    \ in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpiif6a17u.swift:37:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  if words.count == 1 {\n        return .success(words)\n    }\n    \n    let\
    \ firstWord = words[0]\n    \n    if firstWord.characters.count == 0 {\n     \
    \   return .failure(Int(firstWord.characters.count))\n    }\n    \n    if firstWord.characters.count\
    \ == 1 {\n        return .success(words)\n    }\n    \n    let firstLetter = firstWord.characters.first!\n\
    \    \n    if firstLetter >= 97 && firstLetter <= 122 {\n        return .success(words)\n\
    \    }\n    \n    if firstLetter >= 65 && firstLetter <= 90 {\n        return\
    \ .success(words)\n    }\n    \n    if firstLetter >= 48 && firstLetter <= 57\
    \ {\n        return .success(words)\n    }\n    \n    return .failure(Int(firstWord.characters.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx459gcav.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx459gcav.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.split(separator: \" \") else {\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n    }\n    \n    var wordList = [String]()\n  \
    \  for word in words {\n        if let word = word.trimmingCharacters(in: .whitespacesAndNewlines),\
    \ !word.isEmpty {\n            wordList.append(word)\n        }\n    }\n    \n\
    \    if wordList.count == 0 {\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \    }\n    \n    if wordList.count == 1 {\n        return .success(wordList)\n\
    \    }\n    \n    if wordList.count % 2 == 1 {\n        return .success(wordList)\n\
    \    }\n    \n    if wordList.count % 2 == 0 {\n        let evenWords = wordList.filter{$0.count\
    \ % 2 == 0}\n        let oddWords = wordList.filter{$0.count % 2 != 0}\n     \
    \   return .success(evenWords + oddWords)\n    }\n    \n    return .failure(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeswky2ew.swift:16:16: error: cannot find 'Err' in scope\n     \
    \   return Err(Int(errorCode: ErrorCode.invalidArgument))\n               ^~~\n\
    /tmp/tmpeswky2ew.swift:16:35: error: cannot find 'ErrorCode' in scope\n      \
    \  return Err(Int(errorCode: ErrorCode.invalidArgument))\n                   \
    \               ^~~~~~~~~\n/tmp/tmpeswky2ew.swift:16:20: error: no exact matches\
    \ in call to initializer \n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Float16) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Float) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Double) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Float80) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Builtin.Int64) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(Builtin.Word) -> Int'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:16:20: note: found candidate with\
    \ type '(String) -> Int?'\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \                   ^\n/tmp/tmpeswky2ew.swift:15:11: error: initializer for conditional\
    \ binding must have Optional type, not '[String.SubSequence]' (aka 'Array<Substring>')\n\
    \    guard let words = txt.split(separator: \" \") else {\n          ^       \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeswky2ew.swift:21:28: error: value of\
    \ type 'String.SubSequence' (aka 'Substring') has no member 'trimmingCharacters'\n\
    \        if let word = word.trimm"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    if words.count > 2 {\n     \
    \   return .failure(words.count)\n    }\n    return .success(words.map { $0.lowercased()\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp2d121ql1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().characters.count }\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx98tshpr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx98tshpr.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count < 2 {\n        return .failure(comma.count)\n   \
    \ }\n    let letters = words.map { $0.lowercased().count % 2 != 0 }\n    return\
    \ .success(letters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpma_5ik0b.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let words = words.map { $0.lowercased() }\n\
    \    let wordCount = words.count\n    let wordCountOddOrder = wordCount % 2\n\
    \    let wordCountEvenOrder = wordCount - wordCountOddOrder\n    let wordCountEvenOrderLetters\
    \ = wordCountEvenOrder % 26\n    let wordCountEvenOrderLettersOddOrder = wordCountEvenOrderLetters\
    \ % 2\n    \n    if wordCountEvenOrderLettersOddOrder == 0 {\n        return .success(words)\n\
    \    } else if wordCountEvenOrderLettersOddOrder == 1 {\n        return .success(words.dropLast())\n\
    \    } else {\n        return .success(words.dropLast().dropLast())\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpj0yhok7p.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    if words.count % 2 == 1 {\n        return\
    \ .success(words.prefix(words.count / 2))\n    }\n    return .success(words.prefix(words.count\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpw0d6kke9.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let wordCount = words.count\n\
    \    let charCount = txt.characters.count\n    let oddCharCount = charCount -\
    \ wordCount\n    let oddCharCount = oddCharCount % 2\n    if oddCharCount == 0\
    \ {\n        return .success(words)\n    }\n    if oddCharCount == 1 {\n     \
    \   return .success(Array(words[0..<wordCount-1]))\n    }\n    return .failure(Int(txt.characters.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp37_gu9i6.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp37_gu9i6.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp37_gu9i6.swift:23:25: error: 'characters' is unavailable:\
    \ Please use String directly\n    let charCount = txt.characters.count\n     \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp37_gu9i6.swift:32:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    return .failure(Int(txt.characters.count))\n      \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpt6xb41w2.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpt6xb41w2.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    if words.count % 2 == 1 {\n        return\
    \ .failure(words.count)\n    }\n    let evenWords = words.filter{$0.count % 2\
    \ == 0}\n    let evenWordsCount = evenWords.count\n    let evenWordsLowercaseCount\
    \ = evenWords.filter{$0.lowercased().count % 2 == 0}\n    let evenWordsLowercaseCountCount\
    \ = evenWordsLowercaseCount.count\n    let evenWordsLowercaseCountLowercaseCount\
    \ = evenWordsLowercaseCount.filter{$0.lowercased().lowercased().count % 2 == 0}\n\
    \    let evenWordsLowercaseCountLowercaseCountCount = evenWordsLowercaseCountLowercaseCount.count\n\
    \    return .success(evenWords)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpho_pfkkk.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let chars = words.map({ $0.lowercased()\
    \ })\n    let odd = chars.filter { $0.count % 2 == 1 }\n    if odd.count == 0\
    \ {\n        return .success(chars)\n    }\n    return .success(odd.count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvwu4re28.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let chars = words.map(String.init)\n\
    \    let count = chars.reduce(0) { (acc, char) -> Int in\n        if char.lowercased()\
    \ != char {\n            acc += 1\n        }\n        return acc\n    }\n    return\
    \ .success(chars[0..<count])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpi975iryl.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpi975iryl.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  let wordCount = words.count\n    let wordArray = words.map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n    \n    if wordArray.count == 0 {\n        return\
    \ .failure(Int(txt.characters.count))\n    }\n    \n    let letterCount = txt.characters.count\n\
    \    \n    if letterCount == wordCount {\n        return .success(wordArray)\n\
    \    }\n    \n    if letterCount < wordCount {\n        return .failure(Int(letterCount))\n\
    \    }\n    \n    let oddLetters = letterCount - wordCount\n    \n    if letterCount\
    \ > wordCount {\n        return .success(wordArray.map { $0.lowercased() })\n\
    \    }\n    \n    return .success(wordArray.map { $0.lowercased() })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5rmumcdo.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp5rmumcdo.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5rmumcdo.swift:22:60: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n    let wordArray = words.map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n                   \
    \                                       ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5rmumcdo.swift:25:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ .failure(Int(txt.characters.count))\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5rmumcdo.swift:28:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    let letterCount\
    \ = txt.characters.count\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    if words.count % 2 == 1 {\n        return .success(words.prefix(words.count\
    \ / 2))\n    }\n    return .success(words.prefix(words.count / 2 + 1))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmg11bit2.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let firstWord = words[0]\n    let lastWord\
    \ = words[words.count - 1]\n    let firstLetter = firstWord.characters.first!\n\
    \    let lastLetter = lastWord.characters.first!\n    let firstLetterUppercase\
    \ = firstLetter.uppercased()\n    let lastLetterUppercase = lastLetter.uppercased()\n\
    \    let firstLetterLowercase = firstLetter\n    let lastLetterLowercase = lastLetter\n\
    \    let firstLetterUppercaseCount = firstLetterUppercase.count\n    let lastLetterUppercaseCount\
    \ = lastLetterUppercase.count\n    let firstLetterLowercaseCount = firstLetterLowercase.count\n\
    \    let lastLetterLowercaseCount = lastLetterLowercase.count\n    let firstLetterUppercaseOdd\
    \ = firstLetterUppercaseCount % 2\n    let lastLetterUppercaseOdd = lastLetterUppercaseCount\
    \ % 2\n    let firstLetterLowercaseOdd = firstLetterLowercaseCount % 2\n    let\
    \ lastLetterLowercaseOdd = lastLetterLowercaseCount % 2\n    let firstLetterUppercaseEven\
    \ = firstLetterUppercaseCount % 2 != 0\n    let lastLetterUppercaseEven = lastLetterUppercaseCount\
    \ % 2 != 0\n    let firstLetterLowercaseEven = firstLetterLowercaseCount % 2 !=\
    \ 0\n    let lastLetterLowercaseEven = lastLetterLowercaseCount % 2 != 0\n   \
    \ let firstLetterUppercaseOddEven = firstLetterUppercaseOdd && firstLetterUppercaseEven\n\
    \    let lastLetterUppercaseOddEven = lastLetterUppercaseOdd && lastLetterUppercaseEven\n\
    \    let firstLetterLowercaseOddEven = firstLetterLowercaseOdd && firstLetterLowercaseEven\n\
    \    let lastLetterLowercaseOddEven = lastLetterLowercaseOdd && lastLetterLowercaseEven\n\
    \    let firstLetterUppercaseOddEvenOdd = firstLetterUppercaseOddEven && firstLetterUppercaseOdd\n\
    \    let lastLetterUppercaseOddEvenOdd = lastLetterUppercaseOddEven && lastLetterUppercaseOdd\n\
    \    let firstLetterLowercaseOddEvenOdd = firstLetterLowercaseOddEven && firstLetterLowercaseOdd\n\
    \    let lastLetterLowercaseOddEvenOdd = lastLetterLowercaseOddEven && lastLetterLowercaseOdd\n\
    \    let firstLetterUppercaseOddEvenOddEven = firstLetterUppercaseOddEvenOdd &&\
    \ firstLetterUppercaseOddEven\n    let last\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpuefe9ga4.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpuefe9ga4.swift:46:9: error: type annotation missing\
    \ in pattern\n    let last\n        ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let chars = words.map(String.init)\n\
    \    let letters = chars.map({ String($0) }).filter({ $0.isLetter })\n    let\
    \ oddLetters = letters.filter({ $0.count % 2 == 1 })\n    if letters.count ==\
    \ 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    if letters.count\
    \ == 1 {\n        return .success(letters)\n    }\n    if letters.count == 2 {\n\
    \        return .success(letters)\n    }\n    if letters.count > 2 {\n       \
    \ return .success(letters)\n    }\n    return .success(oddLetters.count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_ctudlx6.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp_ctudlx6.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_ctudlx6.swift:26:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \        }\n        \n        for letter in letters {\n            guard let number\
    \ = Int(letter, radix: 16) else {\n                return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \            }\n            \n            if number % 2 == 1 {\n             \
    \   result.append(letter)\n            }\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return .success(result)\n    }\n    \n    if result.count %\
    \ 2 == 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbawz929i.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpbawz929i.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpbawz929i.swift:45:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.split(separator: \" \") else {\n        return Err(Int(.lowercaseLetters))\n\
    \    }\n    \n    var result: [String] = []\n    \n    for word in words {\n \
    \       if let word = word.lowercased() {\n            result.append(word)\n \
    \       }\n    }\n    \n    if result.count == 0 {\n        return Err(Int(.lowercaseLetters))\n\
    \    }\n    \n    if result.count % 2 == 1 {\n        return Err(Int(.lowercaseLetters))\n\
    \    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpezirtr7j.swift:16:16: error: cannot find 'Err' in scope\n     \
    \   return Err(Int(.lowercaseLetters))\n               ^~~\n/tmp/tmpezirtr7j.swift:16:24:\
    \ error: missing argument label 'bitPattern:' in call\n        return Err(Int(.lowercaseLetters))\n\
    \                       ^\n                       bitPattern: \n/tmp/tmpezirtr7j.swift:15:11:\
    \ error: initializer for conditional binding must have Optional type, not '[String.SubSequence]'\
    \ (aka 'Array<Substring>')\n    guard let words = txt.split(separator: \" \")\
    \ else {\n          ^           ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpezirtr7j.swift:22:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let word = word.lowercased() {\n           ^          ~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpezirtr7j.swift:28:16: error: cannot find 'Err' in scope\n        return\
    \ Err(Int(.lowercaseLetters))\n               ^~~\n/tmp/tmpezirtr7j.swift:28:24:\
    \ error: missing argument label 'bitPattern:' in call\n        return Err(Int(.lowercaseLetters))\n\
    \                       ^\n                       bitPattern: \n/tmp/tmpezirtr7j.swift:32:16:\
    \ error: cannot find 'Err' in scope\n        return Err(Int(.lowercaseLetters))\n\
    \               ^~~\n/tmp/tmpezirtr7j.swift:32:24: error: missing argument label\
    \ 'bitPattern:' in call\n        return Err(Int(.lowercaseLetters))\n        \
    \               ^\n                       bitPattern: \n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let commaWords = words.filter({\
    \ $0 == \",\" })\n    if commaWords.count == 0 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    }\n    let letters = words.map { $0.lowercased() }\n\
    \    let odd = letters.filter { $0 % 2 != 0 }\n    return .success(odd)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqie48g5a.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(25) + 1))\n    }\n  \
    \  \n    let wordCount = words.count\n    \n    let wordList = [String]()\n  \
    \  \n    for word in words {\n        let wordCount = word.count\n        \n \
    \       if wordCount == 1 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 2 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 3 {\n    \
    \        wordList.append(word)\n            continue\n        }\n        \n  \
    \      if wordCount == 4 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 5 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 6 {\n    \
    \        wordList.append(word)\n            continue\n        }\n        \n  \
    \      if wordCount == 7 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 8 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 9 {\n    \
    \        wordList.append(word)\n            continue\n        }\n        \n  \
    \      if wordCount == 10 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 11 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 12 {\n   \
    \         wordList.append(word)\n            continue\n        }\n        \n \
    \       if wordCount == 13 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 14 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 15 {\n   \
    \         wordList.append(word)\n            continue\n        }\n        \n \
    \       if wordCount == 16 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 17 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 18 {\n   \
    \         wordList.append(word)\n            continue\n        }\n        \n \
    \       if wordCount == 19 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 20 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 21 {\n   \
    \         wordList.append(word)\n            continue\n        }\n        \n \
    \       if wordCount == 22 {\n            wordList.append(word)\n            continue\n\
    \        }\n        \n        if wordCount == 23 {\n            wordList.append(word)\n\
    \            continue\n        }\n        \n        if wordCount == 24 {\n   \
    \         wordList.append(word)\n            continue\n        }\n        \n \
    \       if wordCount == 25 {\n            wordList.append(word)\n            continue\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpd7_al9eq.swift:173:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpd7_al9eq.swift:24:23: note: to match this opening '{'\n\
    \    for word in words {\n                      ^\n/tmp/tmpd7_al9eq.swift:173:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmpd7_al9eq.swift:14:56:\
    \ note: to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmpd7_al9eq.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpd7_al9eq.swift:17:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ % 2 == 1 {\n        return .success(result)\n    } else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsl8lxhkd.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpsl8lxhkd.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpsl8lxhkd.swift:30:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv8vcevv3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = words.count - 1\n    let lowerCaseLetterCount =\
    \ words.map { $0.lowercased().count }.reduce(0, +)\n    let oddLetterCount = lowerCaseLetterCount\
    \ % 2\n    \n    switch wordCount {\n    case 0:\n        return .failure(wordCount)\n\
    \    case 1:\n        return .success(words)\n    case 2:\n        return .success(words)\n\
    \    case 3:\n        return .success(words)\n    case 4:\n        return .success(words)\n\
    \    case 5:\n        return .success(words)\n    case 6:\n        return .success(words)\n\
    \    case 7:\n        return .success(words)\n    case 8:\n        return .success(words)\n\
    \    case 9:\n        return .success(words)\n    case 10:\n        return .success(words)\n\
    \    case 11:\n        return .success(words)\n    case 12:\n        return .success(words)\n\
    \    case 13:\n        return .success(words)\n    case 14:\n        return .success(words)\n\
    \    case 15:\n        return .success(words)\n    case 16:\n        return .success(words)\n\
    \    case 17:\n        return .success(words)\n    case 18:\n        return .success(words)\n\
    \    case 19:\n        return .success(words)\n    case 20:\n        return .success(words)\n\
    \    case 21:\n        return .success(words)\n    case 22:\n        return .success(words)\n\
    \    case 23:\n        return .success(words)\n    case 24:\n        return .success(words)\n\
    \    case 25:\n        return .success(words)\n    case 26:\n        return .success(words)\n\
    \    case 27:\n        return .success(words)\n    case 28:\n        return .success(words)\n\
    \    case 29:\n        return .success(words)\n    case 30:\n        return .success(words)\n\
    \    case 31:\n        return .success(words)\n    case 32:\n        return .success(words)\n\
    \    case 33:\n        return .success(words)\n    case 34:\n        return .success(words)\n\
    \    case 35:\n        return .success(words)\n    case 36:\n        return .success(words)\n\
    \    case 37:\n        return .success(words)\n    case 38:\n        return .success(words)\n\
    \    case 39:\n        return .success(words)\n    case 40:\n        return .success(words)\n\
    \    case 41:\n        return .success(words)\n    case 42:\n        return .success(words)\n\
    \    case 43:\n        return .success(words)\n    case 44:\n        return .success(words)\n\
    \    case 45:\n        return .success(words)\n    case 46:\n        return .success(words)\n\
    \    case 47:\n        return .success(words)\n    case 48:\n        return .success(words)\n\
    \    case 49:\n        return .success(words)\n    case 50:\n        return .success(words)\n\
    \    case 51:\n        return .success(words)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpso7h0tg_.swift:149:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpso7h0tg_.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpso7h0tg_.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpso7h0tg_.swift:130:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 2 {\n    \
    \    return .success(words)\n    }\n    if words.count % 2 == 1 {\n        return\
    \ .success(words.prefix(words.count / 2))\n    }\n    return .success(words.prefix(words.count\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpd1vs50is.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    if words.count == 2 {\n \
    \       return .success([\"Hello\", \"world!\"])\n    }\n    if words.count ==\
    \ 3 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 4 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 5 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 6 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 7 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 8 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 9 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 10 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 11 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 12 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 13 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 14 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 15 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 16 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 17 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 18 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 19 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 20 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 21 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 22 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 23 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 24 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 25 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 26 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 27 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    if words.count\
    \ == 28 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgs2thxsg.swift:124:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpgs2thxsg.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpgs2thxsg.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpgs2thxsg.swift:17:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgs2thxsg.swift:105:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    if words.count == 2 {\n        return .success(words)\n\
    \    }\n    if words.count == 3 {\n        return .success(words)\n    }\n   \
    \ if words.count == 4 {\n        return .success(words)\n    }\n    if words.count\
    \ == 5 {\n        return .success(words)\n    }\n    if words.count == 6 {\n \
    \       return .success(words)\n    }\n    if words.count == 7 {\n        return\
    \ .success(words)\n    }\n    if words.count == 8 {\n        return .success(words)\n\
    \    }\n    if words.count == 9 {\n        return .success(words)\n    }\n   \
    \ if words.count == 10 {\n        return .success(words)\n    }\n    if words.count\
    \ == 11 {\n        return .success(words)\n    }\n    if words.count == 12 {\n\
    \        return .success(words)\n    }\n    if words.count == 13 {\n        return\
    \ .success(words)\n    }\n    if words.count == 14 {\n        return .success(words)\n\
    \    }\n    if words.count == 15 {\n        return .success(words)\n    }\n  \
    \  if words.count == 16 {\n        return .success(words)\n    }\n    if words.count\
    \ == 17 {\n        return .success(words)\n    }\n    if words.count == 18 {\n\
    \        return .success(words)\n    }\n    if words.count == 19 {\n        return\
    \ .success(words)\n    }\n    if words.count == 20 {\n        return .success(words)\n\
    \    }\n    if words.count == 21 {\n        return .success(words)\n    }\n  \
    \  if words.count == 22 {\n        return .success(words)\n    }\n    if words.count\
    \ == 23 {\n        return .success(words)\n    }\n    if words.count == 24 {\n\
    \        return .success(words)\n    }\n    if words.count == 25 {\n        return\
    \ .success(words)\n    }\n    return .failure(Int(0))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9gbq3r6h.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result\
    \ = [String]()\n    \n    for word in words {\n        if let wordCount = word.characters.count\
    \ {\n            if wordCount % 2 == 1 {\n                result.append(word)\n\
    \            } else {\n                return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \            }\n        } else {\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \        }\n    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0fzau_2z.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp0fzau_2z.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result\
    \ = [String]()\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return .success(result)\n    }\n    \n    if result.count ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdx5k_aqx.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpdx5k_aqx.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpdx5k_aqx.swift:39:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    let wordCount2 = words.filter{ $0.isEmpty }.count\n    \n    if wordCount\
    \ == wordCount2 {\n        return .success(words.filter{ $0.isEmpty })\n    }\n\
    \    \n    if wordCount == wordCount2 + 1 {\n        return .success(words.filter{\
    \ $0.isEmpty }).append(words.filter{ $0.isEmpty })\n    }\n    \n    return .success(words.filter{\
    \ $0.isEmpty }).append(words.filter{ $0.isEmpty }).append(words.filter{ $0.isEmpty\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprfxhtvns.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmprfxhtvns.swift:29:53: error: value of type 'Result<[String],\
    \ Int>' has no member 'append'\n        return .success(words.filter{ $0.isEmpty\
    \ }).append(words.filter{ $0.isEmpty })\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n/tmp/tmprfxhtvns.swift:32:49: error: value of type 'Result<[String],\
    \ Int>' has no member 'append'\n    return .success(words.filter{ $0.isEmpty }).append(words.filter{\
    \ $0.isEmpty }).append(words.filter{ $0.isEmpty })\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let wordCount = words.count\n    let firstWord\
    \ = words[0]\n    let firstLetter = firstWord.unicodeScalars.first!\n    let firstLetterCount\
    \ = firstLetter.value\n    let firstLetterLetterCount = firstLetterCount / 26\n\
    \    if firstLetterLetterCount % 2 == 1 {\n        return .success(words)\n  \
    \  }\n    return .success(firstWord.components(separatedBy: \",\"))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hlbrkkx.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    \n    let wordCount = words.count\n  \
    \  let letterCount = words.map { $0.count }.reduce(0, +)\n    \n    if letterCount\
    \ % 2 != 0 {\n        return .failure(letterCount)\n    }\n    \n    return .success(words.map\
    \ { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpxrhwwh5_.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ % 2 == 1 {\n        return .success(result)\n    } else {\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp7313u8gf.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp7313u8gf.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7313u8gf.swift:30:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let firstWord = words[0]\n\
    \    let lastWord = words[words.count - 1]\n    if firstWord.characters.count\
    \ == 0 {\n        return .success(words)\n    }\n    if lastWord.characters.count\
    \ == 0 {\n        return .success(firstWord)\n    }\n    if firstWord.characters.count\
    \ > lastWord.characters.count {\n        return .success(firstWord)\n    }\n \
    \   if firstWord.characters.count < lastWord.characters.count {\n        return\
    \ .success(lastWord)\n    }\n    if firstWord.characters.count > lastWord.characters.count\
    \ {\n        return .success(firstWord)\n    }\n    return .success(words)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpka6s3v3f.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpka6s3v3f.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return .success(result)\n    }\n    \n    if result.count ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp249mi42s.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp249mi42s.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp249mi42s.swift:39:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  let chars = words.map { $0.characters.count }\n    \n    if chars.count ==\
    \ 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n    if\
    \ chars.count == 1 {\n        return .success(words)\n    }\n    \n    if chars.count\
    \ % 2 == 1 {\n        return .success(words.map { $0.lowercased() })\n    }\n\
    \    \n    let evens = chars.filter { ($0 % 2) == 0 }\n    let odds = chars.filter\
    \ { ($0 % 2) == 1 }\n    \n    if evens.count < chars.count {\n        return\
    \ .success(odds)\n    }\n    \n    if evens.count > chars.count {\n        return\
    \ .success(evens)\n    }\n    \n    return .success(evens)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpe90n2kcb.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpe90n2kcb.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe90n2kcb.swift:24:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let result = words.map\
    \ { $0.lowercased() }\n    if words.count == 0 {\n        return .failure(words.count)\n\
    \    }\n    if words.count == 1 {\n        return .success(words)\n    }\n   \
    \ if words.count % 2 == 1 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5gqt5mh5.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    return .success(words.dropLast().append(comma))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeb04onag.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let text = txt.trimmingCharacters(in: .whitespacesAndNewlines) else\
    \ {\n        return .failure(Int(self.count()))\n    }\n    \n    var words: [String]\
    \ = []\n    \n    for c in text.unicodeScalars {\n        guard let c = c else\
    \ { continue }\n        \n        if let _ = c.value, c.isLetter, c.isLowercase\
    \ {\n            words.append(c.value)\n        }\n    }\n    \n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphiyy40_9.swift:15:26: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    guard let text = txt.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ else {\n                     ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmphiyy40_9.swift:15:50:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    guard let text = txt.trimmingCharacters(in: .whitespacesAndNewlines) else\
    \ {\n                                                ~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphiyy40_9.swift:16:29: error: cannot find 'self' in scope; did you mean\
    \ to use it in a type or extension context?\n        return .failure(Int(self.count()))\n\
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord = words[words.count\
    \ - 1]\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasPrefix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropFirst())\n\
    \    }\n    if lastWord.hasSuffix(\",\") {\n        return .success(words.dropLast())\n\
    \    }\n    if firstWord.hasSuffix(\",\") {\n        return .success(words.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpxur5_wrw.swift:114:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpxur5_wrw.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpxur5_wrw.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpxur5_wrw.swift:95:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let firstWord = words[0]\n \
    \   let lastWord = words[words.count - 1]\n    if firstWord.hasPrefix(\" \") {\n\
    \        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasPrefix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasPrefix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasPrefix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasPrefix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasPrefix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasPrefix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasPrefix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasPrefix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasPrefix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasPrefix(\"\
    \ \") {\n        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffi\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpthhvsnvo.swift:87:26: error: expected '{' after 'if' condition\n\
    \    if firstWord.hasSuffi\n                         ^\n/tmp/tmpthhvsnvo.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let words = words.filter {$0.isWhitespace == false}\n\
    \    if words.count == 0 {\n        return .success(words)\n    }\n    let words\
    \ = words.filter {$0.isWhitespace == true}\n    if words.count == 0 {\n      \
    \  return .success(words)\n    }\n    let words = words.filter {$0.isComma ==\
    \ false}\n    if words.count == 0 {\n        return .success(words)\n    }\n \
    \   let words = words.filter {$0.isComma == true}\n    if words.count == 0 {\n\
    \        return .success(words)\n    }\n    let words = words.filter {$0.isLowercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isLowercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.isUppercase\
    \ == false}\n    if words.count == 0 {\n        return .success(words)\n    }\n\
    \    let words = words.filter {$0.isUppercase == true}\n    if words.count ==\
    \ 0 {\n        return .success(words)\n    }\n    let words = words.filter {$0.\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphp48_5ov.swift:94:33: error: expected member name following '.'\n\
    \    let words = words.filter {$0.\n                                ^\n/tmp/tmphp48_5ov.swift:117:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmphp48_5ov.swift:14:56:\
    \ note: to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmphp48_5ov.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmphp48_5ov.swift:98:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    guard words.count % 2 == 0 else {\n       \
    \ return .failure(words.count / 2)\n    }\n    \n    var result = [String]()\n\
    \    var count = 0\n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n            count += 1\n        }\n    }\n\
    \    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpjv1b9edc.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let letterCount\
    \ = words.reduce(0) { (sum, word) -> Int in\n        let count = word.count\n\
    \        if count > 1 && count % 2 == 1 {\n            return sum + count\n  \
    \      } else {\n            return sum\n        }\n    }\n    return .success(words.prefix(wordCount).map\
    \ { word -> [String] in\n        let letters = word.map { String($0).lowercased()\
    \ }\n        return letters.suffix(letterCount - words.count - letters.count)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp238ezyf1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp238ezyf1.swift:26:24: error: cannot convert return\
    \ expression of type 'String' to return type 'Int'\n            return sum + count\n\
    \                   ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(1))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 2 {\n        return .success(words)\n    }\n    if comma.count == 3 {\n \
    \       return .success(words)\n    }\n    if comma.count == 4 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 5 {\n        return .success(words)\n\
    \    }\n    if comma.count == 6 {\n        return .success(words)\n    }\n   \
    \ if comma.count == 7 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 8 {\n        return .success(words)\n    }\n    if comma.count == 9 {\n \
    \       return .success(words)\n    }\n    if comma.count == 10 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 11 {\n        return .success(words)\n\
    \    }\n    if comma.count == 12 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 13 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 14 {\n        return .success(words)\n    }\n    if comma.count == 15 {\n\
    \        return .success(words)\n    }\n    if comma.count == 16 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 17 {\n        return .success(words)\n\
    \    }\n    if comma.count == 18 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 19 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 20 {\n        return .success(words)\n    }\n    if comma.count == 21 {\n\
    \        return .success(words)\n    }\n    if comma.count == 22 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 23 {\n        return .success(words)\n\
    \    }\n    if comma.count == 24 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 25 {\n        return .success(words)\n    }\n    return .failure(Int(1))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmph0d3vo29.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    let wordCountWithCommas\
    \ = words.count + words.count - 1\n    if wordCountWithCommas == 0 {\n       \
    \ return .success(words.map { $0.lowercased() })\n    }\n    return .success(words.map\
    \ { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_i9j8ohz.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord\
    \ = words[words.count - 1]\n    if firstWord.hasPrefix(\",\") {\n        return\
    \ .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\",\") {\n   \
    \     return .success(words.dropLast())\n    }\n    if firstWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if lastWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpg_6kiq1b.swift:92:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpg_6kiq1b.swift:91:24: note: to match this opening '('\n        return\
    \ .success(words.dropFirst\n                       ^\n/tmp/tmpg_6kiq1b.swift:114:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmpg_6kiq1b.swift:14:56:\
    \ note: to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmpg_6kiq1b.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpg_6kiq1b.swift:95:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last\n    if comma == \"\" {\n\
    \        return .success(words)\n    }\n    if comma == \",\" {\n        return\
    \ .success(words)\n    }\n    if comma == \"-\" {\n        return .success(words)\n\
    \    }\n    if comma == \".\" {\n        return .success(words)\n    }\n    if\
    \ comma == \",,\" {\n        return .success(words)\n    }\n    if comma == \"\
    ,.\" {\n        return .success(words)\n    }\n    if comma == \",,.\" {\n   \
    \     return .success(words)\n    }\n    if comma == \",,,\" {\n        return\
    \ .success(words)\n    }\n    if comma == \",,,.\" {\n        return .success(words)\n\
    \    }\n    if comma == \",,,,\" {\n        return .success(words)\n    }\n  \
    \  if comma == \",,,,.\" {\n        return .success(words)\n    }\n    if comma\
    \ == \",,,,,\" {\n        return .success(words)\n    }\n    if comma == \",,,,,.\"\
    \ {\n        return .success(words)\n    }\n    if comma == \",,,,,,\" {\n   \
    \     return .success(words)\n    }\n    if comma == \",,,,,,.\" {\n        return\
    \ .success(words)\n    }\n    if comma == \",,,,,,,\" {\n        return .success(words)\n\
    \    }\n    if comma == \",,,,,,,.\" {\n        return .success(words)\n    }\n\
    \    if comma == \",,,,,,,,\" {\n        return .success(words)\n    }\n    if\
    \ comma == \",,,,,,,,.\" {\n        return .success(words)\n    }\n    if comma\
    \ == \",,,,,,,,,\" {\n        return .success(words)\n    }\n    if comma == \"\
    ,,,,,,,,,.\" {\n        return .success(words)\n    }\n    if comma == \",,,,,,,,,,\"\
    \ {\n        return .success(words)\n    }\n    if comma == \",,,,,,,,,,.\" {\n\
    \        return .success(words)\n    }\n    if comma == \",,,,,,,,,,,\" {\n  \
    \      return .success(words)\n    }\n    if comma == \",,,,,,,,,,,.\" {\n   \
    \     return .success(words)\n    }\n    if comma == \",,,,,,,,,,,,\" {\n    \
    \    return .success(words)\n    }\n    if comma == \",,,,,,,,,,,,.\" {\n    \
    \    return .success(words)\n    }\n    if comma == \",,,,,,,\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbh2kqdc6.swift:104:17: error: unterminated string literal\n   \
    \ if comma == \",,,,,,,\n                ^\n/tmp/tmpbh2kqdc6.swift:15:21: error:\
    \ value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    if wordCount == 1 {\n        return .success(words)\n    }\n    \n  \
    \  if wordCount == 2 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 3 {\n        return .success(words)\n    }\n    \n    if wordCount == 4 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 5 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 6 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 7 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 8 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 9 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 10 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 11 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 12 {\n        return .success(words)\n    }\n    \n    if wordCount == 13\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 14 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 15 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 16 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 17 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 18 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 19 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 20 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 21 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 22 {\n        return .success(words)\n    }\n    \n    if wordCount == 23\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 24 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 25 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 26 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 27 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 28 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 29 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 30 {\n        return .success(words)\n    }\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp94es7z86.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.last.characters.filter { $0 >= 'a' && $0 <= 'z' }\n    if letters.count\
    \ == 0 {\n        return .success(words)\n    }\n    let odd = letters.filter\
    \ { $0 % 2 == 1 }\n    if odd.count == 0 {\n        return .success(words)\n \
    \   }\n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprnjtoivk.swift:29:56: error: single-quoted string literal found,\
    \ use '\"'\n    let letters = words.last.characters.filter { $0 >= 'a' && $0 <=\
    \ 'z' }\n                                                       ^~~\n        \
    \                                               \"a\"\n/tmp/tmprnjtoivk.swift:29:69:\
    \ error: single-quoted string literal found, use '\"'\n    let letters = words.last.characters.filter\
    \ { $0 >= 'a' && $0 <= 'z' }\n                                               \
    \                     ^~~\n                                                  \
    \                  \"z\"\n/tmp/tmprnjtoivk.swift:15:21: error: value of type 'String'\
    \ has no member 'components'\n    let words = txt.components(separatedBy: \" \"\
    )\n                ~~~ ^~~~~~~~~~\n/tmp/tmprnjtoivk.swift:17:33: error: 'characters'\
    \ is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    let wordCountWithCommas = words.count - 1\n    \n    if wordCountWithCommas\
    \ == 0 {\n        return .success(words)\n    }\n    \n    let wordCountWithCommasWithOddOrder\
    \ = wordCountWithCommas - 1\n    \n    if wordCountWithCommasWithOddOrder % 2\
    \ == 0 {\n        return .success(words)\n    }\n    \n    return .failure(wordCountWithCommasWithOddOrder)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpg6r0_0fb.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    let wordCount2 = words.count\n    \n    if wordCount2 == 0 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount2 % 2 == 1 {\n       \
    \ return .success(words.dropLast())\n    }\n    \n    let wordCount3 = wordCount2\
    \ / 2\n    \n    if wordCount3 % 2 == 1 {\n        return .success(words.dropLast(wordCount3))\n\
    \    }\n    \n    let wordCount4 = wordCount3 / 2\n    \n    if wordCount4 % 2\
    \ == 1 {\n        return .success(words.dropLast(wordCount4))\n    }\n    \n \
    \   let wordCount5 = wordCount4 / 2\n    \n    if wordCount5 % 2 == 1 {\n    \
    \    return .success(words.dropLast(wordCount5))\n    }\n    \n    let wordCount6\
    \ = wordCount5 / 2\n    \n    if wordCount6 % 2 == 1 {\n        return .success(words.dropLast(wordCount6))\n\
    \    }\n    \n    let wordCount7 = wordCount6 / 2\n    \n    if wordCount7 % 2\
    \ == 1 {\n        return .success(words.dropLast(wordCount7))\n    }\n    \n \
    \   let wordCount8 = wordCount7 / 2\n    \n    if wordCount8 % 2 == 1 {\n    \
    \    return .success(words.dropLast(wordCount8))\n    }\n    \n    let wordCount9\
    \ = wordCount8 / 2\n    \n    if wordCount9 % 2 == 1 {\n        return .success(words.dropLast(wordCount9))\n\
    \    }\n    \n    let wordCount10 = wordCount9 / 2\n    \n    if wordCount10 %\
    \ 2 == 1 {\n        return .success(words.dropLast(wordCount10))\n    }\n    \n\
    \    let wordCount11 = wordCount10 / 2\n    \n    if wordCount11 % 2 == 1 {\n\
    \        return .success(words.dropLast(wordCount11))\n    }\n    \n    let wordCount12\
    \ = wordCount11 / 2\n    \n    if wordCount12 % 2 == 1 {\n        return .success(words.dropLast(wordCount12))\n\
    \    }\n    \n    let wordCount13 = wordCount12 / 2\n    \n    if wordCount13\
    \ % 2 == 1 {\n        return .success(words.dropLast(wordCount13))\n    }\n  \
    \  \n    let wordCount14 = wordCount13 / 2\n    \n    if wordCount14 % 2 == 1\
    \ {\n        return .success(words.dropLast(wordCount14))\n    }\n    \n    let\
    \ wordCount15 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpuylexauz.swift:104:22: error: expected initial value after '='\n\
    \    let wordCount15 = \n                     ^\n/tmp/tmpuylexauz.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    let firstWord = words[0]\n \
    \   let lastWord = words[words.count - 1]\n    if firstWord.hasPrefix(\" \") {\n\
    \        return .failure(firstWord.count)\n    }\n    if lastWord.hasSuffix(\"\
    \ \") {\n        return .failure(lastWord.count)\n    }\n    if firstWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if lastWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    return .success(words.dropFirst().dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp80d44_d4.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = words.count + words.count - 1\n    let letterCount\
    \ = txt.characters.count\n    let letterCountWithCommas = txt.characters.count\
    \ + txt.characters.count - 1\n    \n    if wordCount == 0 {\n        return .failure(wordCount)\n\
    \    }\n    \n    if wordCountWithCommas == 0 {\n        return .success(words)\n\
    \    }\n    \n    if letterCount == 0 {\n        return .failure(letterCount)\n\
    \    }\n    \n    if letterCountWithCommas == 0 {\n        return .success(letterCount)\n\
    \    }\n    \n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqg9bv6bn.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpqg9bv6bn.swift:18:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let letterCount = txt.characters.count\n   \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpqg9bv6bn.swift:19:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    let letterCountWithCommas = txt.characters.count\
    \ + txt.characters.count - 1\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqg9bv6bn.swift:19:60:\
    \ error: 'characters' is unavailable: Please use String directly\n    let letterCountWithCommas\
    \ = txt.characters.count + txt.characters.count - 1\n                        \
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqg9bv6bn.swift:34:25: error: cannot convert value of\
    \ type 'Int' to expected argument type '[String]'\n        return .success(letterCount)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    let wordCount = words.count\n\
    \    let letterCount = words.reduce(0) { $0 + $1.count }\n    if letterCount %\
    \ 2 != 0 {\n        return .failure(letterCount)\n    }\n    return .success(words.map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpfu489map.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpfu489map.swift:24:60: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n    return .success(words.map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) })\n                  \
    \                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1iaw55ki.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ Err(Int(.init(rawValue: 10)))\n    }\n    \n    var result: [String] = []\n\
    \    \n    for word in words {\n        if let word = word.lowercased() {\n  \
    \          if result.contains(word) {\n                return Err(Int(.init(rawValue:\
    \ 10)))\n            }\n            result.append(word)\n        }\n    }\n  \
    \  \n    return Ok(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpp94r490b.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpp94r490b.swift:16:16: error:\
    \ cannot find 'Err' in scope\n        return Err(Int(.init(rawValue: 10)))\n \
    \              ^~~\n/tmp/tmpp94r490b.swift:16:25: error: reference to member 'init'\
    \ cannot be resolved without a contextual type\n        return Err(Int(.init(rawValue:\
    \ 10)))\n                        ^\n/tmp/tmpp94r490b.swift:30:12: error: cannot\
    \ find 'Ok' in scope\n    return Ok(result)\n           ^~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for word in words {\n        if let letters = word.components(separatedBy:\
    \ \",\") {\n            for letter in letters {\n                if let count\
    \ = letters.filter({ $0.isLetter }).count {\n                    if count % 2\
    \ == 1 {\n                        result.append(letter)\n                    }\n\
    \                }\n            }\n        } else {\n            if let count\
    \ = word.filter({ $0.isLetter }).count {\n                if count % 2 == 1 {\n\
    \                    result.append(word)\n                }\n            }\n \
    \       }\n    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpr_fu5zxn.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpr_fu5zxn.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let firstWord = words[0]\n    let lastWord\
    \ = words[words.count - 1]\n    guard firstWord.count > 0 else { return .failure(0)\
    \ }\n    guard lastWord.count > 0 else { return .failure(0) }\n    guard firstWord.count\
    \ < lastWord.count else { return .failure(0) }\n    guard firstWord.count % 2\
    \ == 0 else { return .failure(0) }\n    guard lastWord.count % 2 == 0 else { return\
    \ .failure(0) }\n    guard firstWord.count < 26 else { return .failure(0) }\n\
    \    guard lastWord.count < 26 else { return .failure(0) }\n    guard firstWord.count\
    \ > lastWord.count else { return .failure(0) }\n    guard firstWord.count < 26\
    \ else { return .failure(0) }\n    guard lastWord.count < 26 else { return .failure(0)\
    \ }\n    guard firstWord.count > lastWord.count else { return .failure(0) }\n\
    \    guard firstWord.count < 26 else { return .failure(0) }\n    guard lastWord.count\
    \ < 26 else { return .failure(0) }\n    guard firstWord.count > lastWord.count\
    \ else { return .failure(0) }\n    guard firstWord.count < 26 else { return .failure(0)\
    \ }\n    guard lastWord.count < 26 else { return .failure(0) }\n    guard firstWord.count\
    \ > lastWord.count else { return .failure(0) }\n    guard firstWord.count < 26\
    \ else { return .failure(0) }\n    guard lastWord.count < 26 else { return .failure(0)\
    \ }\n    guard firstWord.count > lastWord.count else { return .failure(0) }\n\
    \    guard firstWord.count < 26 else { return .failure(0) }\n    guard lastWord.count\
    \ < 26 else { return .failure(0) }\n    guard firstWord.count > lastWord.count\
    \ else { return .failure(0) }\n    guard firstWord.count < 26 else { return .failure(0)\
    \ }\n    guard lastWord.count < 26 else { return .failure(0) }\n    guard firstWord.count\
    \ > lastWord.count else { return .failure(0) }\n    guard first\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8zv531v3.swift:45:16: error: expected 'else' after 'guard' condition\n\
    \    guard first\n               ^\n/tmp/tmp8zv531v3.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp8zv531v3.swift:45:11: error:\
    \ cannot find 'first' in scope\n    guard first\n          ^~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    let wordCount = words.count\n   \
    \ let letterCount = txt.unicodeScalars.filter({ $0.isLetter }).count\n    if letterCount\
    \ % 2 == 1 {\n        return .failure(Int(letterCount / 2))\n    }\n    return\
    \ .success(words.map { $0.trimmingCharacters(in: .whitespaces) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp3n6dob7p.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp3n6dob7p.swift:20:54: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLetter'\n    let letterCount = txt.unicodeScalars.filter({\
    \ $0.isLetter }).count\n                                                  ~~ ^~~~~~~~\n\
    /tmp/tmp3n6dob7p.swift:24:60: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return .success(words.map { $0.trimmingCharacters(in:\
    \ .whitespaces) })\n                                                         \
    \ ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let wordCount = words.count\n\
    \    let letterCount = txt.characters.count\n    let letters = Array(Array(txt.unicodeScalars.map\
    \ { $0.value }))\n    let letterCounts = letters.count\n    if letterCounts ==\
    \ letterCount {\n        return .success(words)\n    }\n    if letterCounts ==\
    \ letterCount + 1 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 2 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 3 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 4 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 5 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 6 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 7 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 8 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 9 {\n        return .success(Array(words))\n    }\n    if letterCounts\
    \ == letterCount + 10 {\n        return .success(Array(words))\n    }\n    if\
    \ letterCounts == letterCount + 11 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 12 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 13 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 14 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 15 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 16 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 17 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 18 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 19 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 20 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 21 {\n        return .success(Array(words))\n\
    \    }\n    if letterCounts == letterCount + 22 {\n        return .success(Array(words))\n\
    \    }\n    if letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp94sbjheo.swift:95:19: error: expected '{' after 'if' condition\n\
    \    if letterCount\n                  ^\n/tmp/tmp94sbjheo.swift:15:21: error:\
    \ value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp94sbjheo.swift:17:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp94sbjheo.swift:23:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let letterCount = txt.characters.count\n   \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp94sbjheo.swift:95:8: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n    if letterCount\n       ^\n       ( \
    \          != 0)\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  var words: [String] = []\n    \n    for word in words {\n        if let word\
    \ = word.lowercased() {\n            words.append(word)\n        }\n    }\n  \
    \  \n    if words.count == 0 {\n        return .failure(Int(txt.characters.count))\n\
    \    }\n    \n    if words.count == 1 {\n        return .success(words)\n    }\n\
    \    \n    var evenCount = 0\n    var oddCount = 0\n    \n    for word in words\
    \ {\n        if word.lowercased() % 2 == 0 {\n            evenCount += 1\n   \
    \     } else {\n            oddCount += 1\n        }\n    }\n    \n    if evenCount\
    \ % 2 == 1 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n\
    \    if oddCount % 2 == 0 {\n        return .success(words)\n    }\n    \n   \
    \ return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpcg3xz4t5.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpcg3xz4t5.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcg3xz4t5.swift:24:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let word = word.lowercased()\
    \ {\n           ^          ~~~~~~~~~~~~~~~~~\n/tmp/tmpcg3xz4t5.swift:30:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcg3xz4t5.swift:41:17: error: cannot convert value of\
    \ type 'String' to expected argument type 'Int'\n        if word.lowercased()\
    \ % 2 == 0 {\n                ^\n/tmp/tmpcg3xz4t5.swift:49:33: error: 'characters'\
    \ is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let commaWords = txt.components(separatedBy:\
    \ \",\")\n    \n    if words.count == 0 || commaWords.count == 0 {\n        return\
    \ .failure(words.count)\n    }\n    \n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    .characters)\n    \n    var oddOrderWords = [String]()\n    \n    for word in\
    \ words {\n        let wordChars = word.characters\n        let wordCharCount\
    \ = wordChars.count\n        let wordCharCountOdd = wordCharCount % 2\n      \
    \  \n        if wordCharCountOdd == 0 {\n            oddOrderWords.append(word)\n\
    \        }\n    }\n    \n    return .success(oddOrderWords)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8oqv5yhl.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp8oqv5yhl.swift:16:26: error: value of type 'String'\
    \ has no member 'components'\n    let commaWords = txt.components(separatedBy:\
    \ \",\")\n                     ~~~ ^~~~~~~~~~\n/tmp/tmp8oqv5yhl.swift:22:55: error:\
    \ 'characters' is unavailable: Please use String directly\n    let alphabet =\
    \ Array(\"abcdefghijklmnopqrstuvwxyz\".characters)\n                         \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let letters = words.map { $0.lowercased() }\n  \
    \  let odd = letters.filter { $0.count % 2 == 1 }\n    if odd.count == 0 {\n \
    \       return .success(letters)\n    }\n    let even = letters.filter { $0.count\
    \ % 2 == 0 }\n    return .success(even.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprc4xbdbf.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let comma = words.last?.components(separatedBy:\
    \ \",\")\n    if comma?.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    return .success(words.dropLast().append(comma))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptl55_jeh.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let wordCount = words.count\n\
    \    let firstWord = words.first!\n    let lastWord = words.last!\n    \n    if\
    \ wordCount == 1 {\n        return .success(firstWord)\n    }\n    \n    if wordCount\
    \ == 2 {\n        return .success(firstWord + lastWord)\n    }\n    \n    if wordCount\
    \ == 3 {\n        return .success(firstWord + lastWord + words.last!)\n    }\n\
    \    \n    if wordCount == 4 {\n        return .success(firstWord + lastWord +\
    \ words.last! + words.last!)\n    }\n    \n    if wordCount == 5 {\n        return\
    \ .success(firstWord + lastWord + words.last! + words.last! + words.last!)\n \
    \   }\n    \n    if wordCount == 6 {\n        return .success(firstWord + lastWord\
    \ + words.last! + words.last! + words.last! + words.last!)\n    }\n    \n    if\
    \ wordCount == 7 {\n        return .success(firstWord + lastWord + words.last!\
    \ + words.last! + words.last! + words.last! + words.last!)\n    }\n    \n    if\
    \ wordCount == 8 {\n        return .success(firstWord + lastWord + words.last!\
    \ + words.last! + words.last! + words.last! + words.last! + words.last!)\n   \
    \ }\n    \n    if wordCount == 9 {\n        return .success(firstWord + lastWord\
    \ + words.last! + words.last! + words.last! + words.last! + words.last! + words.last!\
    \ + words.last!)\n    }\n    \n    if wordCount == 10 {\n        return .success(firstWord\
    \ + lastWord + words.last! + words.last! + words.last! + words.last! + words.last!\
    \ + words.last! + words.last! + words.last!)\n    }\n    \n    if wordCount ==\
    \ 11 {\n        return .success(firstWord + lastWord + words.last! + words.last!\
    \ + words.last! + words.last! + words.last! + words.last! + words.last! + words.last!\
    \ + words.last!)\n    }\n    \n    if wordCount == 12 {\n        return .success(firstWord\
    \ + lastWord + words.last! + words.last! + words.last! + words.last! + words.last!\
    \ + words.last! + words.last! + words.last! + words.last! + words.last!)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 15 (use -v to see invocation)\n\
    /tmp/tmppic1ap15.swift:15:21: error: value of type 'String' has no member 'components'\n\
    \    let words = txt.components(separatedBy: \" \")\n                ~~~ ^~~~~~~~~~\n\
    /tmp/tmppic1ap15.swift:28:35: error: cannot convert value of type 'String' to\
    \ expected argument type '[String]'\n        return .success(firstWord + lastWord)\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1660054436
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(words.count)\n    }\n    \n    let wordCount\
    \ = words.count\n    \n    if wordCount == 1 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 2 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 3 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 4 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 5 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 6 {\n        return .success(words)\n    }\n    \n    if wordCount == 7 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 8 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 9 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 10 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 11 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 12 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 13 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 14 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 15 {\n        return .success(words)\n    }\n    \n    if wordCount == 16\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 17 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 18 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 19 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 20 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 21 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 22 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 23 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 24 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 25 {\n        return .success(words)\n    }\n    \n    return .failure(wordCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpuxdr5eh1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv8vcevv3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    \n    let wordCount = words.count\n\
    \    let wordCountUpper = wordCount.filter{ $0.isUppercase }\n    let wordCountLower\
    \ = wordCount.filter{ $0.isLowercase }\n    \n    if wordCountUpper.count == 0\
    \ {\n        if wordCountLower.count == 0 {\n            return .success(words)\n\
    \        } else {\n            return .success(wordCount)\n        }\n    } else\
    \ {\n        if wordCountLower.count == 0 {\n            return .success(wordCount)\n\
    \        } else {\n            return .success(wordCount)\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvqsw5eso.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var words:\
    \ [String] = []\n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            words.append(word)\n        }\n    }\n    \n    if words.count\
    \ % 2 == 1 {\n        return .success(words)\n    } else {\n        return .success(words.count\
    \ / 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9j8ok3_d.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp9j8ok3_d.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp9j8ok3_d.swift:21:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let word = word.lowercased() {\n           ^          ~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9j8ok3_d.swift:29:37: error: cannot convert value of type 'Int' to expected\
    \ argument type '[String]'\n        return .success(words.count / 2)\n       \
    \                             ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    let wordCount = words.count\n   \
    \ let letterCount = txt.unicodeScalars.filter({ $0.isLetter }).count\n    if wordCount\
    \ % 2 == 1 {\n        return .failure(Int(wordCount / 2))\n    }\n    if letterCount\
    \ % 2 == 1 {\n        return .failure(Int(letterCount / 2))\n    }\n    return\
    \ .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpy1v6cbne.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpy1v6cbne.swift:20:54: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLetter'\n    let letterCount = txt.unicodeScalars.filter({\
    \ $0.isLetter }).count\n                                                  ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    if comma.count == 1 {\n        return .success(words)\n    }\n   \
    \ let letters = words.dropLast().map({ $0.lowercased() })\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmplzwy_7ky.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = words.count - words.filter { $0 == \",\" }.count\n\
    \    let oddLetterCount = words.filter { $0.isLetter && $0.isOdd }.count\n   \
    \ \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    \n\
    \    if wordCountWithCommas == 0 {\n        return .success(words)\n    }\n  \
    \  \n    if oddLetterCount == 0 {\n        return .success(wordCount)\n    }\n\
    \    \n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp4gik_xa9.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    \n    let wordCount = words.count\n\
    \    \n    let lowercaseLetterCount = words.map { $0.lowercased().count }.reduce(0,\
    \ +)\n    \n    if lowercaseLetterCount % 2 != 0 {\n        return .failure(lowercaseLetterCount)\n\
    \    }\n    \n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqlzbscq1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().count }\n    let oddLetters = letters.filter {\
    \ $0 % 2 == 1 }\n    if oddLetters.count == 0 {\n        return .success(words)\n\
    \    }\n    if oddLetters.count == 1 {\n        return .success(words)\n    }\n\
    \    return .failure(oddLetters.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6xc01clw.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(0))\n    }\n    \n    let wordCount = words.count\n\
    \    \n    if wordCount == 1 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 2 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 3 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 4 {\n        return .success(words)\n    }\n    \n    if wordCount == 5 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 6 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 7 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 8 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 9 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 10 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 11 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 12 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 13 {\n        return .success(words)\n    }\n    \n    if wordCount == 14\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 15 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 16 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 17 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 18 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 19 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 20 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 21 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 22 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 23 {\n        return .success(words)\n    }\n    \n    if wordCount == 24\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 25 {\n \
    \       return .success(words)\n    }\n    \n    return .failure(Int(0))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqv_oa3x5.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.count))\n    }\n    let firstWord = words[0]\n\
    \    let lastWord = words[words.count - 1]\n    if firstWord.count != lastWord.count\
    \ {\n        return .failure(Int(txt.count))\n    }\n    if firstWord.count ==\
    \ 0 {\n        return .success(words)\n    }\n    if lastWord.count == 0 {\n \
    \       return .success(firstWord)\n    }\n    if firstWord.count != lastWord.count\
    \ {\n        return .failure(Int(txt.count))\n    }\n    if firstWord.count >\
    \ lastWord.count {\n        return .success(firstWord)\n    }\n    let firstChar\
    \ = firstWord.first!\n    let lastChar = lastWord.first!\n    if firstChar.isUppercase\
    \ {\n        return .success(firstWord)\n    }\n    if lastChar.isUppercase {\n\
    \        return .success(lastWord)\n    }\n    if firstChar.isLowercase {\n  \
    \      return .success(firstWord)\n    }\n    if lastChar.isLowercase {\n    \
    \    return .success(lastWord)\n    }\n    if firstChar.isDigit {\n        return\
    \ .success(firstWord)\n    }\n    if lastChar.isDigit {\n        return .success(lastWord)\n\
    \    }\n    if firstChar.isPunct {\n        return .success(firstWord)\n    }\n\
    \    if lastChar.isPunct {\n        return .success(lastWord)\n    }\n    if firstChar.isSpace\
    \ {\n        return .success(firstWord)\n    }\n    if lastChar.isSpace {\n  \
    \      return .success(lastWord)\n    }\n    if firstChar.isComma {\n        return\
    \ .success(firstWord)\n    }\n    if lastChar.isComma {\n        return .success(lastWord)\n\
    \    }\n    if firstChar.isColon {\n        return .success(firstWord)\n    }\n\
    \    if lastChar.isColon {\n        return .success(lastWord)\n    }\n    if firstChar.isColon\
    \ {\n        return .success(firstWord)\n    }\n    if lastChar.isColon {\n  \
    \      return .success(lastWord)\n    }\n    if firstChar.isColon {\n        return\
    \ .success(firstWord)\n    }\n    if lastChar.isColon {\n        return .success(lastWord)\n\
    \    }\n    if firstChar.isColon {\n        return .success(firstWord)\n    }\n\
    \    if lastChar.isColon {\n        return .success(lastWord)\n    }\n    if firstChar.isColon\
    \ {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzfpu4024.swift:121:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpzfpu4024.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpzfpu4024.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpzfpu4024.swift:102:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount2\
    \ = words.count\n    if wordCount2 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount3 = words.count\n    if wordCount3 == 0 {\n        return\
    \ .failure(wordCount)\n    }\n    let wordCount4 = words.count\n    if wordCount4\
    \ == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount5 = words.count\n\
    \    if wordCount5 == 0 {\n        return .failure(wordCount)\n    }\n    let\
    \ wordCount6 = words.count\n    if wordCount6 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount7 = words.count\n    if wordCount7 == 0 {\n        return\
    \ .failure(wordCount)\n    }\n    let wordCount8 = words.count\n    if wordCount8\
    \ == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount9 = words.count\n\
    \    if wordCount9 == 0 {\n        return .failure(wordCount)\n    }\n    let\
    \ wordCount10 = words.count\n    if wordCount10 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount11 = words.count\n    if wordCount11 == 0 {\n       \
    \ return .failure(wordCount)\n    }\n    let wordCount12 = words.count\n    if\
    \ wordCount12 == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount13\
    \ = words.count\n    if wordCount13 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount14 = words.count\n    if wordCount14 == 0 {\n       \
    \ return .failure(wordCount)\n    }\n    let wordCount15 = words.count\n    if\
    \ wordCount15 == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount16\
    \ = words.count\n    if wordCount16 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount17 = words.count\n    if wordCount17 == 0 {\n       \
    \ return .failure(wordCount)\n    }\n    let wordCount18 = words.count\n    if\
    \ wordCount18 == 0 {\n        return .failure(wordCount)\n    }\n    let wordCount19\
    \ = words.count\n    if wordCount19 == 0 {\n        return .failure(wordCount)\n\
    \    }\n    let wordCount20 = words.count\n    if wordCount20 == 0 {\n       \
    \ return .failure(wordCount)\n    }\n    let wordCount21 = words.count\n    if\
    \ wordCount21 == 0 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpcydoz0e_.swift:121:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpcydoz0e_.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpcydoz0e_.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpcydoz0e_.swift:98:9: error:\
    \ non-void function should return a value\n        return \n        ^\n/tmp/tmpcydoz0e_.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    let wordCountWithCommas = words.count + words.count - 1\n    \n    if\
    \ wordCountWithCommas == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    \n    return .success(words.map { $0.lowercased() })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsbzr850a.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    var result: [String] = []\n    for word in words {\n       \
    \ if let word = word.lowercased() {\n            result.append(word)\n       \
    \ }\n    }\n    \n    if result.count > 0 {\n        return .success(result)\n\
    \    }\n    \n    if result.count == 1 {\n        return .success(result)\n  \
    \  }\n    \n    if result.count > 1 {\n        let count = result.count\n    \
    \    var result: [String] = []\n        for word in result {\n            if count\
    \ % 2 == 0 {\n                result.append(word)\n            }\n           \
    \ count -= 1\n        }\n        return .success(result)\n    }\n    \n    return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmf1xe_dj.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpmf1xe_dj.swift:17:29: error: cannot find 'arc4random_uniform'\
    \ in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmf1xe_dj.swift:42:19:\
    \ error: left side of mutating operator isn't mutable: 'count' is a 'let' constant\n\
    \            count -= 1\n            ~~~~~ ^\n/tmp/tmpmf1xe_dj.swift:36:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let count = result.count\n\
    \        ^~~\n        var\n/tmp/tmpmf1xe_dj.swift:47:25: error: cannot find 'arc4random_uniform'\
    \ in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    return .success(words.map\
    \ { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzbhc6gk1.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpzbhc6gk1.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    \n    let splitWords = words.map\
    \ { $0.components(separatedBy: \",\").map { $0.lowercased() } }\n    \n    if\
    \ splitWords.count == 0 {\n        return .failure(splitWords.count)\n    }\n\
    \    \n    let evenOrderWords = splitWords.filter { $0.count % 2 == 0 }\n    \n\
    \    if evenOrderWords.count == 0 {\n        return .failure(evenOrderWords.count)\n\
    \    }\n    \n    let oddOrderWords = splitWords.filter { $0.count % 2 != 0 }\n\
    \    \n    if oddOrderWords.count == 0 {\n        return .success(evenOrderWords.map\
    \ { $0.joined(separator: \",\") })\n    }\n    \n    return .success(evenOrderWords.map\
    \ { $0.joined(separator: \",\") })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvwh5n_pf.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(txt.characters.count)\n    }\n    \n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    \n    let commaIndex = words.index(where:\
    \ { $0 == \",\" })\n    let comma = commaIndex == nil ? words.count : commaIndex!\n\
    \    \n    if comma == words.count {\n        return .success(words)\n    }\n\
    \    \n    let lowercaseIndex = words.index(where: { $0.lowercased() == $0 })\n\
    \    let lowercase = lowercaseIndex == nil ? words.count : lowercaseIndex!\n \
    \   \n    if lowercase % 2 == 1 {\n        return .success(words)\n    }\n   \
    \ \n    return .failure(lowercase)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpr5lexzh_.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpr5lexzh_.swift:18:29: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(txt.characters.count)\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    \n    let wordCount = words.count\n\
    \    let wordArray = words.map { $0.lowercased() }\n    \n    let letterCount\
    \ = wordArray.count\n    let letterArray = wordArray.map { $0.unicodeScalars.filter\
    \ { $0.isLetter() }.count }\n    \n    if letterCount == 0 {\n        return .failure(letterCount)\n\
    \    }\n    \n    if letterArray.count == 0 {\n        return .failure(letterArray.count)\n\
    \    }\n    \n    if letterArray.count == letterCount {\n        return .success(wordArray)\n\
    \    }\n    \n    if letterArray.count < letterCount {\n        return .success(letterArray)\n\
    \    }\n    \n    if letterArray.count > letterCount {\n        return .success(letterArray.filter\
    \ { $0 % 2 == 1 })\n    }\n    \n    return .success(letterArray)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp61y83xbe.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.split(separator: \" \") else {\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n    }\n    \n    let wordCount = words.count\n   \
    \ \n    if wordCount == 0 {\n        return Err(Int(errorCode: ErrorCode.InvalidInput))\n\
    \    }\n    \n    if wordCount == 1 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 2 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 3 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 4 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 5 {\n        return .success(words)\n    }\n    \n    if wordCount == 6 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 7 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 8 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 9 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 10 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 11 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 12 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 13 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 14 {\n        return .success(words)\n    }\n    \n    if wordCount == 15\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 16 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 17 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 18 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 19 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 20 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 21 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 22 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 23 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 24 {\n        return .success(words)\n    }\n    \n    if wordCount == 25\
    \ {\n        return .success(words)\n    }\n    \n    return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpj1t16xd_.swift:16:16: error: cannot find 'Err' in scope\n     \
    \   return Err(Int(errorCode: ErrorCode.InvalidInput))\n               ^~~\n/tmp/tmpj1t16xd_.swift:16:35:\
    \ error: cannot find 'ErrorCode' in scope\n        return Err(Int(errorCode: ErrorCode.InvalidInput))\n\
    \                                  ^~~~~~~~~\n/tmp/tmpj1t16xd_.swift:16:20: error:\
    \ no exact matches in call to initializer \n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Float16) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Float) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Double) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Float80) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:16:20:\
    \ note: found candidate with type '(String) -> Int?'\n        return Err(Int(errorCode:\
    \ ErrorCode.InvalidInput))\n                   ^\n/tmp/tmpj1t16xd_.swift:15:11:\
    \ error: initializer for conditional binding must have Optional type, not '[String.SubSequence]'\
    \ (aka 'Array<Substring>')\n    guard let words = txt.split(separator: \" \")\
    \ else {\n          ^           ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj1t16xd_.swift:22:16:\
    \ error: cannot find 'Err' in scope\n        return Err(Int(errorCode: ErrorCode.InvalidInput))\n\
    \               ^~~\n/tmp/tmpj1t16xd_.swift:22:35: error: cannot f"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let commaWords = txt.components(separatedBy:\
    \ \",\")\n    \n    if words.count == 0 {\n        return .failure(words.count)\n\
    \    }\n    \n    if commaWords.count == 0 {\n        return .success(words)\n\
    \    }\n    \n    if words.count != commaWords.count {\n        return .failure(words.count)\n\
    \    }\n    \n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\".characters)\n\
    \    \n    var words: [String] = []\n    \n    for word in words {\n        words.append(word)\n\
    \    }\n    \n    for word in commaWords {\n        words.append(word)\n    }\n\
    \    \n    var oddCount = 0\n    \n    for word in words {\n        if let index\
    \ = alphabet.index(of: word) {\n            if index%2 == 1 {\n              \
    \  oddCount += 1\n            }\n        }\n    }\n    \n    if oddCount == 0\
    \ {\n        return .success(words)\n    }\n    \n    return .failure(oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpu81261jd.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpu81261jd.swift:16:26: error: value of type 'String'\
    \ has no member 'components'\n    let commaWords = txt.components(separatedBy:\
    \ \",\")\n                     ~~~ ^~~~~~~~~~\n/tmp/tmpu81261jd.swift:30:55: error:\
    \ 'characters' is unavailable: Please use String directly\n    let alphabet =\
    \ Array(\"abcdefghijklmnopqrstuvwxyz\".characters)\n                         \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu81261jd.swift:45:43: error: cannot convert value of\
    \ type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \        if let index = alphabet.index(of: word) {\n                         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last\n    let letters = txt.unicodeScalars.filter\
    \ { $0.value > ord(\"a\") && $0.value < ord(\"z\") }.count\n    return .success(words.dropLast().append(comma).append(letters))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpnmp9f8cm.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpnmp9f8cm.swift:23:58: error: cannot find 'ord'\
    \ in scope\n    let letters = txt.unicodeScalars.filter { $0.value > ord(\"a\"\
    ) && $0.value < ord(\"z\") }.count\n                                         \
    \                ^~~\n/tmp/tmpnmp9f8cm.swift:23:81: error: cannot find 'ord' in\
    \ scope\n    let letters = txt.unicodeScalars.filter { $0.value > ord(\"a\") &&\
    \ $0.value < ord(\"z\") }.count\n                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    return .success(words.dropLast().append(comma))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp84j10wj_.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let commaIndex = words.count - 1\n   \
    \ let comma = words[commaIndex]\n    let letters = txt.lowercased().characters.count\n\
    \    let oddLetters = letters % 2\n    if oddLetters == 0 {\n        return .success(words)\n\
    \    }\n    if commaIndex == 0 {\n        return .success(words)\n    }\n    if\
    \ commaIndex == comma {\n        return .success(words)\n    }\n    return .failure(letters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpejijxlkq.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpejijxlkq.swift:24:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let letters = txt.lowercased().characters.count\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = wordCount + words.count - 1\n    let wordCountWithCommasWithOddOrder\
    \ = wordCountWithCommas + words.count - 1\n    let letterCount = txt.unicodeScalars.filter({\
    \ $0.isLetter }).count\n    let letterCountWithOddOrder = letterCount + letterCount\
    \ - 1\n    return .success(\n        words.map { $0.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ },\n        wordCount,\n        wordCountWithCommas,\n        wordCountWithCommasWithOddOrder,\n\
    \        letterCount,\n        letterCountWithOddOrder\n    )\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzniwaoaa.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpzniwaoaa.swift:22:54: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLetter'\n    let letterCount = txt.unicodeScalars.filter({\
    \ $0.isLetter }).count\n                                                  ~~ ^~~~~~~~\n\
    /tmp/tmpzniwaoaa.swift:23:47: error: cannot convert value of type 'String' to\
    \ expected argument type 'Int'\n    let letterCountWithOddOrder = letterCount\
    \ + letterCount - 1\n                                              ^\n/tmp/tmpzniwaoaa.swift:24:20:\
    \ error: extra arguments at positions #2, #3, #4, #5, #6 in call\n    return .success(\n\
    \                   ^\nSwift.Result:2:10: note: 'success' declared here\n    case\
    \ success(Success)\n         ^\n/tmp/tmpzniwaoaa.swift:25:48: error: cannot infer\
    \ contextual base in reference to member 'whitespacesAndNewlines'\n        words.map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) },\n                  \
    \                            ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let wordCount = words.count\n    let wordCountWithCommas\
    \ = wordCount + words.count - 1\n    let wordCountWithCommasWithOddOrder = wordCountWithCommas\
    \ + words.count - 1\n    let wordCountWithCommasWithOddOrderAndLowercaseLetters\
    \ = wordCountWithCommasWithOddOrder + words.count - 1\n    guard wordCountWithCommasWithOddOrderAndLowercaseLetters\
    \ % 2 == 0 else {\n        return .failure(wordCountWithCommasWithOddOrderAndLowercaseLetters)\n\
    \    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtth3a.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(26))))\n    }\n    \n    var words: [String]\
    \ = []\n    \n    for word in words {\n        if let wordCount = word.characters.count\
    \ {\n            if wordCount > 0 {\n                words.append(word)\n    \
    \        }\n        } else {\n            if let wordCount = word.characters.count\
    \ {\n                if wordCount > 0 {\n                    words.append(word)\n\
    \                }\n            } else {\n                if let wordCount = word.characters.count\
    \ {\n                    if wordCount > 0 {\n                        words.append(word)\n\
    \                    }\n                } else {\n                    if let wordCount\
    \ = word.characters.count {\n                        if wordCount > 0 {\n    \
    \                        words.append(word)\n                        }\n     \
    \               } else {\n                        if let wordCount = word.characters.count\
    \ {\n                            if wordCount > 0 {\n                        \
    \        words.append(word)\n                            }\n                 \
    \       } else {\n                            if let wordCount = word.characters.count\
    \ {\n                                if wordCount > 0 {\n                    \
    \                words.append(word)\n                                }\n     \
    \                       } else {\n                                if let wordCount\
    \ = word.characters.count {\n                                    if wordCount\
    \ > 0 {\n                                        words.append(word)\n        \
    \                            }\n                                } else {\n   \
    \                                 if let wordCount = word.characters.count {\n\
    \                                        if wordCount > 0 {\n                \
    \                            words.append(word)\n                            \
    \            }\n                                    } else {\n               \
    \                         if let wordCount = word.characters.count {\n       \
    \                                     if wordCount > 0 {\n                   \
    \                             words.append(word)\n                           \
    \                 }\n                                        } else {\n      \
    \                                      if let wordCount = word.characters.count\
    \ {\n                                                if wordCount > 0 {\n    \
    \                                                words.append(word)\n        \
    \                                        }\n                                 \
    \           } else {\n                                                if let wordCount\
    \ = word.characters.count {\n                                                \
    \    if wordCount > 0 {\n                                                    \
    \    words.append(word)\n                                                    }\n\
    \                                                } else {\n                  \
    \                                  if let wordCount = word.characters.count {\n\
    \                                                        if wordCount > 0 {\n\
    \                                                            words.append(word)\n\
    \                                                        }\n                 \
    \                                   } else {\n                               \
    \                         if let wordCount = word.characters.count {\n       \
    \                                                     if wordCount > 0 {\n   \
    \                                                             words.append(word)\n\
    \                                                            }\n             \
    \                                           } else {\n                       \
    \                                     if let wordCount = word.characters.count\
    \ {\n                                                                if wordCount\
    \ > 0 {\n                                                                    words.append(word)\n\
    \                                                                }\n         \
    \                                                   } else {\n               \
    \                                                 if let wordCount = word.characters.count\
    \ {\n                                                                    if wordCount\
    \ > 0 {\n                                                                    \
    \    words.append(word)\n                                                    \
    \                }\n                                                         \
    \       } else {\n                                                           \
    \         if let wordCount = word.characters.count {\n                       \
    \                                                                 if wordCount\
    \ > 0 {\n                                                            words.append(word)\n\
    \                                                                        }\n \
    \                                                                   } else {\n\
    \                                                                            \
    \                            if let wordCount = word.characters.count {\n    \
    \                                                                        if wordCount\
    \ > 0 {\n                                                                    \
    \            words.append(word)\n                                            \
    \                                }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmplnexxf6_.swift:129:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmplnexxf6_.swift:101:76: note: to match this opening '{'\n\
    \                                                                    } else {\n\
    \                                                                           ^\n\
    /tmp/tmplnexxf6_.swift:129:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmplnexxf6_.swift:96:72: note: to match this opening '{'\n\
    \                                                                } else {\n  \
    \                                                                     ^\n/tmp/tmplnexxf6_.swift:129:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmplnexxf6_.swift:91:68:\
    \ note: to match this opening '{'\n                                          \
    \                  } else {\n                                                \
    \                   ^\n/tmp/tmplnexxf6_.swift:129:44: error: expected '}' at end\
    \ of brace statement\nassert(split_words(txt: \"\") == .failure(0))\n        \
    \                                   ^\n/tmp/tmplnexxf6_.swift:86:64: note: to\
    \ match this opening '{'\n                                                   \
    \     } else {\n                                                             \
    \  ^\n/tmp/tmplnexxf6_.swift:129:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmplnexxf6_.swift:81:60: note: to match this opening '{'\n\
    \                                                    } else {\n              \
    \                                             ^\n/tmp/tmplnexxf6_.swift:129:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmplnexxf6_.swift:76:56:\
    \ note: to match this o"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let commaWords = words.filter { $0 == \",\"\
    \ }\n    guard commaWords.count > 0 else { return .failure(0) }\n    let lowercaseWords\
    \ = words.filter { $0.lowercased().count % 2 == 1 }\n    guard lowercaseWords.count\
    \ > 0 else { return .failure(0) }\n    let oddOrderWords = lowercaseWords.filter\
    \ { $0.lowercased().count % 2 == 0 }\n    guard oddOrderWords.count > 0 else {\
    \ return .failure(0) }\n    return .success(lowercaseWords)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpe9x4oekj.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    guard comma.count == 0 else { return .failure(0) }\n    let letters\
    \ = words.map { $0.lowercased().characters.count }\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp7u6fhzgb.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let commaWords = words.filter\
    \ {$0 == \",\"}\n    if commaWords.count == 0 {\n        return .success(words.map\
    \ {String($0)})\n    }\n    return .success(words.map {String($0)})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpujl1is2a.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ Err(Int(errorCode: errorCodes.invalidArgument))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return Err(Int(errorCode: errorCodes.invalidArgument))\n\
    \        }\n        \n        for letter in letters {\n            if let letter\
    \ = letter.lowercased() {\n                result.append(letter)\n           \
    \ }\n        }\n    }\n    \n    if result.count % 2 != 0 {\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n    }\n    \n    return .success(result)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp999vq9a1.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp999vq9a1.swift:16:16: error:\
    \ cannot find 'Err' in scope\n        return Err(Int(errorCode: errorCodes.invalidArgument))\n\
    \               ^~~\n/tmp/tmp999vq9a1.swift:16:35: error: cannot find 'errorCodes'\
    \ in scope\n        return Err(Int(errorCode: errorCodes.invalidArgument))\n \
    \                                 ^~~~~~~~~~\n/tmp/tmp999vq9a1.swift:16:20: error:\
    \ no exact matches in call to initializer \n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Float16) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Float) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Double) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Float80) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:16:20:\
    \ note: found candidate with type '(String) -> Int?'\n        return Err(Int(errorCode:\
    \ errorCodes.invalidArgument))\n                   ^\n/tmp/tmp999vq9a1.swift:34:16:\
    \ error: cannot find 'Err' in scope\n        return Err(Int(errorCode: errorCodes.invalidArgument))\n\
    \               ^~~\n/tmp/tmp999vq9a1.swift:34:35: error: cannot find 'errorCodes'\
    \ in s"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ > 0 {\n        return .success(result)\n    }\n    \n    if result.count ==\
    \ 0 {\n        return .success(result)\n    }\n    \n    if result.count == 1\
    \ {\n        return .success(result)\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpudq49lm2.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpudq49lm2.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpudq49lm2.swift:43:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let firstWord = words[0]\n\
    \    let lastWord = words[words.count - 1]\n    let firstLetter = firstWord.characters.first!\n\
    \    let lastLetter = lastWord.characters.last!\n    if firstLetter > lastLetter\
    \ {\n        return .failure(Int(txt.characters.count))\n    }\n    let alphabet\
    \ = firstWord.characters.map { $0 }\n    let alphabetCount = alphabet.count\n\
    \    let alphabetCount = alphabetCount + 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = alphabetCount\
    \ - 1\n    let alphabetCount = alphabetCount - 1\n    let alphabetCount = \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeebr9a6v.swift:86:24: error: expected initial value after '='\n\
    \    let alphabetCount = \n                       ^\n/tmp/tmpeebr9a6v.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpeebr9a6v.swift:17:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeebr9a6v.swift:27:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let chars = words.map\
    \ { $0.characters.count }\n    let odd = chars.filter { $0 % 2 != 0 }\n    if\
    \ odd.count == 0 {\n        return .success(words.map { $0.characters.map { String($0)\
    \ } })\n    }\n    return .success(words.map { $0.characters.map { String($0)\
    \ } })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbukczvb9.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpbukczvb9.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054371
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last.components(separatedBy: \"\
    ,\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n    if\
    \ comma.count == 1 {\n        return .success(words)\n    }\n    let letters =\
    \ words.last.characters.filter({ $0 >= 'a' && $0 <= 'z' }).count\n    if letters\
    \ % 2 == 1 {\n        return .success(words)\n    }\n    return .failure(Int(letters))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpf4ix97tq.swift:29:56: error: single-quoted string literal found,\
    \ use '\"'\n    let letters = words.last.characters.filter({ $0 >= 'a' && $0 <=\
    \ 'z' }).count\n                                                       ^~~\n \
    \                                                      \"a\"\n/tmp/tmpf4ix97tq.swift:29:69:\
    \ error: single-quoted string literal found, use '\"'\n    let letters = words.last.characters.filter({\
    \ $0 >= 'a' && $0 <= 'z' }).count\n                                          \
    \                          ^~~\n                                             \
    \                       \"z\"\n/tmp/tmpf4ix97tq.swift:15:21: error: value of type\
    \ 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    let words = words.compactMap { $0.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ }\n    \n    let letters = words.map { $0.lowercased() }\n    \n    let oddLetters\
    \ = letters.filter { $0.count % 2 == 1 }\n    \n    return .success(oddLetters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp54cb_r7b.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp54cb_r7b.swift:17:29: error: cannot find 'arc4random_uniform'\
    \ in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp54cb_r7b.swift:20:63:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    let words = words.compactMap { $0.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ }\n                                                             ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    if words.count > 2 {\n     \
    \   return .failure(words.count)\n    }\n    let word1 = words[0]\n    let word2\
    \ = words[1]\n    if word1.isEmpty {\n        return .failure(words.count)\n \
    \   }\n    if word2.isEmpty {\n        return .failure(words.count)\n    }\n \
    \   if word1.lowercased().count % 2 == 1 {\n        return .failure(words.count)\n\
    \    }\n    if word2.lowercased().count % 2 == 1 {\n        return .failure(words.count)\n\
    \    }\n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp4lwft1wg.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let result = words.map\
    \ { $0.lowercased() }\n    if words.count % 2 == 1 {\n        return .success(result)\n\
    \    }\n    if words.count % 2 == 0 {\n        return .failure(words.count / 2)\n\
    \    }\n    return .failure(words.count / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpw_2jm_qy.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    if words.count > 25 {\n        return .failure(25)\n\
    \    }\n    let chars = words.map { String($0).lowercased() }\n    let even =\
    \ chars.filter { $0.count % 2 == 0 }\n    let odd = chars.filter { $0.count %\
    \ 2 != 0 }\n    return .success(even.count + odd.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpa3d3ig1c.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    let wordCount = words.count\n    let wordsInAlphabet\
    \ = words.filter { $0.count > 0 }\n    let wordsInAlphabetCount = wordsInAlphabet.count\n\
    \    let wordsInAlphabetOddCount = wordsInAlphabet[wordsInAlphabetCount - 1].count\
    \ % 2\n    \n    if wordsInAlphabetOddCount > 0 {\n        return .success(wordsInAlphabet)\n\
    \    } else {\n        return .success(wordCount)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpnmm4lnyb.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(txt.count)\n    }\n    if words.count == 1 {\n      \
    \  return .success(words)\n    }\n    let wordCount = words.count\n    let letterCount\
    \ = words.reduce(0) { $0 + $1.count }\n    if letterCount % 2 == 1 {\n       \
    \ return .failure(letterCount)\n    }\n    return .success(words.map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz2hak9ky.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpz2hak9ky.swift:27:60: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n    return .success(words.map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) })\n                  \
    \                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(25)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().count }\n    if letters.count == 0 {\n       \
    \ return .success(words)\n    }\n    if letters.count == 1 {\n        return .success(words)\n\
    \    }\n    if letters.count == 2 {\n        return .success(words)\n    }\n \
    \   if letters.count == 3 {\n        return .success(words)\n    }\n    if letters.count\
    \ == 4 {\n        return .success(words)\n    }\n    if letters.count == 5 {\n\
    \        return .success(words)\n    }\n    if letters.count == 6 {\n        return\
    \ .success(words)\n    }\n    if letters.count == 7 {\n        return .success(words)\n\
    \    }\n    if letters.count == 8 {\n        return .success(words)\n    }\n \
    \   if letters.count == 9 {\n        return .success(words)\n    }\n    if letters.count\
    \ == 10 {\n        return .success(words)\n    }\n    if letters.count == 11 {\n\
    \        return .success(words)\n    }\n    if letters.count == 12 {\n       \
    \ return .success(words)\n    }\n    if letters.count == 13 {\n        return\
    \ .success(words)\n    }\n    if letters.count == 14 {\n        return .success(words)\n\
    \    }\n    if letters.count == 15 {\n        return .success(words)\n    }\n\
    \    if letters.count == 16 {\n        return .success(words)\n    }\n    if letters.count\
    \ == 17 {\n        return .success(words)\n    }\n    if letters.count == 18 {\n\
    \        return .success(words)\n    }\n    if letters.count == 19 {\n       \
    \ return .success(words)\n    }\n    if letters.count == 20 {\n        return\
    \ .success(words)\n    }\n    if letters.count == 21 {\n        return .success(words)\n\
    \    }\n    if letters.count == 22 {\n        return .success(words)\n    }\n\
    \    if letters.count == 23 {\n        return .success(words)\n    }\n    if letters.count\
    \ == 24 {\n        return .success(words)\n    }\n    if letters.count == 25 {\n\
    \        return .success(words)\n    }\n    return .failure(25)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp533py19z.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    \n    let wordCount = words.count\n\
    \    let wordCountWithCommas = wordCount + words.count - 1\n    let wordCountWithCommasWithOddOrder\
    \ = wordCountWithCommas + words.count - 1\n    \n    if wordCountWithCommasWithOddOrder\
    \ % 2 == 1 {\n        return .success(words.map { $0.lowercased() })\n    } else\
    \ {\n        return .success(words.map { $0.lowercased() })\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphrwghc7p.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmphrwghc7p.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    \n    let wordCount = words.count\n    let\
    \ wordCountWithCommas = words.count - 1\n    let letterCount = words.reduce(0)\
    \ { $0 + count($1, \",\") }\n    \n    guard letterCount % 2 == 1 else { return\
    \ .failure(letterCount) }\n    \n    return .success(words.dropFirst(wordCountWithCommas))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqp2l92d1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpqp2l92d1.swift:20:46: error: cannot find 'count'\
    \ in scope\n    let letterCount = words.reduce(0) { $0 + count($1, \",\") }\n\
    \                                             ^~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let commaWords = words.filter { $0 == \",\" }\n\
    \    if commaWords.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbm729xzq.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv8vcevv3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    return .success(words.filter\
    \ {\n        !$0.isEmpty && $0.characters.count > 0\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpg2beevyy.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpg2beevyy.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpl6825t3p.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpl6825t3p.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    guard words.count % 2 == 0 else { return .failure(0)\
    \ }\n    guard let first = words.first else { return .failure(0) }\n    let count\
    \ = words.count / 2\n    return .success(words.prefix(count).map { $0.trimmingCharacters(in:\
    \ .whitespaces) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp7qzp_4cr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp7qzp_4cr.swift:20:74: error: cannot infer contextual\
    \ base in reference to member 'whitespaces'\n    return .success(words.prefix(count).map\
    \ { $0.trimmingCharacters(in: .whitespaces) })\n                             \
    \                                           ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(txt.count)\n    }\n    \n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    \n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    \n    let letters = words.dropLast().map { $0.lowercased().count }\n\
    \    \n    return .success(letters.filter { $0 % 2 == 1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp01vuu2f8.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    if comma.count == 1 {\n        return .success(words)\n    }\n   \
    \ let letters = words.dropLast().map({ $0.lowercased() })\n    return .success(letters.filter\
    \ { letters.count % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9kit0kgx.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().characters.count }\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx98tshpr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx98tshpr.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    let letters\
    \ = words.map { $0.lowercased().characters.count }\n    return .success(letters.filter\
    \ { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx98tshpr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx98tshpr.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let wordCount = words.count\n\
    \    let wordsInAlphabet = words.filter { $0.count > 0 }\n    let wordsInAlphabetCount\
    \ = wordsInAlphabet.count\n    let oddOrderWords = wordsInAlphabet.filter { $0.count\
    \ % 2 == 1 }\n    let oddOrderWordCount = oddOrderWords.count\n    let evenOrderWords\
    \ = wordsInAlphabet.filter { $0.count % 2 == 0 }\n    let evenOrderWordCount =\
    \ evenOrderWords.count\n    \n    if wordsInAlphabetCount == 0 {\n        return\
    \ .success(wordsInAlphabet)\n    }\n    \n    if oddOrderWordCount == 0 {\n  \
    \      return .success(wordsInAlphabet)\n    }\n    \n    if evenOrderWordCount\
    \ == 0 {\n        return .success(wordsInAlphabet)\n    }\n    \n    return .success(wordsInAlphabet)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmppheian1h.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let commaWords = words.filter { $0 ==\
    \ \",\" }\n    if commaWords.count == 0 {\n        return .success(words)\n  \
    \  }\n    let letters = words.map { $0.lowercased() }\n    let oddLetters = letters.filter\
    \ { $0 % 2 == 1 }\n    if oddLetters.count == 0 {\n        return .success(words)\n\
    \    }\n    return .success(letters.filter { $0 % 2 == 0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0hzbsb5i.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var words:\
    \ [String] = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \        }\n        \n        for letter in letters {\n            guard let letter\
    \ = letter.lowercased() else {\n                return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \            }\n            \n            if letter != letter {\n            \
    \    words.append(letter)\n            }\n        }\n    }\n    \n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpesb6she8.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpesb6she8.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpesb6she8.swift:22:34:\
    \ error: value of type 'String' has no member 'components'\n        guard let\
    \ letters = word.components(separatedBy: \",\") else {\n                     \
    \       ~~~~ ^~~~~~~~~~\n/tmp/tmpesb6she8.swift:23:33: error: cannot find 'arc4random_uniform'\
    \ in scope\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.split(separator: \" \").map(String.init) else {\n \
    \       return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n \
    \   \n    let wordCount = words.count\n    \n    guard wordCount > 0 else {\n\
    \        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n\
    \    \n    guard wordCount % 2 == 0 else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    \n    let wordCountWithOddOrder = wordCount / 2\n    \n    let alphabet\
    \ = Array(UnicodeScalar.lowercaseLetters.unicodeScalars.map { $0.value })\n  \
    \  \n    let oddOrder = Array(alphabet[0 ..< wordCountWithOddOrder])\n    \n \
    \   let evenOrder = Array(alphabet[wordCountWithOddOrder ..< alphabet.count])\n\
    \    \n    let result = oddOrder.append(evenOrder)\n    \n    return .success(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1wrk1d0d.swift:16:29: error: cannot find 'arc4random_uniform' in\
    \ scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1wrk1d0d.swift:15:11:\
    \ error: initializer for conditional binding must have Optional type, not '[String]'\n\
    \    guard let words = txt.split(separator: \" \").map(String.init) else {\n \
    \         ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1wrk1d0d.swift:22:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1wrk1d0d.swift:26:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp1wrk1d0d.swift:31:40:\
    \ error: type 'UnicodeScalar' (aka 'Unicode.Scalar') has no member 'lowercaseLetters'\n\
    \    let alphabet = Array(UnicodeScalar.lowercaseLetters.unicodeScalars.map {\
    \ $0.value })\n                         ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    let wordCountWithCommas\
    \ = words.count - 1\n    if wordCountWithCommas == 0 {\n        return .success(words)\n\
    \    }\n    let wordCountWithCommasWithOddOrder = wordCountWithCommas - 1\n  \
    \  if wordCountWithCommasWithOddOrder % 2 == 1 {\n        return .success(words)\n\
    \    }\n    return .success(Array(words[0..<wordCountWithCommasWithOddOrder]))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp47gnkbce.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    if wordCount == 1 {\n        return .success(words)\n    }\n    \n  \
    \  let wordCount2 = words.count - 1\n    \n    if wordCount2 == 0 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount2 == 1 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount2 == 2 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount2 == 3 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount2 == 4 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount2 == 5 {\n        return .success(words)\n    }\n    \n    if wordCount2\
    \ == 6 {\n        return .success(words)\n    }\n    \n    if wordCount2 == 7\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount2 == 8 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount2 == 9 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount2 == 10 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount2 == 11 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount2 == 12 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount2 == 13 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount2 == 14 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount2 == 15 {\n        return .success(words)\n    }\n    \n    if wordCount2\
    \ == 16 {\n        return .success(words)\n    }\n    \n    if wordCount2 == 17\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount2 == 18 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount2 == 19 {\n    \
    \    return .success(words)\n    }\n    \n    if wordCount2 == 20 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount2 == 21 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount2 == 22 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount2 == 23 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount2 == 24 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount2 == 25 {\n        return .success(words)\n    }\n    \n    if wordCount2\
    \ == 26 {\n        return .success(words)\n    }\n    \n    if wordCount2 == 27\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount2 == 28 {\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp3vi5ndc3.swift:163:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmp3vi5ndc3.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmp3vi5ndc3.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp3vi5ndc3.swift:144:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let wordCount\
    \ = words.count\n    let letterCount = txt.characters.count\n    let oddLetterCount\
    \ = letterCount - wordCount\n    let oddLetters = oddLetterCount / 2\n    let\
    \ evenLetters = letterCount - oddLetterCount\n    let oddLettersWords = words.filter\
    \ { $0.count % 2 == 1 }\n    let evenLettersWords = words.filter { $0.count %\
    \ 2 == 0 }\n    let oddLettersWordCount = oddLettersWords.count\n    let evenLettersWordCount\
    \ = evenLettersWords.count\n    let oddLettersWordsCount = oddLettersWords.map\
    \ { $0.count }\n    let evenLettersWordsCount = evenLettersWords.map { $0.count\
    \ }\n    \n    if oddLettersWordCount == 0 {\n        return .success(oddLettersWords)\n\
    \    }\n    if evenLettersWordCount == 0 {\n        return .success(evenLettersWords)\n\
    \    }\n    \n    if oddLettersWordsCount == oddLettersWordCount {\n        return\
    \ .success(oddLettersWords)\n    }\n    if evenLettersWordsCount == evenLettersWordsCount\
    \ {\n        return .success(evenLettersWords)\n    }\n    \n    if oddLettersWordsCount\
    \ == oddLettersWordCount {\n        return .success(oddLettersWords)\n    }\n\
    \    if evenLettersWordsCount == evenLettersWordsCount {\n        return .success(evenLettersWords)\n\
    \    }\n    \n    if oddLettersWordsCount == oddLettersWordCount {\n        return\
    \ .success(oddLettersWords)\n    }\n    if evenLettersWordsCount == evenLettersWordsCount\
    \ {\n        return .success(evenLettersWords)\n    }\n    \n    if oddLettersWordsCount\
    \ == oddLettersWordCount {\n        return .success(oddLettersWords)\n    }\n\
    \    if evenLettersWordsCount == evenLettersWordsCount {\n        return .success(evenLettersWords)\n\
    \    }\n    \n    if oddLettersWordsCount == oddLettersWordCount {\n        return\
    \ .success(oddLettersWords)\n    }\n    if evenLettersWordsCount == evenLettersWordsCount\
    \ {\n        return .success(evenLettersWords)\n    }\n    \n    if oddLettersWordsCount\
    \ == oddLettersWordCount {\n        return .success(oddLetters\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp85vma_p3.swift:75:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp85vma_p3.swift:74:24: note: to match this opening '('\n        return\
    \ .success(oddLetters\n                       ^\n/tmp/tmp85vma_p3.swift:97:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmp85vma_p3.swift:14:56:\
    \ note: to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmp85vma_p3.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp85vma_p3.swift:17:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp85vma_p3.swift:20:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let letterCount = txt.characters.count\n   \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp85vma_p3.swift:78:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let lowercaseLetterCount\
    \ = words.filter { $0.lowercased().count % 2 == 1 }.count\n    let oddLetterCount\
    \ = words.filter { $0.lowercased().count % 2 == 0 }.count\n    return .success(wordCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmg9awdu8.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    if wordCount\
    \ == 1 {\n        return .success(words)\n    }\n    let wordArray = words.map\
    \ { $0.lowercased() }\n    let evenWords = wordArray.filter { $0.count % 2 ==\
    \ 0 }\n    let oddWords = wordArray.filter { $0.count % 2 != 0 }\n    let evenLetters\
    \ = evenWords.map { $0.count }\n    let oddLetters = oddWords.map { $0.count }\n\
    \    let evenLettersCount = evenLetters.reduce(0, +)\n    let oddLettersCount\
    \ = oddLetters.reduce(0, +)\n    if evenLettersCount > oddLettersCount {\n   \
    \     return .success(evenWords)\n    } else {\n        return .success(oddWords)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9ik6zw1j.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ Err(Int(errorCode: ErrorCode.invalidArgument))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n    }\n\
    \    \n    if result.count == 1 {\n        return .success(result)\n    }\n  \
    \  \n    if result.count % 2 == 1 {\n        return .success(result)\n    }\n\
    \    \n    return .failure(Int(errorCode: ErrorCode.invalidArgument))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqbu43jpf.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpqbu43jpf.swift:16:16: error:\
    \ cannot find 'Err' in scope\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \               ^~~\n/tmp/tmpqbu43jpf.swift:16:35: error: cannot find 'ErrorCode'\
    \ in scope\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n  \
    \                                ^~~~~~~~~\n/tmp/tmpqbu43jpf.swift:16:20: error:\
    \ no exact matches in call to initializer \n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Float16) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Float) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Double) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Float80) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:16:20:\
    \ note: found candidate with type '(String) -> Int?'\n        return Err(Int(errorCode:\
    \ ErrorCode.invalidArgument))\n                   ^\n/tmp/tmpqbu43jpf.swift:28:16:\
    \ error: cannot find 'Err' in scope\n        return Err(Int(errorCode: ErrorCode.invalidArgument))\n\
    \               ^~~\n/tmp/tmpqbu43jpf.swift:28:35: error: cannot find 'ErrorCode'\
    \ in scope\n        r"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    guard words.count % 2 == 0 else { return .failure(2)\
    \ }\n    guard let letters = words.map(String.init).map({ String($0) }).map({\
    \ String($0.lowercased()) }) else {\n        return .failure(3)\n    }\n    let\
    \ evenLetters = letters.filter({ $0.count % 2 == 0 })\n    let oddLetters = letters.filter({\
    \ $0.count % 2 != 0 })\n    return .success(evenLetters + oddLetters)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpde7_799y.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpde7_799y.swift:18:25: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    guard let letters = words.map(String.init).map({\
    \ String($0) }).map({ String($0.lowercased()) }) else {\n                    \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpde7_799y.swift:23:33: error: cannot convert value of type 'String' to\
    \ expected argument type '[String]'\n    return .success(evenLetters + oddLetters)\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660054384
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let commaIndex = words.count - 1\n   \
    \ let comma = words.last!\n    if commaIndex < words.count - 1 {\n        let\
    \ commaIndex = words.count - 1\n        let comma = words.last!\n        let lastIndex\
    \ = words.count - 1\n        let lastWord = words.last!\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count - 1\n\
    \        let lastWordIndex = words.count - 1\n        let lastWordIndex = words.count\
    \ - 1\n        let lastWordIndex = words.count - 1\n        let lastWordIndex\
    \ = words.count - 1\n        let lastWordIndex = words.count - 1\n        let\
    \ lastWordIndex = words.count - 1\n        let lastWordIndex = words.count \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8y2hft63.swift:104:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmp8y2hft63.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmp8y2hft63.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp8y2hft63.swift:85:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(1))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let letterCount\
    \ = words.reduce(0) { (sum, word) -> Int in\n        let letterCount = word.characters.count\n\
    \        return sum + letterCount\n    }\n    return .success(Array(words.prefix(wordCount).map\
    \ { $0.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpl90ca438.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpl90ca438.swift:25:20: error: cannot convert return\
    \ expression of type 'String' to return type 'Int'\n        return sum + letterCount\n\
    \               ~~~~^~~~~~~~~~~~~\n/tmp/tmpl90ca438.swift:27:83: error: cannot\
    \ find 'CharacterSet' in scope\n    return .success(Array(words.prefix(wordCount).map\
    \ { $0.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) }))\n     \
    \                                                                            \
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    if words.count % 2 == 1 {\n        return\
    \ .success(words.prefix(words.count / 2))\n    }\n    return .success(words.prefix(words.count\
    \ / 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpw0d6kke9.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let wordCount\
    \ = words.count\n    let wordCountWithCommas = wordCount + words.count - 1\n \
    \   let wordCountWithCommasWithOddOrder = wordCountWithCommas + words.count -\
    \ 1\n    if wordCountWithCommasWithOddOrder % 2 == 1 {\n        return .failure(wordCountWithCommasWithOddOrder)\n\
    \    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpkwn9wzf_.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpkwn9wzf_.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord = words[words.count\
    \ - 1]\n    if firstWord.characters.count == 0 {\n        return .failure(Int(0))\n\
    \    }\n    if lastWord.characters.count == 0 {\n        return .success(firstWord.characters.count)\n\
    \    }\n    if firstWord.characters.count == lastWord.characters.count {\n   \
    \     return .success(firstWord.characters.count)\n    }\n    if firstWord.characters.count\
    \ > lastWord.characters.count {\n        return .success(firstWord.characters.count)\n\
    \    }\n    if firstWord.characters.count < lastWord.characters.count {\n    \
    \    return .success(lastWord.characters.count)\n    }\n    if firstWord.characters.count\
    \ < 26 {\n        return .success(firstWord.characters.count)\n    }\n    if firstWord.characters.count\
    \ > 26 {\n        return .success(lastWord.characters.count)\n    }\n    if firstWord.characters.count\
    \ % 2 == 0 {\n        return .success(firstWord.characters.count)\n    }\n   \
    \ if firstWord.characters.count % 2 == 1 {\n        return .success(lastWord.characters.count)\n\
    \    }\n    return .failure(Int(0))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp674wet0u.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    return .success(words.map\
    \ { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgf7ttjy4.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpgf7ttjy4.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    if wordCount == 1 {\n        return .success(words)\n    }\n    \n  \
    \  if wordCount == 2 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 3 {\n        return .success(words)\n    }\n    \n    if wordCount == 4 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 5 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 6 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 7 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 8 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 9 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 10 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 11 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 12 {\n        return .success(words)\n    }\n    \n    if wordCount == 13\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 14 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 15 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 16 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 17 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 18 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 19 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 20 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 21 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 22 {\n        return .success(words)\n    }\n    \n    if wordCount == 23\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 24 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 25 {\n      \
    \  return .success(words)\n    }\n    \n    return .failure(wordCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp639k9sja.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    \n    var result = [String]()\n    \n    for\
    \ word in words {\n        let splits = word.components(separatedBy: \",\")\n\
    \        \n        if splits.count > 0 {\n            for split in splits {\n\
    \                result.append(split)\n            }\n        } else {\n     \
    \       result.append(word)\n        }\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    } else {\n        return .failure(result.count\
    \ / 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp3s337cqw.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n    let wordCountWithCommas\
    \ = words.count + words.count - 1\n    if wordCountWithCommas == 0 {\n       \
    \ return .success(words)\n    }\n    let lowerCaseLetterCount = words.filter {\
    \ $0.lowercased().count % 2 == 1 }.count\n    return .success(words.filter { $0.lowercased().count\
    \ % 2 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpg8c1hwch.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words)\n    }\n \
    \   if comma.count == 1 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 2 {\n        return .success(words)\n    }\n    if comma.count == 3 {\n \
    \       return .success(words)\n    }\n    if comma.count == 4 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 5 {\n        return .success(words)\n\
    \    }\n    if comma.count == 6 {\n        return .success(words)\n    }\n   \
    \ if comma.count == 7 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 8 {\n        return .success(words)\n    }\n    if comma.count == 9 {\n \
    \       return .success(words)\n    }\n    if comma.count == 10 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 11 {\n        return .success(words)\n\
    \    }\n    if comma.count == 12 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 13 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 14 {\n        return .success(words)\n    }\n    if comma.count == 15 {\n\
    \        return .success(words)\n    }\n    if comma.count == 16 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 17 {\n        return .success(words)\n\
    \    }\n    if comma.count == 18 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 19 {\n        return .success(words)\n    }\n    if comma.count\
    \ == 20 {\n        return .success(words)\n    }\n    if comma.count == 21 {\n\
    \        return .success(words)\n    }\n    if comma.count == 22 {\n        return\
    \ .success(words)\n    }\n    if comma.count == 23 {\n        return .success(words)\n\
    \    }\n    if comma.count == 24 {\n        return .success(words)\n    }\n  \
    \  if comma.count == 25 {\n        return .success(words)\n    }\n    return .failure(Int(txt.characters.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvb4j2cgg.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpvb4j2cgg.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvb4j2cgg.swift:101:29: error: 'characters' is unavailable:\
    \ Please use String directly\n    return .failure(Int(txt.characters.count))\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    let wordCountWithCommas = words.count - 1\n    let letterCount = words.reduce(0)\
    \ { $0 + count($1, \",\") }\n    let letterCountWithOddOrder = letterCount - 1\n\
    \    if wordCount == 0 || wordCount == 1 || wordCount == 2 || wordCount == 3 ||\
    \ wordCount == 4 || wordCount == 5 || wordCount == 6 || wordCount == 7 || wordCount\
    \ == 8 || wordCount == 9 || wordCount == 10 || wordCount == 11 || wordCount ==\
    \ 12 || wordCount == 13 || wordCount == 14 || wordCount == 15 || wordCount ==\
    \ 16 || wordCount == 17 || wordCount == 18 || wordCount == 19 || wordCount ==\
    \ 20 || wordCount == 21 || wordCount == 22 || wordCount == 23 || wordCount ==\
    \ 24 || wordCount == 25 {\n        return .success(words)\n    } else if wordCount\
    \ == wordCountWithCommas {\n        return .success(words)\n    } else if letterCount\
    \ == letterCountWithOddOrder {\n        return .success(words)\n    } else {\n\
    \        return .failure(letterCount)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpxmghiw97.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpxmghiw97.swift:18:46: error: cannot find 'count'\
    \ in scope\n    let letterCount = words.reduce(0) { $0 + count($1, \",\") }\n\
    \                                             ^~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv8vcevv3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054370
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let wordCount\
    \ = words.count\n    let wordChars = words.map { $0.characters.count }\n    let\
    \ wordCharsSum = wordChars.reduce(0, +)\n    let wordCharsSumOdd = wordCharsSum\
    \ % 2\n    let wordCharsSumEven = wordCharsSum / 2\n    if wordCharsSumOdd !=\
    \ 0 {\n        return .failure(Int(wordCharsSum))\n    }\n    if wordCharsSumEven\
    \ != 0 {\n        return .success(words.map { $0.lowercased() })\n    }\n    return\
    \ .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpc7pnffvj.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpc7pnffvj.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ < 2 {\n        return .failure(words.count)\n    }\n    \n    if words.count\
    \ > 2 {\n        return .failure(words.count)\n    }\n    \n    if words.count\
    \ == 2 {\n        return .success(words)\n    }\n    \n    if words.count == 1\
    \ {\n        return .success([\"\\(words[0])\"])\n    }\n    \n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwadrt5ur.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    guard words.count <= 25 else {\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \    }\n    let result = words.map { $0.lowercased() }\n    return .success(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_ii9uxmp.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp_ii9uxmp.swift:17:29: error: cannot find 'arc4random_uniform'\
    \ in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_ii9uxmp.swift:20:29:\
    \ error: cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else { return .failure(0) }\n    \n    let wordCount = words.count\n    \n \
    \   let letterCount = words.reduce(0) { (sum, word) -> Int in\n        let count\
    \ = word.count\n        if count == 1 { return count }\n        return sum + count\n\
    \    }\n    \n    if letterCount % 2 == 1 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    } else {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpem4e_0im.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpem4e_0im.swift:23:20: error: cannot convert return\
    \ expression of type 'String' to return type 'Int'\n        return sum + count\n\
    \               ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.split(separator: \" \") else {\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n    }\n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp28sz9eve.swift:16:29: error: cannot find 'arc4random_uniform' in\
    \ scope\n        return .failure(Int(arc4random_uniform(25) + 1))\n          \
    \                  ^~~~~~~~~~~~~~~~~~\n/tmp/tmp28sz9eve.swift:15:11: error: initializer\
    \ for conditional binding must have Optional type, not '[String.SubSequence]'\
    \ (aka 'Array<Substring>')\n    guard let words = txt.split(separator: \" \")\
    \ else {\n          ^           ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp28sz9eve.swift:18:21:\
    \ error: cannot convert value of type '[String.SubSequence]' (aka 'Array<Substring>')\
    \ to expected argument type '[String]'\n    return .success(words)\n         \
    \           ^\n/tmp/tmp28sz9eve.swift:18:21: note: arguments to generic parameter\
    \ 'Element' ('String.SubSequence' (aka 'Substring') and 'String') are expected\
    \ to be equal\n    return .success(words)\n                    ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return .failure(Int(arc4random_uniform(25) + 1))\n\
    \        }\n        \n        for letter in letters {\n            if let count\
    \ = letters.filter({ $0.isLetter }).count {\n                if count % 2 == 1\
    \ {\n                    result.append(letter)\n                }\n          \
    \  }\n        }\n    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpthxc8vt1.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpthxc8vt1.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    guard words.count > 0\
    \ else {\n        return .failure(Int(arc4random_uniform(25) + 1))\n    }\n  \
    \  \n    let result = words.map { $0.components(separatedBy: \",\").map { $0.lowercased()\
    \ } }\n    \n    guard result.count == words.count else {\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n    }\n    \n    return .success(result)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp7tc4zpnc.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp7tc4zpnc.swift:17:29: error: cannot find 'arc4random_uniform'\
    \ in scope\n        return .failure(Int(arc4random_uniform(25) + 1))\n       \
    \                     ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7tc4zpnc.swift:23:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    if words.count % 2 == 1 {\n        return\
    \ .success(words.prefix(words.count / 2))\n    }\n    return .success(words.prefix(words.count\
    \ / 2 + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmplvfr1xug.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(words.count)\n    }\n    \n    let wordCount\
    \ = words.count\n    \n    if words.count % 2 == 1 {\n        return .failure(wordCount)\n\
    \    }\n    \n    let letterCount = words.count / 2\n    \n    let alphabet =\
    \ Array(1...26).map { String($0) }\n    \n    let oddLetters = alphabet.filter\
    \ { $0 % 2 == 1 }\n    \n    return .success(words.prefix(wordCount).map { word\
    \ in \n        word.components(separatedBy: \",\")\n            .map { String($0)\
    \ }\n            .filter { !oddLetters.contains($0) }\n            .map { String($0)\
    \ }\n            .map { $0.lowercased() }\n            .map { $0 + String(letterCount)\
    \ }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz7id9slj.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpz7id9slj.swift:31:40: error: cannot convert value\
    \ of type 'String' to expected argument type 'Int'\n    let oddLetters = alphabet.filter\
    \ { $0 % 2 == 1 }\n                                       ^\n/tmp/tmpz7id9slj.swift:33:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return .success(words.prefix(wordCount).map\
    \ { word in \n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054393
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  if words.count == 1 {\n        return .success(words)\n    }\n    \n    if\
    \ words.count == 2 {\n        return .success([\"Hello\", \"world!\"])\n    }\n\
    \    \n    if words.count == 3 {\n        return .success([\"Hello\", \"world!\"\
    ])\n    }\n    \n    if words.count == 4 {\n        return .success([\"Hello\"\
    , \"world!\"])\n    }\n    \n    if words.count == 5 {\n        return .success([\"\
    Hello\", \"world!\"])\n    }\n    \n    if words.count == 6 {\n        return\
    \ .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count == 7 {\n\
    \        return .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count\
    \ == 8 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    \n    if\
    \ words.count == 9 {\n        return .success([\"Hello\", \"world!\"])\n    }\n\
    \    \n    if words.count == 10 {\n        return .success([\"Hello\", \"world!\"\
    ])\n    }\n    \n    if words.count == 11 {\n        return .success([\"Hello\"\
    , \"world!\"])\n    }\n    \n    if words.count == 12 {\n        return .success([\"\
    Hello\", \"world!\"])\n    }\n    \n    if words.count == 13 {\n        return\
    \ .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count == 14 {\n\
    \        return .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count\
    \ == 15 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    \n   \
    \ if words.count == 16 {\n        return .success([\"Hello\", \"world!\"])\n \
    \   }\n    \n    if words.count == 17 {\n        return .success([\"Hello\", \"\
    world!\"])\n    }\n    \n    if words.count == 18 {\n        return .success([\"\
    Hello\", \"world!\"])\n    }\n    \n    if words.count == 19 {\n        return\
    \ .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count == 20 {\n\
    \        return .success([\"Hello\", \"world!\"])\n    }\n    \n    if words.count\
    \ == 21 {\n        return .success([\"Hello\", \"world!\"])\n    }\n    \n   \
    \ if words.count == 22 {\n        return .success([\"Hello\", \"world!\"])\n \
    \   }\n    \n    if words.count == 23 {\n        return .success([\"Hello\", \"\
    world!\"])\n    }\n    \n    if words.count == 24 {\n        return .success([\"\
    Hello\", \"world!\"])\n    }\n    \n    if words.count == 25 {\n        return\
    \ .\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwpddpifj.swift:119:1: error: expected identifier after '.' expression\n\
    }\n^\n/tmp/tmpwpddpifj.swift:141:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpwpddpifj.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpwpddpifj.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpwpddpifj.swift:18:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwpddpifj.swift:122:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    \n  \
    \  let wordCount = words.count\n    \n    if wordCount == 1 {\n        return\
    \ .success(words)\n    }\n    \n    let wordCount2 = wordCount + 1\n    \n   \
    \ if wordCount == wordCount2 {\n        return .success(words)\n    }\n    \n\
    \    let wordCount3 = wordCount2 + 1\n    \n    if wordCount == wordCount3 {\n\
    \        return .success(words)\n    }\n    \n    let wordCount4 = wordCount3\
    \ + 1\n    \n    if wordCount == wordCount4 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount5 = wordCount4 + 1\n    \n    if wordCount == wordCount5\
    \ {\n        return .success(words)\n    }\n    \n    let wordCount6 = wordCount5\
    \ + 1\n    \n    if wordCount == wordCount6 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount7 = wordCount6 + 1\n    \n    if wordCount == wordCount7\
    \ {\n        return .success(words)\n    }\n    \n    let wordCount8 = wordCount7\
    \ + 1\n    \n    if wordCount == wordCount8 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount9 = wordCount8 + 1\n    \n    if wordCount == wordCount9\
    \ {\n        return .success(words)\n    }\n    \n    let wordCount10 = wordCount9\
    \ + 1\n    \n    if wordCount == wordCount10 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount11 = wordCount10 + 1\n    \n    if wordCount ==\
    \ wordCount11 {\n        return .success(words)\n    }\n    \n    let wordCount12\
    \ = wordCount11 + 1\n    \n    if wordCount == wordCount12 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount13 = wordCount12 + 1\n    \n    if wordCount ==\
    \ wordCount13 {\n        return .success(words)\n    }\n    \n    let wordCount14\
    \ = wordCount13 + 1\n    \n    if wordCount == wordCount14 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount15 = wordCount14 + 1\n    \n    if wordCount ==\
    \ wordCount15 {\n        return .success(words)\n    }\n    \n    let wordCount16\
    \ = wordCount15 + 1\n    \n    if wordCount == wordCount16 {\n        return .success(words)\n\
    \    }\n    \n    let wordCount17 = wordCount16 + 1\n    \n    if wordCount ==\
    \ wordCount17 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzqn1j0si.swift:142:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpzqn1j0si.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpzqn1j0si.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpzqn1j0si.swift:18:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzqn1j0si.swift:123:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let comma = words.last\n    if comma == \"\" {\n\
    \        return .success(words)\n    }\n    let commaWords = txt.components(separatedBy:\
    \ comma)\n    if commaWords.count == 0 {\n        return .failure(3)\n    }\n\
    \    if commaWords.count == 1 {\n        return .success(words)\n    }\n    let\
    \ letters = txt.unicodeScalars.filter { $0.isLetter }\n    if letters.count ==\
    \ 0 {\n        return .failure(3)\n    }\n    if letters.count == 1 {\n      \
    \  return .success(words)\n    }\n    let letterCount = letters.count\n    let\
    \ odd = letterCount % 2\n    if letterCount == 1 {\n        return .success(words)\n\
    \    }\n    if odd > 0 {\n        return .success(words)\n    }\n    return .success(letters.map\
    \ { String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv2ued3ca.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpv2ued3ca.swift:26:26: error: value of type 'String'\
    \ has no member 'components'\n    let commaWords = txt.components(separatedBy:\
    \ comma)\n                     ~~~ ^~~~~~~~~~\n/tmp/tmpv2ued3ca.swift:33:50: error:\
    \ value of type 'Unicode.Scalar' has no member 'isLetter'\n    let letters = txt.unicodeScalars.filter\
    \ { $0.isLetter }\n                                              ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let alphabet =\
    \ Array(Array(Array(0 ..< 26).map { String($0) }))\n    let alphabetCount = alphabet.count\n\
    \    let alphabetLetters = alphabet.map { $0.count }\n    let alphabetLettersCount\
    \ = alphabetLetters.count\n    let alphabetLettersOdd = alphabetLetters.filter\
    \ { $0 % 2 == 1 }\n    let alphabetLettersOddCount = alphabetLettersOdd.count\n\
    \    if alphabetLettersOddCount == 0 {\n        return .success(words)\n    }\n\
    \    if alphabetLettersOddCount == alphabetCount {\n        return .success(words)\n\
    \    }\n    if alphabetLettersOddCount == alphabetCount - 1 {\n        return\
    \ .success(words)\n    }\n    if alphabetLettersOddCount == alphabetCount - 2\
    \ {\n        return .success(words)\n    }\n    if alphabetLettersOddCount ==\
    \ alphabetCount - 3 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 4 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 5 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 6 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 7 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 8 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 9 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 10 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 11 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 12 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 13 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 14 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 15 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 16 {\n        return .success(words)\n    }\n    if alphabetLettersOddCount\
    \ == alphabetCount - 17 {\n        return .success(words)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmcnx4ap0.swift:107:44: error: expected '}' at end of brace statement\n\
    assert(split_words(txt: \"\") == .failure(0))\n                              \
    \             ^\n/tmp/tmpmcnx4ap0.swift:14:56: note: to match this opening '{'\n\
    func split_words(txt: String) -> Result<[String], Int> {\n                   \
    \                                    ^\n/tmp/tmpmcnx4ap0.swift:15:21: error: value\
    \ of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpmcnx4ap0.swift:88:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(25) + 1))\n    }\n    return .success(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpl6825t3p.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpl6825t3p.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(25)\
    \ + 1))\n                            ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let commaWords = words.filter{ $0.contains(\",\"\
    ) }\n    if commaWords.count == 0 {\n        return .success(words.map { $0.lowercased()\
    \ })\n    }\n    if commaWords.count == 1 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    }\n    let letters = words.map { $0.lowercased() }\n\
    \    let odd = letters.filter { $0 % 2 != 0 }\n    return .success(odd)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzxxyts8p.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return .success(result)\n    }\n    \n    if result.count ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8qq1lib8.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp8qq1lib8.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmp8qq1lib8.swift:39:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    if words.count % 2 != 0 {\n        return .failure(Int(words.count))\n\
    \    }\n    let even = words.filter{ $0.count % 2 == 0 }\n    let odd = words.filter{\
    \ $0.count % 2 != 0 }\n    if even.count > odd.count {\n        return .success(even)\n\
    \    }\n    return .success(odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpkkkgfqfn.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let firstWord = words[0]\n    let lastWord\
    \ = words[words.count - 1]\n    if firstWord.hasPrefix(\",\") {\n        return\
    \ .success(words.dropFirst())\n    }\n    if lastWord.hasSuffix(\",\") {\n   \
    \     return .success(words.dropLast())\n    }\n    if firstWord.hasSuffix(\"\
    ,\") {\n        return .success(words.dropLast())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst())\n    }\n    if firstWord.hasPrefix(\"\
    ,\") {\n        return .success(words.dropFirst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp76g4c2n6.swift:92:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp76g4c2n6.swift:91:24: note: to match this opening '('\n        return\
    \ .success(words.dropFirst\n                       ^\n/tmp/tmp76g4c2n6.swift:114:44:\
    \ error: expected '}' at end of brace statement\nassert(split_words(txt: \"\"\
    ) == .failure(0))\n                                           ^\n/tmp/tmp76g4c2n6.swift:14:56:\
    \ note: to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmp76g4c2n6.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmp76g4c2n6.swift:95:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let comma = words.last\n    if comma ==\
    \ \"\" {\n        return .success(words)\n    }\n    if comma == \",\" {\n   \
    \     return .success(words)\n    }\n    if let count = words.count {\n      \
    \  let letters = words.map { $0.lowercased().count }\n        return .success(letters.filter\
    \ { $0 % 2 == 1 })\n    }\n    return .failure(words.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvdpkvfpy.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var result\
    \ = [String]()\n    for word in words {\n        if let word = word.lowercased()\
    \ {\n            result.append(word)\n        }\n    }\n    \n    if result.count\
    \ == 0 {\n        return .success(result)\n    }\n    \n    if result.count >\
    \ 1 {\n        return .success(result)\n    }\n    \n    if result.count == 1\
    \ {\n        return .success(result)\n    }\n    \n    if result.count % 2 ==\
    \ 1 {\n        return .success(result)\n    }\n    \n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpm_7lp65x.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpm_7lp65x.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpm_7lp65x.swift:42:25:\
    \ error: cannot find 'arc4random_uniform' in scope\n    return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                        ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let wordCount\
    \ = words.count\n    let wordCountWithCommas = wordCount + words.count - 1\n \
    \   let wordCountWithCommasWithOddOrder = wordCountWithCommas + words.count -\
    \ 1\n    let wordCountWithCommasWithOddOrderWithOddLetter = wordCountWithCommasWithOddOrder\
    \ + words.count - 1\n    if wordCountWithCommasWithOddOrderWithOddLetter % 2 ==\
    \ 1 {\n        return .failure(Int(wordCountWithCommasWithOddOrderWithOddLetter))\n\
    \    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmwp120w3.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpmwp120w3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n    }\n    \n    var words:\
    \ [String] = []\n    \n    for word in words {\n        guard let letters = word.components(separatedBy:\
    \ \",\") else {\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \        }\n        \n        for letter in letters {\n            guard let letter\
    \ = letter.lowercased(), letter != letter else {\n                return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \            }\n            \n            if letters.count % 2 == 1 {\n      \
    \          words.append(letter)\n            } else {\n                words.append(letter)\n\
    \                words.append(letter)\n            }\n        }\n    }\n    \n\
    \    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpuj1zi0sy.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmpuj1zi0sy.swift:16:29: error:\
    \ cannot find 'arc4random_uniform' in scope\n        return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                            ^~~~~~~~~~~~~~~~~~\n/tmp/tmpuj1zi0sy.swift:22:34:\
    \ error: value of type 'String' has no member 'components'\n        guard let\
    \ letters = word.components(separatedBy: \",\") else {\n                     \
    \       ~~~~ ^~~~~~~~~~\n/tmp/tmpuj1zi0sy.swift:23:33: error: cannot find 'arc4random_uniform'\
    \ in scope\n            return .failure(Int(arc4random_uniform(UInt32(UInt8.max))))\n\
    \                                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count < 2 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 2 {\n    \
    \    return .success(words)\n    }\n    if words.count == 3 {\n        return\
    \ .success(words)\n    }\n    if words.count > 3 {\n        return .success(words)\n\
    \    }\n    return .success(words.map { $0.lowercased() })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwgkdg_do.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(words.count)\n    }\n    \n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    \n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    \n    if comma.count == 0 {\n        return .success(words)\n  \
    \  }\n    \n    if comma.count == 1 {\n        return .success(words)\n    }\n\
    \    \n    let letters = words.map { $0.lowercased().characters.count }\n    \n\
    \    if letters.count == 0 {\n        return .success(words)\n    }\n    \n  \
    \  if letters.count == 1 {\n        return .success(words)\n    }\n    \n    if\
    \ letters.count % 2 == 1 {\n        return .success(words)\n    }\n    \n    return\
    \ .success(letters.filter { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9g3hawc6.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let wordCount = words.count\n    let firstWord =\
    \ words[0]\n    let firstWordLength = firstWord.characters.count\n    let lastWord\
    \ = words[wordCount - 1]\n    let lastWordLength = lastWord.characters.count\n\
    \    let firstWordChars = firstWord.characters\n    let lastWordChars = lastWord.characters\n\
    \    \n    if firstWordLength == lastWordLength {\n        return .success(words)\n\
    \    }\n    \n    if firstWordLength > lastWordLength {\n        return .success(firstWordChars.prefix(firstWordLength))\n\
    \    }\n    \n    if firstWordLength < lastWordLength {\n        return .success(lastWordChars.suffix(lastWordLength))\n\
    \    }\n    \n    if firstWord.lowercased().characters.count == firstWordLength\
    \ {\n        return .success(firstWordChars.prefix(firstWordLength))\n    }\n\
    \    \n    if lastWord.lowercased().characters.count == lastWordLength {\n   \
    \     return .success(lastWordChars.suffix(lastWordLength))\n    }\n    \n   \
    \ return .failure(Int(0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_5mxzvkm.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    let wordCount = words.count\n   \
    \ let wordArray = words.map { $0.lowercased() }\n    let evenWordArray = wordArray.filter\
    \ { $0 % 2 == 0 }\n    let oddWordArray = wordArray.filter { $0 % 2 != 0 }\n \
    \   if wordArray.count == 0 {\n        return .failure(Int(0))\n    }\n    if\
    \ wordArray.count == 1 {\n        return .success(wordArray)\n    }\n    if wordArray.count\
    \ == 2 {\n        return .success(evenWordArray)\n    }\n    if wordArray.count\
    \ == 3 {\n        return .success(oddWordArray)\n    }\n    if wordArray.count\
    \ == 4 {\n        return .success(evenWordArray.prefix(2))\n    }\n    if wordArray.count\
    \ == 5 {\n        return .success(oddWordArray.prefix(2))\n    }\n    if wordArray.count\
    \ == 6 {\n        return .success(evenWordArray.prefix(3))\n    }\n    if wordArray.count\
    \ == 7 {\n        return .success(oddWordArray.prefix(3))\n    }\n    if wordArray.count\
    \ == 8 {\n        return .success(evenWordArray.prefix(4))\n    }\n    if wordArray.count\
    \ == 9 {\n        return .success(oddWordArray.prefix(4))\n    }\n    if wordArray.count\
    \ == 10 {\n        return .success(evenWordArray.prefix(5))\n    }\n    if wordArray.count\
    \ == 11 {\n        return .success(oddWordArray.prefix(5))\n    }\n    if wordArray.count\
    \ == 12 {\n        return .success(evenWordArray.prefix(6))\n    }\n    if wordArray.count\
    \ == 13 {\n        return .success(oddWordArray.prefix(6))\n    }\n    if wordArray.count\
    \ == 14 {\n        return .success(evenWordArray.prefix(7))\n    }\n    if wordArray.count\
    \ == 15 {\n        return .success(oddWordArray.prefix(7))\n    }\n    if wordArray.count\
    \ == 16 {\n        return .success(evenWordArray.prefix(8))\n    }\n    if wordArray.count\
    \ == 17 {\n        return .success(oddWordArray.prefix(8))\n    }\n    if wordArray.count\
    \ == 18 {\n        return .success(evenWordArray.prefix(9))\n    }\n    if wordArray.count\
    \ == 19 {\n        return .success(oddWordArray.prefix(9))\n    }\n    if wordArray.count\
    \ == 20 {\n        return .success(evenWordArray.prefix(10))\n    }\n    if wordArray.count\
    \ == 21 {\n        return .success(oddWordArray.prefix(10))\n    }\n    if wordArray.count\
    \ == 22 {\n        return .success(evenWordArray.prefix(11))\n    }\n    if wordArray.count\
    \ == 23 {\n        return .success(oddWord\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpldi28fgt.swift:94:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpldi28fgt.swift:93:24: note: to match this opening '('\n        return\
    \ .success(oddWord\n                       ^\n/tmp/tmpldi28fgt.swift:116:44: error:\
    \ expected '}' at end of brace statement\nassert(split_words(txt: \"\") == .failure(0))\n\
    \                                           ^\n/tmp/tmpldi28fgt.swift:14:56: note:\
    \ to match this opening '{'\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n                                                       ^\n/tmp/tmpldi28fgt.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpldi28fgt.swift:93:25: error:\
    \ cannot find 'oddWord' in scope\n        return .success(oddWord\n          \
    \              ^~~~~~~\n/tmp/tmpldi28fgt.swift:97:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let comma = words.last?.components(separatedBy:\
    \ \",\")\n    if comma?.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    return .success(words.dropLast().append(comma!))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpxegu8a6y.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    \n    let wordCount\
    \ = words.count\n    let wordCountWithCommas = wordCount + words.count - 1\n \
    \   \n    if wordCountWithCommas == 0 {\n        return .success(words)\n    }\n\
    \    \n    if wordCountWithCommas == 1 {\n        return .success(words)\n   \
    \ }\n    \n    if wordCountWithCommas == 2 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 3 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 4 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 5 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 6 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 7 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 8 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 9 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 10 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 11 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 12 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 13 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 14 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 15 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 16 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 17 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 18 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 19 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 20 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 21 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 22 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 23 {\n        return .success(words)\n\
    \    }\n    \n    if wordCountWithCommas == 24\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmva__1ap.swift:119:33: error: expected '{' after 'if' condition\n\
    \    if wordCountWithCommas == 24\n                                ^\n/tmp/tmpmva__1ap.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ \" \")\n                ~~~ ^~~~~~~~~~\n/tmp/tmpmva__1ap.swift:17:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let firstWord = words[0]\n    if firstWord.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n        return .success(words)\n    }\n    if firstWord.rangeOfCharacter(from:\
    \ .whitespacesAndNewlines) != nil {\n        return .success(words)\n    }\n \
    \   if firstWord.rangeOfCharacter(from: .whitespacesAndNewlines) == nil && firstWord.rangeOfCharacter(from:\
    \ .commas) != nil {\n        return .success(words)\n    }\n    if firstWord.rangeOfCharacter(from:\
    \ .commas) == nil {\n        return .success(words)\n    }\n    return .failure(words.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptuxiongy.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmptuxiongy.swift:23:42: error: cannot infer contextual\
    \ base in reference to member 'whitespaces'\n    if firstWord.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n                                        ~^~~~~~~~~~~\n\
    /tmp/tmptuxiongy.swift:26:42: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    if firstWord.rangeOfCharacter(from:\
    \ .whitespacesAndNewlines) != nil {\n                                        ~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptuxiongy.swift:29:42: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    if firstWord.rangeOfCharacter(from:\
    \ .whitespacesAndNewlines) == nil && firstWord.rangeOfCharacter(from: .commas)\
    \ != nil {\n                                        ~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptuxiongy.swift:29:110: error: cannot infer contextual base in reference\
    \ to member 'commas'\n    if firstWord.rangeOfCharacter(from: .whitespacesAndNewlines)\
    \ == nil && firstWord.rangeOfCharacter(from: .commas) != nil {\n             \
    \                                                                            \
    \                   ~^~~~~~\n/tmp/tmptuxiongy.swift:32:42: error: cannot infer\
    \ contextual base in reference to member 'commas'\n    if firstWord.rangeOfCharacter(from:\
    \ .commas) == nil {\n                                        ~^~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(3)\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    let firstWord = words[0]\n    let firstLetter =\
    \ firstWord.characters.first!\n    if firstLetter >= 97 && firstLetter <= 122\
    \ {\n        return .success(words)\n    }\n    return .success(firstWord.characters.map\
    \ { String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptcnte572.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    let commaWords = words.filter({\
    \ $0.isEmpty })\n    if commaWords.count == 0 {\n        return .success(words.map\
    \ { $0.lowercased() })\n    }\n    let letters = words.map { $0.lowercased() }\n\
    \    let oddLetters = letters.filter { $0.count % 2 == 1 }\n    return .success(oddLetters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp_l2e8lpr.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(words.count)\n    }\n    if words.count == 1 {\n    \
    \    return .success(words)\n    }\n    let comma = words.last!.components(separatedBy:\
    \ \",\")\n    if comma.count == 0 {\n        return .success(words.dropLast())\n\
    \    }\n    if comma.count == 1 {\n        return .success(words.dropLast())\n\
    \    }\n    let letters = words.dropLast().map({ $0.lowercased().count })\n  \
    \  return .success(letters.filter { $0 % 2 == 1 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpntnvvq5i.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    let wordCount = words.count\n\
    \    \n    if wordCount == 0 {\n        return .failure(wordCount)\n    }\n  \
    \  \n    if wordCount == 1 {\n        return .success(words)\n    }\n    \n  \
    \  if wordCount == 2 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 3 {\n        return .success(words)\n    }\n    \n    if wordCount == 4 {\n\
    \        return .success(words)\n    }\n    \n    if wordCount == 5 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 6 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 7 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 8 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 9 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 10 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 11 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 12 {\n        return .success(words)\n    }\n    \n    if wordCount == 13\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 14 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 15 {\n      \
    \  return .success(words)\n    }\n    \n    if wordCount == 16 {\n        return\
    \ .success(words)\n    }\n    \n    if wordCount == 17 {\n        return .success(words)\n\
    \    }\n    \n    if wordCount == 18 {\n        return .success(words)\n    }\n\
    \    \n    if wordCount == 19 {\n        return .success(words)\n    }\n    \n\
    \    if wordCount == 20 {\n        return .success(words)\n    }\n    \n    if\
    \ wordCount == 21 {\n        return .success(words)\n    }\n    \n    if wordCount\
    \ == 22 {\n        return .success(words)\n    }\n    \n    if wordCount == 23\
    \ {\n        return .success(words)\n    }\n    \n    if wordCount == 24 {\n \
    \       return .success(words)\n    }\n    \n    if wordCount == 25 {\n      \
    \  return .success(words)\n    }\n    \n    return .failure(wordCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp639k9sja.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054372
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    guard let words = txt.components(separatedBy: \" \") else {\n        return\
    \ Err(Int(.Failure))\n    }\n    \n    var words: [String] = []\n    \n    for\
    \ word in words {\n        if let word = word.lowercased() {\n            if word.count\
    \ % 2 == 1 {\n                words.append(word)\n            }\n        }\n \
    \   }\n    \n    return Ok(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp82kny7ft.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = txt.components(separatedBy: \" \") else\
    \ {\n                      ~~~ ^~~~~~~~~~\n/tmp/tmp82kny7ft.swift:16:16: error:\
    \ cannot find 'Err' in scope\n        return Err(Int(.Failure))\n            \
    \   ^~~\n/tmp/tmp82kny7ft.swift:16:24: error: missing argument label 'bitPattern:'\
    \ in call\n        return Err(Int(.Failure))\n                       ^\n     \
    \                  bitPattern: \n/tmp/tmp82kny7ft.swift:22:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ word = word.lowercased() {\n           ^          ~~~~~~~~~~~~~~~~~\n/tmp/tmp82kny7ft.swift:29:12:\
    \ error: cannot find 'Ok' in scope\n    return Ok(words)\n           ^~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(0))\n    }\n    if words.count == 1 {\n        return\
    \ .success(words)\n    }\n    if words.count % 2 == 1 {\n        return .failure(Int(words.count\
    \ / 2))\n    }\n    let even = words.filter{$0.isUppercase}.count\n    let odd\
    \ = words.filter{$0.isLowercase}.count\n    if even % 2 == 1 {\n        return\
    \ .failure(Int(even / 2))\n    }\n    if odd % 2 == 1 {\n        return .success(words.filter{$0.isUppercase})\n\
    \    }\n    return .success(words.filter{$0.isUppercase})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpphslsoha.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    \n    if words.count\
    \ == 0 {\n        return .failure(words.count)\n    }\n    \n    if words.count\
    \ == 1 {\n        return .success(words)\n    }\n    \n    let firstWord = words[0]\n\
    \    \n    if firstWord.characters.count == 0 {\n        return .failure(firstWord.characters.count)\n\
    \    }\n    \n    if firstWord.characters.count == 1 {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstChar = firstWord.characters.first!\n\
    \    \n    if firstChar.isUppercase {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    if firstChar.isLowercase {\n        return\
    \ .success(firstWord.characters.map { String($0) })\n    }\n    \n    let firstCharUpper\
    \ = firstChar.uppercased()\n    \n    if firstCharUpper == firstChar {\n     \
    \   return .success(firstWord.characters.map { String($0) })\n    }\n    \n  \
    \  let firstCharLower = firstChar.lowercased()\n    \n    if firstCharLower ==\
    \ firstChar {\n        return .success(firstWord.characters.map { String($0) })\n\
    \    }\n    \n    let firstCharUpper = firstChar.uppercased()\n    \n    if firstCharUpper\
    \ == firstChar {\n        return .success(firstWord.characters.map { String($0)\
    \ })\n    }\n    \n    let firstCharLower = firstChar.lowercased()\n    \n   \
    \ if firstCharLower == firstChar {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstCharUpper = firstChar.uppercased()\n\
    \    \n    if firstCharUpper == firstChar {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstCharLower = firstChar.lowercased()\n\
    \    \n    if firstCharLower == firstChar {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstCharUpper = firstChar.uppercased()\n\
    \    \n    if firstCharUpper == firstChar {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstCharLower = firstChar.lowercased()\n\
    \    \n    if firstCharLower == firstChar {\n        return .success(firstWord.characters.map\
    \ { String($0) })\n    }\n    \n    let firstCharUpper = firstChar.uppercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1_lb0gk1.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660054373
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\"\
    )\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\"\
    )\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n\
    \    let words = txt.components(separatedBy: \" \")\n    if words.count == 0 {\n\
    \        return .failure(Int(txt.characters.count))\n    }\n    let wordCount\
    \ = words.count\n    var words: [String] = []\n    for word in words {\n     \
    \   if let word = word.lowercased() {\n            if word.isEmpty {\n       \
    \         continue\n            }\n            if wordCount % 2 == 1 {\n     \
    \           words.append(word)\n            }\n        }\n    }\n    if words.count\
    \ == 0 {\n        return .failure(Int(txt.characters.count))\n    }\n    return\
    \ .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx3um37p4.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpx3um37p4.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx3um37p4.swift:22:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let word = word.lowercased()\
    \ {\n           ^          ~~~~~~~~~~~~~~~~~\n/tmp/tmpx3um37p4.swift:32:33: error:\
    \ 'characters' is unavailable: Please use String directly\n        return .failure(Int(txt.characters.count))\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660054373
