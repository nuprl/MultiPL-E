name: HumanEval_9_rolling_max
language: swift
prompt: "\n/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers: [1,\
  \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == []\
  \ as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
  \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
  \ == [3, 3, 3, 100, 100])"
completions: ["    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max", "    var max =\
    \ [Int]()\n    for number in numbers {\n        if number > max[0] {\n       \
    \     max = [number]\n        } else {\n            max = append(max, number)\n\
    \        }\n    }\n    return max", "    var max = [Int]()\n    var maxIndex =\
    \ 0\n    for number in numbers {\n        if number > max[maxIndex] {\n      \
    \      max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n \
    \   return max", "    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var rolling_max = [Int]()\n    var rolling_max_index = 0\n    for number in\
    \ numbers {\n        if number > rolling_max[rolling_max_index] {\n          \
    \  rolling_max[rolling_max_index] = number\n            rolling_max_index += 1\n\
    \        }\n    }\n    return rolling_max", "    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for number in numbers {\n        if number > max[maxIndex] {\n    \
    \        max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n\
    \    return max", "    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var max = [Int]()\n    for number in numbers {\n        if max != nil {\n \
    \           if number > max[0] {\n                max = number\n            }\n\
    \        } else {\n            max = number\n        }\n    }\n    return max",
  "    var max = numbers[0]\n    var rolling_max = numbers\n    for number in numbers\
    \ {\n        if number > max {\n            max = number\n        } else {\n \
    \           rolling_max[rolling_max.index(of: max)!] = number\n        }\n   \
    \ }\n    return rolling_max", "    var max = [Int]()\n    var maxIndex = 0\n \
    \   for number in numbers {\n        if number > max[maxIndex] {\n           \
    \ max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n    return\
    \ max", "    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max", "    var max =\
    \ [Int]()\n    var index = 0\n    for n in numbers {\n        if index == 0 {\n\
    \            max = n\n        } else {\n            if n > max[index] {\n    \
    \            max[index] = n\n            }\n        }\n        index++\n    }\n\
    \    return max", "    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var result = [Int]()\n    var max = 0\n    for number in numbers {\n      \
    \  if number > max {\n            max = number\n        }\n    }\n    for number\
    \ in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var rolling_max = [Int]()\n    var\
    \ rolling_max_index = 0\n    for number in numbers {\n        if number > rolling_max[rolling_max_index]\
    \ {\n            rolling_max[rolling_max_index] = number\n        }\n        rolling_max_index\
    \ += 1\n    }\n    return rolling_max", "    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for number in numbers {\n        if number > max[maxIndex] {\n    \
    \        max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n\
    \    return max", "    var result = [Int]()\n    var max = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(max)\n\
    \        }\n    }\n    return result", "    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for number in numbers {\n        if number > max[maxIndex] {\n    \
    \        max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n\
    \    return max", "    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var max = [Int]()\n    for number in numbers {\n        if number > max[0]\
    \ {\n            max = [number]\n        } else {\n            max = append(max,\
    \ number)\n        }\n    }\n    return max"]
stop_tokens:
- "\n}"
