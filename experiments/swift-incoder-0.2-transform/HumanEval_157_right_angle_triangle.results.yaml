language: swift
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b\
    \ + c + a) / 2\n    let c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp48en7n17/tmp48en7n17.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48en7n17                        0x0000561277a0724b <unavailable> + 4683

    5    libc.so.6                          0x00002b23b8851460 __libc_start_main +
    245

    6    tmp48en7n17                        0x0000561277a06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    \n    return ab > bc && ac > bc\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp18nymho3/tmp18nymho3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c2b220c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c2af17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c2af17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c2af167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18nymho3                        0x0000561baf8942ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5c2b40c460 __libc_start_main +
    245

    6    tmp18nymho3                        0x0000561baf893f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    \n    if ab > bc {\n        if ab > cb {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if bc > cb {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_p4swkbj/tmp_p4swkbj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73be011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73bdd08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73bdd08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73bdd077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_p4swkbj                        0x000055f7bda2d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b73be1fd460 __libc_start_main +
    245

    6    tmp_p4swkbj                        0x000055f7bda2cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > ac)\
    \ && (ab > bc) && (ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp2b0bh_8_/tmp2b0bh_8_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379bccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379b9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379b9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379b9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b0bh_8_                        0x000055f0c87812ab <unavailable> + 4779

    5    libc.so.6                          0x00002b379beb6460 __libc_start_main +
    245

    6    tmp2b0bh_8_                        0x000055f0c8780f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n    if c > a {\n        return false\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp3w8dmd_6/tmp3w8dmd_6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e251c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e24ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e24ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e24ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3w8dmd_6                        0x000055ada10d42ab <unavailable> + 4779

    5    libc.so.6                          0x00002b1e253b2460 __libc_start_main +
    245

    6    tmp3w8dmd_6                        0x000055ada10d3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n\
    \    let abca = abc + bca\n    return abca >= bca\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1hcqtqr3/tmp1hcqtqr3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8de1e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8de1afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8de1afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8de1afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hcqtqr3                        0x000055eb34de232b <unavailable> + 4907

    5    libc.so.6                          0x00002b8de1ff0460 __libc_start_main +
    245

    6    tmp1hcqtqr3                        0x000055eb34de1f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    let ab = abs(a + b)\n    let ac = abs(a + c)\n    let bc\
    \ = abs(b + c)\n    let abc = ab + ac\n    let ab2 = ab * ab\n    let ac2 = ac\
    \ * ac\n    let bc2 = bc * bc\n    let bc3 = bc * c\n    let ab3 = ab * c\n  \
    \  let ab4 = ab * 4\n    let ac4 = ac * 4\n    let bc5 = bc * 5\n    let bc6 =\
    \ bc * 5\n    let bc7 = bc * 6\n    let bc8 = bc * 6\n    let bc9 = bc * 7\n \
    \   let bc10 = bc * 8\n    let bc11 = bc * 9\n    let bc12 = bc * 10\n    let\
    \ bc13 = bc * 11\n    let bc14 = bc * 12\n    let bc15 = bc * 13\n    let bc16\
    \ = bc * 14\n    let bc17 = bc * 15\n    let bc18 = bc * 16\n    let bc19 = bc\
    \ * 17\n    let bc20 = bc * 18\n    let bc21 = bc * 19\n    let bc22 = bc * 20\n\
    \    let bc23 = bc * 21\n    let bc24 = bc * 22\n    let bc25 = bc * 23\n    let\
    \ bc26 = bc * 24\n    let bc27 = bc * 25\n    let bc28 = bc * 26\n    let bc29\
    \ = bc * 27\n    let bc30 = bc * 28\n    let bc31 = bc * 29\n    let bc32 = bc\
    \ * 30\n    let bc33 = bc * 31\n    let bc34 = bc * 32\n    let bc35 = bc * 33\n\
    \    let bc36 = bc * 34\n    let bc37 = bc * 35\n    let bc38 = bc * 36\n    let\
    \ bc39 = bc * 37\n    let bc40 = bc * 38\n    let bc41 = bc * 39\n    let bc42\
    \ = bc * 40\n    let bc43 = bc * 41\n    let bc44 = bc * 42\n    let bc45 = bc\
    \ * 43\n    let bc46 = bc * 44\n    let bc47 = bc * 45\n    let bc48 = bc * 46\n\
    \    let bc49 = bc * 47\n    let bc50 = bc * 48\n    let bc51 = bc * 49\n    let\
    \ bc52 = bc * 50\n    let bc53 = bc * 51\n    let bc54 = bc * 52\n    let bc55\
    \ = bc * 53\n    let bc56 = bc * 54\n    let bc57 = bc * 55\n    let bc58 = \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxwsd6dtl.swift:79:15: error: expected initial value after '='\n\
    \    let bc58 = \n              ^\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abbc = ab + abc\n   \
    \ let acdbc = ac + bcd\n    let abdcb = ab + acbc\n    let acbda = ac + abdc\n\
    \    let abdca = ab + acdbc\n    let acdbb = ac + abbc\n    let abcbc = ab + acbda\n\
    \    let acbba = ac + abdca\n    let abdba = ab + acdbb\n    let acdbd = ac +\
    \ abcbc\n    let abcbd = ab + acbba\n    let acbca = ac + abdba\n    let abdca\
    \ = ab + acdbd\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let\
    \ acbba = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n\
    \    let abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab +\
    \ acdbb\n    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba\
    \ = ac + abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let\
    \ abcbc = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n\
    \    let acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac +\
    \ abdca\n    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc\
    \ = ab + acbba\n    let acbda = ac + abdba\n    let abdca = ab + acdbb\n    let\
    \ acdbc = ac + abcbd\n    let abcbc = ab + acbca\n    let acbba = ac + abdca\n\
    \    let abdba = ab + acdbc\n    let acdbb = ac + abcbc\n    let abcbc = ab +\
    \ acbba\n    let acbda = ac + abdba\n    let abdca\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqsu67oqz.swift:31:9: error: invalid redeclaration of 'abdca'\n\
    \    let abdca = ab + acdbd\n        ^\n/tmp/tmpqsu67oqz.swift:23:9: note: 'abdca'\
    \ previously declared here\n    let abdca = ab + acdbc\n        ^\n/tmp/tmpqsu67oqz.swift:32:9:\
    \ error: invalid redeclaration of 'acdbc'\n    let acdbc = ac + abcbd\n      \
    \  ^\n/tmp/tmpqsu67oqz.swift:20:9: note: 'acdbc' previously declared here\n  \
    \  let acdbc = ac + bcd\n        ^\n/tmp/tmpqsu67oqz.swift:33:9: error: invalid\
    \ redeclaration of 'abcbc'\n    let abcbc = ab + acbca\n        ^\n/tmp/tmpqsu67oqz.swift:25:9:\
    \ note: 'abcbc' previously declared here\n    let abcbc = ab + acbda\n       \
    \ ^\n/tmp/tmpqsu67oqz.swift:40:9: error: invalid redeclaration of 'acdbc'\n  \
    \  let acdbc = ac + abcbd\n        ^\n/tmp/tmpqsu67oqz.swift:20:9: note: 'acdbc'\
    \ previously declared here\n    let acdbc = ac + bcd\n        ^\n/tmp/tmpqsu67oqz.swift:41:9:\
    \ error: invalid redeclaration of 'abcbc'\n    let abcbc = ab + acbca\n      \
    \  ^\n/tmp/tmpqsu67oqz.swift:25:9: note: 'abcbc' previously declared here\n  \
    \  let abcbc = ab + acbda\n        ^\n/tmp/tmpqsu67oqz.swift:48:9: error: invalid\
    \ redeclaration of 'acdbc'\n    let acdbc = ac + abcbd\n        ^\n/tmp/tmpqsu67oqz.swift:20:9:\
    \ note: 'acdbc' previously declared here\n    let acdbc = ac + bcd\n        ^\n\
    /tmp/tmpqsu67oqz.swift:49:9: error: invalid redeclaration of 'abcbc'\n    let\
    \ abcbc = ab + acbca\n        ^\n/tmp/tmpqsu67oqz.swift:25:9: note: 'abcbc' previously\
    \ declared here\n    let abcbc = ab + acbda\n        ^\n/tmp/tmpqsu67oqz.swift:56:9:\
    \ error: invalid redeclaration of 'acdbc'\n    let acdbc = ac + abcbd\n      \
    \  ^\n/tmp/tmpqsu67oqz.swift:20:9: note: 'acdbc' previously declared here\n  \
    \  let acdbc = ac + bcd\n        ^\n/tmp/tmpqsu67oqz.swift:57:9: error: invalid\
    \ redeclaration of 'abcbc'\n    let abcbc = ab + acbca\n        ^\n/tmp/tmpqsu67oqz.swift:25:9:\
    \ note: 'abcbc' previously declared here\n    let abcbc = ab + acbda\n       \
    \ ^\n/tmp/tmpqsu67oqz.swift:63:9: error: type annotation missing in pattern\n\
    \    let abdca\n        ^\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab == bc\
    \ && ac == cb) || (ab == cb && ac == ab)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpnmh84m8e/tmpnmh84m8e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af59c584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af59c27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af59c27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af59c27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmh84m8e                        0x0000564686d4d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002af59c770460 __libc_start_main +
    245

    6    tmpnmh84m8e                        0x0000564686d4cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpaes26kfg/tmpaes26kfg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3085b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3082aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3082aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3082a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaes26kfg                        0x000055ea4e2d72ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba30879f460 __libc_start_main +
    245

    6    tmpaes26kfg                        0x000055ea4e2d6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmppnt_p7mo/tmppnt_p7mo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6595cdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65959d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65959d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65959d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnt_p7mo                        0x00005598c26cd23b <unavailable> + 4667

    5    libc.so.6                          0x00002b6595ec6460 __libc_start_main +
    245

    6    tmppnt_p7mo                        0x00005598c26cce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a + b > c {\n        return false\n    }\n    if\
    \ a + c > b {\n        return false\n    }\n    if b + c > a {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpxnqezy9j/tmpxnqezy9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8417adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8414a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8414a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8414a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqezy9j                        0x000055b31b0ff1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ba841999460 __libc_start_main +
    245

    6    tmpxnqezy9j                        0x000055b31b0fee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a2 = a*a\n    let b2 = b*b\n    let\
    \ c2 = c*c\n    let det = a2 + b2 + c2\n    let det = det / 2.0\n    let a3 =\
    \ a*a\n    let b3 = b*b\n    let c3 = c*c\n    let det2 = a3 + b3 + c3\n    let\
    \ det2 = det2 / 2.0\n    return det != det2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0dnwwhuo.swift:16:19: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let det = det / 2.0\n          \
    \    ~~~ ^ ~~~\n/tmp/tmp0dnwwhuo.swift:16:19: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    let det = det / 2.0\n                  ^\n/tmp/tmp0dnwwhuo.swift:21:21:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    let det2 = det2 / 2.0\n               ~~~~ ^ ~~~\n/tmp/tmp0dnwwhuo.swift:21:21:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    let det2 = det2 / 2.0\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abbc = abc + bc\n    let abbcd = abbc + bcd\n    let abbcde = abbcd +\
    \ abc\n    let abbcdef = abbcde + ab\n    let abbcdefg = abbcdef + bc\n    let\
    \ abbcdefgh = abbcdefg + c\n    let abbcdefghi = abbcdefgh + b\n    let abbcdefghij\
    \ = abbcdefghi + a\n    let abbcdefghijk = abbcdefghij + ab\n    let abbcdefghijkl\
    \ = abbcdefghijk + c\n    let abbcdefghijkm = abbcdefghijk + b\n    let abbcdefghijkn\
    \ = abbcdefghijk + a\n    let abbcdefghijko = abbcdefghijk + ab\n    let abbcdefghijkp\
    \ = abbcdefghijk + c\n    let abbcdefghijkq = abbcdefghijk + b\n    let abbcdefghijkr\
    \ = abbcdefghijk + a\n    let abbcdefghijks = abbcdefghijk + ab\n    let abbcdefghijkt\
    \ = abbcdefghijk + c\n    let abbcdefghijku = abbcdefghijk + b\n    let abbcdefghijkv\
    \ = abbcdefghijk + a\n    let abbcdefghijkw = abbcdefghijk + ab\n    let abbcdefghijkx\
    \ = abbcdefghijk + c\n    let abbcdefghijky = abbcdefghijk + b\n    let abbcdefghijkz\
    \ = abbcdefghijk + a\n    let abbcdefghijkaa = abbcdefghijk + ab\n    let abbcdefghijkab\
    \ = abbcdefghijk + c\n    let abbcdefghijkac = abbcdefghijk + b\n    let abbcdefghijkad\
    \ = abbcdefghijk + a\n    let abbcdefghijkae = abbcdefghijk + ab\n    let abbcdefghijkaf\
    \ = abbcdefghijk + c\n    let abbcdefghijkag = abbc\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_oohpsq0.swift:26:9: warning: initialization of immutable value\
    \ 'abbcdefghijkl' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkl = abbcdefghijk + c\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:27:9: warning: initialization of immutable value\
    \ 'abbcdefghijkm' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkm = abbcdefghijk + b\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:28:9: warning: initialization of immutable value\
    \ 'abbcdefghijkn' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkn = abbcdefghijk + a\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:29:9: warning: initialization of immutable value\
    \ 'abbcdefghijko' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijko = abbcdefghijk + ab\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:30:9: warning: initialization of immutable value\
    \ 'abbcdefghijkp' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkp = abbcdefghijk + c\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:31:9: warning: initialization of immutable value\
    \ 'abbcdefghijkq' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkq = abbcdefghijk + b\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:32:9: warning: initialization of immutable value\
    \ 'abbcdefghijkr' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkr = abbcdefghijk + a\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:33:9: warning: initialization of immutable value\
    \ 'abbcdefghijks' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijks = abbcdefghijk + ab\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_oohpsq0.swift:34:9: warning: initialization of immutable value\
    \ 'abbcdefghijkt' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkt = abbcdefghijk + c\n    "
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    \n    return ab == bc && ab == cb\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpsyp2rz8h/tmpsyp2rz8h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af24c27ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af24bf75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af24bf75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af24bf747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsyp2rz8h                        0x00005611154c932b <unavailable> + 4907

    5    libc.so.6                          0x00002af24c46a460 __libc_start_main +
    245

    6    tmpsyp2rz8h                        0x00005611154c8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let acd = ac + ab\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd = 0\n    let bcd = 0\n    let acd = 0\n    let abd = 0\n    let bcd\
    \ = 0\n    let acd = 0\n    let abd = 0\n    let bcd = 0\n    let acd = 0\n  \
    \  let abd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmphtdalt67.swift:19:9: error: invalid redeclaration of 'bcd'\n  \
    \  let bcd = 0\n        ^\n/tmp/tmphtdalt67.swift:16:9: note: 'bcd' previously\
    \ declared here\n    let bcd = bc + ab\n        ^\n/tmp/tmphtdalt67.swift:20:9:\
    \ error: invalid redeclaration of 'acd'\n    let acd = 0\n        ^\n/tmp/tmphtdalt67.swift:17:9:\
    \ note: 'acd' previously declared here\n    let acd = ac + ab\n        ^\n/tmp/tmphtdalt67.swift:21:9:\
    \ error: invalid redeclaration of 'abd'\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:18:9:\
    \ note: 'abd' previously declared here\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:22:9:\
    \ error: invalid redeclaration of 'bcd'\n    let bcd = 0\n        ^\n/tmp/tmphtdalt67.swift:16:9:\
    \ note: 'bcd' previously declared here\n    let bcd = bc + ab\n        ^\n/tmp/tmphtdalt67.swift:23:9:\
    \ error: invalid redeclaration of 'acd'\n    let acd = 0\n        ^\n/tmp/tmphtdalt67.swift:17:9:\
    \ note: 'acd' previously declared here\n    let acd = ac + ab\n        ^\n/tmp/tmphtdalt67.swift:24:9:\
    \ error: invalid redeclaration of 'abd'\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:18:9:\
    \ note: 'abd' previously declared here\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:25:9:\
    \ error: invalid redeclaration of 'bcd'\n    let bcd = 0\n        ^\n/tmp/tmphtdalt67.swift:16:9:\
    \ note: 'bcd' previously declared here\n    let bcd = bc + ab\n        ^\n/tmp/tmphtdalt67.swift:26:9:\
    \ error: invalid redeclaration of 'acd'\n    let acd = 0\n        ^\n/tmp/tmphtdalt67.swift:17:9:\
    \ note: 'acd' previously declared here\n    let acd = ac + ab\n        ^\n/tmp/tmphtdalt67.swift:27:9:\
    \ error: invalid redeclaration of 'abd'\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:18:9:\
    \ note: 'abd' previously declared here\n    let abd = 0\n        ^\n/tmp/tmphtdalt67.swift:28:9:\
    \ error: invalid redeclaration of 'bcd'\n    let bcd = 0\n        ^\n/tmp/tmphtdalt67.swift:16:9:\
    \ note: 'bcd' previously declared here\n    let bcd = bc + ab\n        ^\n/tmp/tmphtdalt67.swift:29:9:\
    \ error: invalid redeclaration of 'acd'\n    let acd = 0\n        ^\n/tmp/tmphtdalt67.swift:17:9:\
    \ note: 'acd' previously declared he"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return false\n    }\n\
    \    if a > c {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpfh2b8p5j/tmpfh2b8p5j.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67726b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67723afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67723af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67723ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfh2b8p5j                        0x00005653b69f423b <unavailable> + 4667

    5    libc.so.6                          0x00002b67728a4460 __libc_start_main +
    245

    6    tmpfh2b8p5j                        0x00005653b69f3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return right_angle_triangle(b,\
    \ a, c)\n    }\n    if b > c {\n        return right_angle_triangle(a, c, b)\n\
    \    }\n    if a > c {\n        return right_angle_triangle(b, c, a)\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpf20sl6zw.swift:13:36: error: missing argument labels 'a:b:c:' in\
    \ call\n        return right_angle_triangle(b, a, c)\n                       \
    \            ^\n                                    a: b: c: \n/tmp/tmpf20sl6zw.swift:16:36:\
    \ error: missing argument labels 'a:b:c:' in call\n        return right_angle_triangle(a,\
    \ c, b)\n                                   ^\n                              \
    \      a: b: c: \n/tmp/tmpf20sl6zw.swift:19:36: error: missing argument labels\
    \ 'a:b:c:' in call\n        return right_angle_triangle(b, c, a)\n           \
    \                        ^\n                                    a: b: c: \n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb) || (ab == bc\
    \ && ab == cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp7cvbofco/tmp7cvbofco.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acca9da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acca9a97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acca9a97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acca9a967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cvbofco                        0x000055d819c3b32b <unavailable> + 4907

    5    libc.so.6                          0x00002acca9f8c460 __libc_start_main +
    245

    6    tmp7cvbofco                        0x000055d819c3af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let ac = a - c\n   \
    \ let bc = b - c\n    let ad = ab + bc\n    let bd = ac + bc\n    let cd = ac\
    \ + ad\n    let abc = ab + ac\n    let bcd = bc + bd\n    let cda = ac + ad\n\
    \    let abd = ab + bd\n    let acd = ac + bd\n    let abbc = ab + bc\n    let\
    \ acbd = ac + bd\n    let abac = ab + ac\n    let bcab = bc + ac\n    let cabc\
    \ = ac + bc\n    let abbd = ab + bd\n    let acbd = ac + bd\n    let abacb = ab\
    \ + acb\n    let bcabc = bc + acb\n    let cabcd = ac + bcd\n    let abacbc =\
    \ ab + acbc\n    let bcabcd = bc + acbd\n    let cabcda = ac + bcd\n    let abacbd\
    \ = ab + acbd\n    let bcabcda = bc + acda\n    let cabcdbc = ac + bcd\n    let\
    \ abacbdcb = ab + acbdc\n    let bcabcdbc = bc + acdbc\n    let cabcdbda = ac\
    \ + bcd\n    let abacbdcba = ab + acbdcba\n    let bcabcdbdc = bc + acdbdc\n \
    \   let cabcdbdca = ac + bcd\n    let abacbdcbac = ab + acbdcbac\n    let bcabcdbdcc\
    \ = bc + acdbdcc\n    let cabcdbdcaa = ac + bcd\n    let abacbdcbacd = ab + acbdcbacd\n\
    \    let bcabcdbdccc = bc + acdbdccc\n    let cabcdbdcaab = ac + bcd\n    let\
    \ abacbdcbacdc = ab + acbdcbacdc\n    let bcabcdbdccca = bc + acdbdccca\n    let\
    \ cabcdbdcaabc = ac + bcd\n    let abacbdcbacdcb = ab + acbdcbacdcb\n    let bcabcdbdcccab\
    \ = bc + acdbdcccab\n    let cabcdbdcaabcdc = ac + bcd\n    let abacbdcbacdcbd\
    \ = ab + acbdcbacdcbd\n    let bcabcdbdcccabc = bc + acdbdcccabc\n    let cabcdbdcaabcd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzwn2kz1.swift:29:9: error: invalid redeclaration of 'acbd'\n \
    \   let acbd = ac + bd\n        ^\n/tmp/tmplzwn2kz1.swift:24:9: note: 'acbd' previously\
    \ declared here\n    let acbd = ac + bd\n        ^\n/tmp/tmplzwn2kz1.swift:30:22:\
    \ error: cannot find 'acb' in scope\n    let abacb = ab + acb\n              \
    \       ^~~\n/tmp/tmplzwn2kz1.swift:31:22: error: cannot find 'acb' in scope\n\
    \    let bcabc = bc + acb\n                     ^~~\n/tmp/tmplzwn2kz1.swift:33:23:\
    \ error: cannot find 'acbc' in scope\n    let abacbc = ab + acbc\n           \
    \           ^~~~\n/tmp/tmplzwn2kz1.swift:37:24: error: cannot find 'acda' in scope\n\
    \    let bcabcda = bc + acda\n                       ^~~~\n/tmp/tmplzwn2kz1.swift:39:25:\
    \ error: cannot find 'acbdc' in scope\n    let abacbdcb = ab + acbdc\n       \
    \                 ^~~~~\n/tmp/tmplzwn2kz1.swift:40:25: error: cannot find 'acdbc'\
    \ in scope\n    let bcabcdbc = bc + acdbc\n                        ^~~~~\n/tmp/tmplzwn2kz1.swift:42:26:\
    \ error: cannot find 'acbdcba' in scope\n    let abacbdcba = ab + acbdcba\n  \
    \                       ^~~~~~~\n/tmp/tmplzwn2kz1.swift:43:26: error: cannot find\
    \ 'acdbdc' in scope\n    let bcabcdbdc = bc + acdbdc\n                       \
    \  ^~~~~~\n/tmp/tmplzwn2kz1.swift:45:27: error: cannot find 'acbdcbac' in scope\n\
    \    let abacbdcbac = ab + acbdcbac\n                          ^~~~~~~~\n/tmp/tmplzwn2kz1.swift:46:27:\
    \ error: cannot find 'acdbdcc' in scope\n    let bcabcdbdcc = bc + acdbdcc\n \
    \                         ^~~~~~~\n/tmp/tmplzwn2kz1.swift:48:28: error: cannot\
    \ find 'acbdcbacd' in scope\n    let abacbdcbacd = ab + acbdcbacd\n          \
    \                 ^~~~~~~~~\n/tmp/tmplzwn2kz1.swift:49:28: error: cannot find\
    \ 'acdbdccc' in scope\n    let bcabcdbdccc = bc + acdbdccc\n                 \
    \          ^~~~~~~~\n/tmp/tmplzwn2kz1.swift:51:29: error: cannot find 'acbdcbacdc'\
    \ in scope\n    let abacbdcbacdc = ab + acbdcbacdc\n                         \
    \   ^~~~~~~~~~\n/tmp/tmplzwn2kz1.swift:52:29: error: cannot find 'acdbdccca' in\
    \ scope\n    let bcabcdbdccca = bc + acdbdccca\n                            ^~~~~~~~~\n\
    /tmp/tm"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    \n    return ab\
    \ >= bc && ab >= cb && ac >= cb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpasfas5eh/tmpasfas5eh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ddfee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ddfbd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ddfbd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ddfbd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasfas5eh                        0x0000557b2e9da32b <unavailable> + 4907

    5    libc.so.6                          0x00002b1de00cc460 __libc_start_main +
    245

    6    tmpasfas5eh                        0x0000557b2e9d9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    return ab == bc || ab == ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8esajt6l/tmp8esajt6l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb7babc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb78a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb78a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb78a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8esajt6l                        0x000055c16496632b <unavailable> + 4907

    5    libc.so.6                          0x00002afbb7d97460 __libc_start_main +
    245

    6    tmp8esajt6l                        0x000055c164965f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpkh1n9lsy/tmpkh1n9lsy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0fa88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0fa586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0fa586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0fa5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkh1n9lsy                        0x000056276df1424b <unavailable> + 4683

    5    libc.so.6                          0x00002ae0faa7b460 __libc_start_main +
    245

    6    tmpkh1n9lsy                        0x000056276df13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n\
    \    let abcb = abc + bca\n    let bcbc = bc + abc\n    let acbc = ac + bcb\n\
    \    let abcca = abcc + acbc\n    let acbca = acbc + abcca\n    let abccaa = abcca\
    \ + acbca\n    let acbcaa = acbcaa + abccaa\n    let abccaa1 = abccaa + acbcaa\n\
    \    let acbcaa1 = acbcaa1 + abccaa1\n    let abccaa2 = abccaa1 + acbcaa1\n  \
    \  let acbcaa2 = acbcaa2 + abccaa2\n    let abccaa3 = abccaa2 + acbcaa2\n    let\
    \ acbcaa3 = acbcaa3 + abccaa3\n    let abccaa4 = abccaa3 + acbcaa3\n    let acbcaa4\
    \ = acbcaa4 + abccaa4\n    let abccaa5 = abccaa4 + acbcaa4\n    let acbcaa5 =\
    \ acbcaa5 + abccaa5\n    let abccaa6 = abccaa5 + acbcaa5\n    let acbcaa6 = acbcaa6\
    \ + abccaa6\n    let abccaa7 = abccaa6 + acbcaa6\n    let acbcaa7 = acbcaa7 +\
    \ abccaa7\n    let abccaa8 = abccaa7 + acbcaa7\n    let acbcaa8 = acbcaa8 + abccaa8\n\
    \    let abccaa9 = abccaa8 + acbcaa8\n    let acbcaa9 = acbcaa9 + abccaa9\n  \
    \  let abccaa10 = abccaa9 + acbcaa9\n    let acbcaa10 = acbcaa10 + abccaa10\n\
    \    let abccaa11 = abccaa10 + acbcaa10\n    let acbcaa11 = acbcaa11 + abccaa11\n\
    \    let abccaa12 = abccaa11 + acbcaa11\n    let acbcaa12 = acbcaa12 + abccaa12\n\
    \    let abccaa13 = abccaa12 + acbcaa12\n    let acbcaa13 = acbcaa13 + abccaa13\n\
    \    let abccaa14 = abccaa13 + acbca\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvh9rpj9j.swift:19:21: error: cannot find 'bcb' in scope\n    let\
    \ acbc = ac + bcb\n                    ^~~\n/tmp/tmpvh9rpj9j.swift:20:17: error:\
    \ cannot find 'abcc' in scope\n    let abcca = abcc + acbc\n                ^~~~\n\
    /tmp/tmpvh9rpj9j.swift:23:18: error: use of local variable 'acbcaa' before its\
    \ declaration\n    let acbcaa = acbcaa + abccaa\n                 ^\n/tmp/tmpvh9rpj9j.swift:23:9:\
    \ note: 'acbcaa' declared here\n    let acbcaa = acbcaa + abccaa\n        ^\n\
    /tmp/tmpvh9rpj9j.swift:25:19: error: use of local variable 'acbcaa1' before its\
    \ declaration\n    let acbcaa1 = acbcaa1 + abccaa1\n                  ^\n/tmp/tmpvh9rpj9j.swift:25:9:\
    \ note: 'acbcaa1' declared here\n    let acbcaa1 = acbcaa1 + abccaa1\n       \
    \ ^\n/tmp/tmpvh9rpj9j.swift:27:19: error: use of local variable 'acbcaa2' before\
    \ its declaration\n    let acbcaa2 = acbcaa2 + abccaa2\n                  ^\n\
    /tmp/tmpvh9rpj9j.swift:27:9: note: 'acbcaa2' declared here\n    let acbcaa2 =\
    \ acbcaa2 + abccaa2\n        ^\n/tmp/tmpvh9rpj9j.swift:29:19: error: use of local\
    \ variable 'acbcaa3' before its declaration\n    let acbcaa3 = acbcaa3 + abccaa3\n\
    \                  ^\n/tmp/tmpvh9rpj9j.swift:29:9: note: 'acbcaa3' declared here\n\
    \    let acbcaa3 = acbcaa3 + abccaa3\n        ^\n/tmp/tmpvh9rpj9j.swift:31:19:\
    \ error: use of local variable 'acbcaa4' before its declaration\n    let acbcaa4\
    \ = acbcaa4 + abccaa4\n                  ^\n/tmp/tmpvh9rpj9j.swift:31:9: note:\
    \ 'acbcaa4' declared here\n    let acbcaa4 = acbcaa4 + abccaa4\n        ^\n/tmp/tmpvh9rpj9j.swift:33:19:\
    \ error: use of local variable 'acbcaa5' before its declaration\n    let acbcaa5\
    \ = acbcaa5 + abccaa5\n                  ^\n/tmp/tmpvh9rpj9j.swift:33:9: note:\
    \ 'acbcaa5' declared here\n    let acbcaa5 = acbcaa5 + abccaa5\n        ^\n/tmp/tmpvh9rpj9j.swift:35:19:\
    \ error: use of local variable 'acbcaa6' before its declaration\n    let acbcaa6\
    \ = acbcaa6 + abccaa6\n                  ^\n/tmp/tmpvh9rpj9j.swift:35:9: note:\
    \ 'acbcaa6' declared here\n    let acbcaa6 = acbcaa6 + abccaa6\n        ^\n/tmp/tmpvh9rpj9j.swift:37:19:\
    \ error: use of local variable '"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > ac)\
    \ && (ab > bc) && (ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp2b0bh_8_/tmp2b0bh_8_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379bccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379b9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379b9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379b9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b0bh_8_                        0x000055f0c87812ab <unavailable> + 4779

    5    libc.so.6                          0x00002b379beb6460 __libc_start_main +
    245

    6    tmp2b0bh_8_                        0x000055f0c8780f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abbcd = ab + bcd\n  \
    \  let acdbc = ac + bcd\n    let abdab = ab + ab\n    let acdab = ac + ab\n  \
    \  let abcab = ab + ac\n    let acbab = ac + ab\n    let abdac = ab + ac\n   \
    \ let acdba = ac + ab\n    let abcabd = ab + ac\n    let acbabd = ac + ab\n  \
    \  let abdacb = ab + ac\n    let acdbab = ac + ab\n    let abcabcd = ab + ac\n\
    \    let acbabcd = ac + ab\n    let abdacbc = ab + ac\n    let acdbabc = ac +\
    \ ab\n    let abcabcdb = ab + ac\n    let acbabcdb = ac + ab\n    let abdacbca\
    \ = ab + ac\n    let acdbabca = ac + ab\n    let abcabcdbc = ab + ac\n    let\
    \ acbabcdbc = ac + ab\n    let abdacbcab = ab + ac\n    let acdbabcab = ac + ab\n\
    \    let abcabcdbcd = ab + ac\n    let acbabcdbcd = ac + ab\n    let abdacbcabd\
    \ = ab + ac\n    let acdbabcabd = ac + ab\n    let abcabcdbcda = ab + ac\n   \
    \ let acbabcdbcda = ac + ab\n    let abdacbcabdc = ab + ac\n    let acdbabcabdc\
    \ = ac + ab\n    let abcabcdbcdbb = ab + ac\n    let acbabcdbcdbb = ac + ab\n\
    \    let abdacbcabdbc = ab + ac\n    let acdbabcabdbc = ac + ab\n    let abcabcdbcdbba\
    \ = ab + ac\n    let acbabcdbcdbba = ac + ab\n    let abdacbcabdbcd = ab + ac\n\
    \    let acdbabcabdbcd = ac + ab\n    let abcabcdbcdbcab = ab + ac\n    let acbabcdbcdbcab\
    \ = ac + ab\n    let abdacbcabdbcda = ab + ac\n    let acdbabcabdbcda = ac + \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpnczrqe9o.swift:63:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abbc = abc + bc\n    let abbcd = abbc + bcd\n    let abbcde = abbcd +\
    \ abc\n    let abbcdef = abbcde + ab\n    let abbcdefg = abbcdef + bc\n    let\
    \ abbcdefgh = abbcdefg + c\n    let abbcdefghi = abbcdefgh + b\n    let abbcdefghij\
    \ = abbcdefghi + a\n    let abbcdefghijk = abbcdefghij + ab\n    let abbcdefghijkl\
    \ = abbcdefghijk + c\n    let abbcdefghijkm = abbcdefghijk + b\n    let abbcdefghijkn\
    \ = abbcdefghijk + a\n    let abbcdefghijkno = abbcdefghijkn + ab\n    let abbcdefghijknop\
    \ = abbcdefghijkno + c\n    let abbcdefghijknoq = abbcdefghijkno + b\n    let\
    \ abbcdefghijknor = abbcdefghijkno + a\n    let abbcdefghijknos = abbcdefghijkno\
    \ + ab\n    let abbcdefghijknot = abbcdefghijkno + c\n    let abbcdefghijknou\
    \ = abbcdefghijkno + b\n    let abbcdefghijknov = abbcdefghijkno + a\n    let\
    \ abbcdefghijknow = abbcdefghijkno + ab\n    let abbcdefghijknox = abbcdefghijkno\
    \ + c\n    let abbcdefghijknoy = abbcdefghijkno + b\n    let abbcdefghijknoz =\
    \ abbcdefghijkno + a\n    let abbcdefghijknoaa = abbcdefghijkno + ab\n    let\
    \ abbcdefghijknoab = abbcdefghijkno + c\n    let abbcdefghijknoac = abbcdefghijkno\
    \ + b\n    let abbcdefghijknoad = abbcdefghijkno + a\n    let abbcdefghijknoae\
    \ = abbcdefghijk\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpnv5v1_7p.swift:26:9: warning: initialization of immutable value\
    \ 'abbcdefghijkl' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkl = abbcdefghijk + c\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:27:9: warning: initialization of immutable value\
    \ 'abbcdefghijkm' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let abbcdefghijkm = abbcdefghijk + b\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:30:9: warning: initialization of immutable value\
    \ 'abbcdefghijknop' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknop = abbcdefghijkno + c\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:31:9: warning: initialization of immutable value\
    \ 'abbcdefghijknoq' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknoq = abbcdefghijkno + b\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:32:9: warning: initialization of immutable value\
    \ 'abbcdefghijknor' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknor = abbcdefghijkno + a\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:33:9: warning: initialization of immutable value\
    \ 'abbcdefghijknos' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknos = abbcdefghijkno + ab\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:34:9: warning: initialization of immutable value\
    \ 'abbcdefghijknot' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknot = abbcdefghijkno + c\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:35:9: warning: initialization of immutable value\
    \ 'abbcdefghijknou' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    let abbcdefghijknou = abbcdefghijkno + b\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnv5v1_7p.swift:36:9: warning: initialization of immutable value\
    \ 'abbcdefghijknov' was never used; consider replacing with assignment to '_'\
    \ or removing"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return false\n    }\n\
    \    if b > c {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmppy_0loq0/tmppy_0loq0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b380b33ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b380b031b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b380b031988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b380b0307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppy_0loq0                        0x00005590e5b0a1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b380b526460 __libc_start_main +
    245

    6    tmppy_0loq0                        0x00005590e5b09e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return false\n\
    \        } else {\n            return true\n        }\n    } else {\n        if\
    \ c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpr5dryd84/tmpr5dryd84.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba8a57ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba8a275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba8a275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba8a2747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5dryd84                        0x0000562a9c44a32b <unavailable> + 4907

    5    libc.so.6                          0x00002aba8a76a460 __libc_start_main +
    245

    6    tmpr5dryd84                        0x0000562a9c449f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    return (ab > ac) && (ab > bc)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpi95j4tj2/tmpi95j4tj2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261fa45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261f73cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261f73c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261f73b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi95j4tj2                        0x000055bff2cea2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b261fc31460 __libc_start_main +
    245

    6    tmpi95j4tj2                        0x000055bff2ce9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b\
    \ + c + a) / 2\n    let c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp48en7n17/tmp48en7n17.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48en7n17                        0x0000561277a0724b <unavailable> + 4683

    5    libc.so.6                          0x00002b23b8851460 __libc_start_main +
    245

    6    tmp48en7n17                        0x0000561277a06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return ab >= bc\
    \ && ab >= cb && ac >= cb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmprcjnyo2e/tmprcjnyo2e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7325b46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b732583db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b732583d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b732583c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcjnyo2e                        0x0000556f3f10432b <unavailable> + 4907

    5    libc.so.6                          0x00002b7325d32460 __libc_start_main +
    245

    6    tmprcjnyo2e                        0x0000556f3f103f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac\
    \ + bc\n    let bca = bc * ab / abc // bc is hypotenuse\n    let cba = cb * ab\
    \ / abc // cb is hypotenuse\n    let acb = ac * ab / abc // ac is hypotenuse\n\
    \    return abc >= bca * cba * acb\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_w2gz_b9/tmp_w2gz_b9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83331fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae833016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae833016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8330157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_w2gz_b9                        0x000055f81590a3bb <unavailable> + 5051

    5    libc.so.6                          0x00002ae83350b460 __libc_start_main +
    245

    6    tmp_w2gz_b9                        0x000055f815909fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab >= bc && ab >= cb)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3c0s2bxl/tmp3c0s2bxl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c37b29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c37820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c37820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c3781f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c0s2bxl                        0x0000557db978f32b <unavailable> + 4907

    5    libc.so.6                          0x00002b1c37d15460 __libc_start_main +
    245

    6    tmp3c0s2bxl                        0x0000557db978ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac\
    \ + bc\n    let bcb = bc + ab\n    return abc >= bcb\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpqwbo7u_g/tmpqwbo7u_g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9800098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97ffd8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97ffd8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97ffd8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwbo7u_g                        0x0000558f1f56a32b <unavailable> + 4907

    5    libc.so.6                          0x00002b9800284460 __libc_start_main +
    245

    6    tmpqwbo7u_g                        0x0000558f1f569f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    return (ab > ac) && (ab > bc)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpi95j4tj2/tmpi95j4tj2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261fa45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261f73cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261f73c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261f73b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi95j4tj2                        0x000055bff2cea2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b261fc31460 __libc_start_main +
    245

    6    tmpi95j4tj2                        0x000055bff2ce9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    return (ab >= ac) && (ab >= bc)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmppe_te7u9/tmppe_te7u9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47600b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b475fda7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b475fda7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b475fda67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppe_te7u9                        0x0000557fb526b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b476029c460 __libc_start_main +
    245

    6    tmppe_te7u9                        0x0000557fb526af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let ac = a - c\n   \
    \ let bc = b - c\n    return (ab + bc == ac) && (ab + ac == bc)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpqvmo4m_a/tmpqvmo4m_a.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64b8b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64b881ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64b881a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64b88197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvmo4m_a                        0x00005621d61bc1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b64b8d0f460 __libc_start_main +
    245

    6    tmpqvmo4m_a                        0x00005621d61bbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac\
    \ + bc\n    let abc_ab = abc + ab\n    let abc_ac = abc + ac\n    let abc_bc =\
    \ abc + bc\n    let abc_abc = abc + abc\n    let abc_abc_ab = abc + abc_ab\n \
    \   let abc_abc_ac = abc + abc_ac\n    let abc_abc_bc = abc + abc_bc\n    let\
    \ abc_abc_abc = abc + abc_abc\n    let abc_abc_abc_ab = abc + abc_abc_ab\n   \
    \ let abc_abc_abc_ac = abc + abc_abc_ac\n    let abc_abc_abc_bc = abc + abc_abc_bc\n\
    \    let abc_abc_abc_abc = abc + abc_abc_abc\n    let abc_abc_abc_abc_ab = abc\
    \ + abc_abc_abc_ab\n    let abc_abc_abc_abc_ac = abc + abc_abc_abc_ac\n    let\
    \ abc_abc_abc_abc_bc = abc + abc_abc_abc_bc\n    let abc_abc_abc_abc_abc = abc\
    \ + abc_abc_abc_abc\n    let abc_abc_abc_abc_abc_ab = abc + abc_abc_abc_abc_ab\n\
    \    let abc_abc_abc_abc_abc_ac = abc + abc_abc_abc_abc_ac\n    let abc_abc_abc_abc_abc_bc\
    \ = abc + abc_abc_abc_abc_bc\n    let abc_abc_abc_abc_abc_abc = abc + abc_abc_abc_abc_abc\n\
    \    let abc_abc_abc_abc_abc_abc_ab = abc + abc_abc_abc_abc_abc_ab\n    let abc_abc_abc_abc_abc_abc_ac\
    \ = abc + abc_abc_abc_abc_abc_ac\n    let abc_abc_abc_abc_abc_abc_bc = abc + abc_abc_abc_abc_abc_bc\n\
    \    let abc_abc_abc_abc_abc_abc_abc = abc + abc_abc_abc_abc_abc_abc\n    let\
    \ abc_abc_abc_abc_abc_abc_abc_ab = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1rzvptr6.swift:41:41: error: expected initial value after '='\n\
    \    let abc_abc_abc_abc_abc_abc_abc_ab = \n                                 \
    \       ^\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n   \
    \ let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac + bc\n \
    \   let abc_ab = ab * ab\n    let abc_ac = ab * ac\n    let abc_bc = ab * bc \n\
    \    let abc_abc = abc_ab + abc_ac + abc_bc\n    let abc_abc2 = abc_ab * abc_ab\n\
    \    let abc_abc3 = abc_ab * abc_ac\n    let abc_abc4 = abc_ab * abc_bc\n    let\
    \ abc_abc5 = abc_abc * abc_ab\n    let abc_abc6 = abc_abc * abc_ac\n    let abc_abc7\
    \ = abc_abc * abc_bc\n    let abc_abc8 = abc_abc * abc_abc\n    let abc_abc9 =\
    \ abc_abc * abc_abc2\n    let abc_abc10 = abc_abc * abc_abc3\n    let abc_abc11\
    \ = abc_abc * abc_abc4\n    let abc_abc12 = abc_abc * abc_abc5\n    let abc_abc13\
    \ = abc_abc * abc_abc6\n    let abc_abc14 = abc_abc * abc_abc7\n    let abc_abc15\
    \ = abc_abc * abc_abc8\n    let abc_abc16 = abc_abc * abc_abc9\n    let abc_abc17\
    \ = abc_abc * abc_abc10\n    let abc_abc18 = abc_abc * abc_abc11\n    let abc_abc19\
    \ = abc_abc * abc_abc12\n    let abc_abc20 = abc_abc * abc_abc13\n    let abc_abc21\
    \ = abc_abc * abc_abc14\n    let abc_abc22 = abc_abc * abc_abc15\n    let abc_abc23\
    \ = abc_abc * abc_abc16\n    let abc_abc24 = abc_abc * abc_abc17\n    let abc_abc25\
    \ = abc_abc * abc_abc18\n    let abc_abc26 = abc_abc * abc_abc19\n    let abc_abc27\
    \ = abc_abc * abc_abc20\n    let abc_abc28 = abc_abc * abc_abc21\n    let abc_abc29\
    \ = abc_abc * abc_abc22\n    let abc_abc30 = abc_abc * abc_abc\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ulqba71.swift:18:9: warning: initialization of immutable value\
    \ 'cb' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let cb = abs(c - b)\n    ~~~~^~\n    _\n/tmp/tmp2ulqba71.swift:19:9: warning:\
    \ initialization of immutable value 'abc' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let abc = ab + ac + bc\n    ~~~~^~~\n\
    \    _\n/tmp/tmp2ulqba71.swift:45:9: warning: initialization of immutable value\
    \ 'abc_abc23' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let abc_abc23 = abc_abc * abc_abc16\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:46:9:\
    \ warning: initialization of immutable value 'abc_abc24' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let abc_abc24 = abc_abc\
    \ * abc_abc17\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:47:9: warning:\
    \ initialization of immutable value 'abc_abc25' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let abc_abc25 = abc_abc * abc_abc18\n\
    \    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:48:9: warning: initialization\
    \ of immutable value 'abc_abc26' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let abc_abc26 = abc_abc * abc_abc19\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp2ulqba71.swift:49:9: warning: initialization of immutable value\
    \ 'abc_abc27' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let abc_abc27 = abc_abc * abc_abc20\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:50:9:\
    \ warning: initialization of immutable value 'abc_abc28' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let abc_abc28 = abc_abc\
    \ * abc_abc21\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:51:9: warning:\
    \ initialization of immutable value 'abc_abc29' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let abc_abc29 = abc_abc * abc_abc22\n\
    \    ~~~~^~~~~~~~~\n    _\n/tmp/tmp2ulqba71.swift:52:9: warning: initialization\
    \ of immutable value 'abc_abc30' was never used; consider repla"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp49865510/tmp49865510.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69879a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b698769bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b698769b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b698769a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49865510                        0x000055f89561524b <unavailable> + 4683

    5    libc.so.6                          0x00002b6987b90460 __libc_start_main +
    245

    6    tmp49865510                        0x000055f895614ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b -\
    \ c)\n    if ab == bc {\n        return ab == ac\n    }\n    if ab == ac {\n \
    \       return ab == bc || ab == b\n    }\n    if ab == bc {\n        return ab\
    \ == ac || ab == a\n    }\n    return ab == bc || ab == ac || ab == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp7vmrzmfv/tmp7vmrzmfv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc47d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc47a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc47a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc47a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7vmrzmfv                        0x000055afaf40c2ab <unavailable> + 4779

    5    libc.so.6                          0x00002afc47f76460 __libc_start_main +
    245

    6    tmp7vmrzmfv                        0x000055afaf40bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = b - a\n    let a2 = c - a\n   \
    \ let a3 = b - c\n    let a4 = c - b\n    let a5 = b - a\n    let a6 = c - a\n\
    \    let a7 = a - b\n    let a8 = a - c\n    let a9 = a - b\n    let a10 = c -\
    \ a\n    let a11 = a - c\n    let a12 = a - b\n    let a13 = a - a\n    let a14\
    \ = a - a\n    let a15 = a - b\n    let a16 = a - c\n    let a17 = a - c\n   \
    \ let a18 = a - b\n    let a19 = a - a\n    let a20 = a - a\n    let a21 = a -\
    \ b\n    let a22 = a - c\n    let a23 = a - c\n    let a24 = a - b\n    let a25\
    \ = a - a\n    let a26 = a - a\n    let a27 = a - b\n    let a28 = a - c\n   \
    \ let a29 = a - c\n    let a30 = a - b\n    let a31 = a - a\n    let a32 = a -\
    \ a\n    let a33 = a - b\n    let a34 = a - c\n    let a35 = a - c\n    let a36\
    \ = a - b\n    let a37 = a - a\n    let a38 = a - a\n    let a39 = a - b\n   \
    \ let a40 = a - c\n    let a41 = a - c\n    let a42 = a - b\n    let a43 = a -\
    \ a\n    let a44 = a - a\n    let a45 = a - b\n    let a46 = a - c\n    let a47\
    \ = a - c\n    let a48 = a - b\n    let a49 = a - a\n    let a50 = a - a\n   \
    \ let a51 = a - b\n    let a52 = a - c\n    let a53 = a - c\n    let a54 = a -\
    \ b\n    let a55 = a - a\n    let a56 = a - a\n    let a57 = a - b\n    let a58\
    \ = a - c\n    let a59 = a - c\n    let a60 = a - b\n    let a61 = a - a\n   \
    \ let a62 = a - a\n    let a63 = a - b\n    let a64 = a - c\n    let a65 = a -\
    \ c\n    let a66 = a - b\n    let a67 = a - a\n    let a68 = a - a\n    let a69\
    \ = a - b\n    let a70 = a - c\n    let a71 = a - c\n    let a72 = a - b\n   \
    \ let a73 = a - a\n    let a74 = a - a\n    let a75 = a - b\n    let a76 = a -\
    \ c\n    let a77 = a - c\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi_aeix5c.swift:89:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpi_aeix5c.swift:12:9: warning: initialization of immutable value 'a1'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let a1 = b - a\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:13:9: warning: initialization\
    \ of immutable value 'a2' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a2 = c - a\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:14:9:\
    \ warning: initialization of immutable value 'a3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a3 = b - c\n    ~~~~^~\n    _\n\
    /tmp/tmpi_aeix5c.swift:15:9: warning: initialization of immutable value 'a4' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ a4 = c - b\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:16:9: warning: initialization\
    \ of immutable value 'a5' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a5 = b - a\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:17:9:\
    \ warning: initialization of immutable value 'a6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a6 = c - a\n    ~~~~^~\n    _\n\
    /tmp/tmpi_aeix5c.swift:18:9: warning: initialization of immutable value 'a7' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ a7 = a - b\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:19:9: warning: initialization\
    \ of immutable value 'a8' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a8 = a - c\n    ~~~~^~\n    _\n/tmp/tmpi_aeix5c.swift:20:9:\
    \ warning: initialization of immutable value 'a9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a9 = a - b\n    ~~~~^~\n    _\n\
    /tmp/tmpi_aeix5c.swift:21:9: warning: initialization of immutable value 'a10'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let a10 = c - a\n    ~~~~^~~\n    _\n/tmp/tmpi_aeix5c.swift:22:9: warning:\
    \ initialization of immutable value 'a11' was never used; consider replacing w"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c -\
    \ a)\n    if ab == bc && ab == ac {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpkt4z37tf/tmpkt4z37tf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac75ee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac75bd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac75bd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac75bd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkt4z37tf                        0x000055a7f75e62ab <unavailable> + 4779

    5    libc.so.6                          0x00002aac760cc460 __libc_start_main +
    245

    6    tmpkt4z37tf                        0x000055a7f75e5f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return right_angle_triangle(b,\
    \ a, c)\n    }\n    if b > c {\n        return right_angle_triangle(a, c, b)\n\
    \    }\n    if a > c {\n        return right_angle_triangle(b, c, a)\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpf20sl6zw.swift:13:36: error: missing argument labels 'a:b:c:' in\
    \ call\n        return right_angle_triangle(b, a, c)\n                       \
    \            ^\n                                    a: b: c: \n/tmp/tmpf20sl6zw.swift:16:36:\
    \ error: missing argument labels 'a:b:c:' in call\n        return right_angle_triangle(a,\
    \ c, b)\n                                   ^\n                              \
    \      a: b: c: \n/tmp/tmpf20sl6zw.swift:19:36: error: missing argument labels\
    \ 'a:b:c:' in call\n        return right_angle_triangle(b, c, a)\n           \
    \                        ^\n                                    a: b: c: \n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n\
    \    let abca = abc + bc\n    let acab = ac + ab\n    let acbc = ac + bc\n   \
    \ let abcb = abc + bc\n    let abcbc = abc + cb\n    let acbca = acbc + abca\n\
    \    let acabcb = acabc+ abcbc\n    let acbcab = acbca+ abcab\n    let acbcabc\
    \ = acbcab+ abcabc\n    let acbcabcd = acbcabc+ abcabcd\n    let acbcabcd2 = acbcabcd+\
    \ abcabcd2\n    let acbcabcd2e = acbcabcd2+ abcabcd2e\n    let acbcabcd2f = acbcabcd2e+\
    \ abcabcd2f\n    let acbcabcd2g = acbcabcd2f+ abcabcd2g\n    let acbcabcd2h =\
    \ acbcabcd2g+ abcabcd2h\n    let acbcabcd2i = acbcabcd2h+ abcabcd2i\n    let acbcabcd2j\
    \ = acbcabcd2i+ abcabcd2j\n    let acbcabcd2k = acbcabcd2j+ abcabcd2k\n    let\
    \ acbcabcd2l = acbcabcd2k+ abcabcd2l\n    let acbcabcd2m = acbcabcd2l+ abcabcd2m\n\
    \    let acbcabcd2n = acbcabcd2m+ abcabcd2n\n    let acbcabcd2o = acbcabcd2n+\
    \ abcabcd2o\n    let acbcabcd2p = acbcabcd2o+ abcabcd2p\n    let acbcabcd2q =\
    \ acbcabcd2p+ abcabcd2q\n    let acbcabcd2r = acbcabcd2q+ abcabcd2r\n    let acbcabcd2s\
    \ = acbcabcd2r+ abcabcd2s\n    let acbcabcd2t = acbcabcd2s+ abcabcd2t\n    let\
    \ acbcabcd2u = acbcabcd2t+ abcabcd2u\n    let acbcabcd2v = acbcabcd2u+ abcabcd2v\n\
    \    let acbcabcd2w = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpzuyfywml.swift:23:24: error: consecutive statements on a line must\
    \ be separated by ';'\n    let acabcb = acabc+ abcbc\n                       ^\n\
    \                       ;\n/tmp/tmpzuyfywml.swift:24:24: error: consecutive statements\
    \ on a line must be separated by ';'\n    let acbcab = acbca+ abcab\n        \
    \               ^\n                       ;\n/tmp/tmpzuyfywml.swift:25:26: error:\
    \ consecutive statements on a line must be separated by ';'\n    let acbcabc =\
    \ acbcab+ abcabc\n                         ^\n                         ;\n/tmp/tmpzuyfywml.swift:26:28:\
    \ error: consecutive statements on a line must be separated by ';'\n    let acbcabcd\
    \ = acbcabc+ abcabcd\n                           ^\n                         \
    \  ;\n/tmp/tmpzuyfywml.swift:27:30: error: consecutive statements on a line must\
    \ be separated by ';'\n    let acbcabcd2 = acbcabcd+ abcabcd2\n              \
    \               ^\n                             ;\n/tmp/tmpzuyfywml.swift:28:32:\
    \ error: consecutive statements on a line must be separated by ';'\n    let acbcabcd2e\
    \ = acbcabcd2+ abcabcd2e\n                               ^\n                 \
    \              ;\n/tmp/tmpzuyfywml.swift:29:33: error: consecutive statements\
    \ on a line must be separated by ';'\n    let acbcabcd2f = acbcabcd2e+ abcabcd2f\n\
    \                                ^\n                                ;\n/tmp/tmpzuyfywml.swift:30:33:\
    \ error: consecutive statements on a line must be separated by ';'\n    let acbcabcd2g\
    \ = acbcabcd2f+ abcabcd2g\n                                ^\n               \
    \                 ;\n/tmp/tmpzuyfywml.swift:31:33: error: consecutive statements\
    \ on a line must be separated by ';'\n    let acbcabcd2h = acbcabcd2g+ abcabcd2h\n\
    \                                ^\n                                ;\n/tmp/tmpzuyfywml.swift:32:33:\
    \ error: consecutive statements on a line must be separated by ';'\n    let acbcabcd2i\
    \ = acbcabcd2h+ abcabcd2i\n                                ^\n               \
    \                 ;\n/tmp/tmpzuyfywml.swift:33:33: error: consecutive statements\
    \ on a line must be separated by ';'\n    let a"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return (ab > bc && ab > ac)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1olf2igs/tmp1olf2igs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed2fd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed2ccbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ed2ccb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ed2cca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1olf2igs                        0x000056396abe92ab <unavailable> + 4779

    5    libc.so.6                          0x00002b1ed31c0460 __libc_start_main +
    245

    6    tmp1olf2igs                        0x000056396abe8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    let abc = ab + ac\
    \ + bc\n    let bcb = bc + cb\n    let acb = ac + cb\n    return abc > bcb\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpy2ctur36/tmpy2ctur36.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97c52e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97c4fdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97c4fde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97c4fdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2ctur36                        0x000055a77db4132b <unavailable> + 4907

    5    libc.so.6                          0x00002b97c54d3460 __libc_start_main +
    245

    6    tmpy2ctur36                        0x000055a77db40f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a > b {\n        return false\n    }\n\
    \    if a > c {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n   \
    \ if a == b && b == c {\n        return true\n    }\n    if a == c && c == b {\n\
    \        return true\n    }\n    if a == b || a == c || b == c {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpx_ze_x5i/tmpx_ze_x5i.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b694890dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6948604b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6948604988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69486037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_ze_x5i                        0x000055a3ac1dc1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b6948af9460 __libc_start_main +
    245

    6    tmpx_ze_x5i                        0x000055a3ac1dbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    let abc = ab + bc\n    let bca = bc * ab\n\
    \    let cab = cb * ab\n    let acb = ab * cb\n    let aba = ab * ab\n    let\
    \ aca = acb * ab\n    let bcaa = bca * aca\n    let caba = cab * aca\n    let\
    \ acab = aca * cab\n    let abca = aba * cab\n    let acba = acb * cab\n    let\
    \ bcab = bca * caba\n    let cabb = cab * caba\n    let acbc = acb * bc\n    let\
    \ abcaa = abca * aca\n    let acbab = acba * cab\n    let abcab = abca * caba\n\
    \    let acbba = acbc * cab\n    let abcaba = abcab * aca\n    let acbcab = acbca\
    \ * cab\n    let abcabb = abcab * caba\n    let acbcbc = acbca * bc\n    let abcabba\
    \ = abcaba * aca\n    let acbcabb = acbcab * cab\n    let abcabbc = abcabb * caba\n\
    \    let acbcbca = acbcab * bc\n    let abcabbca = abcabb * aca\n    let acbcbcb\
    \ = acbcbc * cab\n    let abcabbcaa = abcabbca * aca\n    let acbcbcbc = acbcbc\
    \ * caba\n    let abcabbcbc = abcabbcb * caba\n    let acbcbcbc = acbcbcb * cab\n\
    \    let abcabbcbca = abcabbcbc * aca\n    let acbcbcbcb = acbcbcbc * caba\n \
    \   let abcabbcbcbc = abcabbcbc * caba\n    let acbcbcbcbc = acbcbcbcb * cab\n\
    \    let abcabbcbcbca = abcabbcbcbc * aca\n    let acbcbcbcbcb = acbcbcbcbc *\
    \ caba\n    let abcabbcbcbcbc = abcabbcbcbc * caba\n    let acbcbcbcbcbc = acbcbcbcbc\
    \ * cab\n    let abcabbcbcbcbca = abcabbcbcbcbc * aca\n    let acbcbcbcbcbcb =\
    \ acbcb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpusjkawhv.swift:34:18: error: cannot find 'acbca' in scope\n   \
    \ let acbcab = acbca * cab\n                 ^~~~~\n/tmp/tmpusjkawhv.swift:36:18:\
    \ error: cannot find 'acbca' in scope\n    let acbcbc = acbca * bc\n         \
    \        ^~~~~\n/tmp/tmpusjkawhv.swift:45:21: error: cannot find 'abcabbcb' in\
    \ scope\n    let abcabbcbc = abcabbcb * caba\n                    ^~~~~~~~\n/tmp/tmpusjkawhv.swift:56:25:\
    \ error: cannot find 'acbcb' in scope\n    let acbcbcbcbcbcb = acbcb\n       \
    \                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    \n    return ab == bc && ac == bc\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx40gw_34/tmpx40gw_34.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23154bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac231242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac231242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2312417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx40gw_34                        0x000055a724efd2ab <unavailable> + 4779

    5    libc.so.6                          0x00002ac231737460 __libc_start_main +
    245

    6    tmpx40gw_34                        0x000055a724efcf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (b * b) - (4 * a * c)\n    let\
    \ a2 = (b * b) - (4 * a * b)\n    let a3 = (b * b) - (4 * a * a)\n    let a4 =\
    \ b * b\n    let a5 = b * b\n    let a6 = b * b\n    let a7 = b * b\n    let a8\
    \ = -b * b\n    let a9 = -b * b\n    let a10 = -b * b\n    let a11 = -b * b\n\
    \    let a12 = -b * b\n    let a13 = -b * b\n    let a14 = -b * b\n    let a15\
    \ = -b * b\n    let a16 = -b * b\n    let a17 = -b * b\n    let a18 = -b * b\n\
    \    let a19 = -b * b\n    let a20 = -b * b\n    let a21 = -b * b\n    let a22\
    \ = -b * b\n    let a23 = -b * b\n    let a24 = -b * b\n    let a25 = -b * b\n\
    \    let a26 = -b * b\n    let a27 = -b * b\n    let a28 = -b * b\n    let a29\
    \ = -b * b\n    let a30 = -b * b\n    let a31 = -b * b\n    let a32 = -b * b\n\
    \    let a33 = -b * b\n    let a34 = -b * b\n    let a35 = -b * b\n    let a36\
    \ = -b * b\n    let a37 = -b * b\n    let a38 = -b * b\n    let a39 = -b * b\n\
    \    let a40 = -b * b\n    let a41 = -b * b\n    let a42 = -b * b\n    let a43\
    \ = -b * b\n    let a44 = -b * b\n    let a45 = -b * b\n    let a46 = -b * b\n\
    \    let a47 = -b * b\n    let a48 = -b * b\n    let a49 = -b * b\n    let a50\
    \ = -b * b\n    let a51 = -b * b\n    let a52 = -b * b\n    let a53 = -b * b\n\
    \    let a54 = -b * b\n    let a55 = -b * b\n    let a56 = -b * b\n    let a57\
    \ = -b * b\n    let a58 = -b * b\n    let a59 = -b * b\n    let a60 = -b * b\n\
    \    let a61 = -b * b\n    let a62 = -b * b\n    let a63 = -b * b\n    let a64\
    \ = -b * b\n    let a65 = -b * b\n    let a66 = -b * b\n    let a67 = -b * b\n\
    \    let a68 = -b * b\n    let a69 = -b * b\n    let a70 = -b * b\n    let a71\
    \ = -b * b\n    let a72 = -b * b\n    let a73 = -b * b\n    let a74 = -b * b\n\
    \    let a75 = -b * b\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp2em5amhn.swift:87:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp2em5amhn.swift:12:9: warning: initialization of immutable value 'a1'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let a1 = (b * b) - (4 * a * c)\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:13:9:\
    \ warning: initialization of immutable value 'a2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a2 = (b * b) - (4 * a * b)\n\
    \    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:14:9: warning: initialization of immutable\
    \ value 'a3' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let a3 = (b * b) - (4 * a * a)\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:15:9:\
    \ warning: initialization of immutable value 'a4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a4 = b * b\n    ~~~~^~\n    _\n\
    /tmp/tmp2em5amhn.swift:16:9: warning: initialization of immutable value 'a5' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ a5 = b * b\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:17:9: warning: initialization\
    \ of immutable value 'a6' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a6 = b * b\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:18:9:\
    \ warning: initialization of immutable value 'a7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a7 = b * b\n    ~~~~^~\n    _\n\
    /tmp/tmp2em5amhn.swift:19:9: warning: initialization of immutable value 'a8' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ a8 = -b * b\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:20:9: warning: initialization\
    \ of immutable value 'a9' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a9 = -b * b\n    ~~~~^~\n    _\n/tmp/tmp2em5amhn.swift:21:9:\
    \ warning: initialization of immutable value 'a10' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a10 = -b * b\n    ~~~~^~~\n \
    \   _\n/tmp/tmp2em5amhn.swift:22:9: warning: initialization of immutab"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    return abc >=\
    \ bc && abc >= ac\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpzcst8nwz/tmpzcst8nwz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8833cd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88339c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88339c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88339c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcst8nwz                        0x0000556fb678f32b <unavailable> + 4907

    5    libc.so.6                          0x00002b8833ebc460 __libc_start_main +
    245

    6    tmpzcst8nwz                        0x0000556fb678ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return ab >= bc && ab >= cb\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzf49rykt/tmpzf49rykt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d49dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d46d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25d46d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25d46d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzf49rykt                        0x000056367225332b <unavailable> + 4907

    5    libc.so.6                          0x00002b25d4bc7460 __libc_start_main +
    245

    6    tmpzf49rykt                        0x0000563672252f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpkh1n9lsy/tmpkh1n9lsy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0fa88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0fa586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0fa586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0fa5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkh1n9lsy                        0x000056276df1424b <unavailable> + 4683

    5    libc.so.6                          0x00002ae0faa7b460 __libc_start_main +
    245

    6    tmpkh1n9lsy                        0x000056276df13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb) || (bc > ab &&\
    \ bc > cb) || (cb > ab && cb > bc)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp6msqfz4m/tmp6msqfz4m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6af27afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6af24a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6af24a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6af24a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6msqfz4m                        0x000055b39df6d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b6af299b460 __libc_start_main +
    245

    6    tmp6msqfz4m                        0x000055b39df6cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let bc = b - c\n   \
    \ let ac = a - c\n    return ab > 0 && bc > 0 && ac > 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp68ik9h2c/tmp68ik9h2c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e5b877c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e5b56eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e5b56e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e5b56d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ik9h2c                        0x00005607807b91bb <unavailable> + 4539

    5    libc.so.6                          0x00002b4e5ba63460 __libc_start_main +
    245

    6    tmp68ik9h2c                        0x00005607807b8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    return abc >\
    \ a * c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpicbvjxw9/tmpicbvjxw9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae105a17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae10570eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae10570e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae10570d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicbvjxw9                        0x0000555ffb7fa2ab <unavailable> + 4779

    5    libc.so.6                          0x00002ae105c03460 __libc_start_main +
    245

    6    tmpicbvjxw9                        0x0000555ffb7f9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    if ab > ac && ab > bc {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpn6nlby72/tmpn6nlby72.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b366cd46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b366ca3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b366ca3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b366ca3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6nlby72                        0x000055ae749002ab <unavailable> + 4779

    5    libc.so.6                          0x00002b366cf32460 __libc_start_main +
    245

    6    tmpn6nlby72                        0x000055ae748fff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpaes26kfg/tmpaes26kfg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3085b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3082aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3082aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3082a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaes26kfg                        0x000055ea4e2d72ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba30879f460 __libc_start_main +
    245

    6    tmpaes26kfg                        0x000055ea4e2d6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b\
    \ + c + a) / 2\n    let c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp48en7n17/tmp48en7n17.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48en7n17                        0x0000561277a0724b <unavailable> + 4683

    5    libc.so.6                          0x00002b23b8851460 __libc_start_main +
    245

    6    tmp48en7n17                        0x0000561277a06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b) / 2\n    let c1 = (a + c) / 2\n    let a2 = (b + c + a) / 2\n    let b2\
    \ = (b + c) / 2\n    let c2 = (b + a) / 2\n    let a3 = (a2 + b2 + c2) / 2\n \
    \   let b3 = (a2 + b2 + a) / 2\n    let c3 = (a2 + c2 + a) / 2\n    let a4 = (a3\
    \ + b3 + c3) / 2\n    let b4 = (a3 + b3 + a4) / 2\n    let c4 = (a3 + c4 + a3)\
    \ / 2\n    let a5 = (a4 + b5 + c5) / 2\n    let b5 = (a4 + b5 + a5) / 2\n    let\
    \ c5 = (a4 + c5 + a4) / 2\n    let a6 = (a5 + b6 + c6) / 2\n    let b6 = (a5 +\
    \ b6 + a6) / 2\n    let c6 = (a5 + c6 + a5) / 2\n    let a7 = (a6 + b7 + c7) /\
    \ 2\n    let b7 = (a6 + b7 + a7) / 2\n    let c7 = (a6 + c7 + a6) / 2\n    let\
    \ a8 = (a7 + b8 + c8) / 2\n    let b8 = (a7 + b8 + a8) / 2\n    let c8 = (a7 +\
    \ c8 + a7) / 2\n    let a9 = (a8 + b9 + c9) / 2\n    let b9 = (a8 + b9 + a9) /\
    \ 2\n    let c9 = (a8 + c9 + a8) / 2\n    let a10 = (a9 + b10 + c10) / 2\n   \
    \ let b10 = (a9 + b10 + a10) / 2\n    let c10 = (a9 + c10 + a9) / 2\n    let a11\
    \ = (a10 + b11 + c11) / 2\n    let b11 = (a10 + b11 + a11) / 2\n    let c11 =\
    \ (a10 + c11 + a10) / 2\n    let a12 = (a11 + b12 + c12) / 2\n    let b12 = (a11\
    \ + b12 + a12) / 2\n    let c12 = (a11 + c12 + a11) / 2\n    let a13 = (a12 +\
    \ b13 + c13) / 2\n    let b13 = (a12 + b13 + a13) / 2\n    let c13 = (a12 + c13\
    \ + a12) / 2\n    let a14 = (a13 + b14 + c14) / 2\n    let b14 = (a13 + b14 +\
    \ a14) / 2\n    let c14 = (a13 + c14 + a13) / 2\n    let a15 = (a14 + b15 + c15)\
    \ / 2\n    let b15 = (a14 + b15 + a15) / 2\n    let c15 = (a14 + c15 + a14) /\
    \ 2\n    let a16 = (a15 + b16 + c16) / 2\n    let b16 = (a15 + b16 + a16) / 2\n\
    \    let c16 = (a15 + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpybn7d2my.swift:60:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpybn7d2my.swift:23:20: error: use of local variable 'c4' before its\
    \ declaration\n    let c4 = (a3 + c4 + a3) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:23:9:\
    \ note: 'c4' declared here\n    let c4 = (a3 + c4 + a3) / 2\n        ^\n/tmp/tmpybn7d2my.swift:24:20:\
    \ error: use of local variable 'b5' before its declaration\n    let a5 = (a4 +\
    \ b5 + c5) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:25:9: note: 'b5'\
    \ declared here\n    let b5 = (a4 + b5 + a5) / 2\n        ^\n/tmp/tmpybn7d2my.swift:24:25:\
    \ error: use of local variable 'c5' before its declaration\n    let a5 = (a4 +\
    \ b5 + c5) / 2\n                        ^\n/tmp/tmpybn7d2my.swift:26:9: note:\
    \ 'c5' declared here\n    let c5 = (a4 + c5 + a4) / 2\n        ^\n/tmp/tmpybn7d2my.swift:25:20:\
    \ error: use of local variable 'b5' before its declaration\n    let b5 = (a4 +\
    \ b5 + a5) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:25:9: note: 'b5'\
    \ declared here\n    let b5 = (a4 + b5 + a5) / 2\n        ^\n/tmp/tmpybn7d2my.swift:26:20:\
    \ error: use of local variable 'c5' before its declaration\n    let c5 = (a4 +\
    \ c5 + a4) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:26:9: note: 'c5'\
    \ declared here\n    let c5 = (a4 + c5 + a4) / 2\n        ^\n/tmp/tmpybn7d2my.swift:27:20:\
    \ error: use of local variable 'b6' before its declaration\n    let a6 = (a5 +\
    \ b6 + c6) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:28:9: note: 'b6'\
    \ declared here\n    let b6 = (a5 + b6 + a6) / 2\n        ^\n/tmp/tmpybn7d2my.swift:27:25:\
    \ error: use of local variable 'c6' before its declaration\n    let a6 = (a5 +\
    \ b6 + c6) / 2\n                        ^\n/tmp/tmpybn7d2my.swift:29:9: note:\
    \ 'c6' declared here\n    let c6 = (a5 + c6 + a5) / 2\n        ^\n/tmp/tmpybn7d2my.swift:28:20:\
    \ error: use of local variable 'b6' before its declaration\n    let b6 = (a5 +\
    \ b6 + a6) / 2\n                   ^\n/tmp/tmpybn7d2my.swift:28:9: note: 'b6'\
    \ declared here\n    let b6 = (a5 + b6 + a6) / 2\n        ^\n/tmp/tmpybn7d2my.swift:29:20:\
    \ error: use of local variable 'c6' before its "
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let ac = a - c\n   \
    \ let bc = b - c\n    let ad = ab + bc\n    let bd = ac + bc\n    let cd = ac\
    \ + ad\n    let abc = ab + ac\n    let bcd = bc + bd\n    let cda = cd + ad\n\
    \    let adb = ad + bd\n    let bdc = bd + cd\n    let cdb = cd + bd\n    let\
    \ abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n\
    \    let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab +\
    \ bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd\
    \ = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n \
    \   let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd +\
    \ cd + ad\n    let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb\
    \ = ac + ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n \
    \   let cdab = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac +\
    \ ad + bd\n    let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab\
    \ = cd + ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n \
    \   let adcb = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd +\
    \ ab + bd\n    let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb\
    \ = ad + cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n \
    \   let abdc = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad +\
    \ cd + bd\n    let bdcd = bd + cd + ad\n    let cdab = cd + ab + bd\n    let abdc\
    \ = ab + bc + cd\n    let acdb = ac + ad + bd\n    let adcb = ad + cd + bd\n \
    \   let bdcd = bd + cd + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpuexeqwj5.swift:68:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpuexeqwj5.swift:29:9: error: invalid redeclaration of 'abdc'\n  \
    \  let abdc = ab + bc + cd\n        ^\n/tmp/tmpuexeqwj5.swift:24:9: note: 'abdc'\
    \ previously declared here\n    let abdc = ab + bc + cd\n        ^\n/tmp/tmpuexeqwj5.swift:30:9:\
    \ error: invalid redeclaration of 'acdb'\n    let acdb = ac + ad + bd\n      \
    \  ^\n/tmp/tmpuexeqwj5.swift:25:9: note: 'acdb' previously declared here\n   \
    \ let acdb = ac + ad + bd\n        ^\n/tmp/tmpuexeqwj5.swift:31:9: error: invalid\
    \ redeclaration of 'adcb'\n    let adcb = ad + cd + bd\n        ^\n/tmp/tmpuexeqwj5.swift:26:9:\
    \ note: 'adcb' previously declared here\n    let adcb = ad + cd + bd\n       \
    \ ^\n/tmp/tmpuexeqwj5.swift:32:9: error: invalid redeclaration of 'bdcd'\n   \
    \ let bdcd = bd + cd + ad\n        ^\n/tmp/tmpuexeqwj5.swift:27:9: note: 'bdcd'\
    \ previously declared here\n    let bdcd = bd + cd + ad\n        ^\n/tmp/tmpuexeqwj5.swift:33:9:\
    \ error: invalid redeclaration of 'cdab'\n    let cdab = cd + ab + bd\n      \
    \  ^\n/tmp/tmpuexeqwj5.swift:28:9: note: 'cdab' previously declared here\n   \
    \ let cdab = cd + ab + bd\n        ^\n/tmp/tmpuexeqwj5.swift:34:9: error: invalid\
    \ redeclaration of 'abdc'\n    let abdc = ab + bc + cd\n        ^\n/tmp/tmpuexeqwj5.swift:24:9:\
    \ note: 'abdc' previously declared here\n    let abdc = ab + bc + cd\n       \
    \ ^\n/tmp/tmpuexeqwj5.swift:35:9: error: invalid redeclaration of 'acdb'\n   \
    \ let acdb = ac + ad + bd\n        ^\n/tmp/tmpuexeqwj5.swift:25:9: note: 'acdb'\
    \ previously declared here\n    let acdb = ac + ad + bd\n        ^\n/tmp/tmpuexeqwj5.swift:36:9:\
    \ error: invalid redeclaration of 'adcb'\n    let adcb = ad + cd + bd\n      \
    \  ^\n/tmp/tmpuexeqwj5.swift:26:9: note: 'adcb' previously declared here\n   \
    \ let adcb = ad + cd + bd\n        ^\n/tmp/tmpuexeqwj5.swift:37:9: error: invalid\
    \ redeclaration of 'bdcd'\n    let bdcd = bd + cd + ad\n        ^\n/tmp/tmpuexeqwj5.swift:27:9:\
    \ note: 'bdcd' previously declared here\n    let bdcd = bd + cd + ad\n       \
    \ ^\n/tmp/tmpuexeqwj5.swift:38:9: error: invalid redeclaration of 'cdab'\n   \
    \ le"
  stdout: ''
  timestamp: 1659979043
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n\
    \    let abca = abc + bc\n    let acab = ac + ab\n    let acbc = ac + bc\n   \
    \ let abcab = abc + ab\n    let abcbc = abc + bc\n    let acbca = ac + bca + ab\n\
    \    let acabc = ac + abc + ab\n    let acbcab = ac + bca + abc + ab\n    let\
    \ acabca = ac + abc + abc + ab\n    let acbcabc = ac + bca + abc + abc + ab\n\
    \    let acabcab = ac + abc + abc + abc + ab\n    let acbcabcd = ac + bca + abc\
    \ + abc + abc + ab\n    let acabcabd = ac + abc + abc + abc + abc + ab\n    let\
    \ acbcabcde = ac + bca + abc + abc + abc + abc + ab\n    let acabcabde = ac +\
    \ abc + abc + abc + abc + abc + ab\n    let acbcabcdef = ac + bca + abc + abc\
    \ + abc + abc + abc + ab\n    let acabcabdef = ac + abc + abc + abc + abc + abc\
    \ + abc + ab\n    let acbcabcdefg = ac + bca + abc + abc + abc + abc + abc + abc\
    \ + ab\n    let acabcabdefg = ac + abc + abc + abc + abc + abc + abc + abc + ab\n\
    \    let acbcabcdefgh = ac + bca + abc + abc + abc + abc + abc + abc + abc + ab\n\
    \    let acabcabdefgh = ac + abc + abc + abc + abc + abc + abc + abc + abc + ab\n\
    \    let acbcabcdefghi = ac + bca + abc + abc + abc + abc + abc + abc + abc +\
    \ abc + ab\n    let acabcabdefghi = ac + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + ab\n    let acbcabcdefghij = ac + bca + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + ab\n    let acabcabdefghij = ac + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + ab\n    let acbcabcdefgh\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1hrf8uoc.swift:42:9: error: type annotation missing in pattern\n\
    \    let acbcabcdefgh\n        ^\n"
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab >= bc) && (ab >= cb)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxk44y739/tmpxk44y739.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33a0dffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33a0af6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33a0af6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33a0af57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk44y739                        0x00005573e0f4732b <unavailable> + 4907

    5    libc.so.6                          0x00002b33a0feb460 __libc_start_main +
    245

    6    tmpxk44y739                        0x00005573e0f46f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    return abc > bcd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpoptokqow/tmpoptokqow.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c29187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c28e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c28e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c28e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoptokqow                        0x000055f281ff132b <unavailable> + 4907

    5    libc.so.6                          0x00002b2c29373460 __libc_start_main +
    245

    6    tmpoptokqow                        0x000055f281ff0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return ab >= ac\
    \ && ab >= bc && ab >= cb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpbbm5x5uo/tmpbbm5x5uo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c0897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c058eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c058e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c058d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbm5x5uo                        0x00005597b7f902ab <unavailable> + 4779

    5    libc.so.6                          0x00002ab8c0a83460 __libc_start_main +
    245

    6    tmpbbm5x5uo                        0x00005597b7f8ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    \n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    let discriminant = b*b - 4*a*c\n    \n    if discriminant <\
    \ 0 {\n        return false\n    }\n    \n    let root = (-b + sqrt(discriminant))\
    \ / (2*a)\n    \n    if root < 0 {\n        return false\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptoijk6oy.swift:26:22: error: cannot find 'sqrt' in scope\n    let\
    \ root = (-b + sqrt(discriminant)) / (2*a)\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp76c8dukv/tmp76c8dukv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af066f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af066f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af066f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76c8dukv                        0x0000557ae8aa532b <unavailable> + 4907

    5    libc.so.6                          0x00002af067475460 __libc_start_main +
    245

    6    tmp76c8dukv                        0x0000557ae8aa4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let bc = b - c\n   \
    \ let ac = a - c\n    return (ab * bc == ac * ab)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpcuz_oj0k/tmpcuz_oj0k.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ab0075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aafd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aafd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aafd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcuz_oj0k                        0x000055b94ffa91bb <unavailable> + 4539

    5    libc.so.6                          0x00002b8ab0261460 __libc_start_main +
    245

    6    tmpcuz_oj0k                        0x000055b94ffa8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if c > b {\n            return false\n        } else {\n            return true\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpk_zvw7f_/tmpk_zvw7f_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d8611fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d85e16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d85e16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d85e157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_zvw7f_                        0x0000561fd5e1e2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b0d8630b460 __libc_start_main +
    245

    6    tmpk_zvw7f_                        0x0000561fd5e1df59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 * b1 * c1 < 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmphh_xi5qp/tmphh_xi5qp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd4c32fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd4c026b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd4c026988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd4c0257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh_xi5qp                        0x000055e137e4f3c5 <unavailable> + 5061

    5    libc.so.6                          0x00002abd4c51b460 __libc_start_main +
    245

    6    tmphh_xi5qp                        0x000055e137e4eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b) / 2\n    let c1 = (a + c) / 2\n    let a2 = (b + c + a) / 2\n    let b2\
    \ = (b + c) / 2\n    let c2 = (b + a) / 2\n    let a3 = (a2 + b2 + c2) / 2\n \
    \   let b3 = (a2 + b2) / 2\n    let c3 = (a2 + c2 + a) / 2\n    let a4 = (b2 +\
    \ c2 + b) / 2\n    let b4 = (b2 + c) / 2\n    let c4 = (b + a) / 2\n    let a5\
    \ = (a3 + b3 + c3) / 2\n    let b5 = (a3 + b3) / 2\n    let c5 = (a3 + c3 + a)\
    \ / 2\n    let a6 = (b3 + c3 + b) / 2\n    let b6 = (b3 + c) / 2\n    let c6 =\
    \ (b + a) / 2\n    let a7 = (a4 + b5 + c6) / 2\n    let b7 = (a4 + b5) / 2\n \
    \   let c7 = (a4 + c6 + a) / 2\n    let a8 = (b5 + c6 + b5) / 2\n    let b8 =\
    \ (b5 + c6) / 2\n    let c8 = (b5 + a) / 2\n    let a9 = (a6 + b7 + c8) / 2\n\
    \    let b9 = (a6 + b7) / 2\n    let c9 = (a6 + c8 + a) / 2\n    let a10 = (b7\
    \ + c8 + b7) / 2\n    let b10 = (b7 + c8) / 2\n    let c10 = (b7 + a) / 2\n  \
    \  let a11 = (a8 + b9 + c10) / 2\n    let b11 = (a8 + b9) / 2\n    let c11 = (a8\
    \ + c10 + a) / 2\n    let a12 = (b9 + c10 + b9) / 2\n    let b12 = (b9 + c10)\
    \ / 2\n    let c12 = (b9 + a) / 2\n    let a13 = (a10 + b11 + c12) / 2\n    let\
    \ b13 = (a10 + b11) / 2\n    let c13 = (a10 + c12 + a) / 2\n    let a14 = (b11\
    \ + c12 + b11) / 2\n    let b14 = (b11 + c12) / 2\n    let c14 = (b11 + a) / 2\n\
    \    let a15 = (a12 + b13 + c14) / 2\n    let b15 = (a12 + b13) / 2\n    let c15\
    \ = (a12 + c14 + a) / 2\n    let a16 = (b13 + c14 + b13) / 2\n    let b16 = (b13\
    \ + c14) / 2\n    let c16 = (b13 + a) / 2\n    let a17 = (a14 + b15 + c16) / 2\n\
    \    let b17 = (a14 + b15) / 2\n    let c17 = (a14 + c16 + a) / 2\n    let a18\
    \ = (b15 + c16 + b15) / 2\n    let b18 = (b15 + c16\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpas_ctn4o.swift:65:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpas_ctn4o.swift:64:15: note: to match this opening '('\n    let b18\
    \ = (b15 + c16\n              ^\n/tmp/tmpas_ctn4o.swift:12:9: warning: initialization\
    \ of immutable value 'a1' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a1 = (a + b + c) / 2\n    ~~~~^~\n    _\n/tmp/tmpas_ctn4o.swift:13:9:\
    \ warning: initialization of immutable value 'b1' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let b1 = (a + b) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmpas_ctn4o.swift:14:9: warning: initialization of immutable value\
    \ 'c1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let c1 = (a + c) / 2\n    ~~~~^~\n    _\n/tmp/tmpas_ctn4o.swift:22:9: warning:\
    \ initialization of immutable value 'b4' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let b4 = (b2 + c) / 2\n    ~~~~^~\n  \
    \  _\n/tmp/tmpas_ctn4o.swift:23:9: warning: initialization of immutable value\
    \ 'c4' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let c4 = (b + a) / 2\n    ~~~~^~\n    _\n/tmp/tmpas_ctn4o.swift:24:9: warning:\
    \ initialization of immutable value 'a5' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let a5 = (a3 + b3 + c3) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmpas_ctn4o.swift:26:9: warning: initialization of immutable value\
    \ 'c5' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let c5 = (a3 + c3 + a) / 2\n    ~~~~^~\n    _\n/tmp/tmpas_ctn4o.swift:28:9:\
    \ warning: initialization of immutable value 'b6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let b6 = (b3 + c) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmpas_ctn4o.swift:30:9: warning: initialization of immutable value\
    \ 'a7' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let a7 = (a4 + b5 + c6) / 2\n    ~~~~^~\n    _\n/tmp/tmpas_ctn4o.swift:32:9:\
    \ warning: initialization of immutable value 'c7' was never used; consider replacing\
    \ with as"
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c\
    \ - b)\n    let ac = abs(c - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzn9imhkn/tmpzn9imhkn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff648ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff6185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff6185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff61847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn9imhkn                        0x0000557597b702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ff667a460 __libc_start_main +
    245

    6    tmpzn9imhkn                        0x0000557597b6ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a\
    \ - c)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    return abc >\
    \ a * a + b * b + c * c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp7d_buqh1/tmp7d_buqh1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1535016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1534d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1534d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1534d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_buqh1                        0x0000560fa75352ab <unavailable> + 4779

    5    libc.so.6                          0x00002b1535202460 __libc_start_main +
    245

    6    tmp7d_buqh1                        0x0000560fa7534f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n \
    \   let c1 = abs(c)\n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n\
    \    if a1 == c1 {\n        return false\n    }\n    if b1 == c1 {\n        return\
    \ false\n    }\n    if a1 == b1 {\n        return false\n    }\n    if b1 == a\
    \ {\n        return false\n    }\n    if c1 == a {\n        return false\n   \
    \ }\n    if c1 == b {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_p_wzti8/tmp_p_wzti8.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae921af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9217f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9217f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9217ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_p_wzti8                        0x00005591b1bb332b <unavailable> + 4907

    5    libc.so.6                          0x00002ae921ce5460 __libc_start_main +
    245

    6    tmp_p_wzti8                        0x00005591b1bb2f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a\
    \ + b - c) / 2\n    let c1 = (a - b - c) / 2\n    return a1 == b1 && b1 == c1\
    \ && c1 == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpkh1n9lsy/tmpkh1n9lsy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0fa88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0fa586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0fa586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0fa5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkh1n9lsy                        0x000056276df1424b <unavailable> + 4683

    5    libc.so.6                          0x00002ae0faa7b460 __libc_start_main +
    245

    6    tmpkh1n9lsy                        0x000056276df13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979043
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n   \
    \ let c = abs(c)\n    let s = (a+b+c)/2\n    let t = (a+b+c)/2\n    let u = (a+b+c)/2\n\
    \    let v = (b+c)/2\n    return s == t && s == u && s == v\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpuxwjl6yc/tmpuxwjl6yc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad533e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad530dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad530db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad530da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxwjl6yc                        0x0000558dc271033b <unavailable> + 4923

    5    libc.so.6                          0x00002aad535d0460 __libc_start_main +
    245

    6    tmpuxwjl6yc                        0x0000558dc270ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab == bc\
    \ && ac == cb) || (ab == cb && ac == ab)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpnmh84m8e/tmpnmh84m8e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af59c584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af59c27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af59c27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af59c27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmh84m8e                        0x0000564686d4d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002af59c770460 __libc_start_main +
    245

    6    tmpnmh84m8e                        0x0000564686d4cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    let abc = ab + bc + cb\n    return abc <=\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp31ptaxg9/tmp31ptaxg9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b652295cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6522653b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6522653988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65226527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31ptaxg9                        0x00005633625f92ab <unavailable> + 4779

    5    libc.so.6                          0x00002b6522b48460 __libc_start_main +
    245

    6    tmp31ptaxg9                        0x00005633625f8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n   \
    \ let bc = abs(b - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n    let\
    \ cd = abs(c - d)\n    let abc = ab + ac\n    let bcd = bc + bd\n    let cda =\
    \ cd + ad\n    let abd = 0\n    let cdb = 0\n    let adc = 0\n    let bdc = 0\n\
    \    let cdc = 0\n    if abc > bcd && abc > cda && abc > abd && abc > cdb && abc\
    \ > cdc {\n        return true\n    }\n    if bcd > abc && bcd > cda && bcd >\
    \ abd && bcd > cdb && bcd > cdc {\n        return true\n    }\n    if cda > abc\
    \ && cda > bcd && cda > abd && cda > cdb && cda > cdc {\n        return true\n\
    \    }\n    if abd > abc && abd > bcd && abd > cda && abd > cdb && abd > cdc {\n\
    \        return true\n    }\n    if cdb > abc && cdb > bcd && cdb > abd && cdb\
    \ > cda && cdb > cdc {\n        return true\n    }\n    if cd > abc && cd > bcd\
    \ && cd > abd && cd > cda && cd > cdb && cd > cdc {\n        return true\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpvfiytm0u.swift:18:22: error: cannot find 'd' in scope\n    let\
    \ ad = abs(a - d)\n                     ^\n/tmp/tmpvfiytm0u.swift:19:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmpvfiytm0u.swift:20:22: error: cannot find 'd' in scope\n    let cd = abs(c\
    \ - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = a - b\n    let bc = b - c\n   \
    \ let cb = c - b\n    let abc = ab * cb\n    let acb = ac * cb\n    let bcb =\
    \ bc * cb\n    let abbc = ab * bc\n    let acbc = ac * bc\n    let bcbc = bc *\
    \ bc\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc *\
    \ bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * bcd\n    let acbcd = ac * bcd\n    let bcbcd = bc\
    \ * bcd\n    let abbcd = ab * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpwmrv0r92.swift:16:15: error: cannot find 'ac' in scope\n    let\
    \ acb = ac * cb\n              ^~\n/tmp/tmpwmrv0r92.swift:19:16: error: cannot\
    \ find 'ac' in scope\n    let acbc = ac * bc\n               ^~\n/tmp/tmpwmrv0r92.swift:21:22:\
    \ error: cannot find 'bcd' in scope\n    let abbcd = ab * bcd\n              \
    \       ^~~\n/tmp/tmpwmrv0r92.swift:22:17: error: cannot find 'ac' in scope\n\
    \    let acbcd = ac * bcd\n                ^~\n/tmp/tmpwmrv0r92.swift:22:22: error:\
    \ cannot find 'bcd' in scope\n    let acbcd = ac * bcd\n                     ^~~\n\
    /tmp/tmpwmrv0r92.swift:23:22: error: cannot find 'bcd' in scope\n    let bcbcd\
    \ = bc * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:24:22: error: cannot\
    \ find 'bcd' in scope\n    let abbcd = ab * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:25:17:\
    \ error: cannot find 'ac' in scope\n    let acbcd = ac * bcd\n               \
    \ ^~\n/tmp/tmpwmrv0r92.swift:25:22: error: cannot find 'bcd' in scope\n    let\
    \ acbcd = ac * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:26:22: error:\
    \ cannot find 'bcd' in scope\n    let bcbcd = bc * bcd\n                     ^~~\n\
    /tmp/tmpwmrv0r92.swift:27:22: error: cannot find 'bcd' in scope\n    let abbcd\
    \ = ab * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:28:17: error: cannot\
    \ find 'ac' in scope\n    let acbcd = ac * bcd\n                ^~\n/tmp/tmpwmrv0r92.swift:28:22:\
    \ error: cannot find 'bcd' in scope\n    let acbcd = ac * bcd\n              \
    \       ^~~\n/tmp/tmpwmrv0r92.swift:29:22: error: cannot find 'bcd' in scope\n\
    \    let bcbcd = bc * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:30:22:\
    \ error: cannot find 'bcd' in scope\n    let abbcd = ab * bcd\n              \
    \       ^~~\n/tmp/tmpwmrv0r92.swift:31:17: error: cannot find 'ac' in scope\n\
    \    let acbcd = ac * bcd\n                ^~\n/tmp/tmpwmrv0r92.swift:31:22: error:\
    \ cannot find 'bcd' in scope\n    let acbcd = ac * bcd\n                     ^~~\n\
    /tmp/tmpwmrv0r92.swift:32:22: error: cannot find 'bcd' in scope\n    let bcbcd\
    \ = bc * bcd\n                     ^~~\n/tmp/tmpwmrv0r92.swift:33:22: error: cannot\
    \ fi"
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpaes26kfg/tmpaes26kfg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3085b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3082aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3082aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3082a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaes26kfg                        0x000055ea4e2d72ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba30879f460 __libc_start_main +
    245

    6    tmpaes26kfg                        0x000055ea4e2d6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let cb = abs(c - b)\n    return (ab > ac)\
    \ && (ab > bc) && (ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp2b0bh_8_/tmp2b0bh_8_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379bccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379b9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379b9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379b9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2b0bh_8_                        0x000055f0c87812ab <unavailable> + 4779

    5    libc.so.6                          0x00002b379beb6460 __libc_start_main +
    245

    6    tmp2b0bh_8_                        0x000055f0c8780f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a + b > c {\n        return false\n    }\n    if\
    \ a + c > b {\n        return false\n    }\n    if b + c > a {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpxnqezy9j/tmpxnqezy9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8417adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8414a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8414a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8414a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqezy9j                        0x000055b31b0ff1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ba841999460 __libc_start_main +
    245

    6    tmpxnqezy9j                        0x000055b31b0fee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let bda = bcd + ab\n    let cdab = ac + ab\n    let\
    \ cdbb = bc + ab\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda\
    \ = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd\
    \ = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab\
    \ = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc\
    \ = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb\
    \ = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda\
    \ = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd\
    \ = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab\
    \ = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc\
    \ = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb\
    \ = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda\
    \ = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd\
    \ = bc + bcd\n    let abdc = ab + cdbd\n    let bda = bcd + abdc\n    let cdab\
    \ = ac + abdc\n    let cdbb = bc + abdc\n    let cdbd = bc + bcd\n    let abdc\
    \ = ab + cdbd\n    let bda = bcd + abdc\n    let cdab = ac + abdc\n    let cdbb\
    \ = bc + abdc\n    let cdbd = bc + bcd\n    let abdc = ab + cdbd\n    let bda\
    \ = bcd + abdc\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp8n8dvyet.swift:69:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp8n8dvyet.swift:22:9: error: invalid redeclaration of 'abdc'\n   \
    \ let abdc = ab + cdbd\n        ^\n/tmp/tmp8n8dvyet.swift:17:9: note: 'abdc' previously\
    \ declared here\n    let abdc = ab + bc\n        ^\n/tmp/tmp8n8dvyet.swift:26:9:\
    \ error: invalid redeclaration of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previously declared here\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:31:9: error: invalid redeclaration\
    \ of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9:\
    \ note: 'cdbd' previously declared here\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:36:9: error: invalid redeclaration of 'cdbd'\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previously\
    \ declared here\n    let cdbd = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:41:9:\
    \ error: invalid redeclaration of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previously declared here\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:46:9: error: invalid redeclaration\
    \ of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9:\
    \ note: 'cdbd' previously declared here\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:51:9: error: invalid redeclaration of 'cdbd'\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previously\
    \ declared here\n    let cdbd = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:56:9:\
    \ error: invalid redeclaration of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previously declared here\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:61:9: error: invalid redeclaration\
    \ of 'cdbd'\n    let cdbd = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9:\
    \ note: 'cdbd' previously declared here\n    let cdbd = bc + bcd\n        ^\n\
    /tmp/tmp8n8dvyet.swift:66:9: error: invalid redeclaration of 'cdbd'\n    let cdbd\
    \ = bc + bcd\n        ^\n/tmp/tmp8n8dvyet.swift:21:9: note: 'cdbd' previo"
  stdout: ''
  timestamp: 1659979044
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n\
    \    let abdc = ab + bc\n    let acbc = ac + bc\n    let abdab = ab + ab\n   \
    \ let acbca = ac + ac\n    let bcdaa = bc + da\n    let abdac = ab + ac\n    let\
    \ acdbb = ac + bc\n    let abdabc = ab + abc\n    let acbcab = ac + cab\n    let\
    \ bcdaab = bc + daa\n    let abdacb = ab + acb\n    let acdbcb = ac + bcb\n  \
    \  let abdabcb = ab + abcd\n    let acbcabc = ac + cabc\n    let bcdaabb = bc\
    \ + daab\n    let abdacbc = ab + acbc\n    let acdbcbc = ac + bcbc\n    let abdabcbb\
    \ = ab + abcdab\n    let acbcabcb = ac + cabcb\n    let bcdaabbb = bc + daabb\n\
    \    let abdacbcbc = ab + acbcbc\n    let acdbcbcb = ac + bcbcb\n    let abdabcbbc\
    \ = ab + abcdabc\n    let acbcabcbc = ac + cabcbc\n    let bcdaabbbc = bc + daabbb\n\
    \    let abdacbcbcb = ab + acbcbcb\n    let acdbcbcbc = ac + bcbcbc\n    let abdabcbbcb\
    \ = ab + abcdabcb\n    let acbcabcbcb = ac + cabcbcb\n    let bcdaabbbcb = bc\
    \ + daabbbc\n    let abdacbcbcbc = ab + acbcbcbc\n    let acdbcbcbcb = ac + bcbcbcb\n\
    \    let abdabcbbcbc = ab + abcdabcbb\n    let acbcabcbcbc = ac + cabcbcbc\n \
    \   let bcdaabbbcbc = bc + daabbbcb\n    let abdacbcbcbcb = ab + acbcbcbcb\n \
    \   let acdbcbcbcbc = ac + bcbcbcbc\n    let abdabcbbcbcb = ab + abcdabcbbc\n\
    \    let acbcabcbcbcb = ac + cabcbcbcb\n    let bcdaabbbcbcb = bc + daabbbcbc\n\
    \    let abdacbcbcb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpmqp6jd3g.swift:21:22: error: cannot find 'da' in scope\n    let\
    \ bcdaa = bc + da\n                     ^~\n/tmp/tmpmqp6jd3g.swift:25:23: error:\
    \ cannot find 'cab' in scope\n    let acbcab = ac + cab\n                    \
    \  ^~~\n/tmp/tmpmqp6jd3g.swift:26:23: error: cannot find 'daa' in scope\n    let\
    \ bcdaab = bc + daa\n                      ^~~\n/tmp/tmpmqp6jd3g.swift:27:23:\
    \ error: cannot find 'acb' in scope\n    let abdacb = ab + acb\n             \
    \         ^~~\n/tmp/tmpmqp6jd3g.swift:28:23: error: cannot find 'bcb' in scope\n\
    \    let acdbcb = ac + bcb\n                      ^~~\n/tmp/tmpmqp6jd3g.swift:29:24:\
    \ error: cannot find 'abcd' in scope\n    let abdabcb = ab + abcd\n          \
    \             ^~~~\n/tmp/tmpmqp6jd3g.swift:30:24: error: cannot find 'cabc' in\
    \ scope\n    let acbcabc = ac + cabc\n                       ^~~~\n/tmp/tmpmqp6jd3g.swift:31:24:\
    \ error: cannot find 'daab' in scope\n    let bcdaabb = bc + daab\n          \
    \             ^~~~\n/tmp/tmpmqp6jd3g.swift:33:24: error: cannot find 'bcbc' in\
    \ scope\n    let acdbcbc = ac + bcbc\n                       ^~~~\n/tmp/tmpmqp6jd3g.swift:34:25:\
    \ error: cannot find 'abcdab' in scope\n    let abdabcbb = ab + abcdab\n     \
    \                   ^~~~~~\n/tmp/tmpmqp6jd3g.swift:35:25: error: cannot find 'cabcb'\
    \ in scope\n    let acbcabcb = ac + cabcb\n                        ^~~~~\n/tmp/tmpmqp6jd3g.swift:36:25:\
    \ error: cannot find 'daabb' in scope\n    let bcdaabbb = bc + daabb\n       \
    \                 ^~~~~\n/tmp/tmpmqp6jd3g.swift:37:26: error: cannot find 'acbcbc'\
    \ in scope\n    let abdacbcbc = ab + acbcbc\n                         ^~~~~~\n\
    /tmp/tmpmqp6jd3g.swift:38:25: error: cannot find 'bcbcb' in scope\n    let acdbcbcb\
    \ = ac + bcbcb\n                        ^~~~~\n/tmp/tmpmqp6jd3g.swift:39:26: error:\
    \ cannot find 'abcdabc' in scope\n    let abdabcbbc = ab + abcdabc\n         \
    \                ^~~~~~~\n/tmp/tmpmqp6jd3g.swift:40:26: error: cannot find 'cabcbc'\
    \ in scope\n    let acbcabcbc = ac + cabcbc\n                         ^~~~~~\n\
    /tmp/tmpmqp6jd3g.swift:41:26: error: cannot find 'daabbb' in scope\n    let bcdaabbbc\
    \ ="
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpeow0759f/tmpeow0759f.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae25da5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae25d754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae25d754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae25d7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeow0759f                        0x000055ac0f2251bb <unavailable> + 4539

    5    libc.so.6                          0x00002ae25dc49460 __libc_start_main +
    245

    6    tmpeow0759f                        0x000055ac0f224e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n   \
    \ let bc = abs(b - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n    let\
    \ cd = abs(c - d)\n    let abc = ab + ac\n    let bca = bc + ad\n    let acb =\
    \ ac + bc\n    let abcd = abc + bcd\n    let abbc = ab + bc\n    let acbd = ac\
    \ + bd\n    let abcdb = abc + bcd\n    let abcbd = abc + bcd\n    let abcab =\
    \ abc + cab\n    let abcbc = abc + cbc\n    let abcabd = abc + cabd\n    let abcabcd\
    \ = abc + cabcd\n    let abcabcdb = abc + cabcdb\n    let abcabcdbd = abc + cabcdbd\n\
    \    let abcabcdbcd = abc + cabcdbcd\n    let abcabcdbcdb = abc + cabcdbcdb\n\
    \    let abcabcdbcdbd = abc + cabcdbcdbd\n    let abcabcdbcdbcd = abc + cabcdbcdbcd\n\
    \    let abcabcdbcdbcdb = abc + cabcdbcdbcdb\n    let abcabcdbcdbcdbd = abc +\
    \ cabcdbcdbcdbd\n    let abcabcdbcdbcdbcd = abc + cabcdbcdbcdbcd\n    let abcabcdbcdbcdbcdb\
    \ = abc + cabcdbcdbcdbcdb\n    let abcabcdbcdbcdbcdbd = abc + cabcdbcdbcdbcdbd\n\
    \    let abcabcdbcdbcdbcdbcd = abc + cabcdbcdbcdbcdbcd\n    let abcabcdbcdbcdbcdbcdb\
    \ = abc + cabcdbcdbcdbcdbcdb\n    let abcabcdbcdbcdbcdbcdbd = abc + cabcdbcdbcdbcdbcdbd\n\
    \    let abcabcdbcdbcdbcdbcdbcd = abc + cabcdbcdbcdbcdbcdbcd\n    let abcabcdbcdbcdbcdbcdbcdb\
    \ = abc + cabcdbcdbcdbcdbcdbcdb\n    let abcabcdbcdbcdbcdbcdbc\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpweya4enu.swift:18:22: error: cannot find 'd' in scope\n    let\
    \ ad = abs(a - d)\n                     ^\n/tmp/tmpweya4enu.swift:19:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmpweya4enu.swift:20:22: error: cannot find 'd' in scope\n    let cd = abs(c\
    \ - d)\n                     ^\n/tmp/tmpweya4enu.swift:24:22: error: cannot find\
    \ 'bcd' in scope\n    let abcd = abc + bcd\n                     ^~~\n/tmp/tmpweya4enu.swift:27:23:\
    \ error: cannot find 'bcd' in scope\n    let abcdb = abc + bcd\n             \
    \         ^~~\n/tmp/tmpweya4enu.swift:28:23: error: cannot find 'bcd' in scope\n\
    \    let abcbd = abc + bcd\n                      ^~~\n/tmp/tmpweya4enu.swift:29:23:\
    \ error: cannot find 'cab' in scope\n    let abcab = abc + cab\n             \
    \         ^~~\n/tmp/tmpweya4enu.swift:30:23: error: cannot find 'cbc' in scope\n\
    \    let abcbc = abc + cbc\n                      ^~~\n/tmp/tmpweya4enu.swift:31:24:\
    \ error: cannot find 'cabd' in scope\n    let abcabd = abc + cabd\n          \
    \             ^~~~\n/tmp/tmpweya4enu.swift:32:25: error: cannot find 'cabcd' in\
    \ scope\n    let abcabcd = abc + cabcd\n                        ^~~~~\n/tmp/tmpweya4enu.swift:33:26:\
    \ error: cannot find 'cabcdb' in scope\n    let abcabcdb = abc + cabcdb\n    \
    \                     ^~~~~~\n/tmp/tmpweya4enu.swift:34:27: error: cannot find\
    \ 'cabcdbd' in scope\n    let abcabcdbd = abc + cabcdbd\n                    \
    \      ^~~~~~~\n/tmp/tmpweya4enu.swift:35:28: error: cannot find 'cabcdbcd' in\
    \ scope\n    let abcabcdbcd = abc + cabcdbcd\n                           ^~~~~~~~\n\
    /tmp/tmpweya4enu.swift:36:29: error: cannot find 'cabcdbcdb' in scope\n    let\
    \ abcabcdbcdb = abc + cabcdbcdb\n                            ^~~~~~~~~\n/tmp/tmpweya4enu.swift:37:30:\
    \ error: cannot find 'cabcdbcdbd' in scope\n    let abcabcdbcdbd = abc + cabcdbcdbd\n\
    \                             ^~~~~~~~~~\n/tmp/tmpweya4enu.swift:38:31: error:\
    \ cannot find 'cabcdbcdbcd' in scope\n    let abcabcdbcdbcd = abc + cabcdbcdbcd\n\
    \                              ^~~~~~~~~~~\n/tmp/tmpweya4enu.swift:39:32: error"
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    return ((a + b > c) && (a + c > b) && (b\
    \ + c > a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp294rwf5g/tmp294rwf5g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af298d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af298a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af298a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af298a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp294rwf5g                        0x000056229cea4335 <unavailable> + 4917

    5    libc.so.6                          0x00002af298f65460 __libc_start_main +
    245

    6    tmp294rwf5g                        0x000056229cea3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac\n    let bca = bc + ab\n\
    \    let abcb = abc + bca\n    let abcc = abc + abcb // abcc = ab + abc + ab +\
    \ abc + ab\n    let abccc = abc + abcc\n    let abcccb = abccc + abcc\n    let\
    \ abcccba = abccc + abcccb\n    let abcccbac = abccca + abcccb // abcccba = ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab\n    let abcccbacb = abcccbac +\
    \ abcccb // abcccbacb = ab + abc + ab + abc + ab + abc + ab + abc + ab + abc +\
    \ ab + abc + ab + abc + ab\n    let abcccbacba = abcccbacc + abcccb // abcccbacba\
    \ = ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab\n    let abcccbacbacb = abcccbacbac +\
    \ abcccb // abcccbacbacb = ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab\n    let abcccbacbacba = abcccbacbacc + abcccb // abcccbacbacba = ab +\
    \ abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab +\
    \ abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\n\
    \    let abcccbacbacbacb = abcccbacbacbac + abcccb // abcccbacbacbacb = ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab + abc + ab\n    let abcc\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqaxgl190.swift:22:20: error: cannot find 'abccca' in scope\n  \
    \  let abcccbac = abccca + abcccb // abcccba = ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab\n                   ^~~~~~\n/tmp/tmpqaxgl190.swift:24:22: error:\
    \ cannot find 'abcccbacc' in scope\n    let abcccbacba = abcccbacc + abcccb //\
    \ abcccbacba = ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc\
    \ + ab + abc + ab + abc + ab + abc + ab + abc + ab\n                     ^~~~~~~~~\n\
    /tmp/tmpqaxgl190.swift:25:24: error: cannot find 'abcccbacbac' in scope\n    let\
    \ abcccbacbacb = abcccbacbac + abcccb // abcccbacbacb = ab + abc + ab + abc +\
    \ ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc +\
    \ ab + abc + ab + abc + ab + abc + ab\n                       ^~~~~~~~~~~\n/tmp/tmpqaxgl190.swift:26:25:\
    \ error: cannot find 'abcccbacbacc' in scope\n    let abcccbacbacba = abcccbacbacc\
    \ + abcccb // abcccbacbacba = ab + abc + ab + abc + ab + abc + ab + abc + ab +\
    \ abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab +\
    \ abc + ab + abc + ab + abc + ab\n                        ^~~~~~~~~~~~\n/tmp/tmpqaxgl190.swift:27:27:\
    \ error: cannot find 'abcccbacbacbac' in scope\n    let abcccbacbacbacb = abcccbacbacbac\
    \ + abcccb // abcccbacbacbacb = ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\
    \ + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab + abc + ab\n        \
    \                  ^~~~~~~~~~~~~~\n/tmp/tmpqaxgl190.swift:28:9: error: type annotation\
    \ missing in pattern\n    let abcc\n        ^\n"
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c\
    \ - a)\n    let bc = abs(b - c)\n    let abc = ab + ac + bc\n    if abc > 0 {\n\
    \        return abc >= bc && abc >= ac\n    } else {\n        return abc < bc\
    \ && abc < ac\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpvw799c5q/tmpvw799c5q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b728a5a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b728a2a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b728a2a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b728a29f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvw799c5q                        0x0000561ae447b32b <unavailable> + 4907

    5    libc.so.6                          0x00002b728a795460 __libc_start_main +
    245

    6    tmpvw799c5q                        0x0000561ae447af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979044
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n\
    /// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
    \ Int, b: Int, c: Int) -> Bool {\n    let a1 = b - a\n    let a2 = c - a\n   \
    \ let b1 = c - b\n    let b2 = a - b\n    let c1 = a - c\n    let c2 = b - a\n\
    \    let det = a1 * b2 - a2 * b1\n    if det == 0 {\n        return false\n  \
    \  }\n    let s = b1 * c2 - b2 * c1\n    if s == 0 {\n        return false\n \
    \   }\n    let t = c1 * a2 - a1 * a2\n    if t == 0 {\n        return false\n\
    \    }\n    let u = det / s\n    return u >= 0 && u <= 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpg5p1tajt/tmpg5p1tajt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0adb6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0ad864b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0ad864988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0ad8637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5p1tajt                        0x000055c2c0ec724b <unavailable> + 4683

    5    libc.so.6                          0x00002ae0add59460 __libc_start_main +
    245

    6    tmpg5p1tajt                        0x000055c2c0ec6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979044
