language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp54bgj75g/tmp54bgj75g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40dac94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40da98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40da98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40da98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54bgj75g                        0x0000563da32f3337 <unavailable> + 4919

    5    libc.so.6                          0x00002b40dae80460 __libc_start_main +
    245

    6    tmp54bgj75g                        0x0000563da32f2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_bl_bvnq.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmp_bl_bvnq.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n \
    \       return 2\n    }\n    if n == 3 {\n        return 6\n    }\n    if n ==\
    \ 4 {\n        return 24\n    }\n    if n == 5 {\n        return 120\n    }\n\
    \    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n        return 5040\n\
    \    }\n    if n == 8 {\n        return 40320\n    }\n    if n == 9 {\n      \
    \  return 362880\n    }\n    if n == 10 {\n        return 3628800\n    }\n   \
    \ if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n        return\
    \ 479001600\n    }\n    if n == 13 {\n        return 6227020800\n    }\n    if\
    \ n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n        return\
    \ 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n    }\n\
    \    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18 {\n \
    \       return 6402373705728000\n    }\n    if n == 19 {\n        return 121645100408832000\n\
    \    }\n    if n == 20 {\n        return 2432902008176640000\n    }\n    if n\
    \ == 21 {\n        return 51090942171709440000\n    }\n    if n == 22 {\n    \
    \    return 1124000727777607680000\n    }\n    if n == 23 {\n        return 25852016738884976640000\n\
    \    }\n    if n == 24 {\n        return 620448401733239439360000\n    }\n   \
    \ if n == 25 {\n        return 12164510040883230729160000\n    }\n    if n ==\
    \ 26 {\n        return 24329020081766400000000\n    }\n    if n == 27 {\n    \
    \    return 510909421717094400000000\n    }\n    if n == 28 {\n        return\
    \ 11240007277776076800000000\n    }\n    if n == 29 {\n        return 258520167388849766400000000\n\
    \    }\n    if n == 30 {\n        return 6204484017332394393600000000\n    }\n\
    \    if n == 31 {\n        return 121645100408832307291600000000\n    }\n    if\
    \ n == 32 {\n        return 243290200817664000000000\n    }\n    if n == 33 {\n\
    \        return 5109094217170944000000000\n    }\n    if n == 34 {\n        return\
    \ 112400072777760768000000000\n    }\n    if n == 35 {\n        return 258520167388\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp43miy4_s.swift:133:37: error: expected '}' at end of brace statement\n\
    assert(special_factorial(n: 1) == 1)\n                                    ^\n\
    /tmp/tmp43miy4_s.swift:10:39: note: to match this opening '{'\nfunc special_factorial(n:\
    \ Int) -> Int {\n                                      ^\n/tmp/tmp43miy4_s.swift:118:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp54bgj75g/tmp54bgj75g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40dac94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40da98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40da98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40da98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54bgj75g                        0x0000563da32f3337 <unavailable> + 4919

    5    libc.so.6                          0x00002b40dae80460 __libc_start_main +
    245

    6    tmp54bgj75g                        0x0000563da32f2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1fne7y7z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp54bgj75g/tmp54bgj75g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40dac94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40da98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40da98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40da98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54bgj75g                        0x0000563da32f3337 <unavailable> + 4919

    5    libc.so.6                          0x00002b40dae80460 __libc_start_main +
    245

    6    tmp54bgj75g                        0x0000563da32f2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    var factorial =\
    \ 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp9ga84l54/tmp9ga84l54.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75106fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab750d66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab750d66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab750d657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ga84l54                        0x0000561cc0f49337 <unavailable> + 4919

    5    libc.so.6                          0x00002ab75125b460 __libc_start_main +
    245

    6    tmp9ga84l54                        0x0000561cc0f48fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcc9mgxkx.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1fne7y7z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_1cbas5.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    var result = 1\n\
    \    for _ in 0..<n {\n        result *= n\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp_i8_zhpq/tmp_i8_zhpq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e42f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e42c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e42c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e42c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_i8_zhpq                        0x0000562b6d85a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8e4314e460 __libc_start_main +
    245

    6    tmp_i8_zhpq                        0x0000562b6d859fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcc9mgxkx.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp54bgj75g/tmp54bgj75g.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40dac94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40da98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40da98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40da98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54bgj75g                        0x0000563da32f3337 <unavailable> + 4919

    5    libc.so.6                          0x00002b40dae80460 __libc_start_main +
    245

    6    tmp54bgj75g                        0x0000563da32f2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mxkm19q.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp3mxkm19q.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcc9mgxkx.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcc9mgxkx.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_f_98o_t/tmp_f_98o_t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f381c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f37ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f37ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f37ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_f_98o_t                        0x000056055f11c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5f383b2460 __libc_start_main +
    245

    6    tmp_f_98o_t                        0x000056055f11bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979312
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpq7tdyuud/tmpq7tdyuud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed07c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed04beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed04be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed04bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7tdyuud                        0x0000561d2b853337 <unavailable> + 4919

    5    libc.so.6                          0x00002b8ed09b3460 __libc_start_main +
    245

    6    tmpq7tdyuud                        0x0000561d2b852fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp64f6ha07/tmp64f6ha07.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d52916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d5260db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d5260d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d5260c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64f6ha07                        0x000055d12adc4337 <unavailable> + 4919

    5    libc.so.6                          0x00002b3d52b02460 __libc_start_main +
    245

    6    tmp64f6ha07                        0x000055d12adc3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824675
