language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkj791ll0/tmpkj791ll0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56f9653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56f934ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56f934a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56f93497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj791ll0                        0x000055626808f552 <unavailable> + 5458

    5    libc.so.6                          0x00002b56f983f460 __libc_start_main +
    245

    6    tmpkj791ll0                        0x000055626808f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7hn99y9a/tmp7hn99y9a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bf3d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bf3a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bf3a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bf3a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hn99y9a                        0x00005604bf0d9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1bf3f80460 __libc_start_main +
    245

    6    tmp7hn99y9a                        0x00005604bf0d91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var maxValue = arr[0]\n    for index\
    \ in 1..<arr.count {\n        if arr[index] > maxValue {\n            maxValue\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp17tx62jt/tmp17tx62jt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae019d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae019a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae019a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae019a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17tx62jt                        0x000055ee27f82552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae019f67460 __libc_start_main +
    245

    6    tmp17tx62jt                        0x000055ee27f821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for index in 0..<arr.count {\n \
    \       if arr[index] > arr[index-1] {\n            maxIndex = index\n       \
    \ }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b00305d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00302c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00302c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00302c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00302c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b00300c7e83 <unavailable> + 188035

    6    tmpurb4n7s_                        0x000055de084a6a4a <unavailable> + 6730

    7    tmpurb4n7s_                        0x000055de084a64d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b00307bd460 __libc_start_main +
    245

    9    tmpurb4n7s_                        0x000055de084a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] > max {\n            max = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpop25tenp/tmpop25tenp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdde4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdde1f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdde1f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdde1ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpop25tenp                        0x00005556cd7c9552 <unavailable> + 5458

    5    libc.so.6                          0x00002afdde6e5460 __libc_start_main +
    245

    6    tmpop25tenp                        0x00005556cd7c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count {\n      \
    \  if arr[i] > largest {\n            largest = i\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2w6pbtwv/tmp2w6pbtwv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb45dccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb45ac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb45ac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb45ac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w6pbtwv                        0x000055a15bfd1552 <unavailable> + 5458

    5    libc.so.6                          0x00002aeb45fb8460 __libc_start_main +
    245

    6    tmp2w6pbtwv                        0x000055a15bfd11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = Int()\n    var index = Int()\n    for index\
    \ in 0..<arr.count {\n        if arr[index] > largest {\n            largest =\
    \ arr[index]\n        }\n    }\n    if largest == Int64(min) {\n        return\
    \ -1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp41gw84t0.swift:19:19: error: no exact matches in call to initializer\
    \ \n    if largest == Int64(min) {\n                  ^\n/tmp/tmp41gw84t0.swift:19:19:\
    \ note: found candidate with type '(@escaping (_, _) -> _) -> Int64'\n    if largest\
    \ == Int64(min) {\n                  ^\n/tmp/tmp41gw84t0.swift:19:25: error: generic\
    \ parameter 'T' could not be inferred\n    if largest == Int64(min) {\n      \
    \                  ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for idx in 0..<arr.count {\n        if\
    \ arr[idx] > max {\n            max = idx\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbm3x3a0h/tmpbm3x3a0h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe42768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe4245fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe4245f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe4245e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbm3x3a0h                        0x000055ab346f5552 <unavailable> + 5458

    5    libc.so.6                          0x00002afe42954460 __libc_start_main +
    245

    6    tmpbm3x3a0h                        0x000055ab346f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    for index in 0..<arr.count {\n  \
    \      if arr[index] > arr[index-1] {\n            maxIndex = index\n        }\n\
    \    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c22a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1d99e83 <unavailable> + 188035

    6    tmpta0_zx3f                        0x00005631ec7c8a4a <unavailable> + 6730

    7    tmpta0_zx3f                        0x00005631ec7c84d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b82c248f460 __libc_start_main +
    245

    9    tmpta0_zx3f                        0x00005631ec7c81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824457
